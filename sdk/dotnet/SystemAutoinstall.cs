// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure USB auto installation.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.SystemAutoinstall("trname", new()
    ///     {
    ///         AutoInstallConfig = "enable",
    ///         AutoInstallImage = "enable",
    ///         DefaultConfigFile = "fgt_system.conf",
    ///         DefaultImageFile = "image.out",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// System AutoInstall can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/systemAutoinstall:SystemAutoinstall labelname SystemAutoInstall
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/systemAutoinstall:SystemAutoinstall labelname SystemAutoInstall
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/systemAutoinstall:SystemAutoinstall")]
    public partial class SystemAutoinstall : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable auto install the config in USB disk. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("autoInstallConfig")]
        public Output<string> AutoInstallConfig { get; private set; } = null!;

        /// <summary>
        /// Enable/disable auto install the image in USB disk. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("autoInstallImage")]
        public Output<string> AutoInstallImage { get; private set; } = null!;

        /// <summary>
        /// Default config file name in USB disk.
        /// </summary>
        [Output("defaultConfigFile")]
        public Output<string> DefaultConfigFile { get; private set; } = null!;

        /// <summary>
        /// Default image file name in USB disk.
        /// </summary>
        [Output("defaultImageFile")]
        public Output<string> DefaultImageFile { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a SystemAutoinstall resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SystemAutoinstall(string name, SystemAutoinstallArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/systemAutoinstall:SystemAutoinstall", name, args ?? new SystemAutoinstallArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SystemAutoinstall(string name, Input<string> id, SystemAutoinstallState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/systemAutoinstall:SystemAutoinstall", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SystemAutoinstall resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SystemAutoinstall Get(string name, Input<string> id, SystemAutoinstallState? state = null, CustomResourceOptions? options = null)
        {
            return new SystemAutoinstall(name, id, state, options);
        }
    }

    public sealed class SystemAutoinstallArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable auto install the config in USB disk. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoInstallConfig")]
        public Input<string>? AutoInstallConfig { get; set; }

        /// <summary>
        /// Enable/disable auto install the image in USB disk. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoInstallImage")]
        public Input<string>? AutoInstallImage { get; set; }

        /// <summary>
        /// Default config file name in USB disk.
        /// </summary>
        [Input("defaultConfigFile")]
        public Input<string>? DefaultConfigFile { get; set; }

        /// <summary>
        /// Default image file name in USB disk.
        /// </summary>
        [Input("defaultImageFile")]
        public Input<string>? DefaultImageFile { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SystemAutoinstallArgs()
        {
        }
        public static new SystemAutoinstallArgs Empty => new SystemAutoinstallArgs();
    }

    public sealed class SystemAutoinstallState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable auto install the config in USB disk. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoInstallConfig")]
        public Input<string>? AutoInstallConfig { get; set; }

        /// <summary>
        /// Enable/disable auto install the image in USB disk. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("autoInstallImage")]
        public Input<string>? AutoInstallImage { get; set; }

        /// <summary>
        /// Default config file name in USB disk.
        /// </summary>
        [Input("defaultConfigFile")]
        public Input<string>? DefaultConfigFile { get; set; }

        /// <summary>
        /// Default image file name in USB disk.
        /// </summary>
        [Input("defaultImageFile")]
        public Input<string>? DefaultImageFile { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SystemAutoinstallState()
        {
        }
        public static new SystemAutoinstallState Empty => new SystemAutoinstallState();
    }
}
