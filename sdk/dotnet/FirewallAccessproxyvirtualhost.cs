// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure Access Proxy virtual hosts. Applies to FortiOS Version `&gt;= 7.0.1`.
    /// 
    /// ## Import
    /// 
    /// Firewall AccessProxyVirtualHost can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/firewallAccessproxyvirtualhost:FirewallAccessproxyvirtualhost labelname {{name}}
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/firewallAccessproxyvirtualhost:FirewallAccessproxyvirtualhost labelname {{name}}
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/firewallAccessproxyvirtualhost:FirewallAccessproxyvirtualhost")]
    public partial class FirewallAccessproxyvirtualhost : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The host name.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// Type of host pattern. Valid values: `sub-string`, `wildcard`.
        /// </summary>
        [Output("hostType")]
        public Output<string> HostType { get; private set; } = null!;

        /// <summary>
        /// Virtual host name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Access-proxy-virtual-host replacement message override group.
        /// </summary>
        [Output("replacemsgGroup")]
        public Output<string> ReplacemsgGroup { get; private set; } = null!;

        /// <summary>
        /// SSL certificate for this host.
        /// </summary>
        [Output("sslCertificate")]
        public Output<string> SslCertificate { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a FirewallAccessproxyvirtualhost resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirewallAccessproxyvirtualhost(string name, FirewallAccessproxyvirtualhostArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/firewallAccessproxyvirtualhost:FirewallAccessproxyvirtualhost", name, args ?? new FirewallAccessproxyvirtualhostArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirewallAccessproxyvirtualhost(string name, Input<string> id, FirewallAccessproxyvirtualhostState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/firewallAccessproxyvirtualhost:FirewallAccessproxyvirtualhost", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirewallAccessproxyvirtualhost resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirewallAccessproxyvirtualhost Get(string name, Input<string> id, FirewallAccessproxyvirtualhostState? state = null, CustomResourceOptions? options = null)
        {
            return new FirewallAccessproxyvirtualhost(name, id, state, options);
        }
    }

    public sealed class FirewallAccessproxyvirtualhostArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The host name.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Type of host pattern. Valid values: `sub-string`, `wildcard`.
        /// </summary>
        [Input("hostType")]
        public Input<string>? HostType { get; set; }

        /// <summary>
        /// Virtual host name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Access-proxy-virtual-host replacement message override group.
        /// </summary>
        [Input("replacemsgGroup")]
        public Input<string>? ReplacemsgGroup { get; set; }

        /// <summary>
        /// SSL certificate for this host.
        /// </summary>
        [Input("sslCertificate")]
        public Input<string>? SslCertificate { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public FirewallAccessproxyvirtualhostArgs()
        {
        }
        public static new FirewallAccessproxyvirtualhostArgs Empty => new FirewallAccessproxyvirtualhostArgs();
    }

    public sealed class FirewallAccessproxyvirtualhostState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The host name.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Type of host pattern. Valid values: `sub-string`, `wildcard`.
        /// </summary>
        [Input("hostType")]
        public Input<string>? HostType { get; set; }

        /// <summary>
        /// Virtual host name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Access-proxy-virtual-host replacement message override group.
        /// </summary>
        [Input("replacemsgGroup")]
        public Input<string>? ReplacemsgGroup { get; set; }

        /// <summary>
        /// SSL certificate for this host.
        /// </summary>
        [Input("sslCertificate")]
        public Input<string>? SslCertificate { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public FirewallAccessproxyvirtualhostState()
        {
        }
        public static new FirewallAccessproxyvirtualhostState Empty => new FirewallAccessproxyvirtualhostState();
    }
}
