// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure UTM (Unified Threat Management) profile.
    /// 
    /// ## Import
    /// 
    /// WirelessController UtmProfile can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/wirelesscontrollerUtmprofile:WirelesscontrollerUtmprofile labelname {{name}}
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/wirelesscontrollerUtmprofile:WirelesscontrollerUtmprofile labelname {{name}}
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/wirelesscontrollerUtmprofile:WirelesscontrollerUtmprofile")]
    public partial class WirelesscontrollerUtmprofile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AntiVirus profile name.
        /// </summary>
        [Output("antivirusProfile")]
        public Output<string> AntivirusProfile { get; private set; } = null!;

        /// <summary>
        /// Application control list name.
        /// </summary>
        [Output("applicationList")]
        public Output<string> ApplicationList { get; private set; } = null!;

        /// <summary>
        /// Comment.
        /// </summary>
        [Output("comment")]
        public Output<string> Comment { get; private set; } = null!;

        /// <summary>
        /// IPS sensor name.
        /// </summary>
        [Output("ipsSensor")]
        public Output<string> IpsSensor { get; private set; } = null!;

        /// <summary>
        /// UTM profile name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        /// </summary>
        [Output("scanBotnetConnections")]
        public Output<string> ScanBotnetConnections { get; private set; } = null!;

        /// <summary>
        /// Enable/disable UTM logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("utmLog")]
        public Output<string> UtmLog { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// WebFilter profile name.
        /// </summary>
        [Output("webfilterProfile")]
        public Output<string> WebfilterProfile { get; private set; } = null!;


        /// <summary>
        /// Create a WirelesscontrollerUtmprofile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WirelesscontrollerUtmprofile(string name, WirelesscontrollerUtmprofileArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/wirelesscontrollerUtmprofile:WirelesscontrollerUtmprofile", name, args ?? new WirelesscontrollerUtmprofileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WirelesscontrollerUtmprofile(string name, Input<string> id, WirelesscontrollerUtmprofileState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/wirelesscontrollerUtmprofile:WirelesscontrollerUtmprofile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WirelesscontrollerUtmprofile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WirelesscontrollerUtmprofile Get(string name, Input<string> id, WirelesscontrollerUtmprofileState? state = null, CustomResourceOptions? options = null)
        {
            return new WirelesscontrollerUtmprofile(name, id, state, options);
        }
    }

    public sealed class WirelesscontrollerUtmprofileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AntiVirus profile name.
        /// </summary>
        [Input("antivirusProfile")]
        public Input<string>? AntivirusProfile { get; set; }

        /// <summary>
        /// Application control list name.
        /// </summary>
        [Input("applicationList")]
        public Input<string>? ApplicationList { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// IPS sensor name.
        /// </summary>
        [Input("ipsSensor")]
        public Input<string>? IpsSensor { get; set; }

        /// <summary>
        /// UTM profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        /// </summary>
        [Input("scanBotnetConnections")]
        public Input<string>? ScanBotnetConnections { get; set; }

        /// <summary>
        /// Enable/disable UTM logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("utmLog")]
        public Input<string>? UtmLog { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// WebFilter profile name.
        /// </summary>
        [Input("webfilterProfile")]
        public Input<string>? WebfilterProfile { get; set; }

        public WirelesscontrollerUtmprofileArgs()
        {
        }
        public static new WirelesscontrollerUtmprofileArgs Empty => new WirelesscontrollerUtmprofileArgs();
    }

    public sealed class WirelesscontrollerUtmprofileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AntiVirus profile name.
        /// </summary>
        [Input("antivirusProfile")]
        public Input<string>? AntivirusProfile { get; set; }

        /// <summary>
        /// Application control list name.
        /// </summary>
        [Input("applicationList")]
        public Input<string>? ApplicationList { get; set; }

        /// <summary>
        /// Comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// IPS sensor name.
        /// </summary>
        [Input("ipsSensor")]
        public Input<string>? IpsSensor { get; set; }

        /// <summary>
        /// UTM profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        /// </summary>
        [Input("scanBotnetConnections")]
        public Input<string>? ScanBotnetConnections { get; set; }

        /// <summary>
        /// Enable/disable UTM logging. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("utmLog")]
        public Input<string>? UtmLog { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// WebFilter profile name.
        /// </summary>
        [Input("webfilterProfile")]
        public Input<string>? WebfilterProfile { get; set; }

        public WirelesscontrollerUtmprofileState()
        {
        }
        public static new WirelesscontrollerUtmprofileState Empty => new WirelesscontrollerUtmprofileState();
    }
}
