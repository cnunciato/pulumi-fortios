// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Report layout configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.ReportLayout("trname", new()
    ///     {
    ///         CutoffOption = "run-time",
    ///         CutoffTime = "00:00",
    ///         Day = "sunday",
    ///         EmailSend = "disable",
    ///         Format = "pdf",
    ///         MaxPdfReport = 31,
    ///         Options = "include-table-of-content view-chart-as-heading",
    ///         ScheduleType = "daily",
    ///         StyleTheme = "default-report",
    ///         Time = "00:00",
    ///         Title = "FortiGate System Analysis Report",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Report Layout can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/reportLayout:ReportLayout labelname {{name}}
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/reportLayout:ReportLayout labelname {{name}}
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/reportLayout:ReportLayout")]
    public partial class ReportLayout : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configure report body item. The structure of `body_item` block is documented below.
        /// </summary>
        [Output("bodyItems")]
        public Output<ImmutableArray<Outputs.ReportLayoutBodyItem>> BodyItems { get; private set; } = null!;

        /// <summary>
        /// Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
        /// </summary>
        [Output("cutoffOption")]
        public Output<string> CutoffOption { get; private set; } = null!;

        /// <summary>
        /// Custom cutoff time to generate report [hh:mm].
        /// </summary>
        [Output("cutoffTime")]
        public Output<string> CutoffTime { get; private set; } = null!;

        /// <summary>
        /// Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        /// </summary>
        [Output("day")]
        public Output<string> Day { get; private set; } = null!;

        /// <summary>
        /// Description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Email recipients for generated reports.
        /// </summary>
        [Output("emailRecipients")]
        public Output<string> EmailRecipients { get; private set; } = null!;

        /// <summary>
        /// Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("emailSend")]
        public Output<string> EmailSend { get; private set; } = null!;

        /// <summary>
        /// Report format. Valid values: `pdf`.
        /// </summary>
        [Output("format")]
        public Output<string> Format { get; private set; } = null!;

        /// <summary>
        /// Maximum number of PDF reports to keep at one time (oldest report is overwritten).
        /// </summary>
        [Output("maxPdfReport")]
        public Output<int> MaxPdfReport { get; private set; } = null!;

        /// <summary>
        /// Report layout name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
        /// </summary>
        [Output("options")]
        public Output<string> Options { get; private set; } = null!;

        /// <summary>
        /// Configure report page. The structure of `page` block is documented below.
        /// </summary>
        [Output("page")]
        public Output<Outputs.ReportLayoutPage> Page { get; private set; } = null!;

        /// <summary>
        /// Report schedule type. Valid values: `demand`, `daily`, `weekly`.
        /// </summary>
        [Output("scheduleType")]
        public Output<string> ScheduleType { get; private set; } = null!;

        /// <summary>
        /// Report style theme.
        /// </summary>
        [Output("styleTheme")]
        public Output<string> StyleTheme { get; private set; } = null!;

        /// <summary>
        /// Report subtitle.
        /// </summary>
        [Output("subtitle")]
        public Output<string> Subtitle { get; private set; } = null!;

        /// <summary>
        /// Schedule time to generate report [hh:mm].
        /// </summary>
        [Output("time")]
        public Output<string> Time { get; private set; } = null!;

        /// <summary>
        /// Report title.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a ReportLayout resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReportLayout(string name, ReportLayoutArgs args, CustomResourceOptions? options = null)
            : base("fortios:index/reportLayout:ReportLayout", name, args ?? new ReportLayoutArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReportLayout(string name, Input<string> id, ReportLayoutState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/reportLayout:ReportLayout", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReportLayout resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReportLayout Get(string name, Input<string> id, ReportLayoutState? state = null, CustomResourceOptions? options = null)
        {
            return new ReportLayout(name, id, state, options);
        }
    }

    public sealed class ReportLayoutArgs : global::Pulumi.ResourceArgs
    {
        [Input("bodyItems")]
        private InputList<Inputs.ReportLayoutBodyItemArgs>? _bodyItems;

        /// <summary>
        /// Configure report body item. The structure of `body_item` block is documented below.
        /// </summary>
        public InputList<Inputs.ReportLayoutBodyItemArgs> BodyItems
        {
            get => _bodyItems ?? (_bodyItems = new InputList<Inputs.ReportLayoutBodyItemArgs>());
            set => _bodyItems = value;
        }

        /// <summary>
        /// Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
        /// </summary>
        [Input("cutoffOption")]
        public Input<string>? CutoffOption { get; set; }

        /// <summary>
        /// Custom cutoff time to generate report [hh:mm].
        /// </summary>
        [Input("cutoffTime")]
        public Input<string>? CutoffTime { get; set; }

        /// <summary>
        /// Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        /// </summary>
        [Input("day")]
        public Input<string>? Day { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Email recipients for generated reports.
        /// </summary>
        [Input("emailRecipients")]
        public Input<string>? EmailRecipients { get; set; }

        /// <summary>
        /// Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("emailSend")]
        public Input<string>? EmailSend { get; set; }

        /// <summary>
        /// Report format. Valid values: `pdf`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// Maximum number of PDF reports to keep at one time (oldest report is overwritten).
        /// </summary>
        [Input("maxPdfReport")]
        public Input<int>? MaxPdfReport { get; set; }

        /// <summary>
        /// Report layout name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
        /// </summary>
        [Input("options")]
        public Input<string>? Options { get; set; }

        /// <summary>
        /// Configure report page. The structure of `page` block is documented below.
        /// </summary>
        [Input("page")]
        public Input<Inputs.ReportLayoutPageArgs>? Page { get; set; }

        /// <summary>
        /// Report schedule type. Valid values: `demand`, `daily`, `weekly`.
        /// </summary>
        [Input("scheduleType")]
        public Input<string>? ScheduleType { get; set; }

        /// <summary>
        /// Report style theme.
        /// </summary>
        [Input("styleTheme", required: true)]
        public Input<string> StyleTheme { get; set; } = null!;

        /// <summary>
        /// Report subtitle.
        /// </summary>
        [Input("subtitle")]
        public Input<string>? Subtitle { get; set; }

        /// <summary>
        /// Schedule time to generate report [hh:mm].
        /// </summary>
        [Input("time")]
        public Input<string>? Time { get; set; }

        /// <summary>
        /// Report title.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public ReportLayoutArgs()
        {
        }
        public static new ReportLayoutArgs Empty => new ReportLayoutArgs();
    }

    public sealed class ReportLayoutState : global::Pulumi.ResourceArgs
    {
        [Input("bodyItems")]
        private InputList<Inputs.ReportLayoutBodyItemGetArgs>? _bodyItems;

        /// <summary>
        /// Configure report body item. The structure of `body_item` block is documented below.
        /// </summary>
        public InputList<Inputs.ReportLayoutBodyItemGetArgs> BodyItems
        {
            get => _bodyItems ?? (_bodyItems = new InputList<Inputs.ReportLayoutBodyItemGetArgs>());
            set => _bodyItems = value;
        }

        /// <summary>
        /// Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
        /// </summary>
        [Input("cutoffOption")]
        public Input<string>? CutoffOption { get; set; }

        /// <summary>
        /// Custom cutoff time to generate report [hh:mm].
        /// </summary>
        [Input("cutoffTime")]
        public Input<string>? CutoffTime { get; set; }

        /// <summary>
        /// Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        /// </summary>
        [Input("day")]
        public Input<string>? Day { get; set; }

        /// <summary>
        /// Description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Email recipients for generated reports.
        /// </summary>
        [Input("emailRecipients")]
        public Input<string>? EmailRecipients { get; set; }

        /// <summary>
        /// Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("emailSend")]
        public Input<string>? EmailSend { get; set; }

        /// <summary>
        /// Report format. Valid values: `pdf`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// Maximum number of PDF reports to keep at one time (oldest report is overwritten).
        /// </summary>
        [Input("maxPdfReport")]
        public Input<int>? MaxPdfReport { get; set; }

        /// <summary>
        /// Report layout name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
        /// </summary>
        [Input("options")]
        public Input<string>? Options { get; set; }

        /// <summary>
        /// Configure report page. The structure of `page` block is documented below.
        /// </summary>
        [Input("page")]
        public Input<Inputs.ReportLayoutPageGetArgs>? Page { get; set; }

        /// <summary>
        /// Report schedule type. Valid values: `demand`, `daily`, `weekly`.
        /// </summary>
        [Input("scheduleType")]
        public Input<string>? ScheduleType { get; set; }

        /// <summary>
        /// Report style theme.
        /// </summary>
        [Input("styleTheme")]
        public Input<string>? StyleTheme { get; set; }

        /// <summary>
        /// Report subtitle.
        /// </summary>
        [Input("subtitle")]
        public Input<string>? Subtitle { get; set; }

        /// <summary>
        /// Schedule time to generate report [hh:mm].
        /// </summary>
        [Input("time")]
        public Input<string>? Time { get; set; }

        /// <summary>
        /// Report title.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public ReportLayoutState()
        {
        }
        public static new ReportLayoutState Empty => new ReportLayoutState();
    }
}
