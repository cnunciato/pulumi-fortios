// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure integrated FortiLink settings for FortiSwitch. Applies to FortiOS Version `&gt;= 7.0.1`.
    /// 
    /// ## Import
    /// 
    /// SwitchController FortilinkSettings can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/switchcontrollerFortilinksettings:SwitchcontrollerFortilinksettings labelname {{name}}
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/switchcontrollerFortilinksettings:SwitchcontrollerFortilinksettings labelname {{name}}
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/switchcontrollerFortilinksettings:SwitchcontrollerFortilinksettings")]
    public partial class SwitchcontrollerFortilinksettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// FortiLink interface to which this fortilink-setting belongs.
        /// </summary>
        [Output("fortilink")]
        public Output<string> Fortilink { get; private set; } = null!;

        /// <summary>
        /// Time interval(minutes) to be included in the inactive devices expiry calculation (mac age-out + inactive-time + periodic scan interval).
        /// </summary>
        [Output("inactiveTimer")]
        public Output<int> InactiveTimer { get; private set; } = null!;

        /// <summary>
        /// Clear NAC and dynamic devices on switch ports on link down event. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("linkDownFlush")]
        public Output<string> LinkDownFlush { get; private set; } = null!;

        /// <summary>
        /// NAC specific configuration. The structure of `nac_ports` block is documented below.
        /// </summary>
        [Output("nacPorts")]
        public Output<Outputs.SwitchcontrollerFortilinksettingsNacPorts> NacPorts { get; private set; } = null!;

        /// <summary>
        /// FortiLink settings name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a SwitchcontrollerFortilinksettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SwitchcontrollerFortilinksettings(string name, SwitchcontrollerFortilinksettingsArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/switchcontrollerFortilinksettings:SwitchcontrollerFortilinksettings", name, args ?? new SwitchcontrollerFortilinksettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SwitchcontrollerFortilinksettings(string name, Input<string> id, SwitchcontrollerFortilinksettingsState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/switchcontrollerFortilinksettings:SwitchcontrollerFortilinksettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SwitchcontrollerFortilinksettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SwitchcontrollerFortilinksettings Get(string name, Input<string> id, SwitchcontrollerFortilinksettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new SwitchcontrollerFortilinksettings(name, id, state, options);
        }
    }

    public sealed class SwitchcontrollerFortilinksettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// FortiLink interface to which this fortilink-setting belongs.
        /// </summary>
        [Input("fortilink")]
        public Input<string>? Fortilink { get; set; }

        /// <summary>
        /// Time interval(minutes) to be included in the inactive devices expiry calculation (mac age-out + inactive-time + periodic scan interval).
        /// </summary>
        [Input("inactiveTimer")]
        public Input<int>? InactiveTimer { get; set; }

        /// <summary>
        /// Clear NAC and dynamic devices on switch ports on link down event. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("linkDownFlush")]
        public Input<string>? LinkDownFlush { get; set; }

        /// <summary>
        /// NAC specific configuration. The structure of `nac_ports` block is documented below.
        /// </summary>
        [Input("nacPorts")]
        public Input<Inputs.SwitchcontrollerFortilinksettingsNacPortsArgs>? NacPorts { get; set; }

        /// <summary>
        /// FortiLink settings name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SwitchcontrollerFortilinksettingsArgs()
        {
        }
        public static new SwitchcontrollerFortilinksettingsArgs Empty => new SwitchcontrollerFortilinksettingsArgs();
    }

    public sealed class SwitchcontrollerFortilinksettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// FortiLink interface to which this fortilink-setting belongs.
        /// </summary>
        [Input("fortilink")]
        public Input<string>? Fortilink { get; set; }

        /// <summary>
        /// Time interval(minutes) to be included in the inactive devices expiry calculation (mac age-out + inactive-time + periodic scan interval).
        /// </summary>
        [Input("inactiveTimer")]
        public Input<int>? InactiveTimer { get; set; }

        /// <summary>
        /// Clear NAC and dynamic devices on switch ports on link down event. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("linkDownFlush")]
        public Input<string>? LinkDownFlush { get; set; }

        /// <summary>
        /// NAC specific configuration. The structure of `nac_ports` block is documented below.
        /// </summary>
        [Input("nacPorts")]
        public Input<Inputs.SwitchcontrollerFortilinksettingsNacPortsGetArgs>? NacPorts { get; set; }

        /// <summary>
        /// FortiLink settings name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SwitchcontrollerFortilinksettingsState()
        {
        }
        public static new SwitchcontrollerFortilinksettingsState Empty => new SwitchcontrollerFortilinksettingsState();
    }
}
