// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure integrated NAC settings for FortiSwitch. Applies to FortiOS Version `6.4.0,6.4.1,6.4.2,6.4.10,7.0.0`.
    /// 
    /// ## Import
    /// 
    /// SwitchController NacSettings can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/switchcontrollerNacsettings:SwitchcontrollerNacsettings labelname {{name}}
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/switchcontrollerNacsettings:SwitchcontrollerNacsettings labelname {{name}}
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/switchcontrollerNacsettings:SwitchcontrollerNacsettings")]
    public partial class SwitchcontrollerNacsettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("autoAuth")]
        public Output<string> AutoAuth { get; private set; } = null!;

        /// <summary>
        /// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("bounceNacPort")]
        public Output<string> BounceNacPort { get; private set; } = null!;

        /// <summary>
        /// Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
        /// </summary>
        [Output("inactiveTimer")]
        public Output<int> InactiveTimer { get; private set; } = null!;

        /// <summary>
        /// Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
        /// </summary>
        [Output("linkDownFlush")]
        public Output<string> LinkDownFlush { get; private set; } = null!;

        /// <summary>
        /// Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// NAC settings name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Default NAC Onboarding VLAN when NAC devices are discovered.
        /// </summary>
        [Output("onboardingVlan")]
        public Output<string> OnboardingVlan { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a SwitchcontrollerNacsettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SwitchcontrollerNacsettings(string name, SwitchcontrollerNacsettingsArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/switchcontrollerNacsettings:SwitchcontrollerNacsettings", name, args ?? new SwitchcontrollerNacsettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SwitchcontrollerNacsettings(string name, Input<string> id, SwitchcontrollerNacsettingsState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/switchcontrollerNacsettings:SwitchcontrollerNacsettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SwitchcontrollerNacsettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SwitchcontrollerNacsettings Get(string name, Input<string> id, SwitchcontrollerNacsettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new SwitchcontrollerNacsettings(name, id, state, options);
        }
    }

    public sealed class SwitchcontrollerNacsettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("autoAuth")]
        public Input<string>? AutoAuth { get; set; }

        /// <summary>
        /// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("bounceNacPort")]
        public Input<string>? BounceNacPort { get; set; }

        /// <summary>
        /// Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
        /// </summary>
        [Input("inactiveTimer")]
        public Input<int>? InactiveTimer { get; set; }

        /// <summary>
        /// Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("linkDownFlush")]
        public Input<string>? LinkDownFlush { get; set; }

        /// <summary>
        /// Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// NAC settings name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Default NAC Onboarding VLAN when NAC devices are discovered.
        /// </summary>
        [Input("onboardingVlan")]
        public Input<string>? OnboardingVlan { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SwitchcontrollerNacsettingsArgs()
        {
        }
        public static new SwitchcontrollerNacsettingsArgs Empty => new SwitchcontrollerNacsettingsArgs();
    }

    public sealed class SwitchcontrollerNacsettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("autoAuth")]
        public Input<string>? AutoAuth { get; set; }

        /// <summary>
        /// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("bounceNacPort")]
        public Input<string>? BounceNacPort { get; set; }

        /// <summary>
        /// Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
        /// </summary>
        [Input("inactiveTimer")]
        public Input<int>? InactiveTimer { get; set; }

        /// <summary>
        /// Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
        /// </summary>
        [Input("linkDownFlush")]
        public Input<string>? LinkDownFlush { get; set; }

        /// <summary>
        /// Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// NAC settings name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Default NAC Onboarding VLAN when NAC devices are discovered.
        /// </summary>
        [Input("onboardingVlan")]
        public Input<string>? OnboardingVlan { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SwitchcontrollerNacsettingsState()
        {
        }
        public static new SwitchcontrollerNacsettingsState Empty => new SwitchcontrollerNacsettingsState();
    }
}
