// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure VXLAN devices.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.SystemVxlan("trname", new()
    ///     {
    ///         Dstport = 4789,
    ///         Interface = "port3",
    ///         IpVersion = "ipv4-unicast",
    ///         RemoteIps = new[]
    ///         {
    ///             new Fortios.Inputs.SystemVxlanRemoteIpArgs
    ///             {
    ///                 Ip = "1.1.1.1",
    ///             },
    ///         },
    ///         Vni = 3,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// System Vxlan can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/systemVxlan:SystemVxlan labelname {{name}}
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/systemVxlan:SystemVxlan labelname {{name}}
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/systemVxlan:SystemVxlan")]
    public partial class SystemVxlan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// VXLAN destination port (1 - 65535, default = 4789).
        /// </summary>
        [Output("dstport")]
        public Output<int> Dstport { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Outgoing interface for VXLAN encapsulated traffic.
        /// </summary>
        [Output("interface")]
        public Output<string> Interface { get; private set; } = null!;

        /// <summary>
        /// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
        /// </summary>
        [Output("ipVersion")]
        public Output<string> IpVersion { get; private set; } = null!;

        /// <summary>
        /// VXLAN multicast TTL (1-255, default = 0).
        /// </summary>
        [Output("multicastTtl")]
        public Output<int> MulticastTtl { get; private set; } = null!;

        /// <summary>
        /// VXLAN device or interface name. Must be a unique interface name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip6` block is documented below.
        /// </summary>
        [Output("remoteIp6s")]
        public Output<ImmutableArray<Outputs.SystemVxlanRemoteIp6>> RemoteIp6s { get; private set; } = null!;

        /// <summary>
        /// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip` block is documented below.
        /// </summary>
        [Output("remoteIps")]
        public Output<ImmutableArray<Outputs.SystemVxlanRemoteIp>> RemoteIps { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// VXLAN network ID.
        /// </summary>
        [Output("vni")]
        public Output<int> Vni { get; private set; } = null!;


        /// <summary>
        /// Create a SystemVxlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SystemVxlan(string name, SystemVxlanArgs args, CustomResourceOptions? options = null)
            : base("fortios:index/systemVxlan:SystemVxlan", name, args ?? new SystemVxlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SystemVxlan(string name, Input<string> id, SystemVxlanState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/systemVxlan:SystemVxlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SystemVxlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SystemVxlan Get(string name, Input<string> id, SystemVxlanState? state = null, CustomResourceOptions? options = null)
        {
            return new SystemVxlan(name, id, state, options);
        }
    }

    public sealed class SystemVxlanArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// VXLAN destination port (1 - 65535, default = 4789).
        /// </summary>
        [Input("dstport")]
        public Input<int>? Dstport { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Outgoing interface for VXLAN encapsulated traffic.
        /// </summary>
        [Input("interface", required: true)]
        public Input<string> Interface { get; set; } = null!;

        /// <summary>
        /// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
        /// </summary>
        [Input("ipVersion", required: true)]
        public Input<string> IpVersion { get; set; } = null!;

        /// <summary>
        /// VXLAN multicast TTL (1-255, default = 0).
        /// </summary>
        [Input("multicastTtl")]
        public Input<int>? MulticastTtl { get; set; }

        /// <summary>
        /// VXLAN device or interface name. Must be a unique interface name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("remoteIp6s")]
        private InputList<Inputs.SystemVxlanRemoteIp6Args>? _remoteIp6s;

        /// <summary>
        /// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip6` block is documented below.
        /// </summary>
        public InputList<Inputs.SystemVxlanRemoteIp6Args> RemoteIp6s
        {
            get => _remoteIp6s ?? (_remoteIp6s = new InputList<Inputs.SystemVxlanRemoteIp6Args>());
            set => _remoteIp6s = value;
        }

        [Input("remoteIps")]
        private InputList<Inputs.SystemVxlanRemoteIpArgs>? _remoteIps;

        /// <summary>
        /// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip` block is documented below.
        /// </summary>
        public InputList<Inputs.SystemVxlanRemoteIpArgs> RemoteIps
        {
            get => _remoteIps ?? (_remoteIps = new InputList<Inputs.SystemVxlanRemoteIpArgs>());
            set => _remoteIps = value;
        }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// VXLAN network ID.
        /// </summary>
        [Input("vni", required: true)]
        public Input<int> Vni { get; set; } = null!;

        public SystemVxlanArgs()
        {
        }
        public static new SystemVxlanArgs Empty => new SystemVxlanArgs();
    }

    public sealed class SystemVxlanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// VXLAN destination port (1 - 65535, default = 4789).
        /// </summary>
        [Input("dstport")]
        public Input<int>? Dstport { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Outgoing interface for VXLAN encapsulated traffic.
        /// </summary>
        [Input("interface")]
        public Input<string>? Interface { get; set; }

        /// <summary>
        /// IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
        /// </summary>
        [Input("ipVersion")]
        public Input<string>? IpVersion { get; set; }

        /// <summary>
        /// VXLAN multicast TTL (1-255, default = 0).
        /// </summary>
        [Input("multicastTtl")]
        public Input<int>? MulticastTtl { get; set; }

        /// <summary>
        /// VXLAN device or interface name. Must be a unique interface name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("remoteIp6s")]
        private InputList<Inputs.SystemVxlanRemoteIp6GetArgs>? _remoteIp6s;

        /// <summary>
        /// IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip6` block is documented below.
        /// </summary>
        public InputList<Inputs.SystemVxlanRemoteIp6GetArgs> RemoteIp6s
        {
            get => _remoteIp6s ?? (_remoteIp6s = new InputList<Inputs.SystemVxlanRemoteIp6GetArgs>());
            set => _remoteIp6s = value;
        }

        [Input("remoteIps")]
        private InputList<Inputs.SystemVxlanRemoteIpGetArgs>? _remoteIps;

        /// <summary>
        /// IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip` block is documented below.
        /// </summary>
        public InputList<Inputs.SystemVxlanRemoteIpGetArgs> RemoteIps
        {
            get => _remoteIps ?? (_remoteIps = new InputList<Inputs.SystemVxlanRemoteIpGetArgs>());
            set => _remoteIps = value;
        }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        /// <summary>
        /// VXLAN network ID.
        /// </summary>
        [Input("vni")]
        public Input<int>? Vni { get; set; }

        public SystemVxlanState()
        {
        }
        public static new SystemVxlanState Empty => new SystemVxlanState();
    }
}
