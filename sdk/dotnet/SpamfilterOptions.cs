// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure AntiSpam options. Applies to FortiOS Version `&lt;= 6.2.0`.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.SpamfilterOptions("trname", new()
    ///     {
    ///         DnsTimeout = 7,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Spamfilter Options can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/spamfilterOptions:SpamfilterOptions labelname SpamfilterOptions
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/spamfilterOptions:SpamfilterOptions labelname SpamfilterOptions
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/spamfilterOptions:SpamfilterOptions")]
    public partial class SpamfilterOptions : global::Pulumi.CustomResource
    {
        /// <summary>
        /// DNS query time out (1 - 30 sec).
        /// </summary>
        [Output("dnsTimeout")]
        public Output<int> DnsTimeout { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a SpamfilterOptions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SpamfilterOptions(string name, SpamfilterOptionsArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/spamfilterOptions:SpamfilterOptions", name, args ?? new SpamfilterOptionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SpamfilterOptions(string name, Input<string> id, SpamfilterOptionsState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/spamfilterOptions:SpamfilterOptions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SpamfilterOptions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SpamfilterOptions Get(string name, Input<string> id, SpamfilterOptionsState? state = null, CustomResourceOptions? options = null)
        {
            return new SpamfilterOptions(name, id, state, options);
        }
    }

    public sealed class SpamfilterOptionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DNS query time out (1 - 30 sec).
        /// </summary>
        [Input("dnsTimeout")]
        public Input<int>? DnsTimeout { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SpamfilterOptionsArgs()
        {
        }
        public static new SpamfilterOptionsArgs Empty => new SpamfilterOptionsArgs();
    }

    public sealed class SpamfilterOptionsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DNS query time out (1 - 30 sec).
        /// </summary>
        [Input("dnsTimeout")]
        public Input<int>? DnsTimeout { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SpamfilterOptionsState()
        {
        }
        public static new SpamfilterOptionsState Empty => new SpamfilterOptionsState();
    }
}
