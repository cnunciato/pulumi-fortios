// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Coordinate federated upgrades within the Security Fabric. Applies to FortiOS Version `&gt;= 7.0.0`.
    /// 
    /// ## Import
    /// 
    /// System FederatedUpgrade can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/systemFederatedupgrade:SystemFederatedupgrade labelname SystemFederatedUpgrade
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/systemFederatedupgrade:SystemFederatedupgrade labelname SystemFederatedUpgrade
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/systemFederatedupgrade:SystemFederatedupgrade")]
    public partial class SystemFederatedupgrade : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Serial number of the node to include.
        /// </summary>
        [Output("failureDevice")]
        public Output<string> FailureDevice { get; private set; } = null!;

        /// <summary>
        /// Reason for upgrade failure. Valid values: `none`, `internal`, `timeout`, `device-type-unsupported`, `download-failed`, `device-missing`, `version-unavailable`, `staging-failed`, `reboot-failed`, `device-not-reconnected`, `node-not-ready`, `no-final-confirmation`, `no-confirmation-query`.
        /// </summary>
        [Output("failureReason")]
        public Output<string> FailureReason { get; private set; } = null!;

        /// <summary>
        /// The index of the next image to upgrade to.
        /// </summary>
        [Output("nextPathIndex")]
        public Output<int> NextPathIndex { get; private set; } = null!;

        /// <summary>
        /// Nodes which will be included in the upgrade. The structure of `node_list` block is documented below.
        /// </summary>
        [Output("nodeLists")]
        public Output<ImmutableArray<Outputs.SystemFederatedupgradeNodeList>> NodeLists { get; private set; } = null!;

        /// <summary>
        /// Current status of the upgrade.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for this upgrade.
        /// </summary>
        [Output("upgradeId")]
        public Output<int> UpgradeId { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a SystemFederatedupgrade resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SystemFederatedupgrade(string name, SystemFederatedupgradeArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/systemFederatedupgrade:SystemFederatedupgrade", name, args ?? new SystemFederatedupgradeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SystemFederatedupgrade(string name, Input<string> id, SystemFederatedupgradeState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/systemFederatedupgrade:SystemFederatedupgrade", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SystemFederatedupgrade resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SystemFederatedupgrade Get(string name, Input<string> id, SystemFederatedupgradeState? state = null, CustomResourceOptions? options = null)
        {
            return new SystemFederatedupgrade(name, id, state, options);
        }
    }

    public sealed class SystemFederatedupgradeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Serial number of the node to include.
        /// </summary>
        [Input("failureDevice")]
        public Input<string>? FailureDevice { get; set; }

        /// <summary>
        /// Reason for upgrade failure. Valid values: `none`, `internal`, `timeout`, `device-type-unsupported`, `download-failed`, `device-missing`, `version-unavailable`, `staging-failed`, `reboot-failed`, `device-not-reconnected`, `node-not-ready`, `no-final-confirmation`, `no-confirmation-query`.
        /// </summary>
        [Input("failureReason")]
        public Input<string>? FailureReason { get; set; }

        /// <summary>
        /// The index of the next image to upgrade to.
        /// </summary>
        [Input("nextPathIndex")]
        public Input<int>? NextPathIndex { get; set; }

        [Input("nodeLists")]
        private InputList<Inputs.SystemFederatedupgradeNodeListArgs>? _nodeLists;

        /// <summary>
        /// Nodes which will be included in the upgrade. The structure of `node_list` block is documented below.
        /// </summary>
        public InputList<Inputs.SystemFederatedupgradeNodeListArgs> NodeLists
        {
            get => _nodeLists ?? (_nodeLists = new InputList<Inputs.SystemFederatedupgradeNodeListArgs>());
            set => _nodeLists = value;
        }

        /// <summary>
        /// Current status of the upgrade.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Unique identifier for this upgrade.
        /// </summary>
        [Input("upgradeId")]
        public Input<int>? UpgradeId { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SystemFederatedupgradeArgs()
        {
        }
        public static new SystemFederatedupgradeArgs Empty => new SystemFederatedupgradeArgs();
    }

    public sealed class SystemFederatedupgradeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Serial number of the node to include.
        /// </summary>
        [Input("failureDevice")]
        public Input<string>? FailureDevice { get; set; }

        /// <summary>
        /// Reason for upgrade failure. Valid values: `none`, `internal`, `timeout`, `device-type-unsupported`, `download-failed`, `device-missing`, `version-unavailable`, `staging-failed`, `reboot-failed`, `device-not-reconnected`, `node-not-ready`, `no-final-confirmation`, `no-confirmation-query`.
        /// </summary>
        [Input("failureReason")]
        public Input<string>? FailureReason { get; set; }

        /// <summary>
        /// The index of the next image to upgrade to.
        /// </summary>
        [Input("nextPathIndex")]
        public Input<int>? NextPathIndex { get; set; }

        [Input("nodeLists")]
        private InputList<Inputs.SystemFederatedupgradeNodeListGetArgs>? _nodeLists;

        /// <summary>
        /// Nodes which will be included in the upgrade. The structure of `node_list` block is documented below.
        /// </summary>
        public InputList<Inputs.SystemFederatedupgradeNodeListGetArgs> NodeLists
        {
            get => _nodeLists ?? (_nodeLists = new InputList<Inputs.SystemFederatedupgradeNodeListGetArgs>());
            set => _nodeLists = value;
        }

        /// <summary>
        /// Current status of the upgrade.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Unique identifier for this upgrade.
        /// </summary>
        [Input("upgradeId")]
        public Input<int>? UpgradeId { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public SystemFederatedupgradeState()
        {
        }
        public static new SystemFederatedupgradeState Empty => new SystemFederatedupgradeState();
    }
}
