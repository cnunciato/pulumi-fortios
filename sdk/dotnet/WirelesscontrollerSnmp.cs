// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure SNMP. Applies to FortiOS Version `&gt;= 6.2.4`.
    /// 
    /// ## Import
    /// 
    /// WirelessController Snmp can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/wirelesscontrollerSnmp:WirelesscontrollerSnmp labelname WirelessControllerSnmp
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/wirelesscontrollerSnmp:WirelesscontrollerSnmp labelname WirelessControllerSnmp
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/wirelesscontrollerSnmp:WirelesscontrollerSnmp")]
    public partial class WirelesscontrollerSnmp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// SNMP Community Configuration. The structure of `community` block is documented below.
        /// </summary>
        [Output("communities")]
        public Output<ImmutableArray<Outputs.WirelesscontrollerSnmpCommunity>> Communities { get; private set; } = null!;

        /// <summary>
        /// Contact Information.
        /// </summary>
        [Output("contactInfo")]
        public Output<string> ContactInfo { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// AC SNMP engineId string (maximum 24 characters).
        /// </summary>
        [Output("engineId")]
        public Output<string> EngineId { get; private set; } = null!;

        /// <summary>
        /// CPU usage when trap is sent.
        /// </summary>
        [Output("trapHighCpuThreshold")]
        public Output<int> TrapHighCpuThreshold { get; private set; } = null!;

        /// <summary>
        /// Memory usage when trap is sent.
        /// </summary>
        [Output("trapHighMemThreshold")]
        public Output<int> TrapHighMemThreshold { get; private set; } = null!;

        /// <summary>
        /// SNMP User Configuration. The structure of `user` block is documented below.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.WirelesscontrollerSnmpUser>> Users { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a WirelesscontrollerSnmp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WirelesscontrollerSnmp(string name, WirelesscontrollerSnmpArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/wirelesscontrollerSnmp:WirelesscontrollerSnmp", name, args ?? new WirelesscontrollerSnmpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WirelesscontrollerSnmp(string name, Input<string> id, WirelesscontrollerSnmpState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/wirelesscontrollerSnmp:WirelesscontrollerSnmp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WirelesscontrollerSnmp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WirelesscontrollerSnmp Get(string name, Input<string> id, WirelesscontrollerSnmpState? state = null, CustomResourceOptions? options = null)
        {
            return new WirelesscontrollerSnmp(name, id, state, options);
        }
    }

    public sealed class WirelesscontrollerSnmpArgs : global::Pulumi.ResourceArgs
    {
        [Input("communities")]
        private InputList<Inputs.WirelesscontrollerSnmpCommunityArgs>? _communities;

        /// <summary>
        /// SNMP Community Configuration. The structure of `community` block is documented below.
        /// </summary>
        public InputList<Inputs.WirelesscontrollerSnmpCommunityArgs> Communities
        {
            get => _communities ?? (_communities = new InputList<Inputs.WirelesscontrollerSnmpCommunityArgs>());
            set => _communities = value;
        }

        /// <summary>
        /// Contact Information.
        /// </summary>
        [Input("contactInfo")]
        public Input<string>? ContactInfo { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// AC SNMP engineId string (maximum 24 characters).
        /// </summary>
        [Input("engineId")]
        public Input<string>? EngineId { get; set; }

        /// <summary>
        /// CPU usage when trap is sent.
        /// </summary>
        [Input("trapHighCpuThreshold")]
        public Input<int>? TrapHighCpuThreshold { get; set; }

        /// <summary>
        /// Memory usage when trap is sent.
        /// </summary>
        [Input("trapHighMemThreshold")]
        public Input<int>? TrapHighMemThreshold { get; set; }

        [Input("users")]
        private InputList<Inputs.WirelesscontrollerSnmpUserArgs>? _users;

        /// <summary>
        /// SNMP User Configuration. The structure of `user` block is documented below.
        /// </summary>
        public InputList<Inputs.WirelesscontrollerSnmpUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.WirelesscontrollerSnmpUserArgs>());
            set => _users = value;
        }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public WirelesscontrollerSnmpArgs()
        {
        }
        public static new WirelesscontrollerSnmpArgs Empty => new WirelesscontrollerSnmpArgs();
    }

    public sealed class WirelesscontrollerSnmpState : global::Pulumi.ResourceArgs
    {
        [Input("communities")]
        private InputList<Inputs.WirelesscontrollerSnmpCommunityGetArgs>? _communities;

        /// <summary>
        /// SNMP Community Configuration. The structure of `community` block is documented below.
        /// </summary>
        public InputList<Inputs.WirelesscontrollerSnmpCommunityGetArgs> Communities
        {
            get => _communities ?? (_communities = new InputList<Inputs.WirelesscontrollerSnmpCommunityGetArgs>());
            set => _communities = value;
        }

        /// <summary>
        /// Contact Information.
        /// </summary>
        [Input("contactInfo")]
        public Input<string>? ContactInfo { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// AC SNMP engineId string (maximum 24 characters).
        /// </summary>
        [Input("engineId")]
        public Input<string>? EngineId { get; set; }

        /// <summary>
        /// CPU usage when trap is sent.
        /// </summary>
        [Input("trapHighCpuThreshold")]
        public Input<int>? TrapHighCpuThreshold { get; set; }

        /// <summary>
        /// Memory usage when trap is sent.
        /// </summary>
        [Input("trapHighMemThreshold")]
        public Input<int>? TrapHighMemThreshold { get; set; }

        [Input("users")]
        private InputList<Inputs.WirelesscontrollerSnmpUserGetArgs>? _users;

        /// <summary>
        /// SNMP User Configuration. The structure of `user` block is documented below.
        /// </summary>
        public InputList<Inputs.WirelesscontrollerSnmpUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.WirelesscontrollerSnmpUserGetArgs>());
            set => _users = value;
        }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public WirelesscontrollerSnmpState()
        {
        }
        public static new WirelesscontrollerSnmpState Empty => new WirelesscontrollerSnmpState();
    }
}
