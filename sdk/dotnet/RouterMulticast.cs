// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure router multicast.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.RouterMulticast("trname", new()
    ///     {
    ///         MulticastRouting = "disable",
    ///         PimSmGlobal = new Fortios.Inputs.RouterMulticastPimSmGlobalArgs
    ///         {
    ///             BsrAllowQuickRefresh = "disable",
    ///             BsrCandidate = "disable",
    ///             BsrHash = 10,
    ///             BsrPriority = 0,
    ///             CiscoCrpPrefix = "disable",
    ///             CiscoIgnoreRpSetPriority = "disable",
    ///             CiscoRegisterChecksum = "disable",
    ///             JoinPruneHoldtime = 210,
    ///             MessageInterval = 60,
    ///             NullRegisterRetries = 1,
    ///             RegisterRateLimit = 0,
    ///             RegisterRpReachability = "enable",
    ///             RegisterSource = "disable",
    ///             RegisterSourceIp = "0.0.0.0",
    ///             RegisterSupression = 60,
    ///             RpRegisterKeepalive = 185,
    ///             SptThreshold = "enable",
    ///             Ssm = "disable",
    ///         },
    ///         RouteLimit = 2147483647,
    ///         RouteThreshold = 2147483647,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Router Multicast can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/routerMulticast:RouterMulticast labelname RouterMulticast
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/routerMulticast:RouterMulticast labelname RouterMulticast
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/routerMulticast:RouterMulticast")]
    public partial class RouterMulticast : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// PIM interfaces. The structure of `interface` block is documented below.
        /// </summary>
        [Output("interfaces")]
        public Output<ImmutableArray<Outputs.RouterMulticastInterface>> Interfaces { get; private set; } = null!;

        /// <summary>
        /// Enable/disable IP multicast routing. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("multicastRouting")]
        public Output<string> MulticastRouting { get; private set; } = null!;

        /// <summary>
        /// PIM sparse-mode global settings. The structure of `pim_sm_global` block is documented below.
        /// </summary>
        [Output("pimSmGlobal")]
        public Output<Outputs.RouterMulticastPimSmGlobal> PimSmGlobal { get; private set; } = null!;

        /// <summary>
        /// Maximum number of multicast routes.
        /// </summary>
        [Output("routeLimit")]
        public Output<int> RouteLimit { get; private set; } = null!;

        /// <summary>
        /// Generate warnings when the number of multicast routes exceeds this number, must not be greater than route-limit.
        /// </summary>
        [Output("routeThreshold")]
        public Output<int> RouteThreshold { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a RouterMulticast resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouterMulticast(string name, RouterMulticastArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/routerMulticast:RouterMulticast", name, args ?? new RouterMulticastArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouterMulticast(string name, Input<string> id, RouterMulticastState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/routerMulticast:RouterMulticast", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouterMulticast resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouterMulticast Get(string name, Input<string> id, RouterMulticastState? state = null, CustomResourceOptions? options = null)
        {
            return new RouterMulticast(name, id, state, options);
        }
    }

    public sealed class RouterMulticastArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.RouterMulticastInterfaceArgs>? _interfaces;

        /// <summary>
        /// PIM interfaces. The structure of `interface` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterMulticastInterfaceArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.RouterMulticastInterfaceArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Enable/disable IP multicast routing. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("multicastRouting")]
        public Input<string>? MulticastRouting { get; set; }

        /// <summary>
        /// PIM sparse-mode global settings. The structure of `pim_sm_global` block is documented below.
        /// </summary>
        [Input("pimSmGlobal")]
        public Input<Inputs.RouterMulticastPimSmGlobalArgs>? PimSmGlobal { get; set; }

        /// <summary>
        /// Maximum number of multicast routes.
        /// </summary>
        [Input("routeLimit")]
        public Input<int>? RouteLimit { get; set; }

        /// <summary>
        /// Generate warnings when the number of multicast routes exceeds this number, must not be greater than route-limit.
        /// </summary>
        [Input("routeThreshold")]
        public Input<int>? RouteThreshold { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public RouterMulticastArgs()
        {
        }
        public static new RouterMulticastArgs Empty => new RouterMulticastArgs();
    }

    public sealed class RouterMulticastState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.RouterMulticastInterfaceGetArgs>? _interfaces;

        /// <summary>
        /// PIM interfaces. The structure of `interface` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterMulticastInterfaceGetArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.RouterMulticastInterfaceGetArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Enable/disable IP multicast routing. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("multicastRouting")]
        public Input<string>? MulticastRouting { get; set; }

        /// <summary>
        /// PIM sparse-mode global settings. The structure of `pim_sm_global` block is documented below.
        /// </summary>
        [Input("pimSmGlobal")]
        public Input<Inputs.RouterMulticastPimSmGlobalGetArgs>? PimSmGlobal { get; set; }

        /// <summary>
        /// Maximum number of multicast routes.
        /// </summary>
        [Input("routeLimit")]
        public Input<int>? RouteLimit { get; set; }

        /// <summary>
        /// Generate warnings when the number of multicast routes exceeds this number, must not be greater than route-limit.
        /// </summary>
        [Input("routeThreshold")]
        public Input<int>? RouteThreshold { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public RouterMulticastState()
        {
        }
        public static new RouterMulticastState Empty => new RouterMulticastState();
    }
}
