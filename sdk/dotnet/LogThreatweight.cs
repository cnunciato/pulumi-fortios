// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure threat weight settings.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.LogThreatweight("trname", new()
    ///     {
    ///         Applications = new[]
    ///         {
    ///             new Fortios.Inputs.LogThreatweightApplicationArgs
    ///             {
    ///                 Category = 2,
    ///                 Id = 1,
    ///                 Level = "low",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightApplicationArgs
    ///             {
    ///                 Category = 6,
    ///                 Id = 2,
    ///                 Level = "medium",
    ///             },
    ///         },
    ///         BlockedConnection = "high",
    ///         FailedConnection = "low",
    ///         Ips = new Fortios.Inputs.LogThreatweightIpsArgs
    ///         {
    ///             CriticalSeverity = "critical",
    ///             HighSeverity = "high",
    ///             InfoSeverity = "disable",
    ///             LowSeverity = "low",
    ///             MediumSeverity = "medium",
    ///         },
    ///         Level = new Fortios.Inputs.LogThreatweightLevelArgs
    ///         {
    ///             Critical = 50,
    ///             High = 30,
    ///             Low = 5,
    ///             Medium = 10,
    ///         },
    ///         Malware = new Fortios.Inputs.LogThreatweightMalwareArgs
    ///         {
    ///             BotnetConnection = "critical",
    ///             CommandBlocked = "disable",
    ///             ContentDisarm = "medium",
    ///             FileBlocked = "low",
    ///             Mimefragmented = "disable",
    ///             Oversized = "disable",
    ///             SwitchProto = "disable",
    ///             VirusFileTypeExecutable = "medium",
    ///             VirusInfected = "critical",
    ///             VirusOutbreakPrevention = "critical",
    ///             VirusScanError = "high",
    ///         },
    ///         Status = "enable",
    ///         UrlBlockDetected = "high",
    ///         Webs = new[]
    ///         {
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 26,
    ///                 Id = 1,
    ///                 Level = "high",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 61,
    ///                 Id = 2,
    ///                 Level = "high",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 86,
    ///                 Id = 3,
    ///                 Level = "high",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 1,
    ///                 Id = 4,
    ///                 Level = "medium",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 3,
    ///                 Id = 5,
    ///                 Level = "medium",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 4,
    ///                 Id = 6,
    ///                 Level = "medium",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 5,
    ///                 Id = 7,
    ///                 Level = "medium",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 6,
    ///                 Id = 8,
    ///                 Level = "medium",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 12,
    ///                 Id = 9,
    ///                 Level = "medium",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 59,
    ///                 Id = 10,
    ///                 Level = "medium",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 62,
    ///                 Id = 11,
    ///                 Level = "medium",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 83,
    ///                 Id = 12,
    ///                 Level = "medium",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 72,
    ///                 Id = 13,
    ///                 Level = "low",
    ///             },
    ///             new Fortios.Inputs.LogThreatweightWebArgs
    ///             {
    ///                 Category = 14,
    ///                 Id = 14,
    ///                 Level = "low",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Log ThreatWeight can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/logThreatweight:LogThreatweight labelname LogThreatWeight
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/logThreatweight:LogThreatweight labelname LogThreatWeight
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/logThreatweight:LogThreatweight")]
    public partial class LogThreatweight : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Application-control threat weight settings. The structure of `application` block is documented below.
        /// </summary>
        [Output("applications")]
        public Output<ImmutableArray<Outputs.LogThreatweightApplication>> Applications { get; private set; } = null!;

        /// <summary>
        /// Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Output("blockedConnection")]
        public Output<string> BlockedConnection { get; private set; } = null!;

        /// <summary>
        /// Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Output("botnetConnectionDetected")]
        public Output<string> BotnetConnectionDetected { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Output("failedConnection")]
        public Output<string> FailedConnection { get; private set; } = null!;

        /// <summary>
        /// Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
        /// </summary>
        [Output("geolocations")]
        public Output<ImmutableArray<Outputs.LogThreatweightGeolocation>> Geolocations { get; private set; } = null!;

        /// <summary>
        /// IPS threat weight settings. The structure of `ips` block is documented below.
        /// </summary>
        [Output("ips")]
        public Output<Outputs.LogThreatweightIps> Ips { get; private set; } = null!;

        /// <summary>
        /// Score mapping for threat weight levels. The structure of `level` block is documented below.
        /// </summary>
        [Output("level")]
        public Output<Outputs.LogThreatweightLevel> Level { get; private set; } = null!;

        /// <summary>
        /// Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
        /// </summary>
        [Output("malware")]
        public Output<Outputs.LogThreatweightMalware> Malware { get; private set; } = null!;

        /// <summary>
        /// Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Output("urlBlockDetected")]
        public Output<string> UrlBlockDetected { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;

        /// <summary>
        /// Web filtering threat weight settings. The structure of `web` block is documented below.
        /// </summary>
        [Output("webs")]
        public Output<ImmutableArray<Outputs.LogThreatweightWeb>> Webs { get; private set; } = null!;


        /// <summary>
        /// Create a LogThreatweight resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogThreatweight(string name, LogThreatweightArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/logThreatweight:LogThreatweight", name, args ?? new LogThreatweightArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogThreatweight(string name, Input<string> id, LogThreatweightState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/logThreatweight:LogThreatweight", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogThreatweight resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogThreatweight Get(string name, Input<string> id, LogThreatweightState? state = null, CustomResourceOptions? options = null)
        {
            return new LogThreatweight(name, id, state, options);
        }
    }

    public sealed class LogThreatweightArgs : global::Pulumi.ResourceArgs
    {
        [Input("applications")]
        private InputList<Inputs.LogThreatweightApplicationArgs>? _applications;

        /// <summary>
        /// Application-control threat weight settings. The structure of `application` block is documented below.
        /// </summary>
        public InputList<Inputs.LogThreatweightApplicationArgs> Applications
        {
            get => _applications ?? (_applications = new InputList<Inputs.LogThreatweightApplicationArgs>());
            set => _applications = value;
        }

        /// <summary>
        /// Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Input("blockedConnection")]
        public Input<string>? BlockedConnection { get; set; }

        /// <summary>
        /// Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Input("botnetConnectionDetected")]
        public Input<string>? BotnetConnectionDetected { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Input("failedConnection")]
        public Input<string>? FailedConnection { get; set; }

        [Input("geolocations")]
        private InputList<Inputs.LogThreatweightGeolocationArgs>? _geolocations;

        /// <summary>
        /// Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
        /// </summary>
        public InputList<Inputs.LogThreatweightGeolocationArgs> Geolocations
        {
            get => _geolocations ?? (_geolocations = new InputList<Inputs.LogThreatweightGeolocationArgs>());
            set => _geolocations = value;
        }

        /// <summary>
        /// IPS threat weight settings. The structure of `ips` block is documented below.
        /// </summary>
        [Input("ips")]
        public Input<Inputs.LogThreatweightIpsArgs>? Ips { get; set; }

        /// <summary>
        /// Score mapping for threat weight levels. The structure of `level` block is documented below.
        /// </summary>
        [Input("level")]
        public Input<Inputs.LogThreatweightLevelArgs>? Level { get; set; }

        /// <summary>
        /// Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
        /// </summary>
        [Input("malware")]
        public Input<Inputs.LogThreatweightMalwareArgs>? Malware { get; set; }

        /// <summary>
        /// Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Input("urlBlockDetected")]
        public Input<string>? UrlBlockDetected { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        [Input("webs")]
        private InputList<Inputs.LogThreatweightWebArgs>? _webs;

        /// <summary>
        /// Web filtering threat weight settings. The structure of `web` block is documented below.
        /// </summary>
        public InputList<Inputs.LogThreatweightWebArgs> Webs
        {
            get => _webs ?? (_webs = new InputList<Inputs.LogThreatweightWebArgs>());
            set => _webs = value;
        }

        public LogThreatweightArgs()
        {
        }
        public static new LogThreatweightArgs Empty => new LogThreatweightArgs();
    }

    public sealed class LogThreatweightState : global::Pulumi.ResourceArgs
    {
        [Input("applications")]
        private InputList<Inputs.LogThreatweightApplicationGetArgs>? _applications;

        /// <summary>
        /// Application-control threat weight settings. The structure of `application` block is documented below.
        /// </summary>
        public InputList<Inputs.LogThreatweightApplicationGetArgs> Applications
        {
            get => _applications ?? (_applications = new InputList<Inputs.LogThreatweightApplicationGetArgs>());
            set => _applications = value;
        }

        /// <summary>
        /// Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Input("blockedConnection")]
        public Input<string>? BlockedConnection { get; set; }

        /// <summary>
        /// Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Input("botnetConnectionDetected")]
        public Input<string>? BotnetConnectionDetected { get; set; }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Input("failedConnection")]
        public Input<string>? FailedConnection { get; set; }

        [Input("geolocations")]
        private InputList<Inputs.LogThreatweightGeolocationGetArgs>? _geolocations;

        /// <summary>
        /// Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
        /// </summary>
        public InputList<Inputs.LogThreatweightGeolocationGetArgs> Geolocations
        {
            get => _geolocations ?? (_geolocations = new InputList<Inputs.LogThreatweightGeolocationGetArgs>());
            set => _geolocations = value;
        }

        /// <summary>
        /// IPS threat weight settings. The structure of `ips` block is documented below.
        /// </summary>
        [Input("ips")]
        public Input<Inputs.LogThreatweightIpsGetArgs>? Ips { get; set; }

        /// <summary>
        /// Score mapping for threat weight levels. The structure of `level` block is documented below.
        /// </summary>
        [Input("level")]
        public Input<Inputs.LogThreatweightLevelGetArgs>? Level { get; set; }

        /// <summary>
        /// Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
        /// </summary>
        [Input("malware")]
        public Input<Inputs.LogThreatweightMalwareGetArgs>? Malware { get; set; }

        /// <summary>
        /// Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        /// </summary>
        [Input("urlBlockDetected")]
        public Input<string>? UrlBlockDetected { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        [Input("webs")]
        private InputList<Inputs.LogThreatweightWebGetArgs>? _webs;

        /// <summary>
        /// Web filtering threat weight settings. The structure of `web` block is documented below.
        /// </summary>
        public InputList<Inputs.LogThreatweightWebGetArgs> Webs
        {
            get => _webs ?? (_webs = new InputList<Inputs.LogThreatweightWebGetArgs>());
            set => _webs = value;
        }

        public LogThreatweightState()
        {
        }
        public static new LogThreatweightState Empty => new LogThreatweightState();
    }
}
