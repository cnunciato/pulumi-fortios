// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure RIPng.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.RouterRipng("trname", new()
    ///     {
    ///         DefaultInformationOriginate = "disable",
    ///         DefaultMetric = 1,
    ///         GarbageTimer = 120,
    ///         MaxOutMetric = 0,
    ///         Redistributes = new[]
    ///         {
    ///             new Fortios.Inputs.RouterRipngRedistributeArgs
    ///             {
    ///                 Metric = 10,
    ///                 Name = "connected",
    ///                 Status = "disable",
    ///             },
    ///             new Fortios.Inputs.RouterRipngRedistributeArgs
    ///             {
    ///                 Metric = 10,
    ///                 Name = "static",
    ///                 Status = "disable",
    ///             },
    ///             new Fortios.Inputs.RouterRipngRedistributeArgs
    ///             {
    ///                 Metric = 10,
    ///                 Name = "ospf",
    ///                 Status = "disable",
    ///             },
    ///             new Fortios.Inputs.RouterRipngRedistributeArgs
    ///             {
    ///                 Metric = 10,
    ///                 Name = "bgp",
    ///                 Status = "disable",
    ///             },
    ///             new Fortios.Inputs.RouterRipngRedistributeArgs
    ///             {
    ///                 Metric = 10,
    ///                 Name = "isis",
    ///                 Status = "disable",
    ///             },
    ///         },
    ///         TimeoutTimer = 180,
    ///         UpdateTimer = 30,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Router Ripng can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/routerRipng:RouterRipng labelname RouterRipng
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/routerRipng:RouterRipng labelname RouterRipng
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/routerRipng:RouterRipng")]
    public partial class RouterRipng : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Aggregate address. The structure of `aggregate_address` block is documented below.
        /// </summary>
        [Output("aggregateAddresses")]
        public Output<ImmutableArray<Outputs.RouterRipngAggregateAddress>> AggregateAddresses { get; private set; } = null!;

        /// <summary>
        /// Enable/disable generation of default route. Valid values: `enable`, `disable`.
        /// </summary>
        [Output("defaultInformationOriginate")]
        public Output<string> DefaultInformationOriginate { get; private set; } = null!;

        /// <summary>
        /// Default metric.
        /// </summary>
        [Output("defaultMetric")]
        public Output<int> DefaultMetric { get; private set; } = null!;

        /// <summary>
        /// distance The structure of `distance` block is documented below.
        /// </summary>
        [Output("distances")]
        public Output<ImmutableArray<Outputs.RouterRipngDistance>> Distances { get; private set; } = null!;

        /// <summary>
        /// Distribute list. The structure of `distribute_list` block is documented below.
        /// </summary>
        [Output("distributeLists")]
        public Output<ImmutableArray<Outputs.RouterRipngDistributeList>> DistributeLists { get; private set; } = null!;

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Output("dynamicSortSubtable")]
        public Output<string?> DynamicSortSubtable { get; private set; } = null!;

        /// <summary>
        /// Garbage timer.
        /// </summary>
        [Output("garbageTimer")]
        public Output<int> GarbageTimer { get; private set; } = null!;

        /// <summary>
        /// RIPng interface configuration. The structure of `interface` block is documented below.
        /// </summary>
        [Output("interfaces")]
        public Output<ImmutableArray<Outputs.RouterRipngInterface>> Interfaces { get; private set; } = null!;

        /// <summary>
        /// Maximum metric allowed to output(0 means 'not set').
        /// </summary>
        [Output("maxOutMetric")]
        public Output<int> MaxOutMetric { get; private set; } = null!;

        /// <summary>
        /// neighbor The structure of `neighbor` block is documented below.
        /// </summary>
        [Output("neighbors")]
        public Output<ImmutableArray<Outputs.RouterRipngNeighbor>> Neighbors { get; private set; } = null!;

        /// <summary>
        /// Network. The structure of `network` block is documented below.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.RouterRipngNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// Offset list. The structure of `offset_list` block is documented below.
        /// </summary>
        [Output("offsetLists")]
        public Output<ImmutableArray<Outputs.RouterRipngOffsetList>> OffsetLists { get; private set; } = null!;

        /// <summary>
        /// Passive interface configuration. The structure of `passive_interface` block is documented below.
        /// </summary>
        [Output("passiveInterfaces")]
        public Output<ImmutableArray<Outputs.RouterRipngPassiveInterface>> PassiveInterfaces { get; private set; } = null!;

        /// <summary>
        /// Redistribute configuration. The structure of `redistribute` block is documented below.
        /// </summary>
        [Output("redistributes")]
        public Output<ImmutableArray<Outputs.RouterRipngRedistribute>> Redistributes { get; private set; } = null!;

        /// <summary>
        /// Timeout timer.
        /// </summary>
        [Output("timeoutTimer")]
        public Output<int> TimeoutTimer { get; private set; } = null!;

        /// <summary>
        /// Update timer.
        /// </summary>
        [Output("updateTimer")]
        public Output<int> UpdateTimer { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a RouterRipng resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouterRipng(string name, RouterRipngArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/routerRipng:RouterRipng", name, args ?? new RouterRipngArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouterRipng(string name, Input<string> id, RouterRipngState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/routerRipng:RouterRipng", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouterRipng resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouterRipng Get(string name, Input<string> id, RouterRipngState? state = null, CustomResourceOptions? options = null)
        {
            return new RouterRipng(name, id, state, options);
        }
    }

    public sealed class RouterRipngArgs : global::Pulumi.ResourceArgs
    {
        [Input("aggregateAddresses")]
        private InputList<Inputs.RouterRipngAggregateAddressArgs>? _aggregateAddresses;

        /// <summary>
        /// Aggregate address. The structure of `aggregate_address` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngAggregateAddressArgs> AggregateAddresses
        {
            get => _aggregateAddresses ?? (_aggregateAddresses = new InputList<Inputs.RouterRipngAggregateAddressArgs>());
            set => _aggregateAddresses = value;
        }

        /// <summary>
        /// Enable/disable generation of default route. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("defaultInformationOriginate")]
        public Input<string>? DefaultInformationOriginate { get; set; }

        /// <summary>
        /// Default metric.
        /// </summary>
        [Input("defaultMetric")]
        public Input<int>? DefaultMetric { get; set; }

        [Input("distances")]
        private InputList<Inputs.RouterRipngDistanceArgs>? _distances;

        /// <summary>
        /// distance The structure of `distance` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngDistanceArgs> Distances
        {
            get => _distances ?? (_distances = new InputList<Inputs.RouterRipngDistanceArgs>());
            set => _distances = value;
        }

        [Input("distributeLists")]
        private InputList<Inputs.RouterRipngDistributeListArgs>? _distributeLists;

        /// <summary>
        /// Distribute list. The structure of `distribute_list` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngDistributeListArgs> DistributeLists
        {
            get => _distributeLists ?? (_distributeLists = new InputList<Inputs.RouterRipngDistributeListArgs>());
            set => _distributeLists = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Garbage timer.
        /// </summary>
        [Input("garbageTimer")]
        public Input<int>? GarbageTimer { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.RouterRipngInterfaceArgs>? _interfaces;

        /// <summary>
        /// RIPng interface configuration. The structure of `interface` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngInterfaceArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.RouterRipngInterfaceArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Maximum metric allowed to output(0 means 'not set').
        /// </summary>
        [Input("maxOutMetric")]
        public Input<int>? MaxOutMetric { get; set; }

        [Input("neighbors")]
        private InputList<Inputs.RouterRipngNeighborArgs>? _neighbors;

        /// <summary>
        /// neighbor The structure of `neighbor` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngNeighborArgs> Neighbors
        {
            get => _neighbors ?? (_neighbors = new InputList<Inputs.RouterRipngNeighborArgs>());
            set => _neighbors = value;
        }

        [Input("networks")]
        private InputList<Inputs.RouterRipngNetworkArgs>? _networks;

        /// <summary>
        /// Network. The structure of `network` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.RouterRipngNetworkArgs>());
            set => _networks = value;
        }

        [Input("offsetLists")]
        private InputList<Inputs.RouterRipngOffsetListArgs>? _offsetLists;

        /// <summary>
        /// Offset list. The structure of `offset_list` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngOffsetListArgs> OffsetLists
        {
            get => _offsetLists ?? (_offsetLists = new InputList<Inputs.RouterRipngOffsetListArgs>());
            set => _offsetLists = value;
        }

        [Input("passiveInterfaces")]
        private InputList<Inputs.RouterRipngPassiveInterfaceArgs>? _passiveInterfaces;

        /// <summary>
        /// Passive interface configuration. The structure of `passive_interface` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngPassiveInterfaceArgs> PassiveInterfaces
        {
            get => _passiveInterfaces ?? (_passiveInterfaces = new InputList<Inputs.RouterRipngPassiveInterfaceArgs>());
            set => _passiveInterfaces = value;
        }

        [Input("redistributes")]
        private InputList<Inputs.RouterRipngRedistributeArgs>? _redistributes;

        /// <summary>
        /// Redistribute configuration. The structure of `redistribute` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngRedistributeArgs> Redistributes
        {
            get => _redistributes ?? (_redistributes = new InputList<Inputs.RouterRipngRedistributeArgs>());
            set => _redistributes = value;
        }

        /// <summary>
        /// Timeout timer.
        /// </summary>
        [Input("timeoutTimer")]
        public Input<int>? TimeoutTimer { get; set; }

        /// <summary>
        /// Update timer.
        /// </summary>
        [Input("updateTimer")]
        public Input<int>? UpdateTimer { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public RouterRipngArgs()
        {
        }
        public static new RouterRipngArgs Empty => new RouterRipngArgs();
    }

    public sealed class RouterRipngState : global::Pulumi.ResourceArgs
    {
        [Input("aggregateAddresses")]
        private InputList<Inputs.RouterRipngAggregateAddressGetArgs>? _aggregateAddresses;

        /// <summary>
        /// Aggregate address. The structure of `aggregate_address` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngAggregateAddressGetArgs> AggregateAddresses
        {
            get => _aggregateAddresses ?? (_aggregateAddresses = new InputList<Inputs.RouterRipngAggregateAddressGetArgs>());
            set => _aggregateAddresses = value;
        }

        /// <summary>
        /// Enable/disable generation of default route. Valid values: `enable`, `disable`.
        /// </summary>
        [Input("defaultInformationOriginate")]
        public Input<string>? DefaultInformationOriginate { get; set; }

        /// <summary>
        /// Default metric.
        /// </summary>
        [Input("defaultMetric")]
        public Input<int>? DefaultMetric { get; set; }

        [Input("distances")]
        private InputList<Inputs.RouterRipngDistanceGetArgs>? _distances;

        /// <summary>
        /// distance The structure of `distance` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngDistanceGetArgs> Distances
        {
            get => _distances ?? (_distances = new InputList<Inputs.RouterRipngDistanceGetArgs>());
            set => _distances = value;
        }

        [Input("distributeLists")]
        private InputList<Inputs.RouterRipngDistributeListGetArgs>? _distributeLists;

        /// <summary>
        /// Distribute list. The structure of `distribute_list` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngDistributeListGetArgs> DistributeLists
        {
            get => _distributeLists ?? (_distributeLists = new InputList<Inputs.RouterRipngDistributeListGetArgs>());
            set => _distributeLists = value;
        }

        /// <summary>
        /// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -&gt; [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -&gt; [ a10, a2 ].
        /// </summary>
        [Input("dynamicSortSubtable")]
        public Input<string>? DynamicSortSubtable { get; set; }

        /// <summary>
        /// Garbage timer.
        /// </summary>
        [Input("garbageTimer")]
        public Input<int>? GarbageTimer { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.RouterRipngInterfaceGetArgs>? _interfaces;

        /// <summary>
        /// RIPng interface configuration. The structure of `interface` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngInterfaceGetArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.RouterRipngInterfaceGetArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Maximum metric allowed to output(0 means 'not set').
        /// </summary>
        [Input("maxOutMetric")]
        public Input<int>? MaxOutMetric { get; set; }

        [Input("neighbors")]
        private InputList<Inputs.RouterRipngNeighborGetArgs>? _neighbors;

        /// <summary>
        /// neighbor The structure of `neighbor` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngNeighborGetArgs> Neighbors
        {
            get => _neighbors ?? (_neighbors = new InputList<Inputs.RouterRipngNeighborGetArgs>());
            set => _neighbors = value;
        }

        [Input("networks")]
        private InputList<Inputs.RouterRipngNetworkGetArgs>? _networks;

        /// <summary>
        /// Network. The structure of `network` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.RouterRipngNetworkGetArgs>());
            set => _networks = value;
        }

        [Input("offsetLists")]
        private InputList<Inputs.RouterRipngOffsetListGetArgs>? _offsetLists;

        /// <summary>
        /// Offset list. The structure of `offset_list` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngOffsetListGetArgs> OffsetLists
        {
            get => _offsetLists ?? (_offsetLists = new InputList<Inputs.RouterRipngOffsetListGetArgs>());
            set => _offsetLists = value;
        }

        [Input("passiveInterfaces")]
        private InputList<Inputs.RouterRipngPassiveInterfaceGetArgs>? _passiveInterfaces;

        /// <summary>
        /// Passive interface configuration. The structure of `passive_interface` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngPassiveInterfaceGetArgs> PassiveInterfaces
        {
            get => _passiveInterfaces ?? (_passiveInterfaces = new InputList<Inputs.RouterRipngPassiveInterfaceGetArgs>());
            set => _passiveInterfaces = value;
        }

        [Input("redistributes")]
        private InputList<Inputs.RouterRipngRedistributeGetArgs>? _redistributes;

        /// <summary>
        /// Redistribute configuration. The structure of `redistribute` block is documented below.
        /// </summary>
        public InputList<Inputs.RouterRipngRedistributeGetArgs> Redistributes
        {
            get => _redistributes ?? (_redistributes = new InputList<Inputs.RouterRipngRedistributeGetArgs>());
            set => _redistributes = value;
        }

        /// <summary>
        /// Timeout timer.
        /// </summary>
        [Input("timeoutTimer")]
        public Input<int>? TimeoutTimer { get; set; }

        /// <summary>
        /// Update timer.
        /// </summary>
        [Input("updateTimer")]
        public Input<int>? UpdateTimer { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public RouterRipngState()
        {
        }
        public static new RouterRipngState Empty => new RouterRipngState();
    }
}
