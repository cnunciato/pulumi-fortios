// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Fortios
{
    /// <summary>
    /// Configure IPS VDOM parameter.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fortios = Pulumiverse.Fortios;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var trname = new Fortios.IpsSettings("trname", new()
    ///     {
    ///         IpsPacketQuota = 0,
    ///         PacketLogHistory = 1,
    ///         PacketLogMemory = 256,
    ///         PacketLogPostAttack = 0,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Ips Settings can be imported using any of these accepted formats
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/ipsSettings:IpsSettings labelname IpsSettings
    /// ```
    /// 
    ///  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
    /// 
    /// ```sh
    ///  $ pulumi import fortios:index/ipsSettings:IpsSettings labelname IpsSettings
    /// ```
    /// 
    ///  $ unset "FORTIOS_IMPORT_TABLE"
    /// </summary>
    [FortiosResourceType("fortios:index/ipsSettings:IpsSettings")]
    public partial class IpsSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Maximum amount of disk space in MB for logged packets when logging to disk. Range depends on disk size.
        /// </summary>
        [Output("ipsPacketQuota")]
        public Output<int> IpsPacketQuota { get; private set; } = null!;

        /// <summary>
        /// Number of packets to capture before and including the one in which the IPS signature is detected (1 - 255).
        /// </summary>
        [Output("packetLogHistory")]
        public Output<int> PacketLogHistory { get; private set; } = null!;

        /// <summary>
        /// Maximum memory can be used by packet log (64 - 8192 kB).
        /// </summary>
        [Output("packetLogMemory")]
        public Output<int> PacketLogMemory { get; private set; } = null!;

        /// <summary>
        /// Number of packets to log after the IPS signature is detected (0 - 255).
        /// </summary>
        [Output("packetLogPostAttack")]
        public Output<int> PacketLogPostAttack { get; private set; } = null!;

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Output("vdomparam")]
        public Output<string?> Vdomparam { get; private set; } = null!;


        /// <summary>
        /// Create a IpsSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpsSettings(string name, IpsSettingsArgs? args = null, CustomResourceOptions? options = null)
            : base("fortios:index/ipsSettings:IpsSettings", name, args ?? new IpsSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpsSettings(string name, Input<string> id, IpsSettingsState? state = null, CustomResourceOptions? options = null)
            : base("fortios:index/ipsSettings:IpsSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-fortios",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpsSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpsSettings Get(string name, Input<string> id, IpsSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new IpsSettings(name, id, state, options);
        }
    }

    public sealed class IpsSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Maximum amount of disk space in MB for logged packets when logging to disk. Range depends on disk size.
        /// </summary>
        [Input("ipsPacketQuota")]
        public Input<int>? IpsPacketQuota { get; set; }

        /// <summary>
        /// Number of packets to capture before and including the one in which the IPS signature is detected (1 - 255).
        /// </summary>
        [Input("packetLogHistory")]
        public Input<int>? PacketLogHistory { get; set; }

        /// <summary>
        /// Maximum memory can be used by packet log (64 - 8192 kB).
        /// </summary>
        [Input("packetLogMemory")]
        public Input<int>? PacketLogMemory { get; set; }

        /// <summary>
        /// Number of packets to log after the IPS signature is detected (0 - 255).
        /// </summary>
        [Input("packetLogPostAttack")]
        public Input<int>? PacketLogPostAttack { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public IpsSettingsArgs()
        {
        }
        public static new IpsSettingsArgs Empty => new IpsSettingsArgs();
    }

    public sealed class IpsSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Maximum amount of disk space in MB for logged packets when logging to disk. Range depends on disk size.
        /// </summary>
        [Input("ipsPacketQuota")]
        public Input<int>? IpsPacketQuota { get; set; }

        /// <summary>
        /// Number of packets to capture before and including the one in which the IPS signature is detected (1 - 255).
        /// </summary>
        [Input("packetLogHistory")]
        public Input<int>? PacketLogHistory { get; set; }

        /// <summary>
        /// Maximum memory can be used by packet log (64 - 8192 kB).
        /// </summary>
        [Input("packetLogMemory")]
        public Input<int>? PacketLogMemory { get; set; }

        /// <summary>
        /// Number of packets to log after the IPS signature is detected (0 - 255).
        /// </summary>
        [Input("packetLogPostAttack")]
        public Input<int>? PacketLogPostAttack { get; set; }

        /// <summary>
        /// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        /// </summary>
        [Input("vdomparam")]
        public Input<string>? Vdomparam { get; set; }

        public IpsSettingsState()
        {
        }
        public static new IpsSettingsState Empty => new IpsSettingsState();
    }
}
