// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Convert IP/Mask to CIDR
 *
 * ## Example Usage
 * ### Example1
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trnameSystemInterface = fortios.getSystemInterface({
 *     name: "port3",
 * });
 * const trnameIpmaskCidr = trnameSystemInterface.then(trnameSystemInterface => fortios.getIpmaskCidr({
 *     ipmask: trnameSystemInterface.ip,
 * }));
 * export const output1 = trnameIpmaskCidr.then(trnameIpmaskCidr => trnameIpmaskCidr.cidr);
 * ```
 * ### Example2
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trnameSystemInterface = fortios.getSystemInterface({
 *     name: "port3",
 * });
 * const trnameIpmaskCidr = trnameSystemInterface.then(trnameSystemInterface => fortios.getIpmaskCidr({
 *     ipmask: trnameSystemInterface.ip,
 *     ipmasklists: [
 *         "21.1.1.1 255.255.255.0",
 *         "22.1.1.1 255.255.255.240",
 *         "23.1.1.1 255.255.255.224",
 *     ],
 * }));
 * export const outputConv1 = trnameIpmaskCidr.then(trnameIpmaskCidr => trnameIpmaskCidr.cidr);
 * export const outputConv2 = trnameIpmaskCidr.then(trnameIpmaskCidr => trnameIpmaskCidr.cidrlists);
 * export const outputOrignal = trnameSystemInterface.then(trnameSystemInterface => trnameSystemInterface.ip);
 * ```
 */
export function getIpmaskCidr(args?: GetIpmaskCidrArgs, opts?: pulumi.InvokeOptions): Promise<GetIpmaskCidrResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:index/getIpmaskCidr:getIpmaskCidr", {
        "ipmask": args.ipmask,
        "ipmasklists": args.ipmasklists,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpmaskCidr.
 */
export interface GetIpmaskCidrArgs {
    /**
     * Specify IP/MASK.
     */
    ipmask?: string;
    /**
     * Specify IP/MASK list.
     */
    ipmasklists?: string[];
}

/**
 * A collection of values returned by getIpmaskCidr.
 */
export interface GetIpmaskCidrResult {
    /**
     * Classless Inter-Domain Routing of the IP/MASK.
     */
    readonly cidr: string;
    /**
     * Classless Inter-Domain Routing list converted from the IP/MASK list.
     */
    readonly cidrlists: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * IP/MASK.
     */
    readonly ipmask?: string;
    /**
     * IP/MASK list.
     */
    readonly ipmasklists?: string[];
}
/**
 * Convert IP/Mask to CIDR
 *
 * ## Example Usage
 * ### Example1
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trnameSystemInterface = fortios.getSystemInterface({
 *     name: "port3",
 * });
 * const trnameIpmaskCidr = trnameSystemInterface.then(trnameSystemInterface => fortios.getIpmaskCidr({
 *     ipmask: trnameSystemInterface.ip,
 * }));
 * export const output1 = trnameIpmaskCidr.then(trnameIpmaskCidr => trnameIpmaskCidr.cidr);
 * ```
 * ### Example2
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const trnameSystemInterface = fortios.getSystemInterface({
 *     name: "port3",
 * });
 * const trnameIpmaskCidr = trnameSystemInterface.then(trnameSystemInterface => fortios.getIpmaskCidr({
 *     ipmask: trnameSystemInterface.ip,
 *     ipmasklists: [
 *         "21.1.1.1 255.255.255.0",
 *         "22.1.1.1 255.255.255.240",
 *         "23.1.1.1 255.255.255.224",
 *     ],
 * }));
 * export const outputConv1 = trnameIpmaskCidr.then(trnameIpmaskCidr => trnameIpmaskCidr.cidr);
 * export const outputConv2 = trnameIpmaskCidr.then(trnameIpmaskCidr => trnameIpmaskCidr.cidrlists);
 * export const outputOrignal = trnameSystemInterface.then(trnameSystemInterface => trnameSystemInterface.ip);
 * ```
 */
export function getIpmaskCidrOutput(args?: GetIpmaskCidrOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIpmaskCidrResult> {
    return pulumi.output(args).apply((a: any) => getIpmaskCidr(a, opts))
}

/**
 * A collection of arguments for invoking getIpmaskCidr.
 */
export interface GetIpmaskCidrOutputArgs {
    /**
     * Specify IP/MASK.
     */
    ipmask?: pulumi.Input<string>;
    /**
     * Specify IP/MASK list.
     */
    ipmasklists?: pulumi.Input<pulumi.Input<string>[]>;
}
