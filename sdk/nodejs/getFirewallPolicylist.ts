// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a list of `fortios.FirewallPolicy`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const sample1 = fortios.getFirewallPolicylist({});
 * export const output1 = sample1;
 * const sample2 = fortios.getFirewallPolicylist({
 *     filter: "schedule==always&action==accept,action==deny",
 * });
 * export const sample2Output = sample2.then(sample2 => sample2.policyidlists);
 * ```
 */
export function getFirewallPolicylist(args?: GetFirewallPolicylistArgs, opts?: pulumi.InvokeOptions): Promise<GetFirewallPolicylistResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fortios:index/getFirewallPolicylist:getFirewallPolicylist", {
        "filter": args.filter,
        "vdomparam": args.vdomparam,
    }, opts);
}

/**
 * A collection of arguments for invoking getFirewallPolicylist.
 */
export interface GetFirewallPolicylistArgs {
    /**
     * A filter used to scope the list. See Filter results of datasource.
     */
    filter?: string;
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: string;
}

/**
 * A collection of values returned by getFirewallPolicylist.
 */
export interface GetFirewallPolicylistResult {
    readonly filter?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list of the `fortios.FirewallPolicy`.
     */
    readonly policyidlists: number[];
    readonly vdomparam?: string;
}
/**
 * Provides a list of `fortios.FirewallPolicy`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fortios from "@pulumi/fortios";
 *
 * const sample1 = fortios.getFirewallPolicylist({});
 * export const output1 = sample1;
 * const sample2 = fortios.getFirewallPolicylist({
 *     filter: "schedule==always&action==accept,action==deny",
 * });
 * export const sample2Output = sample2.then(sample2 => sample2.policyidlists);
 * ```
 */
export function getFirewallPolicylistOutput(args?: GetFirewallPolicylistOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFirewallPolicylistResult> {
    return pulumi.output(args).apply((a: any) => getFirewallPolicylist(a, opts))
}

/**
 * A collection of arguments for invoking getFirewallPolicylist.
 */
export interface GetFirewallPolicylistOutputArgs {
    /**
     * A filter used to scope the list. See Filter results of datasource.
     */
    filter?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
