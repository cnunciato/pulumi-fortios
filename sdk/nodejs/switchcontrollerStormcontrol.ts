// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configure FortiSwitch storm control.
 *
 * ## Import
 *
 * SwitchController StormControl can be imported using any of these accepted formats
 *
 * ```sh
 *  $ pulumi import fortios:index/switchcontrollerStormcontrol:SwitchcontrollerStormcontrol labelname SwitchControllerStormControl
 * ```
 *
 *  If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
 *
 * ```sh
 *  $ pulumi import fortios:index/switchcontrollerStormcontrol:SwitchcontrollerStormcontrol labelname SwitchControllerStormControl
 * ```
 *
 *  $ unset "FORTIOS_IMPORT_TABLE"
 */
export class SwitchcontrollerStormcontrol extends pulumi.CustomResource {
    /**
     * Get an existing SwitchcontrollerStormcontrol resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchcontrollerStormcontrolState, opts?: pulumi.CustomResourceOptions): SwitchcontrollerStormcontrol {
        return new SwitchcontrollerStormcontrol(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortios:index/switchcontrollerStormcontrol:SwitchcontrollerStormcontrol';

    /**
     * Returns true if the given object is an instance of SwitchcontrollerStormcontrol.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchcontrollerStormcontrol {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchcontrollerStormcontrol.__pulumiType;
    }

    /**
     * Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
     */
    public readonly broadcast!: pulumi.Output<string>;
    /**
     * Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
     */
    public readonly rate!: pulumi.Output<number>;
    /**
     * Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
     */
    public readonly unknownMulticast!: pulumi.Output<string>;
    /**
     * Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
     */
    public readonly unknownUnicast!: pulumi.Output<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    public readonly vdomparam!: pulumi.Output<string | undefined>;

    /**
     * Create a SwitchcontrollerStormcontrol resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchcontrollerStormcontrolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchcontrollerStormcontrolArgs | SwitchcontrollerStormcontrolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchcontrollerStormcontrolState | undefined;
            resourceInputs["broadcast"] = state ? state.broadcast : undefined;
            resourceInputs["rate"] = state ? state.rate : undefined;
            resourceInputs["unknownMulticast"] = state ? state.unknownMulticast : undefined;
            resourceInputs["unknownUnicast"] = state ? state.unknownUnicast : undefined;
            resourceInputs["vdomparam"] = state ? state.vdomparam : undefined;
        } else {
            const args = argsOrState as SwitchcontrollerStormcontrolArgs | undefined;
            resourceInputs["broadcast"] = args ? args.broadcast : undefined;
            resourceInputs["rate"] = args ? args.rate : undefined;
            resourceInputs["unknownMulticast"] = args ? args.unknownMulticast : undefined;
            resourceInputs["unknownUnicast"] = args ? args.unknownUnicast : undefined;
            resourceInputs["vdomparam"] = args ? args.vdomparam : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchcontrollerStormcontrol.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwitchcontrollerStormcontrol resources.
 */
export interface SwitchcontrollerStormcontrolState {
    /**
     * Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
     */
    broadcast?: pulumi.Input<string>;
    /**
     * Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
     */
    rate?: pulumi.Input<number>;
    /**
     * Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
     */
    unknownMulticast?: pulumi.Input<string>;
    /**
     * Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
     */
    unknownUnicast?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchcontrollerStormcontrol resource.
 */
export interface SwitchcontrollerStormcontrolArgs {
    /**
     * Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
     */
    broadcast?: pulumi.Input<string>;
    /**
     * Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
     */
    rate?: pulumi.Input<number>;
    /**
     * Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
     */
    unknownMulticast?: pulumi.Input<string>;
    /**
     * Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
     */
    unknownUnicast?: pulumi.Input<string>;
    /**
     * Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
     */
    vdomparam?: pulumi.Input<string>;
}
