// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports modifying system ntp setting for FortiManager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFmgSystemNtp(ctx, "test1", &fortios.FmgSystemNtpArgs{
//				Server:       pulumi.String("ntp1.fortinet.com"),
//				Status:       pulumi.String("enable"),
//				SyncInterval: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FmgSystemNtp struct {
	pulumi.CustomResourceState

	// IP address/hostname of NTP Server.
	Server pulumi.StringOutput `pulumi:"server"`
	// Enable/disable NTP.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// NTP sync interval (minute).
	SyncInterval pulumi.IntPtrOutput `pulumi:"syncInterval"`
}

// NewFmgSystemNtp registers a new resource with the given unique name, arguments, and options.
func NewFmgSystemNtp(ctx *pulumi.Context,
	name string, args *FmgSystemNtpArgs, opts ...pulumi.ResourceOption) (*FmgSystemNtp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FmgSystemNtp
	err := ctx.RegisterResource("fortios:index/fmgSystemNtp:FmgSystemNtp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFmgSystemNtp gets an existing FmgSystemNtp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFmgSystemNtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FmgSystemNtpState, opts ...pulumi.ResourceOption) (*FmgSystemNtp, error) {
	var resource FmgSystemNtp
	err := ctx.ReadResource("fortios:index/fmgSystemNtp:FmgSystemNtp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FmgSystemNtp resources.
type fmgSystemNtpState struct {
	// IP address/hostname of NTP Server.
	Server *string `pulumi:"server"`
	// Enable/disable NTP.
	Status *string `pulumi:"status"`
	// NTP sync interval (minute).
	SyncInterval *int `pulumi:"syncInterval"`
}

type FmgSystemNtpState struct {
	// IP address/hostname of NTP Server.
	Server pulumi.StringPtrInput
	// Enable/disable NTP.
	Status pulumi.StringPtrInput
	// NTP sync interval (minute).
	SyncInterval pulumi.IntPtrInput
}

func (FmgSystemNtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgSystemNtpState)(nil)).Elem()
}

type fmgSystemNtpArgs struct {
	// IP address/hostname of NTP Server.
	Server string `pulumi:"server"`
	// Enable/disable NTP.
	Status *string `pulumi:"status"`
	// NTP sync interval (minute).
	SyncInterval *int `pulumi:"syncInterval"`
}

// The set of arguments for constructing a FmgSystemNtp resource.
type FmgSystemNtpArgs struct {
	// IP address/hostname of NTP Server.
	Server pulumi.StringInput
	// Enable/disable NTP.
	Status pulumi.StringPtrInput
	// NTP sync interval (minute).
	SyncInterval pulumi.IntPtrInput
}

func (FmgSystemNtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgSystemNtpArgs)(nil)).Elem()
}

type FmgSystemNtpInput interface {
	pulumi.Input

	ToFmgSystemNtpOutput() FmgSystemNtpOutput
	ToFmgSystemNtpOutputWithContext(ctx context.Context) FmgSystemNtpOutput
}

func (*FmgSystemNtp) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgSystemNtp)(nil)).Elem()
}

func (i *FmgSystemNtp) ToFmgSystemNtpOutput() FmgSystemNtpOutput {
	return i.ToFmgSystemNtpOutputWithContext(context.Background())
}

func (i *FmgSystemNtp) ToFmgSystemNtpOutputWithContext(ctx context.Context) FmgSystemNtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemNtpOutput)
}

// FmgSystemNtpArrayInput is an input type that accepts FmgSystemNtpArray and FmgSystemNtpArrayOutput values.
// You can construct a concrete instance of `FmgSystemNtpArrayInput` via:
//
//	FmgSystemNtpArray{ FmgSystemNtpArgs{...} }
type FmgSystemNtpArrayInput interface {
	pulumi.Input

	ToFmgSystemNtpArrayOutput() FmgSystemNtpArrayOutput
	ToFmgSystemNtpArrayOutputWithContext(context.Context) FmgSystemNtpArrayOutput
}

type FmgSystemNtpArray []FmgSystemNtpInput

func (FmgSystemNtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgSystemNtp)(nil)).Elem()
}

func (i FmgSystemNtpArray) ToFmgSystemNtpArrayOutput() FmgSystemNtpArrayOutput {
	return i.ToFmgSystemNtpArrayOutputWithContext(context.Background())
}

func (i FmgSystemNtpArray) ToFmgSystemNtpArrayOutputWithContext(ctx context.Context) FmgSystemNtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemNtpArrayOutput)
}

// FmgSystemNtpMapInput is an input type that accepts FmgSystemNtpMap and FmgSystemNtpMapOutput values.
// You can construct a concrete instance of `FmgSystemNtpMapInput` via:
//
//	FmgSystemNtpMap{ "key": FmgSystemNtpArgs{...} }
type FmgSystemNtpMapInput interface {
	pulumi.Input

	ToFmgSystemNtpMapOutput() FmgSystemNtpMapOutput
	ToFmgSystemNtpMapOutputWithContext(context.Context) FmgSystemNtpMapOutput
}

type FmgSystemNtpMap map[string]FmgSystemNtpInput

func (FmgSystemNtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgSystemNtp)(nil)).Elem()
}

func (i FmgSystemNtpMap) ToFmgSystemNtpMapOutput() FmgSystemNtpMapOutput {
	return i.ToFmgSystemNtpMapOutputWithContext(context.Background())
}

func (i FmgSystemNtpMap) ToFmgSystemNtpMapOutputWithContext(ctx context.Context) FmgSystemNtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemNtpMapOutput)
}

type FmgSystemNtpOutput struct{ *pulumi.OutputState }

func (FmgSystemNtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgSystemNtp)(nil)).Elem()
}

func (o FmgSystemNtpOutput) ToFmgSystemNtpOutput() FmgSystemNtpOutput {
	return o
}

func (o FmgSystemNtpOutput) ToFmgSystemNtpOutputWithContext(ctx context.Context) FmgSystemNtpOutput {
	return o
}

// IP address/hostname of NTP Server.
func (o FmgSystemNtpOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgSystemNtp) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// Enable/disable NTP.
func (o FmgSystemNtpOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgSystemNtp) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// NTP sync interval (minute).
func (o FmgSystemNtpOutput) SyncInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FmgSystemNtp) pulumi.IntPtrOutput { return v.SyncInterval }).(pulumi.IntPtrOutput)
}

type FmgSystemNtpArrayOutput struct{ *pulumi.OutputState }

func (FmgSystemNtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgSystemNtp)(nil)).Elem()
}

func (o FmgSystemNtpArrayOutput) ToFmgSystemNtpArrayOutput() FmgSystemNtpArrayOutput {
	return o
}

func (o FmgSystemNtpArrayOutput) ToFmgSystemNtpArrayOutputWithContext(ctx context.Context) FmgSystemNtpArrayOutput {
	return o
}

func (o FmgSystemNtpArrayOutput) Index(i pulumi.IntInput) FmgSystemNtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FmgSystemNtp {
		return vs[0].([]*FmgSystemNtp)[vs[1].(int)]
	}).(FmgSystemNtpOutput)
}

type FmgSystemNtpMapOutput struct{ *pulumi.OutputState }

func (FmgSystemNtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgSystemNtp)(nil)).Elem()
}

func (o FmgSystemNtpMapOutput) ToFmgSystemNtpMapOutput() FmgSystemNtpMapOutput {
	return o
}

func (o FmgSystemNtpMapOutput) ToFmgSystemNtpMapOutputWithContext(ctx context.Context) FmgSystemNtpMapOutput {
	return o
}

func (o FmgSystemNtpMapOutput) MapIndex(k pulumi.StringInput) FmgSystemNtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FmgSystemNtp {
		return vs[0].(map[string]*FmgSystemNtp)[vs[1].(string)]
	}).(FmgSystemNtpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemNtpInput)(nil)).Elem(), &FmgSystemNtp{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemNtpArrayInput)(nil)).Elem(), FmgSystemNtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemNtpMapInput)(nil)).Elem(), FmgSystemNtpMap{})
	pulumi.RegisterOutputType(FmgSystemNtpOutput{})
	pulumi.RegisterOutputType(FmgSystemNtpArrayOutput{})
	pulumi.RegisterOutputType(FmgSystemNtpMapOutput{})
}
