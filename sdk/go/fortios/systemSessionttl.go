// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure global session TTL timers for this FortiGate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemSessionttl(ctx, "trname", &fortios.SystemSessionttlArgs{
//				Default: pulumi.String("3600"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # System SessionTtl can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemSessionttl:SystemSessionttl labelname SystemSessionTtl
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemSessionttl:SystemSessionttl labelname SystemSessionTtl
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemSessionttl struct {
	pulumi.CustomResourceState

	// Default timeout.
	Default pulumi.StringOutput `pulumi:"default"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Session TTL port. The structure of `port` block is documented below.
	Ports SystemSessionttlPortArrayOutput `pulumi:"ports"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemSessionttl registers a new resource with the given unique name, arguments, and options.
func NewSystemSessionttl(ctx *pulumi.Context,
	name string, args *SystemSessionttlArgs, opts ...pulumi.ResourceOption) (*SystemSessionttl, error) {
	if args == nil {
		args = &SystemSessionttlArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemSessionttl
	err := ctx.RegisterResource("fortios:index/systemSessionttl:SystemSessionttl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemSessionttl gets an existing SystemSessionttl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemSessionttl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemSessionttlState, opts ...pulumi.ResourceOption) (*SystemSessionttl, error) {
	var resource SystemSessionttl
	err := ctx.ReadResource("fortios:index/systemSessionttl:SystemSessionttl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemSessionttl resources.
type systemSessionttlState struct {
	// Default timeout.
	Default *string `pulumi:"default"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Session TTL port. The structure of `port` block is documented below.
	Ports []SystemSessionttlPort `pulumi:"ports"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemSessionttlState struct {
	// Default timeout.
	Default pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Session TTL port. The structure of `port` block is documented below.
	Ports SystemSessionttlPortArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemSessionttlState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemSessionttlState)(nil)).Elem()
}

type systemSessionttlArgs struct {
	// Default timeout.
	Default *string `pulumi:"default"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Session TTL port. The structure of `port` block is documented below.
	Ports []SystemSessionttlPort `pulumi:"ports"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemSessionttl resource.
type SystemSessionttlArgs struct {
	// Default timeout.
	Default pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Session TTL port. The structure of `port` block is documented below.
	Ports SystemSessionttlPortArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemSessionttlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemSessionttlArgs)(nil)).Elem()
}

type SystemSessionttlInput interface {
	pulumi.Input

	ToSystemSessionttlOutput() SystemSessionttlOutput
	ToSystemSessionttlOutputWithContext(ctx context.Context) SystemSessionttlOutput
}

func (*SystemSessionttl) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemSessionttl)(nil)).Elem()
}

func (i *SystemSessionttl) ToSystemSessionttlOutput() SystemSessionttlOutput {
	return i.ToSystemSessionttlOutputWithContext(context.Background())
}

func (i *SystemSessionttl) ToSystemSessionttlOutputWithContext(ctx context.Context) SystemSessionttlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSessionttlOutput)
}

// SystemSessionttlArrayInput is an input type that accepts SystemSessionttlArray and SystemSessionttlArrayOutput values.
// You can construct a concrete instance of `SystemSessionttlArrayInput` via:
//
//	SystemSessionttlArray{ SystemSessionttlArgs{...} }
type SystemSessionttlArrayInput interface {
	pulumi.Input

	ToSystemSessionttlArrayOutput() SystemSessionttlArrayOutput
	ToSystemSessionttlArrayOutputWithContext(context.Context) SystemSessionttlArrayOutput
}

type SystemSessionttlArray []SystemSessionttlInput

func (SystemSessionttlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemSessionttl)(nil)).Elem()
}

func (i SystemSessionttlArray) ToSystemSessionttlArrayOutput() SystemSessionttlArrayOutput {
	return i.ToSystemSessionttlArrayOutputWithContext(context.Background())
}

func (i SystemSessionttlArray) ToSystemSessionttlArrayOutputWithContext(ctx context.Context) SystemSessionttlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSessionttlArrayOutput)
}

// SystemSessionttlMapInput is an input type that accepts SystemSessionttlMap and SystemSessionttlMapOutput values.
// You can construct a concrete instance of `SystemSessionttlMapInput` via:
//
//	SystemSessionttlMap{ "key": SystemSessionttlArgs{...} }
type SystemSessionttlMapInput interface {
	pulumi.Input

	ToSystemSessionttlMapOutput() SystemSessionttlMapOutput
	ToSystemSessionttlMapOutputWithContext(context.Context) SystemSessionttlMapOutput
}

type SystemSessionttlMap map[string]SystemSessionttlInput

func (SystemSessionttlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemSessionttl)(nil)).Elem()
}

func (i SystemSessionttlMap) ToSystemSessionttlMapOutput() SystemSessionttlMapOutput {
	return i.ToSystemSessionttlMapOutputWithContext(context.Background())
}

func (i SystemSessionttlMap) ToSystemSessionttlMapOutputWithContext(ctx context.Context) SystemSessionttlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSessionttlMapOutput)
}

type SystemSessionttlOutput struct{ *pulumi.OutputState }

func (SystemSessionttlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemSessionttl)(nil)).Elem()
}

func (o SystemSessionttlOutput) ToSystemSessionttlOutput() SystemSessionttlOutput {
	return o
}

func (o SystemSessionttlOutput) ToSystemSessionttlOutputWithContext(ctx context.Context) SystemSessionttlOutput {
	return o
}

// Default timeout.
func (o SystemSessionttlOutput) Default() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSessionttl) pulumi.StringOutput { return v.Default }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SystemSessionttlOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemSessionttl) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Session TTL port. The structure of `port` block is documented below.
func (o SystemSessionttlOutput) Ports() SystemSessionttlPortArrayOutput {
	return o.ApplyT(func(v *SystemSessionttl) SystemSessionttlPortArrayOutput { return v.Ports }).(SystemSessionttlPortArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemSessionttlOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemSessionttl) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemSessionttlArrayOutput struct{ *pulumi.OutputState }

func (SystemSessionttlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemSessionttl)(nil)).Elem()
}

func (o SystemSessionttlArrayOutput) ToSystemSessionttlArrayOutput() SystemSessionttlArrayOutput {
	return o
}

func (o SystemSessionttlArrayOutput) ToSystemSessionttlArrayOutputWithContext(ctx context.Context) SystemSessionttlArrayOutput {
	return o
}

func (o SystemSessionttlArrayOutput) Index(i pulumi.IntInput) SystemSessionttlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemSessionttl {
		return vs[0].([]*SystemSessionttl)[vs[1].(int)]
	}).(SystemSessionttlOutput)
}

type SystemSessionttlMapOutput struct{ *pulumi.OutputState }

func (SystemSessionttlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemSessionttl)(nil)).Elem()
}

func (o SystemSessionttlMapOutput) ToSystemSessionttlMapOutput() SystemSessionttlMapOutput {
	return o
}

func (o SystemSessionttlMapOutput) ToSystemSessionttlMapOutputWithContext(ctx context.Context) SystemSessionttlMapOutput {
	return o
}

func (o SystemSessionttlMapOutput) MapIndex(k pulumi.StringInput) SystemSessionttlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemSessionttl {
		return vs[0].(map[string]*SystemSessionttl)[vs[1].(string)]
	}).(SystemSessionttlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSessionttlInput)(nil)).Elem(), &SystemSessionttl{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSessionttlArrayInput)(nil)).Elem(), SystemSessionttlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSessionttlMapInput)(nil)).Elem(), SystemSessionttlMap{})
	pulumi.RegisterOutputType(SystemSessionttlOutput{})
	pulumi.RegisterOutputType(SystemSessionttlArrayOutput{})
	pulumi.RegisterOutputType(SystemSessionttlMapOutput{})
}
