// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure an aggregate of IPsec tunnels.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			trname1VpnipsecPhase1interface, err := fortios.NewVpnipsecPhase1interface(ctx, "trname1VpnipsecPhase1interface", &fortios.VpnipsecPhase1interfaceArgs{
//				AcctVerify:             pulumi.String("disable"),
//				AddGwRoute:             pulumi.String("disable"),
//				AddRoute:               pulumi.String("enable"),
//				AssignIp:               pulumi.String("enable"),
//				AssignIpFrom:           pulumi.String("range"),
//				Authmethod:             pulumi.String("psk"),
//				AutoDiscoveryForwarder: pulumi.String("disable"),
//				AutoDiscoveryPsk:       pulumi.String("disable"),
//				AutoDiscoveryReceiver:  pulumi.String("disable"),
//				AutoDiscoverySender:    pulumi.String("disable"),
//				AutoNegotiate:          pulumi.String("enable"),
//				CertIdValidation:       pulumi.String("enable"),
//				ChildlessIke:           pulumi.String("disable"),
//				ClientAutoNegotiate:    pulumi.String("disable"),
//				ClientKeepAlive:        pulumi.String("disable"),
//				DefaultGw:              pulumi.String("0.0.0.0"),
//				DefaultGwPriority:      pulumi.Int(0),
//				Dhgrp:                  pulumi.String("14 5"),
//				DigitalSignatureAuth:   pulumi.String("disable"),
//				Distance:               pulumi.Int(15),
//				DnsMode:                pulumi.String("manual"),
//				Dpd:                    pulumi.String("on-demand"),
//				DpdRetrycount:          pulumi.Int(3),
//				DpdRetryinterval:       pulumi.String("20"),
//				Eap:                    pulumi.String("disable"),
//				EapIdentity:            pulumi.String("use-id-payload"),
//				EncapLocalGw4:          pulumi.String("0.0.0.0"),
//				EncapLocalGw6:          pulumi.String("::"),
//				EncapRemoteGw4:         pulumi.String("0.0.0.0"),
//				EncapRemoteGw6:         pulumi.String("::"),
//				Encapsulation:          pulumi.String("none"),
//				EncapsulationAddress:   pulumi.String("ike"),
//				EnforceUniqueId:        pulumi.String("disable"),
//				ExchangeInterfaceIp:    pulumi.String("disable"),
//				ExchangeIpAddr4:        pulumi.String("0.0.0.0"),
//				ExchangeIpAddr6:        pulumi.String("::"),
//				ForticlientEnforcement: pulumi.String("disable"),
//				Fragmentation:          pulumi.String("enable"),
//				FragmentationMtu:       pulumi.Int(1200),
//				GroupAuthentication:    pulumi.String("disable"),
//				HaSyncEspSeqno:         pulumi.String("enable"),
//				IdleTimeout:            pulumi.String("disable"),
//				IdleTimeoutinterval:    pulumi.Int(15),
//				IkeVersion:             pulumi.String("1"),
//				IncludeLocalLan:        pulumi.String("disable"),
//				Interface:              pulumi.String("port3"),
//				IpVersion:              pulumi.String("4"),
//				Ipv4DnsServer1:         pulumi.String("0.0.0.0"),
//				Ipv4DnsServer2:         pulumi.String("0.0.0.0"),
//				Ipv4DnsServer3:         pulumi.String("0.0.0.0"),
//				Ipv4EndIp:              pulumi.String("0.0.0.0"),
//				Ipv4Netmask:            pulumi.String("255.255.255.255"),
//				Ipv4StartIp:            pulumi.String("0.0.0.0"),
//				Ipv4WinsServer1:        pulumi.String("0.0.0.0"),
//				Ipv4WinsServer2:        pulumi.String("0.0.0.0"),
//				Ipv6DnsServer1:         pulumi.String("::"),
//				Ipv6DnsServer2:         pulumi.String("::"),
//				Ipv6DnsServer3:         pulumi.String("::"),
//				Ipv6EndIp:              pulumi.String("::"),
//				Ipv6Prefix:             pulumi.Int(128),
//				Ipv6StartIp:            pulumi.String("::"),
//				Keepalive:              pulumi.Int(10),
//				Keylife:                pulumi.Int(86400),
//				LocalGw:                pulumi.String("0.0.0.0"),
//				LocalGw6:               pulumi.String("::"),
//				LocalidType:            pulumi.String("auto"),
//				MeshSelectorType:       pulumi.String("disable"),
//				Mode:                   pulumi.String("main"),
//				ModeCfg:                pulumi.String("disable"),
//				MonitorHoldDownDelay:   pulumi.Int(0),
//				MonitorHoldDownTime:    pulumi.String("00:00"),
//				MonitorHoldDownType:    pulumi.String("immediate"),
//				MonitorHoldDownWeekday: pulumi.String("sunday"),
//				Nattraversal:           pulumi.String("enable"),
//				NegotiateTimeout:       pulumi.Int(30),
//				NetDevice:              pulumi.String("disable"),
//				PassiveMode:            pulumi.String("disable"),
//				Peertype:               pulumi.String("any"),
//				Ppk:                    pulumi.String("disable"),
//				Priority:               pulumi.Int(0),
//				Proposal:               pulumi.String("aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1"),
//				Psksecret:              pulumi.String("eweeeeeeeecee"),
//				Reauth:                 pulumi.String("disable"),
//				Rekey:                  pulumi.String("enable"),
//				RemoteGw:               pulumi.String("2.2.2.2"),
//				RemoteGw6:              pulumi.String("::"),
//				RsaSignatureFormat:     pulumi.String("pkcs1"),
//				SavePassword:           pulumi.String("disable"),
//				SendCertChain:          pulumi.String("enable"),
//				SignatureHashAlg:       pulumi.String("sha2-512 sha2-384 sha2-256 sha1"),
//				SuiteB:                 pulumi.String("disable"),
//				TunnelSearch:           pulumi.String("selectors"),
//				Type:                   pulumi.String("static"),
//				UnitySupport:           pulumi.String("enable"),
//				WizardType:             pulumi.String("custom"),
//				Xauthtype:              pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fortios.NewVpnipsecPhase2interface(ctx, "trname1VpnipsecPhase2interface", &fortios.VpnipsecPhase2interfaceArgs{
//				AddRoute:               pulumi.String("phase1"),
//				AutoDiscoveryForwarder: pulumi.String("phase1"),
//				AutoDiscoverySender:    pulumi.String("phase1"),
//				AutoNegotiate:          pulumi.String("disable"),
//				DhcpIpsec:              pulumi.String("disable"),
//				Dhgrp:                  pulumi.String("14 5"),
//				DstAddrType:            pulumi.String("subnet"),
//				DstEndIp6:              pulumi.String("::"),
//				DstPort:                pulumi.Int(0),
//				DstSubnet:              pulumi.String("0.0.0.0 0.0.0.0"),
//				Encapsulation:          pulumi.String("tunnel-mode"),
//				Keepalive:              pulumi.String("disable"),
//				KeylifeType:            pulumi.String("seconds"),
//				Keylifekbs:             pulumi.Int(5120),
//				Keylifeseconds:         pulumi.Int(43200),
//				L2tp:                   pulumi.String("disable"),
//				Pfs:                    pulumi.String("enable"),
//				Phase1name:             trname1VpnipsecPhase1interface.Name,
//				Proposal:               pulumi.String("aes128-sha1 aes256-sha1 aes128-sha256 aes256-sha256 aes128gcm aes256gcm chacha20poly1305"),
//				Protocol:               pulumi.Int(0),
//				Replay:                 pulumi.String("enable"),
//				RouteOverlap:           pulumi.String("use-new"),
//				SingleSource:           pulumi.String("disable"),
//				SrcAddrType:            pulumi.String("subnet"),
//				SrcEndIp6:              pulumi.String("::"),
//				SrcPort:                pulumi.Int(0),
//				SrcSubnet:              pulumi.String("0.0.0.0 0.0.0.0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fortios.NewSystemIpsecaggregate(ctx, "trname", &fortios.SystemIpsecaggregateArgs{
//				Algorithm: pulumi.String("round-robin"),
//				Members: fortios.SystemIpsecaggregateMemberArray{
//					&fortios.SystemIpsecaggregateMemberArgs{
//						TunnelName: trname1VpnipsecPhase1interface.Name,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # System IpsecAggregate can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemIpsecaggregate:SystemIpsecaggregate labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemIpsecaggregate:SystemIpsecaggregate labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemIpsecaggregate struct {
	pulumi.CustomResourceState

	// Frame distribution algorithm.
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Member tunnels of the aggregate. The structure of `member` block is documented below.
	Members SystemIpsecaggregateMemberArrayOutput `pulumi:"members"`
	// IPsec aggregate name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemIpsecaggregate registers a new resource with the given unique name, arguments, and options.
func NewSystemIpsecaggregate(ctx *pulumi.Context,
	name string, args *SystemIpsecaggregateArgs, opts ...pulumi.ResourceOption) (*SystemIpsecaggregate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemIpsecaggregate
	err := ctx.RegisterResource("fortios:index/systemIpsecaggregate:SystemIpsecaggregate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemIpsecaggregate gets an existing SystemIpsecaggregate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemIpsecaggregate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemIpsecaggregateState, opts ...pulumi.ResourceOption) (*SystemIpsecaggregate, error) {
	var resource SystemIpsecaggregate
	err := ctx.ReadResource("fortios:index/systemIpsecaggregate:SystemIpsecaggregate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemIpsecaggregate resources.
type systemIpsecaggregateState struct {
	// Frame distribution algorithm.
	Algorithm *string `pulumi:"algorithm"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Member tunnels of the aggregate. The structure of `member` block is documented below.
	Members []SystemIpsecaggregateMember `pulumi:"members"`
	// IPsec aggregate name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemIpsecaggregateState struct {
	// Frame distribution algorithm.
	Algorithm pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Member tunnels of the aggregate. The structure of `member` block is documented below.
	Members SystemIpsecaggregateMemberArrayInput
	// IPsec aggregate name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemIpsecaggregateState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpsecaggregateState)(nil)).Elem()
}

type systemIpsecaggregateArgs struct {
	// Frame distribution algorithm.
	Algorithm *string `pulumi:"algorithm"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Member tunnels of the aggregate. The structure of `member` block is documented below.
	Members []SystemIpsecaggregateMember `pulumi:"members"`
	// IPsec aggregate name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemIpsecaggregate resource.
type SystemIpsecaggregateArgs struct {
	// Frame distribution algorithm.
	Algorithm pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Member tunnels of the aggregate. The structure of `member` block is documented below.
	Members SystemIpsecaggregateMemberArrayInput
	// IPsec aggregate name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemIpsecaggregateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpsecaggregateArgs)(nil)).Elem()
}

type SystemIpsecaggregateInput interface {
	pulumi.Input

	ToSystemIpsecaggregateOutput() SystemIpsecaggregateOutput
	ToSystemIpsecaggregateOutputWithContext(ctx context.Context) SystemIpsecaggregateOutput
}

func (*SystemIpsecaggregate) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpsecaggregate)(nil)).Elem()
}

func (i *SystemIpsecaggregate) ToSystemIpsecaggregateOutput() SystemIpsecaggregateOutput {
	return i.ToSystemIpsecaggregateOutputWithContext(context.Background())
}

func (i *SystemIpsecaggregate) ToSystemIpsecaggregateOutputWithContext(ctx context.Context) SystemIpsecaggregateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsecaggregateOutput)
}

// SystemIpsecaggregateArrayInput is an input type that accepts SystemIpsecaggregateArray and SystemIpsecaggregateArrayOutput values.
// You can construct a concrete instance of `SystemIpsecaggregateArrayInput` via:
//
//	SystemIpsecaggregateArray{ SystemIpsecaggregateArgs{...} }
type SystemIpsecaggregateArrayInput interface {
	pulumi.Input

	ToSystemIpsecaggregateArrayOutput() SystemIpsecaggregateArrayOutput
	ToSystemIpsecaggregateArrayOutputWithContext(context.Context) SystemIpsecaggregateArrayOutput
}

type SystemIpsecaggregateArray []SystemIpsecaggregateInput

func (SystemIpsecaggregateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpsecaggregate)(nil)).Elem()
}

func (i SystemIpsecaggregateArray) ToSystemIpsecaggregateArrayOutput() SystemIpsecaggregateArrayOutput {
	return i.ToSystemIpsecaggregateArrayOutputWithContext(context.Background())
}

func (i SystemIpsecaggregateArray) ToSystemIpsecaggregateArrayOutputWithContext(ctx context.Context) SystemIpsecaggregateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsecaggregateArrayOutput)
}

// SystemIpsecaggregateMapInput is an input type that accepts SystemIpsecaggregateMap and SystemIpsecaggregateMapOutput values.
// You can construct a concrete instance of `SystemIpsecaggregateMapInput` via:
//
//	SystemIpsecaggregateMap{ "key": SystemIpsecaggregateArgs{...} }
type SystemIpsecaggregateMapInput interface {
	pulumi.Input

	ToSystemIpsecaggregateMapOutput() SystemIpsecaggregateMapOutput
	ToSystemIpsecaggregateMapOutputWithContext(context.Context) SystemIpsecaggregateMapOutput
}

type SystemIpsecaggregateMap map[string]SystemIpsecaggregateInput

func (SystemIpsecaggregateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpsecaggregate)(nil)).Elem()
}

func (i SystemIpsecaggregateMap) ToSystemIpsecaggregateMapOutput() SystemIpsecaggregateMapOutput {
	return i.ToSystemIpsecaggregateMapOutputWithContext(context.Background())
}

func (i SystemIpsecaggregateMap) ToSystemIpsecaggregateMapOutputWithContext(ctx context.Context) SystemIpsecaggregateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpsecaggregateMapOutput)
}

type SystemIpsecaggregateOutput struct{ *pulumi.OutputState }

func (SystemIpsecaggregateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpsecaggregate)(nil)).Elem()
}

func (o SystemIpsecaggregateOutput) ToSystemIpsecaggregateOutput() SystemIpsecaggregateOutput {
	return o
}

func (o SystemIpsecaggregateOutput) ToSystemIpsecaggregateOutputWithContext(ctx context.Context) SystemIpsecaggregateOutput {
	return o
}

// Frame distribution algorithm.
func (o SystemIpsecaggregateOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpsecaggregate) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SystemIpsecaggregateOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIpsecaggregate) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Member tunnels of the aggregate. The structure of `member` block is documented below.
func (o SystemIpsecaggregateOutput) Members() SystemIpsecaggregateMemberArrayOutput {
	return o.ApplyT(func(v *SystemIpsecaggregate) SystemIpsecaggregateMemberArrayOutput { return v.Members }).(SystemIpsecaggregateMemberArrayOutput)
}

// IPsec aggregate name.
func (o SystemIpsecaggregateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpsecaggregate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemIpsecaggregateOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIpsecaggregate) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemIpsecaggregateArrayOutput struct{ *pulumi.OutputState }

func (SystemIpsecaggregateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpsecaggregate)(nil)).Elem()
}

func (o SystemIpsecaggregateArrayOutput) ToSystemIpsecaggregateArrayOutput() SystemIpsecaggregateArrayOutput {
	return o
}

func (o SystemIpsecaggregateArrayOutput) ToSystemIpsecaggregateArrayOutputWithContext(ctx context.Context) SystemIpsecaggregateArrayOutput {
	return o
}

func (o SystemIpsecaggregateArrayOutput) Index(i pulumi.IntInput) SystemIpsecaggregateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemIpsecaggregate {
		return vs[0].([]*SystemIpsecaggregate)[vs[1].(int)]
	}).(SystemIpsecaggregateOutput)
}

type SystemIpsecaggregateMapOutput struct{ *pulumi.OutputState }

func (SystemIpsecaggregateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpsecaggregate)(nil)).Elem()
}

func (o SystemIpsecaggregateMapOutput) ToSystemIpsecaggregateMapOutput() SystemIpsecaggregateMapOutput {
	return o
}

func (o SystemIpsecaggregateMapOutput) ToSystemIpsecaggregateMapOutputWithContext(ctx context.Context) SystemIpsecaggregateMapOutput {
	return o
}

func (o SystemIpsecaggregateMapOutput) MapIndex(k pulumi.StringInput) SystemIpsecaggregateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemIpsecaggregate {
		return vs[0].(map[string]*SystemIpsecaggregate)[vs[1].(string)]
	}).(SystemIpsecaggregateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpsecaggregateInput)(nil)).Elem(), &SystemIpsecaggregate{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpsecaggregateArrayInput)(nil)).Elem(), SystemIpsecaggregateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpsecaggregateMapInput)(nil)).Elem(), SystemIpsecaggregateMap{})
	pulumi.RegisterOutputType(SystemIpsecaggregateOutput{})
	pulumi.RegisterOutputType(SystemIpsecaggregateArrayOutput{})
	pulumi.RegisterOutputType(SystemIpsecaggregateMapOutput{})
}
