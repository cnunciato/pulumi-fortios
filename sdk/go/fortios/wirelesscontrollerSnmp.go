// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure SNMP. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// # WirelessController Snmp can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerSnmp:WirelesscontrollerSnmp labelname WirelessControllerSnmp
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerSnmp:WirelesscontrollerSnmp labelname WirelessControllerSnmp
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WirelesscontrollerSnmp struct {
	pulumi.CustomResourceState

	// SNMP Community Configuration. The structure of `community` block is documented below.
	Communities WirelesscontrollerSnmpCommunityArrayOutput `pulumi:"communities"`
	// Contact Information.
	ContactInfo pulumi.StringOutput `pulumi:"contactInfo"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// AC SNMP engineId string (maximum 24 characters).
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	// CPU usage when trap is sent.
	TrapHighCpuThreshold pulumi.IntOutput `pulumi:"trapHighCpuThreshold"`
	// Memory usage when trap is sent.
	TrapHighMemThreshold pulumi.IntOutput `pulumi:"trapHighMemThreshold"`
	// SNMP User Configuration. The structure of `user` block is documented below.
	Users WirelesscontrollerSnmpUserArrayOutput `pulumi:"users"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelesscontrollerSnmp registers a new resource with the given unique name, arguments, and options.
func NewWirelesscontrollerSnmp(ctx *pulumi.Context,
	name string, args *WirelesscontrollerSnmpArgs, opts ...pulumi.ResourceOption) (*WirelesscontrollerSnmp, error) {
	if args == nil {
		args = &WirelesscontrollerSnmpArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelesscontrollerSnmp
	err := ctx.RegisterResource("fortios:index/wirelesscontrollerSnmp:WirelesscontrollerSnmp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelesscontrollerSnmp gets an existing WirelesscontrollerSnmp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelesscontrollerSnmp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelesscontrollerSnmpState, opts ...pulumi.ResourceOption) (*WirelesscontrollerSnmp, error) {
	var resource WirelesscontrollerSnmp
	err := ctx.ReadResource("fortios:index/wirelesscontrollerSnmp:WirelesscontrollerSnmp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelesscontrollerSnmp resources.
type wirelesscontrollerSnmpState struct {
	// SNMP Community Configuration. The structure of `community` block is documented below.
	Communities []WirelesscontrollerSnmpCommunity `pulumi:"communities"`
	// Contact Information.
	ContactInfo *string `pulumi:"contactInfo"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// AC SNMP engineId string (maximum 24 characters).
	EngineId *string `pulumi:"engineId"`
	// CPU usage when trap is sent.
	TrapHighCpuThreshold *int `pulumi:"trapHighCpuThreshold"`
	// Memory usage when trap is sent.
	TrapHighMemThreshold *int `pulumi:"trapHighMemThreshold"`
	// SNMP User Configuration. The structure of `user` block is documented below.
	Users []WirelesscontrollerSnmpUser `pulumi:"users"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WirelesscontrollerSnmpState struct {
	// SNMP Community Configuration. The structure of `community` block is documented below.
	Communities WirelesscontrollerSnmpCommunityArrayInput
	// Contact Information.
	ContactInfo pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// AC SNMP engineId string (maximum 24 characters).
	EngineId pulumi.StringPtrInput
	// CPU usage when trap is sent.
	TrapHighCpuThreshold pulumi.IntPtrInput
	// Memory usage when trap is sent.
	TrapHighMemThreshold pulumi.IntPtrInput
	// SNMP User Configuration. The structure of `user` block is documented below.
	Users WirelesscontrollerSnmpUserArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelesscontrollerSnmpState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerSnmpState)(nil)).Elem()
}

type wirelesscontrollerSnmpArgs struct {
	// SNMP Community Configuration. The structure of `community` block is documented below.
	Communities []WirelesscontrollerSnmpCommunity `pulumi:"communities"`
	// Contact Information.
	ContactInfo *string `pulumi:"contactInfo"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// AC SNMP engineId string (maximum 24 characters).
	EngineId *string `pulumi:"engineId"`
	// CPU usage when trap is sent.
	TrapHighCpuThreshold *int `pulumi:"trapHighCpuThreshold"`
	// Memory usage when trap is sent.
	TrapHighMemThreshold *int `pulumi:"trapHighMemThreshold"`
	// SNMP User Configuration. The structure of `user` block is documented below.
	Users []WirelesscontrollerSnmpUser `pulumi:"users"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelesscontrollerSnmp resource.
type WirelesscontrollerSnmpArgs struct {
	// SNMP Community Configuration. The structure of `community` block is documented below.
	Communities WirelesscontrollerSnmpCommunityArrayInput
	// Contact Information.
	ContactInfo pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// AC SNMP engineId string (maximum 24 characters).
	EngineId pulumi.StringPtrInput
	// CPU usage when trap is sent.
	TrapHighCpuThreshold pulumi.IntPtrInput
	// Memory usage when trap is sent.
	TrapHighMemThreshold pulumi.IntPtrInput
	// SNMP User Configuration. The structure of `user` block is documented below.
	Users WirelesscontrollerSnmpUserArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelesscontrollerSnmpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerSnmpArgs)(nil)).Elem()
}

type WirelesscontrollerSnmpInput interface {
	pulumi.Input

	ToWirelesscontrollerSnmpOutput() WirelesscontrollerSnmpOutput
	ToWirelesscontrollerSnmpOutputWithContext(ctx context.Context) WirelesscontrollerSnmpOutput
}

func (*WirelesscontrollerSnmp) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerSnmp)(nil)).Elem()
}

func (i *WirelesscontrollerSnmp) ToWirelesscontrollerSnmpOutput() WirelesscontrollerSnmpOutput {
	return i.ToWirelesscontrollerSnmpOutputWithContext(context.Background())
}

func (i *WirelesscontrollerSnmp) ToWirelesscontrollerSnmpOutputWithContext(ctx context.Context) WirelesscontrollerSnmpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerSnmpOutput)
}

// WirelesscontrollerSnmpArrayInput is an input type that accepts WirelesscontrollerSnmpArray and WirelesscontrollerSnmpArrayOutput values.
// You can construct a concrete instance of `WirelesscontrollerSnmpArrayInput` via:
//
//	WirelesscontrollerSnmpArray{ WirelesscontrollerSnmpArgs{...} }
type WirelesscontrollerSnmpArrayInput interface {
	pulumi.Input

	ToWirelesscontrollerSnmpArrayOutput() WirelesscontrollerSnmpArrayOutput
	ToWirelesscontrollerSnmpArrayOutputWithContext(context.Context) WirelesscontrollerSnmpArrayOutput
}

type WirelesscontrollerSnmpArray []WirelesscontrollerSnmpInput

func (WirelesscontrollerSnmpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerSnmp)(nil)).Elem()
}

func (i WirelesscontrollerSnmpArray) ToWirelesscontrollerSnmpArrayOutput() WirelesscontrollerSnmpArrayOutput {
	return i.ToWirelesscontrollerSnmpArrayOutputWithContext(context.Background())
}

func (i WirelesscontrollerSnmpArray) ToWirelesscontrollerSnmpArrayOutputWithContext(ctx context.Context) WirelesscontrollerSnmpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerSnmpArrayOutput)
}

// WirelesscontrollerSnmpMapInput is an input type that accepts WirelesscontrollerSnmpMap and WirelesscontrollerSnmpMapOutput values.
// You can construct a concrete instance of `WirelesscontrollerSnmpMapInput` via:
//
//	WirelesscontrollerSnmpMap{ "key": WirelesscontrollerSnmpArgs{...} }
type WirelesscontrollerSnmpMapInput interface {
	pulumi.Input

	ToWirelesscontrollerSnmpMapOutput() WirelesscontrollerSnmpMapOutput
	ToWirelesscontrollerSnmpMapOutputWithContext(context.Context) WirelesscontrollerSnmpMapOutput
}

type WirelesscontrollerSnmpMap map[string]WirelesscontrollerSnmpInput

func (WirelesscontrollerSnmpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerSnmp)(nil)).Elem()
}

func (i WirelesscontrollerSnmpMap) ToWirelesscontrollerSnmpMapOutput() WirelesscontrollerSnmpMapOutput {
	return i.ToWirelesscontrollerSnmpMapOutputWithContext(context.Background())
}

func (i WirelesscontrollerSnmpMap) ToWirelesscontrollerSnmpMapOutputWithContext(ctx context.Context) WirelesscontrollerSnmpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerSnmpMapOutput)
}

type WirelesscontrollerSnmpOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerSnmpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerSnmp)(nil)).Elem()
}

func (o WirelesscontrollerSnmpOutput) ToWirelesscontrollerSnmpOutput() WirelesscontrollerSnmpOutput {
	return o
}

func (o WirelesscontrollerSnmpOutput) ToWirelesscontrollerSnmpOutputWithContext(ctx context.Context) WirelesscontrollerSnmpOutput {
	return o
}

// SNMP Community Configuration. The structure of `community` block is documented below.
func (o WirelesscontrollerSnmpOutput) Communities() WirelesscontrollerSnmpCommunityArrayOutput {
	return o.ApplyT(func(v *WirelesscontrollerSnmp) WirelesscontrollerSnmpCommunityArrayOutput { return v.Communities }).(WirelesscontrollerSnmpCommunityArrayOutput)
}

// Contact Information.
func (o WirelesscontrollerSnmpOutput) ContactInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerSnmp) pulumi.StringOutput { return v.ContactInfo }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o WirelesscontrollerSnmpOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerSnmp) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// AC SNMP engineId string (maximum 24 characters).
func (o WirelesscontrollerSnmpOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerSnmp) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

// CPU usage when trap is sent.
func (o WirelesscontrollerSnmpOutput) TrapHighCpuThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerSnmp) pulumi.IntOutput { return v.TrapHighCpuThreshold }).(pulumi.IntOutput)
}

// Memory usage when trap is sent.
func (o WirelesscontrollerSnmpOutput) TrapHighMemThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerSnmp) pulumi.IntOutput { return v.TrapHighMemThreshold }).(pulumi.IntOutput)
}

// SNMP User Configuration. The structure of `user` block is documented below.
func (o WirelesscontrollerSnmpOutput) Users() WirelesscontrollerSnmpUserArrayOutput {
	return o.ApplyT(func(v *WirelesscontrollerSnmp) WirelesscontrollerSnmpUserArrayOutput { return v.Users }).(WirelesscontrollerSnmpUserArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WirelesscontrollerSnmpOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerSnmp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WirelesscontrollerSnmpArrayOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerSnmpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerSnmp)(nil)).Elem()
}

func (o WirelesscontrollerSnmpArrayOutput) ToWirelesscontrollerSnmpArrayOutput() WirelesscontrollerSnmpArrayOutput {
	return o
}

func (o WirelesscontrollerSnmpArrayOutput) ToWirelesscontrollerSnmpArrayOutputWithContext(ctx context.Context) WirelesscontrollerSnmpArrayOutput {
	return o
}

func (o WirelesscontrollerSnmpArrayOutput) Index(i pulumi.IntInput) WirelesscontrollerSnmpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelesscontrollerSnmp {
		return vs[0].([]*WirelesscontrollerSnmp)[vs[1].(int)]
	}).(WirelesscontrollerSnmpOutput)
}

type WirelesscontrollerSnmpMapOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerSnmpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerSnmp)(nil)).Elem()
}

func (o WirelesscontrollerSnmpMapOutput) ToWirelesscontrollerSnmpMapOutput() WirelesscontrollerSnmpMapOutput {
	return o
}

func (o WirelesscontrollerSnmpMapOutput) ToWirelesscontrollerSnmpMapOutputWithContext(ctx context.Context) WirelesscontrollerSnmpMapOutput {
	return o
}

func (o WirelesscontrollerSnmpMapOutput) MapIndex(k pulumi.StringInput) WirelesscontrollerSnmpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelesscontrollerSnmp {
		return vs[0].(map[string]*WirelesscontrollerSnmp)[vs[1].(string)]
	}).(WirelesscontrollerSnmpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerSnmpInput)(nil)).Elem(), &WirelesscontrollerSnmp{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerSnmpArrayInput)(nil)).Elem(), WirelesscontrollerSnmpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerSnmpMapInput)(nil)).Elem(), WirelesscontrollerSnmpMap{})
	pulumi.RegisterOutputType(WirelesscontrollerSnmpOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerSnmpArrayOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerSnmpMapOutput{})
}
