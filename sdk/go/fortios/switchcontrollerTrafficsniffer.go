// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch RSPAN/ERSPAN traffic sniffing parameters. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// # SwitchController TrafficSniffer can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerTrafficsniffer:SwitchcontrollerTrafficsniffer labelname SwitchControllerTrafficSniffer
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerTrafficsniffer:SwitchcontrollerTrafficsniffer labelname SwitchControllerTrafficSniffer
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerTrafficsniffer struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Configure ERSPAN collector IP address.
	ErspanIp pulumi.StringOutput `pulumi:"erspanIp"`
	// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
	TargetIps SwitchcontrollerTrafficsnifferTargetIpArrayOutput `pulumi:"targetIps"`
	// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
	TargetMacs SwitchcontrollerTrafficsnifferTargetMacArrayOutput `pulumi:"targetMacs"`
	// Sniffer ports to filter. The structure of `targetPort` block is documented below.
	TargetPorts SwitchcontrollerTrafficsnifferTargetPortArrayOutput `pulumi:"targetPorts"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchcontrollerTrafficsniffer registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerTrafficsniffer(ctx *pulumi.Context,
	name string, args *SwitchcontrollerTrafficsnifferArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerTrafficsniffer, error) {
	if args == nil {
		args = &SwitchcontrollerTrafficsnifferArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerTrafficsniffer
	err := ctx.RegisterResource("fortios:index/switchcontrollerTrafficsniffer:SwitchcontrollerTrafficsniffer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerTrafficsniffer gets an existing SwitchcontrollerTrafficsniffer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerTrafficsniffer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerTrafficsnifferState, opts ...pulumi.ResourceOption) (*SwitchcontrollerTrafficsniffer, error) {
	var resource SwitchcontrollerTrafficsniffer
	err := ctx.ReadResource("fortios:index/switchcontrollerTrafficsniffer:SwitchcontrollerTrafficsniffer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerTrafficsniffer resources.
type switchcontrollerTrafficsnifferState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure ERSPAN collector IP address.
	ErspanIp *string `pulumi:"erspanIp"`
	// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
	Mode *string `pulumi:"mode"`
	// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
	TargetIps []SwitchcontrollerTrafficsnifferTargetIp `pulumi:"targetIps"`
	// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
	TargetMacs []SwitchcontrollerTrafficsnifferTargetMac `pulumi:"targetMacs"`
	// Sniffer ports to filter. The structure of `targetPort` block is documented below.
	TargetPorts []SwitchcontrollerTrafficsnifferTargetPort `pulumi:"targetPorts"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchcontrollerTrafficsnifferState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure ERSPAN collector IP address.
	ErspanIp pulumi.StringPtrInput
	// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
	Mode pulumi.StringPtrInput
	// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
	TargetIps SwitchcontrollerTrafficsnifferTargetIpArrayInput
	// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
	TargetMacs SwitchcontrollerTrafficsnifferTargetMacArrayInput
	// Sniffer ports to filter. The structure of `targetPort` block is documented below.
	TargetPorts SwitchcontrollerTrafficsnifferTargetPortArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerTrafficsnifferState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerTrafficsnifferState)(nil)).Elem()
}

type switchcontrollerTrafficsnifferArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Configure ERSPAN collector IP address.
	ErspanIp *string `pulumi:"erspanIp"`
	// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
	Mode *string `pulumi:"mode"`
	// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
	TargetIps []SwitchcontrollerTrafficsnifferTargetIp `pulumi:"targetIps"`
	// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
	TargetMacs []SwitchcontrollerTrafficsnifferTargetMac `pulumi:"targetMacs"`
	// Sniffer ports to filter. The structure of `targetPort` block is documented below.
	TargetPorts []SwitchcontrollerTrafficsnifferTargetPort `pulumi:"targetPorts"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchcontrollerTrafficsniffer resource.
type SwitchcontrollerTrafficsnifferArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Configure ERSPAN collector IP address.
	ErspanIp pulumi.StringPtrInput
	// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
	Mode pulumi.StringPtrInput
	// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
	TargetIps SwitchcontrollerTrafficsnifferTargetIpArrayInput
	// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
	TargetMacs SwitchcontrollerTrafficsnifferTargetMacArrayInput
	// Sniffer ports to filter. The structure of `targetPort` block is documented below.
	TargetPorts SwitchcontrollerTrafficsnifferTargetPortArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerTrafficsnifferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerTrafficsnifferArgs)(nil)).Elem()
}

type SwitchcontrollerTrafficsnifferInput interface {
	pulumi.Input

	ToSwitchcontrollerTrafficsnifferOutput() SwitchcontrollerTrafficsnifferOutput
	ToSwitchcontrollerTrafficsnifferOutputWithContext(ctx context.Context) SwitchcontrollerTrafficsnifferOutput
}

func (*SwitchcontrollerTrafficsniffer) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerTrafficsniffer)(nil)).Elem()
}

func (i *SwitchcontrollerTrafficsniffer) ToSwitchcontrollerTrafficsnifferOutput() SwitchcontrollerTrafficsnifferOutput {
	return i.ToSwitchcontrollerTrafficsnifferOutputWithContext(context.Background())
}

func (i *SwitchcontrollerTrafficsniffer) ToSwitchcontrollerTrafficsnifferOutputWithContext(ctx context.Context) SwitchcontrollerTrafficsnifferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerTrafficsnifferOutput)
}

// SwitchcontrollerTrafficsnifferArrayInput is an input type that accepts SwitchcontrollerTrafficsnifferArray and SwitchcontrollerTrafficsnifferArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerTrafficsnifferArrayInput` via:
//
//	SwitchcontrollerTrafficsnifferArray{ SwitchcontrollerTrafficsnifferArgs{...} }
type SwitchcontrollerTrafficsnifferArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerTrafficsnifferArrayOutput() SwitchcontrollerTrafficsnifferArrayOutput
	ToSwitchcontrollerTrafficsnifferArrayOutputWithContext(context.Context) SwitchcontrollerTrafficsnifferArrayOutput
}

type SwitchcontrollerTrafficsnifferArray []SwitchcontrollerTrafficsnifferInput

func (SwitchcontrollerTrafficsnifferArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerTrafficsniffer)(nil)).Elem()
}

func (i SwitchcontrollerTrafficsnifferArray) ToSwitchcontrollerTrafficsnifferArrayOutput() SwitchcontrollerTrafficsnifferArrayOutput {
	return i.ToSwitchcontrollerTrafficsnifferArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerTrafficsnifferArray) ToSwitchcontrollerTrafficsnifferArrayOutputWithContext(ctx context.Context) SwitchcontrollerTrafficsnifferArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerTrafficsnifferArrayOutput)
}

// SwitchcontrollerTrafficsnifferMapInput is an input type that accepts SwitchcontrollerTrafficsnifferMap and SwitchcontrollerTrafficsnifferMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerTrafficsnifferMapInput` via:
//
//	SwitchcontrollerTrafficsnifferMap{ "key": SwitchcontrollerTrafficsnifferArgs{...} }
type SwitchcontrollerTrafficsnifferMapInput interface {
	pulumi.Input

	ToSwitchcontrollerTrafficsnifferMapOutput() SwitchcontrollerTrafficsnifferMapOutput
	ToSwitchcontrollerTrafficsnifferMapOutputWithContext(context.Context) SwitchcontrollerTrafficsnifferMapOutput
}

type SwitchcontrollerTrafficsnifferMap map[string]SwitchcontrollerTrafficsnifferInput

func (SwitchcontrollerTrafficsnifferMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerTrafficsniffer)(nil)).Elem()
}

func (i SwitchcontrollerTrafficsnifferMap) ToSwitchcontrollerTrafficsnifferMapOutput() SwitchcontrollerTrafficsnifferMapOutput {
	return i.ToSwitchcontrollerTrafficsnifferMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerTrafficsnifferMap) ToSwitchcontrollerTrafficsnifferMapOutputWithContext(ctx context.Context) SwitchcontrollerTrafficsnifferMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerTrafficsnifferMapOutput)
}

type SwitchcontrollerTrafficsnifferOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerTrafficsnifferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerTrafficsniffer)(nil)).Elem()
}

func (o SwitchcontrollerTrafficsnifferOutput) ToSwitchcontrollerTrafficsnifferOutput() SwitchcontrollerTrafficsnifferOutput {
	return o
}

func (o SwitchcontrollerTrafficsnifferOutput) ToSwitchcontrollerTrafficsnifferOutputWithContext(ctx context.Context) SwitchcontrollerTrafficsnifferOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SwitchcontrollerTrafficsnifferOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerTrafficsniffer) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Configure ERSPAN collector IP address.
func (o SwitchcontrollerTrafficsnifferOutput) ErspanIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerTrafficsniffer) pulumi.StringOutput { return v.ErspanIp }).(pulumi.StringOutput)
}

// Configure traffic sniffer mode. Valid values: `erspan-auto`, `rspan`, `none`.
func (o SwitchcontrollerTrafficsnifferOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerTrafficsniffer) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Sniffer IPs to filter. The structure of `targetIp` block is documented below.
func (o SwitchcontrollerTrafficsnifferOutput) TargetIps() SwitchcontrollerTrafficsnifferTargetIpArrayOutput {
	return o.ApplyT(func(v *SwitchcontrollerTrafficsniffer) SwitchcontrollerTrafficsnifferTargetIpArrayOutput {
		return v.TargetIps
	}).(SwitchcontrollerTrafficsnifferTargetIpArrayOutput)
}

// Sniffer MACs to filter. The structure of `targetMac` block is documented below.
func (o SwitchcontrollerTrafficsnifferOutput) TargetMacs() SwitchcontrollerTrafficsnifferTargetMacArrayOutput {
	return o.ApplyT(func(v *SwitchcontrollerTrafficsniffer) SwitchcontrollerTrafficsnifferTargetMacArrayOutput {
		return v.TargetMacs
	}).(SwitchcontrollerTrafficsnifferTargetMacArrayOutput)
}

// Sniffer ports to filter. The structure of `targetPort` block is documented below.
func (o SwitchcontrollerTrafficsnifferOutput) TargetPorts() SwitchcontrollerTrafficsnifferTargetPortArrayOutput {
	return o.ApplyT(func(v *SwitchcontrollerTrafficsniffer) SwitchcontrollerTrafficsnifferTargetPortArrayOutput {
		return v.TargetPorts
	}).(SwitchcontrollerTrafficsnifferTargetPortArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerTrafficsnifferOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerTrafficsniffer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchcontrollerTrafficsnifferArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerTrafficsnifferArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerTrafficsniffer)(nil)).Elem()
}

func (o SwitchcontrollerTrafficsnifferArrayOutput) ToSwitchcontrollerTrafficsnifferArrayOutput() SwitchcontrollerTrafficsnifferArrayOutput {
	return o
}

func (o SwitchcontrollerTrafficsnifferArrayOutput) ToSwitchcontrollerTrafficsnifferArrayOutputWithContext(ctx context.Context) SwitchcontrollerTrafficsnifferArrayOutput {
	return o
}

func (o SwitchcontrollerTrafficsnifferArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerTrafficsnifferOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerTrafficsniffer {
		return vs[0].([]*SwitchcontrollerTrafficsniffer)[vs[1].(int)]
	}).(SwitchcontrollerTrafficsnifferOutput)
}

type SwitchcontrollerTrafficsnifferMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerTrafficsnifferMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerTrafficsniffer)(nil)).Elem()
}

func (o SwitchcontrollerTrafficsnifferMapOutput) ToSwitchcontrollerTrafficsnifferMapOutput() SwitchcontrollerTrafficsnifferMapOutput {
	return o
}

func (o SwitchcontrollerTrafficsnifferMapOutput) ToSwitchcontrollerTrafficsnifferMapOutputWithContext(ctx context.Context) SwitchcontrollerTrafficsnifferMapOutput {
	return o
}

func (o SwitchcontrollerTrafficsnifferMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerTrafficsnifferOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerTrafficsniffer {
		return vs[0].(map[string]*SwitchcontrollerTrafficsniffer)[vs[1].(string)]
	}).(SwitchcontrollerTrafficsnifferOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerTrafficsnifferInput)(nil)).Elem(), &SwitchcontrollerTrafficsniffer{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerTrafficsnifferArrayInput)(nil)).Elem(), SwitchcontrollerTrafficsnifferArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerTrafficsnifferMapInput)(nil)).Elem(), SwitchcontrollerTrafficsnifferMap{})
	pulumi.RegisterOutputType(SwitchcontrollerTrafficsnifferOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerTrafficsnifferArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerTrafficsnifferMapOutput{})
}
