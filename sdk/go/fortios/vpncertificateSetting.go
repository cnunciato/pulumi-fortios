// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VPN certificate setting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewVpncertificateSetting(ctx, "trname", &fortios.VpncertificateSettingArgs{
//				CertnameDsa1024:    pulumi.String("Fortinet_SSL_DSA1024"),
//				CertnameDsa2048:    pulumi.String("Fortinet_SSL_DSA2048"),
//				CertnameEcdsa256:   pulumi.String("Fortinet_SSL_ECDSA256"),
//				CertnameEcdsa384:   pulumi.String("Fortinet_SSL_ECDSA384"),
//				CertnameRsa1024:    pulumi.String("Fortinet_SSL_RSA1024"),
//				CertnameRsa2048:    pulumi.String("Fortinet_SSL_RSA2048"),
//				CheckCaCert:        pulumi.String("enable"),
//				CheckCaChain:       pulumi.String("disable"),
//				CmpSaveExtraCerts:  pulumi.String("disable"),
//				CnMatch:            pulumi.String("substring"),
//				OcspOption:         pulumi.String("server"),
//				OcspStatus:         pulumi.String("disable"),
//				SslMinProtoVersion: pulumi.String("default"),
//				StrictCrlCheck:     pulumi.String("disable"),
//				StrictOcspCheck:    pulumi.String("disable"),
//				SubjectMatch:       pulumi.String("substring"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # VpnCertificate Setting can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/vpncertificateSetting:VpncertificateSetting labelname VpnCertificateSetting
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/vpncertificateSetting:VpncertificateSetting labelname VpnCertificateSetting
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type VpncertificateSetting struct {
	pulumi.CustomResourceState

	// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
	CertExpireWarning pulumi.IntOutput `pulumi:"certExpireWarning"`
	// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa1024 pulumi.StringOutput `pulumi:"certnameDsa1024"`
	// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa2048 pulumi.StringOutput `pulumi:"certnameDsa2048"`
	// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa256 pulumi.StringOutput `pulumi:"certnameEcdsa256"`
	// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa384 pulumi.StringOutput `pulumi:"certnameEcdsa384"`
	// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa521 pulumi.StringOutput `pulumi:"certnameEcdsa521"`
	// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd25519 pulumi.StringOutput `pulumi:"certnameEd25519"`
	// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd448 pulumi.StringOutput `pulumi:"certnameEd448"`
	// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa1024 pulumi.StringOutput `pulumi:"certnameRsa1024"`
	// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa2048 pulumi.StringOutput `pulumi:"certnameRsa2048"`
	// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa4096 pulumi.StringOutput `pulumi:"certnameRsa4096"`
	// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
	CheckCaCert pulumi.StringOutput `pulumi:"checkCaCert"`
	// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
	CheckCaChain pulumi.StringOutput `pulumi:"checkCaChain"`
	// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
	CmpKeyUsageChecking pulumi.StringOutput `pulumi:"cmpKeyUsageChecking"`
	// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
	CmpSaveExtraCerts pulumi.StringOutput `pulumi:"cmpSaveExtraCerts"`
	// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
	CnAllowMulti pulumi.StringOutput `pulumi:"cnAllowMulti"`
	// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
	CnMatch pulumi.StringOutput `pulumi:"cnMatch"`
	// CRL verification options. The structure of `crlVerification` block is documented below.
	CrlVerification VpncertificateSettingCrlVerificationOutput `pulumi:"crlVerification"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Default OCSP server.
	OcspDefaultServer pulumi.StringOutput `pulumi:"ocspDefaultServer"`
	// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
	OcspOption pulumi.StringOutput `pulumi:"ocspOption"`
	// Enable/disable receiving certificates using the OCSP. Valid values: `enable`, `disable`.
	OcspStatus pulumi.StringOutput `pulumi:"ocspStatus"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion pulumi.StringOutput `pulumi:"sslMinProtoVersion"`
	// Source IP address to use to communicate with the OCSP server.
	SslOcspSourceIp pulumi.StringOutput `pulumi:"sslOcspSourceIp"`
	// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
	StrictCrlCheck pulumi.StringOutput `pulumi:"strictCrlCheck"`
	// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
	StrictOcspCheck pulumi.StringOutput `pulumi:"strictOcspCheck"`
	// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
	SubjectMatch pulumi.StringOutput `pulumi:"subjectMatch"`
	// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
	SubjectSet pulumi.StringOutput `pulumi:"subjectSet"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpncertificateSetting registers a new resource with the given unique name, arguments, and options.
func NewVpncertificateSetting(ctx *pulumi.Context,
	name string, args *VpncertificateSettingArgs, opts ...pulumi.ResourceOption) (*VpncertificateSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertnameDsa1024 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameDsa1024'")
	}
	if args.CertnameDsa2048 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameDsa2048'")
	}
	if args.CertnameEcdsa256 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameEcdsa256'")
	}
	if args.CertnameEcdsa384 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameEcdsa384'")
	}
	if args.CertnameRsa1024 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameRsa1024'")
	}
	if args.CertnameRsa2048 == nil {
		return nil, errors.New("invalid value for required argument 'CertnameRsa2048'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VpncertificateSetting
	err := ctx.RegisterResource("fortios:index/vpncertificateSetting:VpncertificateSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpncertificateSetting gets an existing VpncertificateSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpncertificateSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpncertificateSettingState, opts ...pulumi.ResourceOption) (*VpncertificateSetting, error) {
	var resource VpncertificateSetting
	err := ctx.ReadResource("fortios:index/vpncertificateSetting:VpncertificateSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpncertificateSetting resources.
type vpncertificateSettingState struct {
	// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
	CertExpireWarning *int `pulumi:"certExpireWarning"`
	// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa1024 *string `pulumi:"certnameDsa1024"`
	// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa2048 *string `pulumi:"certnameDsa2048"`
	// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa256 *string `pulumi:"certnameEcdsa256"`
	// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa384 *string `pulumi:"certnameEcdsa384"`
	// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa521 *string `pulumi:"certnameEcdsa521"`
	// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd25519 *string `pulumi:"certnameEd25519"`
	// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd448 *string `pulumi:"certnameEd448"`
	// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa1024 *string `pulumi:"certnameRsa1024"`
	// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa2048 *string `pulumi:"certnameRsa2048"`
	// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa4096 *string `pulumi:"certnameRsa4096"`
	// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
	CheckCaCert *string `pulumi:"checkCaCert"`
	// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
	CheckCaChain *string `pulumi:"checkCaChain"`
	// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
	CmpKeyUsageChecking *string `pulumi:"cmpKeyUsageChecking"`
	// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
	CmpSaveExtraCerts *string `pulumi:"cmpSaveExtraCerts"`
	// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
	CnAllowMulti *string `pulumi:"cnAllowMulti"`
	// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
	CnMatch *string `pulumi:"cnMatch"`
	// CRL verification options. The structure of `crlVerification` block is documented below.
	CrlVerification *VpncertificateSettingCrlVerification `pulumi:"crlVerification"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Default OCSP server.
	OcspDefaultServer *string `pulumi:"ocspDefaultServer"`
	// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
	OcspOption *string `pulumi:"ocspOption"`
	// Enable/disable receiving certificates using the OCSP. Valid values: `enable`, `disable`.
	OcspStatus *string `pulumi:"ocspStatus"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Source IP address to use to communicate with the OCSP server.
	SslOcspSourceIp *string `pulumi:"sslOcspSourceIp"`
	// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
	StrictCrlCheck *string `pulumi:"strictCrlCheck"`
	// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
	StrictOcspCheck *string `pulumi:"strictOcspCheck"`
	// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
	SubjectMatch *string `pulumi:"subjectMatch"`
	// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
	SubjectSet *string `pulumi:"subjectSet"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VpncertificateSettingState struct {
	// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
	CertExpireWarning pulumi.IntPtrInput
	// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa1024 pulumi.StringPtrInput
	// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa2048 pulumi.StringPtrInput
	// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa256 pulumi.StringPtrInput
	// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa384 pulumi.StringPtrInput
	// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa521 pulumi.StringPtrInput
	// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd25519 pulumi.StringPtrInput
	// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd448 pulumi.StringPtrInput
	// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa1024 pulumi.StringPtrInput
	// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa2048 pulumi.StringPtrInput
	// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa4096 pulumi.StringPtrInput
	// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
	CheckCaCert pulumi.StringPtrInput
	// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
	CheckCaChain pulumi.StringPtrInput
	// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
	CmpKeyUsageChecking pulumi.StringPtrInput
	// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
	CmpSaveExtraCerts pulumi.StringPtrInput
	// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
	CnAllowMulti pulumi.StringPtrInput
	// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
	CnMatch pulumi.StringPtrInput
	// CRL verification options. The structure of `crlVerification` block is documented below.
	CrlVerification VpncertificateSettingCrlVerificationPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Default OCSP server.
	OcspDefaultServer pulumi.StringPtrInput
	// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
	OcspOption pulumi.StringPtrInput
	// Enable/disable receiving certificates using the OCSP. Valid values: `enable`, `disable`.
	OcspStatus pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion pulumi.StringPtrInput
	// Source IP address to use to communicate with the OCSP server.
	SslOcspSourceIp pulumi.StringPtrInput
	// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
	StrictCrlCheck pulumi.StringPtrInput
	// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
	StrictOcspCheck pulumi.StringPtrInput
	// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
	SubjectMatch pulumi.StringPtrInput
	// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
	SubjectSet pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpncertificateSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpncertificateSettingState)(nil)).Elem()
}

type vpncertificateSettingArgs struct {
	// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
	CertExpireWarning *int `pulumi:"certExpireWarning"`
	// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa1024 string `pulumi:"certnameDsa1024"`
	// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa2048 string `pulumi:"certnameDsa2048"`
	// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa256 string `pulumi:"certnameEcdsa256"`
	// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa384 string `pulumi:"certnameEcdsa384"`
	// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa521 *string `pulumi:"certnameEcdsa521"`
	// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd25519 *string `pulumi:"certnameEd25519"`
	// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd448 *string `pulumi:"certnameEd448"`
	// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa1024 string `pulumi:"certnameRsa1024"`
	// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa2048 string `pulumi:"certnameRsa2048"`
	// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa4096 *string `pulumi:"certnameRsa4096"`
	// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
	CheckCaCert *string `pulumi:"checkCaCert"`
	// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
	CheckCaChain *string `pulumi:"checkCaChain"`
	// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
	CmpKeyUsageChecking *string `pulumi:"cmpKeyUsageChecking"`
	// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
	CmpSaveExtraCerts *string `pulumi:"cmpSaveExtraCerts"`
	// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
	CnAllowMulti *string `pulumi:"cnAllowMulti"`
	// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
	CnMatch *string `pulumi:"cnMatch"`
	// CRL verification options. The structure of `crlVerification` block is documented below.
	CrlVerification *VpncertificateSettingCrlVerification `pulumi:"crlVerification"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Default OCSP server.
	OcspDefaultServer *string `pulumi:"ocspDefaultServer"`
	// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
	OcspOption *string `pulumi:"ocspOption"`
	// Enable/disable receiving certificates using the OCSP. Valid values: `enable`, `disable`.
	OcspStatus *string `pulumi:"ocspStatus"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Source IP address to use to communicate with the OCSP server.
	SslOcspSourceIp *string `pulumi:"sslOcspSourceIp"`
	// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
	StrictCrlCheck *string `pulumi:"strictCrlCheck"`
	// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
	StrictOcspCheck *string `pulumi:"strictOcspCheck"`
	// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
	SubjectMatch *string `pulumi:"subjectMatch"`
	// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
	SubjectSet *string `pulumi:"subjectSet"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpncertificateSetting resource.
type VpncertificateSettingArgs struct {
	// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
	CertExpireWarning pulumi.IntPtrInput
	// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa1024 pulumi.StringInput
	// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
	CertnameDsa2048 pulumi.StringInput
	// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa256 pulumi.StringInput
	// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa384 pulumi.StringInput
	// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEcdsa521 pulumi.StringPtrInput
	// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd25519 pulumi.StringPtrInput
	// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
	CertnameEd448 pulumi.StringPtrInput
	// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa1024 pulumi.StringInput
	// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa2048 pulumi.StringInput
	// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
	CertnameRsa4096 pulumi.StringPtrInput
	// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
	CheckCaCert pulumi.StringPtrInput
	// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
	CheckCaChain pulumi.StringPtrInput
	// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
	CmpKeyUsageChecking pulumi.StringPtrInput
	// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
	CmpSaveExtraCerts pulumi.StringPtrInput
	// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
	CnAllowMulti pulumi.StringPtrInput
	// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
	CnMatch pulumi.StringPtrInput
	// CRL verification options. The structure of `crlVerification` block is documented below.
	CrlVerification VpncertificateSettingCrlVerificationPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Default OCSP server.
	OcspDefaultServer pulumi.StringPtrInput
	// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
	OcspOption pulumi.StringPtrInput
	// Enable/disable receiving certificates using the OCSP. Valid values: `enable`, `disable`.
	OcspStatus pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion pulumi.StringPtrInput
	// Source IP address to use to communicate with the OCSP server.
	SslOcspSourceIp pulumi.StringPtrInput
	// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
	StrictCrlCheck pulumi.StringPtrInput
	// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
	StrictOcspCheck pulumi.StringPtrInput
	// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
	SubjectMatch pulumi.StringPtrInput
	// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
	SubjectSet pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpncertificateSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpncertificateSettingArgs)(nil)).Elem()
}

type VpncertificateSettingInput interface {
	pulumi.Input

	ToVpncertificateSettingOutput() VpncertificateSettingOutput
	ToVpncertificateSettingOutputWithContext(ctx context.Context) VpncertificateSettingOutput
}

func (*VpncertificateSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**VpncertificateSetting)(nil)).Elem()
}

func (i *VpncertificateSetting) ToVpncertificateSettingOutput() VpncertificateSettingOutput {
	return i.ToVpncertificateSettingOutputWithContext(context.Background())
}

func (i *VpncertificateSetting) ToVpncertificateSettingOutputWithContext(ctx context.Context) VpncertificateSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpncertificateSettingOutput)
}

// VpncertificateSettingArrayInput is an input type that accepts VpncertificateSettingArray and VpncertificateSettingArrayOutput values.
// You can construct a concrete instance of `VpncertificateSettingArrayInput` via:
//
//	VpncertificateSettingArray{ VpncertificateSettingArgs{...} }
type VpncertificateSettingArrayInput interface {
	pulumi.Input

	ToVpncertificateSettingArrayOutput() VpncertificateSettingArrayOutput
	ToVpncertificateSettingArrayOutputWithContext(context.Context) VpncertificateSettingArrayOutput
}

type VpncertificateSettingArray []VpncertificateSettingInput

func (VpncertificateSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpncertificateSetting)(nil)).Elem()
}

func (i VpncertificateSettingArray) ToVpncertificateSettingArrayOutput() VpncertificateSettingArrayOutput {
	return i.ToVpncertificateSettingArrayOutputWithContext(context.Background())
}

func (i VpncertificateSettingArray) ToVpncertificateSettingArrayOutputWithContext(ctx context.Context) VpncertificateSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpncertificateSettingArrayOutput)
}

// VpncertificateSettingMapInput is an input type that accepts VpncertificateSettingMap and VpncertificateSettingMapOutput values.
// You can construct a concrete instance of `VpncertificateSettingMapInput` via:
//
//	VpncertificateSettingMap{ "key": VpncertificateSettingArgs{...} }
type VpncertificateSettingMapInput interface {
	pulumi.Input

	ToVpncertificateSettingMapOutput() VpncertificateSettingMapOutput
	ToVpncertificateSettingMapOutputWithContext(context.Context) VpncertificateSettingMapOutput
}

type VpncertificateSettingMap map[string]VpncertificateSettingInput

func (VpncertificateSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpncertificateSetting)(nil)).Elem()
}

func (i VpncertificateSettingMap) ToVpncertificateSettingMapOutput() VpncertificateSettingMapOutput {
	return i.ToVpncertificateSettingMapOutputWithContext(context.Background())
}

func (i VpncertificateSettingMap) ToVpncertificateSettingMapOutputWithContext(ctx context.Context) VpncertificateSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpncertificateSettingMapOutput)
}

type VpncertificateSettingOutput struct{ *pulumi.OutputState }

func (VpncertificateSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpncertificateSetting)(nil)).Elem()
}

func (o VpncertificateSettingOutput) ToVpncertificateSettingOutput() VpncertificateSettingOutput {
	return o
}

func (o VpncertificateSettingOutput) ToVpncertificateSettingOutputWithContext(ctx context.Context) VpncertificateSettingOutput {
	return o
}

// Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
func (o VpncertificateSettingOutput) CertExpireWarning() pulumi.IntOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.IntOutput { return v.CertExpireWarning }).(pulumi.IntOutput)
}

// 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
func (o VpncertificateSettingOutput) CertnameDsa1024() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CertnameDsa1024 }).(pulumi.StringOutput)
}

// 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
func (o VpncertificateSettingOutput) CertnameDsa2048() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CertnameDsa2048 }).(pulumi.StringOutput)
}

// 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
func (o VpncertificateSettingOutput) CertnameEcdsa256() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CertnameEcdsa256 }).(pulumi.StringOutput)
}

// 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
func (o VpncertificateSettingOutput) CertnameEcdsa384() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CertnameEcdsa384 }).(pulumi.StringOutput)
}

// 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
func (o VpncertificateSettingOutput) CertnameEcdsa521() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CertnameEcdsa521 }).(pulumi.StringOutput)
}

// 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
func (o VpncertificateSettingOutput) CertnameEd25519() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CertnameEd25519 }).(pulumi.StringOutput)
}

// 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
func (o VpncertificateSettingOutput) CertnameEd448() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CertnameEd448 }).(pulumi.StringOutput)
}

// 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
func (o VpncertificateSettingOutput) CertnameRsa1024() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CertnameRsa1024 }).(pulumi.StringOutput)
}

// 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
func (o VpncertificateSettingOutput) CertnameRsa2048() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CertnameRsa2048 }).(pulumi.StringOutput)
}

// 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
func (o VpncertificateSettingOutput) CertnameRsa4096() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CertnameRsa4096 }).(pulumi.StringOutput)
}

// Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
func (o VpncertificateSettingOutput) CheckCaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CheckCaCert }).(pulumi.StringOutput)
}

// Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
func (o VpncertificateSettingOutput) CheckCaChain() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CheckCaChain }).(pulumi.StringOutput)
}

// Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
func (o VpncertificateSettingOutput) CmpKeyUsageChecking() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CmpKeyUsageChecking }).(pulumi.StringOutput)
}

// Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
func (o VpncertificateSettingOutput) CmpSaveExtraCerts() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CmpSaveExtraCerts }).(pulumi.StringOutput)
}

// When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
func (o VpncertificateSettingOutput) CnAllowMulti() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CnAllowMulti }).(pulumi.StringOutput)
}

// When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
func (o VpncertificateSettingOutput) CnMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.CnMatch }).(pulumi.StringOutput)
}

// CRL verification options. The structure of `crlVerification` block is documented below.
func (o VpncertificateSettingOutput) CrlVerification() VpncertificateSettingCrlVerificationOutput {
	return o.ApplyT(func(v *VpncertificateSetting) VpncertificateSettingCrlVerificationOutput { return v.CrlVerification }).(VpncertificateSettingCrlVerificationOutput)
}

// Specify outgoing interface to reach server.
func (o VpncertificateSettingOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o VpncertificateSettingOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Default OCSP server.
func (o VpncertificateSettingOutput) OcspDefaultServer() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.OcspDefaultServer }).(pulumi.StringOutput)
}

// Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
func (o VpncertificateSettingOutput) OcspOption() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.OcspOption }).(pulumi.StringOutput)
}

// Enable/disable receiving certificates using the OCSP. Valid values: `enable`, `disable`.
func (o VpncertificateSettingOutput) OcspStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.OcspStatus }).(pulumi.StringOutput)
}

// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
func (o VpncertificateSettingOutput) SslMinProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.SslMinProtoVersion }).(pulumi.StringOutput)
}

// Source IP address to use to communicate with the OCSP server.
func (o VpncertificateSettingOutput) SslOcspSourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.SslOcspSourceIp }).(pulumi.StringOutput)
}

// Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
func (o VpncertificateSettingOutput) StrictCrlCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.StrictCrlCheck }).(pulumi.StringOutput)
}

// Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
func (o VpncertificateSettingOutput) StrictOcspCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.StrictOcspCheck }).(pulumi.StringOutput)
}

// When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
func (o VpncertificateSettingOutput) SubjectMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.SubjectMatch }).(pulumi.StringOutput)
}

// When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
func (o VpncertificateSettingOutput) SubjectSet() pulumi.StringOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringOutput { return v.SubjectSet }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o VpncertificateSettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpncertificateSetting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VpncertificateSettingArrayOutput struct{ *pulumi.OutputState }

func (VpncertificateSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpncertificateSetting)(nil)).Elem()
}

func (o VpncertificateSettingArrayOutput) ToVpncertificateSettingArrayOutput() VpncertificateSettingArrayOutput {
	return o
}

func (o VpncertificateSettingArrayOutput) ToVpncertificateSettingArrayOutputWithContext(ctx context.Context) VpncertificateSettingArrayOutput {
	return o
}

func (o VpncertificateSettingArrayOutput) Index(i pulumi.IntInput) VpncertificateSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpncertificateSetting {
		return vs[0].([]*VpncertificateSetting)[vs[1].(int)]
	}).(VpncertificateSettingOutput)
}

type VpncertificateSettingMapOutput struct{ *pulumi.OutputState }

func (VpncertificateSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpncertificateSetting)(nil)).Elem()
}

func (o VpncertificateSettingMapOutput) ToVpncertificateSettingMapOutput() VpncertificateSettingMapOutput {
	return o
}

func (o VpncertificateSettingMapOutput) ToVpncertificateSettingMapOutputWithContext(ctx context.Context) VpncertificateSettingMapOutput {
	return o
}

func (o VpncertificateSettingMapOutput) MapIndex(k pulumi.StringInput) VpncertificateSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpncertificateSetting {
		return vs[0].(map[string]*VpncertificateSetting)[vs[1].(string)]
	}).(VpncertificateSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpncertificateSettingInput)(nil)).Elem(), &VpncertificateSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpncertificateSettingArrayInput)(nil)).Elem(), VpncertificateSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpncertificateSettingMapInput)(nil)).Elem(), VpncertificateSettingMap{})
	pulumi.RegisterOutputType(VpncertificateSettingOutput{})
	pulumi.RegisterOutputType(VpncertificateSettingArrayOutput{})
	pulumi.RegisterOutputType(VpncertificateSettingMapOutput{})
}
