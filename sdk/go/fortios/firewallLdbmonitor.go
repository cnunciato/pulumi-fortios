// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure server load balancing health monitors.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFirewallLdbmonitor(ctx, "trname", &fortios.FirewallLdbmonitorArgs{
//				HttpMaxRedirects: pulumi.Int(0),
//				Interval:         pulumi.Int(10),
//				Port:             pulumi.Int(0),
//				Retry:            pulumi.Int(3),
//				Timeout:          pulumi.Int(2),
//				Type:             pulumi.String("ping"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Firewall LdbMonitor can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/firewallLdbmonitor:FirewallLdbmonitor labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/firewallLdbmonitor:FirewallLdbmonitor labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FirewallLdbmonitor struct {
	pulumi.CustomResourceState

	// Response IP expected from DNS server.
	DnsMatchIp pulumi.StringOutput `pulumi:"dnsMatchIp"`
	// Select the protocol used by the DNS health check monitor to check the health of the server (UDP | TCP). Valid values: `udp`, `tcp`.
	DnsProtocol pulumi.StringOutput `pulumi:"dnsProtocol"`
	// Fully qualified domain name to resolve for the DNS probe.
	DnsRequestDomain pulumi.StringOutput `pulumi:"dnsRequestDomain"`
	// URL used to send a GET request to check the health of an HTTP server.
	HttpGet pulumi.StringOutput `pulumi:"httpGet"`
	// String to match the value expected in response to an HTTP-GET request.
	HttpMatch pulumi.StringOutput `pulumi:"httpMatch"`
	// The maximum number of HTTP redirects to be allowed (0 - 5, default = 0).
	HttpMaxRedirects pulumi.IntOutput `pulumi:"httpMaxRedirects"`
	// Time between health checks (5 - 65635 sec, default = 10).
	Interval pulumi.IntOutput `pulumi:"interval"`
	// Monitor name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Service port used to perform the health check. If 0, health check monitor inherits port configured for the server (0 - 65635, default = 0).
	Port pulumi.IntOutput `pulumi:"port"`
	// Number health check attempts before the server is considered down (1 - 255, default = 3).
	Retry pulumi.IntOutput `pulumi:"retry"`
	// Source IP for ldb-monitor.
	SrcIp pulumi.StringOutput `pulumi:"srcIp"`
	// Time to wait to receive response to a health check from a server. Reaching the timeout means the health check failed (1 - 255 sec, default = 2).
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Select the Monitor type used by the health check monitor to check the health of the server (PING | TCP | HTTP).
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallLdbmonitor registers a new resource with the given unique name, arguments, and options.
func NewFirewallLdbmonitor(ctx *pulumi.Context,
	name string, args *FirewallLdbmonitorArgs, opts ...pulumi.ResourceOption) (*FirewallLdbmonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallLdbmonitor
	err := ctx.RegisterResource("fortios:index/firewallLdbmonitor:FirewallLdbmonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallLdbmonitor gets an existing FirewallLdbmonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallLdbmonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallLdbmonitorState, opts ...pulumi.ResourceOption) (*FirewallLdbmonitor, error) {
	var resource FirewallLdbmonitor
	err := ctx.ReadResource("fortios:index/firewallLdbmonitor:FirewallLdbmonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallLdbmonitor resources.
type firewallLdbmonitorState struct {
	// Response IP expected from DNS server.
	DnsMatchIp *string `pulumi:"dnsMatchIp"`
	// Select the protocol used by the DNS health check monitor to check the health of the server (UDP | TCP). Valid values: `udp`, `tcp`.
	DnsProtocol *string `pulumi:"dnsProtocol"`
	// Fully qualified domain name to resolve for the DNS probe.
	DnsRequestDomain *string `pulumi:"dnsRequestDomain"`
	// URL used to send a GET request to check the health of an HTTP server.
	HttpGet *string `pulumi:"httpGet"`
	// String to match the value expected in response to an HTTP-GET request.
	HttpMatch *string `pulumi:"httpMatch"`
	// The maximum number of HTTP redirects to be allowed (0 - 5, default = 0).
	HttpMaxRedirects *int `pulumi:"httpMaxRedirects"`
	// Time between health checks (5 - 65635 sec, default = 10).
	Interval *int `pulumi:"interval"`
	// Monitor name.
	Name *string `pulumi:"name"`
	// Service port used to perform the health check. If 0, health check monitor inherits port configured for the server (0 - 65635, default = 0).
	Port *int `pulumi:"port"`
	// Number health check attempts before the server is considered down (1 - 255, default = 3).
	Retry *int `pulumi:"retry"`
	// Source IP for ldb-monitor.
	SrcIp *string `pulumi:"srcIp"`
	// Time to wait to receive response to a health check from a server. Reaching the timeout means the health check failed (1 - 255 sec, default = 2).
	Timeout *int `pulumi:"timeout"`
	// Select the Monitor type used by the health check monitor to check the health of the server (PING | TCP | HTTP).
	Type *string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallLdbmonitorState struct {
	// Response IP expected from DNS server.
	DnsMatchIp pulumi.StringPtrInput
	// Select the protocol used by the DNS health check monitor to check the health of the server (UDP | TCP). Valid values: `udp`, `tcp`.
	DnsProtocol pulumi.StringPtrInput
	// Fully qualified domain name to resolve for the DNS probe.
	DnsRequestDomain pulumi.StringPtrInput
	// URL used to send a GET request to check the health of an HTTP server.
	HttpGet pulumi.StringPtrInput
	// String to match the value expected in response to an HTTP-GET request.
	HttpMatch pulumi.StringPtrInput
	// The maximum number of HTTP redirects to be allowed (0 - 5, default = 0).
	HttpMaxRedirects pulumi.IntPtrInput
	// Time between health checks (5 - 65635 sec, default = 10).
	Interval pulumi.IntPtrInput
	// Monitor name.
	Name pulumi.StringPtrInput
	// Service port used to perform the health check. If 0, health check monitor inherits port configured for the server (0 - 65635, default = 0).
	Port pulumi.IntPtrInput
	// Number health check attempts before the server is considered down (1 - 255, default = 3).
	Retry pulumi.IntPtrInput
	// Source IP for ldb-monitor.
	SrcIp pulumi.StringPtrInput
	// Time to wait to receive response to a health check from a server. Reaching the timeout means the health check failed (1 - 255 sec, default = 2).
	Timeout pulumi.IntPtrInput
	// Select the Monitor type used by the health check monitor to check the health of the server (PING | TCP | HTTP).
	Type pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallLdbmonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallLdbmonitorState)(nil)).Elem()
}

type firewallLdbmonitorArgs struct {
	// Response IP expected from DNS server.
	DnsMatchIp *string `pulumi:"dnsMatchIp"`
	// Select the protocol used by the DNS health check monitor to check the health of the server (UDP | TCP). Valid values: `udp`, `tcp`.
	DnsProtocol *string `pulumi:"dnsProtocol"`
	// Fully qualified domain name to resolve for the DNS probe.
	DnsRequestDomain *string `pulumi:"dnsRequestDomain"`
	// URL used to send a GET request to check the health of an HTTP server.
	HttpGet *string `pulumi:"httpGet"`
	// String to match the value expected in response to an HTTP-GET request.
	HttpMatch *string `pulumi:"httpMatch"`
	// The maximum number of HTTP redirects to be allowed (0 - 5, default = 0).
	HttpMaxRedirects *int `pulumi:"httpMaxRedirects"`
	// Time between health checks (5 - 65635 sec, default = 10).
	Interval *int `pulumi:"interval"`
	// Monitor name.
	Name *string `pulumi:"name"`
	// Service port used to perform the health check. If 0, health check monitor inherits port configured for the server (0 - 65635, default = 0).
	Port *int `pulumi:"port"`
	// Number health check attempts before the server is considered down (1 - 255, default = 3).
	Retry *int `pulumi:"retry"`
	// Source IP for ldb-monitor.
	SrcIp *string `pulumi:"srcIp"`
	// Time to wait to receive response to a health check from a server. Reaching the timeout means the health check failed (1 - 255 sec, default = 2).
	Timeout *int `pulumi:"timeout"`
	// Select the Monitor type used by the health check monitor to check the health of the server (PING | TCP | HTTP).
	Type string `pulumi:"type"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallLdbmonitor resource.
type FirewallLdbmonitorArgs struct {
	// Response IP expected from DNS server.
	DnsMatchIp pulumi.StringPtrInput
	// Select the protocol used by the DNS health check monitor to check the health of the server (UDP | TCP). Valid values: `udp`, `tcp`.
	DnsProtocol pulumi.StringPtrInput
	// Fully qualified domain name to resolve for the DNS probe.
	DnsRequestDomain pulumi.StringPtrInput
	// URL used to send a GET request to check the health of an HTTP server.
	HttpGet pulumi.StringPtrInput
	// String to match the value expected in response to an HTTP-GET request.
	HttpMatch pulumi.StringPtrInput
	// The maximum number of HTTP redirects to be allowed (0 - 5, default = 0).
	HttpMaxRedirects pulumi.IntPtrInput
	// Time between health checks (5 - 65635 sec, default = 10).
	Interval pulumi.IntPtrInput
	// Monitor name.
	Name pulumi.StringPtrInput
	// Service port used to perform the health check. If 0, health check monitor inherits port configured for the server (0 - 65635, default = 0).
	Port pulumi.IntPtrInput
	// Number health check attempts before the server is considered down (1 - 255, default = 3).
	Retry pulumi.IntPtrInput
	// Source IP for ldb-monitor.
	SrcIp pulumi.StringPtrInput
	// Time to wait to receive response to a health check from a server. Reaching the timeout means the health check failed (1 - 255 sec, default = 2).
	Timeout pulumi.IntPtrInput
	// Select the Monitor type used by the health check monitor to check the health of the server (PING | TCP | HTTP).
	Type pulumi.StringInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallLdbmonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallLdbmonitorArgs)(nil)).Elem()
}

type FirewallLdbmonitorInput interface {
	pulumi.Input

	ToFirewallLdbmonitorOutput() FirewallLdbmonitorOutput
	ToFirewallLdbmonitorOutputWithContext(ctx context.Context) FirewallLdbmonitorOutput
}

func (*FirewallLdbmonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallLdbmonitor)(nil)).Elem()
}

func (i *FirewallLdbmonitor) ToFirewallLdbmonitorOutput() FirewallLdbmonitorOutput {
	return i.ToFirewallLdbmonitorOutputWithContext(context.Background())
}

func (i *FirewallLdbmonitor) ToFirewallLdbmonitorOutputWithContext(ctx context.Context) FirewallLdbmonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLdbmonitorOutput)
}

// FirewallLdbmonitorArrayInput is an input type that accepts FirewallLdbmonitorArray and FirewallLdbmonitorArrayOutput values.
// You can construct a concrete instance of `FirewallLdbmonitorArrayInput` via:
//
//	FirewallLdbmonitorArray{ FirewallLdbmonitorArgs{...} }
type FirewallLdbmonitorArrayInput interface {
	pulumi.Input

	ToFirewallLdbmonitorArrayOutput() FirewallLdbmonitorArrayOutput
	ToFirewallLdbmonitorArrayOutputWithContext(context.Context) FirewallLdbmonitorArrayOutput
}

type FirewallLdbmonitorArray []FirewallLdbmonitorInput

func (FirewallLdbmonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallLdbmonitor)(nil)).Elem()
}

func (i FirewallLdbmonitorArray) ToFirewallLdbmonitorArrayOutput() FirewallLdbmonitorArrayOutput {
	return i.ToFirewallLdbmonitorArrayOutputWithContext(context.Background())
}

func (i FirewallLdbmonitorArray) ToFirewallLdbmonitorArrayOutputWithContext(ctx context.Context) FirewallLdbmonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLdbmonitorArrayOutput)
}

// FirewallLdbmonitorMapInput is an input type that accepts FirewallLdbmonitorMap and FirewallLdbmonitorMapOutput values.
// You can construct a concrete instance of `FirewallLdbmonitorMapInput` via:
//
//	FirewallLdbmonitorMap{ "key": FirewallLdbmonitorArgs{...} }
type FirewallLdbmonitorMapInput interface {
	pulumi.Input

	ToFirewallLdbmonitorMapOutput() FirewallLdbmonitorMapOutput
	ToFirewallLdbmonitorMapOutputWithContext(context.Context) FirewallLdbmonitorMapOutput
}

type FirewallLdbmonitorMap map[string]FirewallLdbmonitorInput

func (FirewallLdbmonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallLdbmonitor)(nil)).Elem()
}

func (i FirewallLdbmonitorMap) ToFirewallLdbmonitorMapOutput() FirewallLdbmonitorMapOutput {
	return i.ToFirewallLdbmonitorMapOutputWithContext(context.Background())
}

func (i FirewallLdbmonitorMap) ToFirewallLdbmonitorMapOutputWithContext(ctx context.Context) FirewallLdbmonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLdbmonitorMapOutput)
}

type FirewallLdbmonitorOutput struct{ *pulumi.OutputState }

func (FirewallLdbmonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallLdbmonitor)(nil)).Elem()
}

func (o FirewallLdbmonitorOutput) ToFirewallLdbmonitorOutput() FirewallLdbmonitorOutput {
	return o
}

func (o FirewallLdbmonitorOutput) ToFirewallLdbmonitorOutputWithContext(ctx context.Context) FirewallLdbmonitorOutput {
	return o
}

// Response IP expected from DNS server.
func (o FirewallLdbmonitorOutput) DnsMatchIp() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.StringOutput { return v.DnsMatchIp }).(pulumi.StringOutput)
}

// Select the protocol used by the DNS health check monitor to check the health of the server (UDP | TCP). Valid values: `udp`, `tcp`.
func (o FirewallLdbmonitorOutput) DnsProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.StringOutput { return v.DnsProtocol }).(pulumi.StringOutput)
}

// Fully qualified domain name to resolve for the DNS probe.
func (o FirewallLdbmonitorOutput) DnsRequestDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.StringOutput { return v.DnsRequestDomain }).(pulumi.StringOutput)
}

// URL used to send a GET request to check the health of an HTTP server.
func (o FirewallLdbmonitorOutput) HttpGet() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.StringOutput { return v.HttpGet }).(pulumi.StringOutput)
}

// String to match the value expected in response to an HTTP-GET request.
func (o FirewallLdbmonitorOutput) HttpMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.StringOutput { return v.HttpMatch }).(pulumi.StringOutput)
}

// The maximum number of HTTP redirects to be allowed (0 - 5, default = 0).
func (o FirewallLdbmonitorOutput) HttpMaxRedirects() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.IntOutput { return v.HttpMaxRedirects }).(pulumi.IntOutput)
}

// Time between health checks (5 - 65635 sec, default = 10).
func (o FirewallLdbmonitorOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

// Monitor name.
func (o FirewallLdbmonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Service port used to perform the health check. If 0, health check monitor inherits port configured for the server (0 - 65635, default = 0).
func (o FirewallLdbmonitorOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Number health check attempts before the server is considered down (1 - 255, default = 3).
func (o FirewallLdbmonitorOutput) Retry() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.IntOutput { return v.Retry }).(pulumi.IntOutput)
}

// Source IP for ldb-monitor.
func (o FirewallLdbmonitorOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.StringOutput { return v.SrcIp }).(pulumi.StringOutput)
}

// Time to wait to receive response to a health check from a server. Reaching the timeout means the health check failed (1 - 255 sec, default = 2).
func (o FirewallLdbmonitorOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// Select the Monitor type used by the health check monitor to check the health of the server (PING | TCP | HTTP).
func (o FirewallLdbmonitorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FirewallLdbmonitorOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallLdbmonitor) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallLdbmonitorArrayOutput struct{ *pulumi.OutputState }

func (FirewallLdbmonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallLdbmonitor)(nil)).Elem()
}

func (o FirewallLdbmonitorArrayOutput) ToFirewallLdbmonitorArrayOutput() FirewallLdbmonitorArrayOutput {
	return o
}

func (o FirewallLdbmonitorArrayOutput) ToFirewallLdbmonitorArrayOutputWithContext(ctx context.Context) FirewallLdbmonitorArrayOutput {
	return o
}

func (o FirewallLdbmonitorArrayOutput) Index(i pulumi.IntInput) FirewallLdbmonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallLdbmonitor {
		return vs[0].([]*FirewallLdbmonitor)[vs[1].(int)]
	}).(FirewallLdbmonitorOutput)
}

type FirewallLdbmonitorMapOutput struct{ *pulumi.OutputState }

func (FirewallLdbmonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallLdbmonitor)(nil)).Elem()
}

func (o FirewallLdbmonitorMapOutput) ToFirewallLdbmonitorMapOutput() FirewallLdbmonitorMapOutput {
	return o
}

func (o FirewallLdbmonitorMapOutput) ToFirewallLdbmonitorMapOutputWithContext(ctx context.Context) FirewallLdbmonitorMapOutput {
	return o
}

func (o FirewallLdbmonitorMapOutput) MapIndex(k pulumi.StringInput) FirewallLdbmonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallLdbmonitor {
		return vs[0].(map[string]*FirewallLdbmonitor)[vs[1].(string)]
	}).(FirewallLdbmonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallLdbmonitorInput)(nil)).Elem(), &FirewallLdbmonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallLdbmonitorArrayInput)(nil)).Elem(), FirewallLdbmonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallLdbmonitorMapInput)(nil)).Elem(), FirewallLdbmonitorMap{})
	pulumi.RegisterOutputType(FirewallLdbmonitorOutput{})
	pulumi.RegisterOutputType(FirewallLdbmonitorArrayOutput{})
	pulumi.RegisterOutputType(FirewallLdbmonitorMapOutput{})
}
