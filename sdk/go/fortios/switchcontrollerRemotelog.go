// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure logging by FortiSwitch device to a remote syslog server. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// # SwitchController RemoteLog can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerRemotelog:SwitchcontrollerRemotelog labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerRemotelog:SwitchcontrollerRemotelog labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerRemotelog struct {
	pulumi.CustomResourceState

	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv pulumi.StringOutput `pulumi:"csv"`
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility pulumi.StringOutput `pulumi:"facility"`
	// Remote log name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Remote syslog server listening port.
	Port pulumi.IntOutput `pulumi:"port"`
	// IPv4 address of the remote syslog server.
	Server pulumi.StringOutput `pulumi:"server"`
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchcontrollerRemotelog registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerRemotelog(ctx *pulumi.Context,
	name string, args *SwitchcontrollerRemotelogArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerRemotelog, error) {
	if args == nil {
		args = &SwitchcontrollerRemotelogArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerRemotelog
	err := ctx.RegisterResource("fortios:index/switchcontrollerRemotelog:SwitchcontrollerRemotelog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerRemotelog gets an existing SwitchcontrollerRemotelog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerRemotelog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerRemotelogState, opts ...pulumi.ResourceOption) (*SwitchcontrollerRemotelog, error) {
	var resource SwitchcontrollerRemotelog
	err := ctx.ReadResource("fortios:index/switchcontrollerRemotelog:SwitchcontrollerRemotelog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerRemotelog resources.
type switchcontrollerRemotelogState struct {
	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv *string `pulumi:"csv"`
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility *string `pulumi:"facility"`
	// Remote log name.
	Name *string `pulumi:"name"`
	// Remote syslog server listening port.
	Port *int `pulumi:"port"`
	// IPv4 address of the remote syslog server.
	Server *string `pulumi:"server"`
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchcontrollerRemotelogState struct {
	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv pulumi.StringPtrInput
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility pulumi.StringPtrInput
	// Remote log name.
	Name pulumi.StringPtrInput
	// Remote syslog server listening port.
	Port pulumi.IntPtrInput
	// IPv4 address of the remote syslog server.
	Server pulumi.StringPtrInput
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerRemotelogState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerRemotelogState)(nil)).Elem()
}

type switchcontrollerRemotelogArgs struct {
	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv *string `pulumi:"csv"`
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility *string `pulumi:"facility"`
	// Remote log name.
	Name *string `pulumi:"name"`
	// Remote syslog server listening port.
	Port *int `pulumi:"port"`
	// IPv4 address of the remote syslog server.
	Server *string `pulumi:"server"`
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchcontrollerRemotelog resource.
type SwitchcontrollerRemotelogArgs struct {
	// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
	Csv pulumi.StringPtrInput
	// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
	Facility pulumi.StringPtrInput
	// Remote log name.
	Name pulumi.StringPtrInput
	// Remote syslog server listening port.
	Port pulumi.IntPtrInput
	// IPv4 address of the remote syslog server.
	Server pulumi.StringPtrInput
	// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput
	// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerRemotelogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerRemotelogArgs)(nil)).Elem()
}

type SwitchcontrollerRemotelogInput interface {
	pulumi.Input

	ToSwitchcontrollerRemotelogOutput() SwitchcontrollerRemotelogOutput
	ToSwitchcontrollerRemotelogOutputWithContext(ctx context.Context) SwitchcontrollerRemotelogOutput
}

func (*SwitchcontrollerRemotelog) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerRemotelog)(nil)).Elem()
}

func (i *SwitchcontrollerRemotelog) ToSwitchcontrollerRemotelogOutput() SwitchcontrollerRemotelogOutput {
	return i.ToSwitchcontrollerRemotelogOutputWithContext(context.Background())
}

func (i *SwitchcontrollerRemotelog) ToSwitchcontrollerRemotelogOutputWithContext(ctx context.Context) SwitchcontrollerRemotelogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerRemotelogOutput)
}

// SwitchcontrollerRemotelogArrayInput is an input type that accepts SwitchcontrollerRemotelogArray and SwitchcontrollerRemotelogArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerRemotelogArrayInput` via:
//
//	SwitchcontrollerRemotelogArray{ SwitchcontrollerRemotelogArgs{...} }
type SwitchcontrollerRemotelogArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerRemotelogArrayOutput() SwitchcontrollerRemotelogArrayOutput
	ToSwitchcontrollerRemotelogArrayOutputWithContext(context.Context) SwitchcontrollerRemotelogArrayOutput
}

type SwitchcontrollerRemotelogArray []SwitchcontrollerRemotelogInput

func (SwitchcontrollerRemotelogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerRemotelog)(nil)).Elem()
}

func (i SwitchcontrollerRemotelogArray) ToSwitchcontrollerRemotelogArrayOutput() SwitchcontrollerRemotelogArrayOutput {
	return i.ToSwitchcontrollerRemotelogArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerRemotelogArray) ToSwitchcontrollerRemotelogArrayOutputWithContext(ctx context.Context) SwitchcontrollerRemotelogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerRemotelogArrayOutput)
}

// SwitchcontrollerRemotelogMapInput is an input type that accepts SwitchcontrollerRemotelogMap and SwitchcontrollerRemotelogMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerRemotelogMapInput` via:
//
//	SwitchcontrollerRemotelogMap{ "key": SwitchcontrollerRemotelogArgs{...} }
type SwitchcontrollerRemotelogMapInput interface {
	pulumi.Input

	ToSwitchcontrollerRemotelogMapOutput() SwitchcontrollerRemotelogMapOutput
	ToSwitchcontrollerRemotelogMapOutputWithContext(context.Context) SwitchcontrollerRemotelogMapOutput
}

type SwitchcontrollerRemotelogMap map[string]SwitchcontrollerRemotelogInput

func (SwitchcontrollerRemotelogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerRemotelog)(nil)).Elem()
}

func (i SwitchcontrollerRemotelogMap) ToSwitchcontrollerRemotelogMapOutput() SwitchcontrollerRemotelogMapOutput {
	return i.ToSwitchcontrollerRemotelogMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerRemotelogMap) ToSwitchcontrollerRemotelogMapOutputWithContext(ctx context.Context) SwitchcontrollerRemotelogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerRemotelogMapOutput)
}

type SwitchcontrollerRemotelogOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerRemotelogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerRemotelog)(nil)).Elem()
}

func (o SwitchcontrollerRemotelogOutput) ToSwitchcontrollerRemotelogOutput() SwitchcontrollerRemotelogOutput {
	return o
}

func (o SwitchcontrollerRemotelogOutput) ToSwitchcontrollerRemotelogOutputWithContext(ctx context.Context) SwitchcontrollerRemotelogOutput {
	return o
}

// Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
func (o SwitchcontrollerRemotelogOutput) Csv() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerRemotelog) pulumi.StringOutput { return v.Csv }).(pulumi.StringOutput)
}

// Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
func (o SwitchcontrollerRemotelogOutput) Facility() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerRemotelog) pulumi.StringOutput { return v.Facility }).(pulumi.StringOutput)
}

// Remote log name.
func (o SwitchcontrollerRemotelogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerRemotelog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Remote syslog server listening port.
func (o SwitchcontrollerRemotelogOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerRemotelog) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// IPv4 address of the remote syslog server.
func (o SwitchcontrollerRemotelogOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerRemotelog) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o SwitchcontrollerRemotelogOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerRemotelog) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// Enable/disable logging by FortiSwitch device to a remote syslog server. Valid values: `enable`, `disable`.
func (o SwitchcontrollerRemotelogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerRemotelog) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerRemotelogOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerRemotelog) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchcontrollerRemotelogArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerRemotelogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerRemotelog)(nil)).Elem()
}

func (o SwitchcontrollerRemotelogArrayOutput) ToSwitchcontrollerRemotelogArrayOutput() SwitchcontrollerRemotelogArrayOutput {
	return o
}

func (o SwitchcontrollerRemotelogArrayOutput) ToSwitchcontrollerRemotelogArrayOutputWithContext(ctx context.Context) SwitchcontrollerRemotelogArrayOutput {
	return o
}

func (o SwitchcontrollerRemotelogArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerRemotelogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerRemotelog {
		return vs[0].([]*SwitchcontrollerRemotelog)[vs[1].(int)]
	}).(SwitchcontrollerRemotelogOutput)
}

type SwitchcontrollerRemotelogMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerRemotelogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerRemotelog)(nil)).Elem()
}

func (o SwitchcontrollerRemotelogMapOutput) ToSwitchcontrollerRemotelogMapOutput() SwitchcontrollerRemotelogMapOutput {
	return o
}

func (o SwitchcontrollerRemotelogMapOutput) ToSwitchcontrollerRemotelogMapOutputWithContext(ctx context.Context) SwitchcontrollerRemotelogMapOutput {
	return o
}

func (o SwitchcontrollerRemotelogMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerRemotelogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerRemotelog {
		return vs[0].(map[string]*SwitchcontrollerRemotelog)[vs[1].(string)]
	}).(SwitchcontrollerRemotelogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerRemotelogInput)(nil)).Elem(), &SwitchcontrollerRemotelog{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerRemotelogArrayInput)(nil)).Elem(), SwitchcontrollerRemotelogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerRemotelogMapInput)(nil)).Elem(), SwitchcontrollerRemotelogMap{})
	pulumi.RegisterOutputType(SwitchcontrollerRemotelogOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerRemotelogArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerRemotelogMapOutput{})
}
