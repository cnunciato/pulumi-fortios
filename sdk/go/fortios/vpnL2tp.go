// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure L2TP.
//
// ## Import
//
// # Vpn L2Tp can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/vpnL2tp:VpnL2tp labelname VpnL2Tp
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/vpnL2tp:VpnL2tp labelname VpnL2Tp
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type VpnL2tp struct {
	pulumi.CustomResourceState

	// Enable/disable data compression. Valid values: `enable`, `disable`.
	Compress pulumi.StringOutput `pulumi:"compress"`
	// End IP.
	Eip pulumi.StringOutput `pulumi:"eip"`
	// Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
	EnforceIpsec pulumi.StringOutput `pulumi:"enforceIpsec"`
	// L2TP hello message interval in seconds (0 - 3600 sec, default = 60).
	HelloInterval pulumi.IntOutput `pulumi:"helloInterval"`
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval pulumi.IntOutput `pulumi:"lcpEchoInterval"`
	// Maximum number of missed LCP echo messages before disconnect.
	LcpMaxEchoFails pulumi.IntOutput `pulumi:"lcpMaxEchoFails"`
	// Start IP.
	Sip pulumi.StringOutput `pulumi:"sip"`
	// Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// User group.
	Usrgrp pulumi.StringOutput `pulumi:"usrgrp"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewVpnL2tp registers a new resource with the given unique name, arguments, and options.
func NewVpnL2tp(ctx *pulumi.Context,
	name string, args *VpnL2tpArgs, opts ...pulumi.ResourceOption) (*VpnL2tp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VpnL2tp
	err := ctx.RegisterResource("fortios:index/vpnL2tp:VpnL2tp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnL2tp gets an existing VpnL2tp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnL2tp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnL2tpState, opts ...pulumi.ResourceOption) (*VpnL2tp, error) {
	var resource VpnL2tp
	err := ctx.ReadResource("fortios:index/vpnL2tp:VpnL2tp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnL2tp resources.
type vpnL2tpState struct {
	// Enable/disable data compression. Valid values: `enable`, `disable`.
	Compress *string `pulumi:"compress"`
	// End IP.
	Eip *string `pulumi:"eip"`
	// Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
	EnforceIpsec *string `pulumi:"enforceIpsec"`
	// L2TP hello message interval in seconds (0 - 3600 sec, default = 60).
	HelloInterval *int `pulumi:"helloInterval"`
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval *int `pulumi:"lcpEchoInterval"`
	// Maximum number of missed LCP echo messages before disconnect.
	LcpMaxEchoFails *int `pulumi:"lcpMaxEchoFails"`
	// Start IP.
	Sip *string `pulumi:"sip"`
	// Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// User group.
	Usrgrp *string `pulumi:"usrgrp"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type VpnL2tpState struct {
	// Enable/disable data compression. Valid values: `enable`, `disable`.
	Compress pulumi.StringPtrInput
	// End IP.
	Eip pulumi.StringPtrInput
	// Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
	EnforceIpsec pulumi.StringPtrInput
	// L2TP hello message interval in seconds (0 - 3600 sec, default = 60).
	HelloInterval pulumi.IntPtrInput
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval pulumi.IntPtrInput
	// Maximum number of missed LCP echo messages before disconnect.
	LcpMaxEchoFails pulumi.IntPtrInput
	// Start IP.
	Sip pulumi.StringPtrInput
	// Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// User group.
	Usrgrp pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnL2tpState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnL2tpState)(nil)).Elem()
}

type vpnL2tpArgs struct {
	// Enable/disable data compression. Valid values: `enable`, `disable`.
	Compress *string `pulumi:"compress"`
	// End IP.
	Eip *string `pulumi:"eip"`
	// Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
	EnforceIpsec *string `pulumi:"enforceIpsec"`
	// L2TP hello message interval in seconds (0 - 3600 sec, default = 60).
	HelloInterval *int `pulumi:"helloInterval"`
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval *int `pulumi:"lcpEchoInterval"`
	// Maximum number of missed LCP echo messages before disconnect.
	LcpMaxEchoFails *int `pulumi:"lcpMaxEchoFails"`
	// Start IP.
	Sip *string `pulumi:"sip"`
	// Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
	Status string `pulumi:"status"`
	// User group.
	Usrgrp *string `pulumi:"usrgrp"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a VpnL2tp resource.
type VpnL2tpArgs struct {
	// Enable/disable data compression. Valid values: `enable`, `disable`.
	Compress pulumi.StringPtrInput
	// End IP.
	Eip pulumi.StringPtrInput
	// Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
	EnforceIpsec pulumi.StringPtrInput
	// L2TP hello message interval in seconds (0 - 3600 sec, default = 60).
	HelloInterval pulumi.IntPtrInput
	// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
	LcpEchoInterval pulumi.IntPtrInput
	// Maximum number of missed LCP echo messages before disconnect.
	LcpMaxEchoFails pulumi.IntPtrInput
	// Start IP.
	Sip pulumi.StringPtrInput
	// Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
	Status pulumi.StringInput
	// User group.
	Usrgrp pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (VpnL2tpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnL2tpArgs)(nil)).Elem()
}

type VpnL2tpInput interface {
	pulumi.Input

	ToVpnL2tpOutput() VpnL2tpOutput
	ToVpnL2tpOutputWithContext(ctx context.Context) VpnL2tpOutput
}

func (*VpnL2tp) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnL2tp)(nil)).Elem()
}

func (i *VpnL2tp) ToVpnL2tpOutput() VpnL2tpOutput {
	return i.ToVpnL2tpOutputWithContext(context.Background())
}

func (i *VpnL2tp) ToVpnL2tpOutputWithContext(ctx context.Context) VpnL2tpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnL2tpOutput)
}

// VpnL2tpArrayInput is an input type that accepts VpnL2tpArray and VpnL2tpArrayOutput values.
// You can construct a concrete instance of `VpnL2tpArrayInput` via:
//
//	VpnL2tpArray{ VpnL2tpArgs{...} }
type VpnL2tpArrayInput interface {
	pulumi.Input

	ToVpnL2tpArrayOutput() VpnL2tpArrayOutput
	ToVpnL2tpArrayOutputWithContext(context.Context) VpnL2tpArrayOutput
}

type VpnL2tpArray []VpnL2tpInput

func (VpnL2tpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnL2tp)(nil)).Elem()
}

func (i VpnL2tpArray) ToVpnL2tpArrayOutput() VpnL2tpArrayOutput {
	return i.ToVpnL2tpArrayOutputWithContext(context.Background())
}

func (i VpnL2tpArray) ToVpnL2tpArrayOutputWithContext(ctx context.Context) VpnL2tpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnL2tpArrayOutput)
}

// VpnL2tpMapInput is an input type that accepts VpnL2tpMap and VpnL2tpMapOutput values.
// You can construct a concrete instance of `VpnL2tpMapInput` via:
//
//	VpnL2tpMap{ "key": VpnL2tpArgs{...} }
type VpnL2tpMapInput interface {
	pulumi.Input

	ToVpnL2tpMapOutput() VpnL2tpMapOutput
	ToVpnL2tpMapOutputWithContext(context.Context) VpnL2tpMapOutput
}

type VpnL2tpMap map[string]VpnL2tpInput

func (VpnL2tpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnL2tp)(nil)).Elem()
}

func (i VpnL2tpMap) ToVpnL2tpMapOutput() VpnL2tpMapOutput {
	return i.ToVpnL2tpMapOutputWithContext(context.Background())
}

func (i VpnL2tpMap) ToVpnL2tpMapOutputWithContext(ctx context.Context) VpnL2tpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnL2tpMapOutput)
}

type VpnL2tpOutput struct{ *pulumi.OutputState }

func (VpnL2tpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnL2tp)(nil)).Elem()
}

func (o VpnL2tpOutput) ToVpnL2tpOutput() VpnL2tpOutput {
	return o
}

func (o VpnL2tpOutput) ToVpnL2tpOutputWithContext(ctx context.Context) VpnL2tpOutput {
	return o
}

// Enable/disable data compression. Valid values: `enable`, `disable`.
func (o VpnL2tpOutput) Compress() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnL2tp) pulumi.StringOutput { return v.Compress }).(pulumi.StringOutput)
}

// End IP.
func (o VpnL2tpOutput) Eip() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnL2tp) pulumi.StringOutput { return v.Eip }).(pulumi.StringOutput)
}

// Enable/disable IPsec enforcement. Valid values: `enable`, `disable`.
func (o VpnL2tpOutput) EnforceIpsec() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnL2tp) pulumi.StringOutput { return v.EnforceIpsec }).(pulumi.StringOutput)
}

// L2TP hello message interval in seconds (0 - 3600 sec, default = 60).
func (o VpnL2tpOutput) HelloInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnL2tp) pulumi.IntOutput { return v.HelloInterval }).(pulumi.IntOutput)
}

// Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
func (o VpnL2tpOutput) LcpEchoInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnL2tp) pulumi.IntOutput { return v.LcpEchoInterval }).(pulumi.IntOutput)
}

// Maximum number of missed LCP echo messages before disconnect.
func (o VpnL2tpOutput) LcpMaxEchoFails() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnL2tp) pulumi.IntOutput { return v.LcpMaxEchoFails }).(pulumi.IntOutput)
}

// Start IP.
func (o VpnL2tpOutput) Sip() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnL2tp) pulumi.StringOutput { return v.Sip }).(pulumi.StringOutput)
}

// Enable/disable FortiGate as a L2TP gateway. Valid values: `enable`, `disable`.
func (o VpnL2tpOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnL2tp) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// User group.
func (o VpnL2tpOutput) Usrgrp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnL2tp) pulumi.StringOutput { return v.Usrgrp }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o VpnL2tpOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnL2tp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type VpnL2tpArrayOutput struct{ *pulumi.OutputState }

func (VpnL2tpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnL2tp)(nil)).Elem()
}

func (o VpnL2tpArrayOutput) ToVpnL2tpArrayOutput() VpnL2tpArrayOutput {
	return o
}

func (o VpnL2tpArrayOutput) ToVpnL2tpArrayOutputWithContext(ctx context.Context) VpnL2tpArrayOutput {
	return o
}

func (o VpnL2tpArrayOutput) Index(i pulumi.IntInput) VpnL2tpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnL2tp {
		return vs[0].([]*VpnL2tp)[vs[1].(int)]
	}).(VpnL2tpOutput)
}

type VpnL2tpMapOutput struct{ *pulumi.OutputState }

func (VpnL2tpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnL2tp)(nil)).Elem()
}

func (o VpnL2tpMapOutput) ToVpnL2tpMapOutput() VpnL2tpMapOutput {
	return o
}

func (o VpnL2tpMapOutput) ToVpnL2tpMapOutputWithContext(ctx context.Context) VpnL2tpMapOutput {
	return o
}

func (o VpnL2tpMapOutput) MapIndex(k pulumi.StringInput) VpnL2tpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnL2tp {
		return vs[0].(map[string]*VpnL2tp)[vs[1].(string)]
	}).(VpnL2tpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnL2tpInput)(nil)).Elem(), &VpnL2tp{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnL2tpArrayInput)(nil)).Elem(), VpnL2tpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnL2tpMapInput)(nil)).Elem(), VpnL2tpMap{})
	pulumi.RegisterOutputType(VpnL2tpOutput{})
	pulumi.RegisterOutputType(VpnL2tpArrayOutput{})
	pulumi.RegisterOutputType(VpnL2tpMapOutput{})
}
