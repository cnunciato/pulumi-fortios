// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure WTP groups.
//
// ## Import
//
// # WirelessController WtpGroup can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerWtpgroup:WirelesscontrollerWtpgroup labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerWtpgroup:WirelesscontrollerWtpgroup labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WirelesscontrollerWtpgroup struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// WTP group name.
	Name pulumi.StringOutput `pulumi:"name"`
	// FortiAP models to define the WTP group platform type.
	PlatformType pulumi.StringOutput `pulumi:"platformType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// WTP list. The structure of `wtps` block is documented below.
	Wtps WirelesscontrollerWtpgroupWtpArrayOutput `pulumi:"wtps"`
}

// NewWirelesscontrollerWtpgroup registers a new resource with the given unique name, arguments, and options.
func NewWirelesscontrollerWtpgroup(ctx *pulumi.Context,
	name string, args *WirelesscontrollerWtpgroupArgs, opts ...pulumi.ResourceOption) (*WirelesscontrollerWtpgroup, error) {
	if args == nil {
		args = &WirelesscontrollerWtpgroupArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelesscontrollerWtpgroup
	err := ctx.RegisterResource("fortios:index/wirelesscontrollerWtpgroup:WirelesscontrollerWtpgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelesscontrollerWtpgroup gets an existing WirelesscontrollerWtpgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelesscontrollerWtpgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelesscontrollerWtpgroupState, opts ...pulumi.ResourceOption) (*WirelesscontrollerWtpgroup, error) {
	var resource WirelesscontrollerWtpgroup
	err := ctx.ReadResource("fortios:index/wirelesscontrollerWtpgroup:WirelesscontrollerWtpgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelesscontrollerWtpgroup resources.
type wirelesscontrollerWtpgroupState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// WTP group name.
	Name *string `pulumi:"name"`
	// FortiAP models to define the WTP group platform type.
	PlatformType *string `pulumi:"platformType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WTP list. The structure of `wtps` block is documented below.
	Wtps []WirelesscontrollerWtpgroupWtp `pulumi:"wtps"`
}

type WirelesscontrollerWtpgroupState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// WTP group name.
	Name pulumi.StringPtrInput
	// FortiAP models to define the WTP group platform type.
	PlatformType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WTP list. The structure of `wtps` block is documented below.
	Wtps WirelesscontrollerWtpgroupWtpArrayInput
}

func (WirelesscontrollerWtpgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerWtpgroupState)(nil)).Elem()
}

type wirelesscontrollerWtpgroupArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// WTP group name.
	Name *string `pulumi:"name"`
	// FortiAP models to define the WTP group platform type.
	PlatformType *string `pulumi:"platformType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WTP list. The structure of `wtps` block is documented below.
	Wtps []WirelesscontrollerWtpgroupWtp `pulumi:"wtps"`
}

// The set of arguments for constructing a WirelesscontrollerWtpgroup resource.
type WirelesscontrollerWtpgroupArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// WTP group name.
	Name pulumi.StringPtrInput
	// FortiAP models to define the WTP group platform type.
	PlatformType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WTP list. The structure of `wtps` block is documented below.
	Wtps WirelesscontrollerWtpgroupWtpArrayInput
}

func (WirelesscontrollerWtpgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerWtpgroupArgs)(nil)).Elem()
}

type WirelesscontrollerWtpgroupInput interface {
	pulumi.Input

	ToWirelesscontrollerWtpgroupOutput() WirelesscontrollerWtpgroupOutput
	ToWirelesscontrollerWtpgroupOutputWithContext(ctx context.Context) WirelesscontrollerWtpgroupOutput
}

func (*WirelesscontrollerWtpgroup) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerWtpgroup)(nil)).Elem()
}

func (i *WirelesscontrollerWtpgroup) ToWirelesscontrollerWtpgroupOutput() WirelesscontrollerWtpgroupOutput {
	return i.ToWirelesscontrollerWtpgroupOutputWithContext(context.Background())
}

func (i *WirelesscontrollerWtpgroup) ToWirelesscontrollerWtpgroupOutputWithContext(ctx context.Context) WirelesscontrollerWtpgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerWtpgroupOutput)
}

// WirelesscontrollerWtpgroupArrayInput is an input type that accepts WirelesscontrollerWtpgroupArray and WirelesscontrollerWtpgroupArrayOutput values.
// You can construct a concrete instance of `WirelesscontrollerWtpgroupArrayInput` via:
//
//	WirelesscontrollerWtpgroupArray{ WirelesscontrollerWtpgroupArgs{...} }
type WirelesscontrollerWtpgroupArrayInput interface {
	pulumi.Input

	ToWirelesscontrollerWtpgroupArrayOutput() WirelesscontrollerWtpgroupArrayOutput
	ToWirelesscontrollerWtpgroupArrayOutputWithContext(context.Context) WirelesscontrollerWtpgroupArrayOutput
}

type WirelesscontrollerWtpgroupArray []WirelesscontrollerWtpgroupInput

func (WirelesscontrollerWtpgroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerWtpgroup)(nil)).Elem()
}

func (i WirelesscontrollerWtpgroupArray) ToWirelesscontrollerWtpgroupArrayOutput() WirelesscontrollerWtpgroupArrayOutput {
	return i.ToWirelesscontrollerWtpgroupArrayOutputWithContext(context.Background())
}

func (i WirelesscontrollerWtpgroupArray) ToWirelesscontrollerWtpgroupArrayOutputWithContext(ctx context.Context) WirelesscontrollerWtpgroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerWtpgroupArrayOutput)
}

// WirelesscontrollerWtpgroupMapInput is an input type that accepts WirelesscontrollerWtpgroupMap and WirelesscontrollerWtpgroupMapOutput values.
// You can construct a concrete instance of `WirelesscontrollerWtpgroupMapInput` via:
//
//	WirelesscontrollerWtpgroupMap{ "key": WirelesscontrollerWtpgroupArgs{...} }
type WirelesscontrollerWtpgroupMapInput interface {
	pulumi.Input

	ToWirelesscontrollerWtpgroupMapOutput() WirelesscontrollerWtpgroupMapOutput
	ToWirelesscontrollerWtpgroupMapOutputWithContext(context.Context) WirelesscontrollerWtpgroupMapOutput
}

type WirelesscontrollerWtpgroupMap map[string]WirelesscontrollerWtpgroupInput

func (WirelesscontrollerWtpgroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerWtpgroup)(nil)).Elem()
}

func (i WirelesscontrollerWtpgroupMap) ToWirelesscontrollerWtpgroupMapOutput() WirelesscontrollerWtpgroupMapOutput {
	return i.ToWirelesscontrollerWtpgroupMapOutputWithContext(context.Background())
}

func (i WirelesscontrollerWtpgroupMap) ToWirelesscontrollerWtpgroupMapOutputWithContext(ctx context.Context) WirelesscontrollerWtpgroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerWtpgroupMapOutput)
}

type WirelesscontrollerWtpgroupOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerWtpgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerWtpgroup)(nil)).Elem()
}

func (o WirelesscontrollerWtpgroupOutput) ToWirelesscontrollerWtpgroupOutput() WirelesscontrollerWtpgroupOutput {
	return o
}

func (o WirelesscontrollerWtpgroupOutput) ToWirelesscontrollerWtpgroupOutputWithContext(ctx context.Context) WirelesscontrollerWtpgroupOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o WirelesscontrollerWtpgroupOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerWtpgroup) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// WTP group name.
func (o WirelesscontrollerWtpgroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerWtpgroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// FortiAP models to define the WTP group platform type.
func (o WirelesscontrollerWtpgroupOutput) PlatformType() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerWtpgroup) pulumi.StringOutput { return v.PlatformType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WirelesscontrollerWtpgroupOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerWtpgroup) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// WTP list. The structure of `wtps` block is documented below.
func (o WirelesscontrollerWtpgroupOutput) Wtps() WirelesscontrollerWtpgroupWtpArrayOutput {
	return o.ApplyT(func(v *WirelesscontrollerWtpgroup) WirelesscontrollerWtpgroupWtpArrayOutput { return v.Wtps }).(WirelesscontrollerWtpgroupWtpArrayOutput)
}

type WirelesscontrollerWtpgroupArrayOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerWtpgroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerWtpgroup)(nil)).Elem()
}

func (o WirelesscontrollerWtpgroupArrayOutput) ToWirelesscontrollerWtpgroupArrayOutput() WirelesscontrollerWtpgroupArrayOutput {
	return o
}

func (o WirelesscontrollerWtpgroupArrayOutput) ToWirelesscontrollerWtpgroupArrayOutputWithContext(ctx context.Context) WirelesscontrollerWtpgroupArrayOutput {
	return o
}

func (o WirelesscontrollerWtpgroupArrayOutput) Index(i pulumi.IntInput) WirelesscontrollerWtpgroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelesscontrollerWtpgroup {
		return vs[0].([]*WirelesscontrollerWtpgroup)[vs[1].(int)]
	}).(WirelesscontrollerWtpgroupOutput)
}

type WirelesscontrollerWtpgroupMapOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerWtpgroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerWtpgroup)(nil)).Elem()
}

func (o WirelesscontrollerWtpgroupMapOutput) ToWirelesscontrollerWtpgroupMapOutput() WirelesscontrollerWtpgroupMapOutput {
	return o
}

func (o WirelesscontrollerWtpgroupMapOutput) ToWirelesscontrollerWtpgroupMapOutputWithContext(ctx context.Context) WirelesscontrollerWtpgroupMapOutput {
	return o
}

func (o WirelesscontrollerWtpgroupMapOutput) MapIndex(k pulumi.StringInput) WirelesscontrollerWtpgroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelesscontrollerWtpgroup {
		return vs[0].(map[string]*WirelesscontrollerWtpgroup)[vs[1].(string)]
	}).(WirelesscontrollerWtpgroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerWtpgroupInput)(nil)).Elem(), &WirelesscontrollerWtpgroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerWtpgroupArrayInput)(nil)).Elem(), WirelesscontrollerWtpgroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerWtpgroupMapInput)(nil)).Elem(), WirelesscontrollerWtpgroupMap{})
	pulumi.RegisterOutputType(WirelesscontrollerWtpgroupOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerWtpgroupArrayOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerWtpgroupMapOutput{})
}
