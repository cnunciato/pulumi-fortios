// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an fortios system ipiptunnel
func LookupSystemIpiptunnel(ctx *pulumi.Context, args *LookupSystemIpiptunnelArgs, opts ...pulumi.InvokeOption) (*LookupSystemIpiptunnelResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupSystemIpiptunnelResult
	err := ctx.Invoke("fortios:index/getSystemIpiptunnel:getSystemIpiptunnel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSystemIpiptunnel.
type LookupSystemIpiptunnelArgs struct {
	// Specify the name of the desired system ipiptunnel.
	Name string `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getSystemIpiptunnel.
type LookupSystemIpiptunnelResult struct {
	// Enable/disable tunnel ASIC offloading.
	AutoAsicOffload string `pulumi:"autoAsicOffload"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Interface name that is associated with the incoming traffic from available options.
	Interface string `pulumi:"interface"`
	// IPv4 address for the local gateway.
	LocalGw string `pulumi:"localGw"`
	// IPIP Tunnel name.
	Name string `pulumi:"name"`
	// IPv4 address for the remote gateway.
	RemoteGw string `pulumi:"remoteGw"`
	// Enable/disable use of SD-WAN to reach remote gateway.
	UseSdwan  string  `pulumi:"useSdwan"`
	Vdomparam *string `pulumi:"vdomparam"`
}

func LookupSystemIpiptunnelOutput(ctx *pulumi.Context, args LookupSystemIpiptunnelOutputArgs, opts ...pulumi.InvokeOption) LookupSystemIpiptunnelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSystemIpiptunnelResult, error) {
			args := v.(LookupSystemIpiptunnelArgs)
			r, err := LookupSystemIpiptunnel(ctx, &args, opts...)
			var s LookupSystemIpiptunnelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSystemIpiptunnelResultOutput)
}

// A collection of arguments for invoking getSystemIpiptunnel.
type LookupSystemIpiptunnelOutputArgs struct {
	// Specify the name of the desired system ipiptunnel.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupSystemIpiptunnelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSystemIpiptunnelArgs)(nil)).Elem()
}

// A collection of values returned by getSystemIpiptunnel.
type LookupSystemIpiptunnelResultOutput struct{ *pulumi.OutputState }

func (LookupSystemIpiptunnelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSystemIpiptunnelResult)(nil)).Elem()
}

func (o LookupSystemIpiptunnelResultOutput) ToLookupSystemIpiptunnelResultOutput() LookupSystemIpiptunnelResultOutput {
	return o
}

func (o LookupSystemIpiptunnelResultOutput) ToLookupSystemIpiptunnelResultOutputWithContext(ctx context.Context) LookupSystemIpiptunnelResultOutput {
	return o
}

// Enable/disable tunnel ASIC offloading.
func (o LookupSystemIpiptunnelResultOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemIpiptunnelResult) string { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSystemIpiptunnelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemIpiptunnelResult) string { return v.Id }).(pulumi.StringOutput)
}

// Interface name that is associated with the incoming traffic from available options.
func (o LookupSystemIpiptunnelResultOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemIpiptunnelResult) string { return v.Interface }).(pulumi.StringOutput)
}

// IPv4 address for the local gateway.
func (o LookupSystemIpiptunnelResultOutput) LocalGw() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemIpiptunnelResult) string { return v.LocalGw }).(pulumi.StringOutput)
}

// IPIP Tunnel name.
func (o LookupSystemIpiptunnelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemIpiptunnelResult) string { return v.Name }).(pulumi.StringOutput)
}

// IPv4 address for the remote gateway.
func (o LookupSystemIpiptunnelResultOutput) RemoteGw() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemIpiptunnelResult) string { return v.RemoteGw }).(pulumi.StringOutput)
}

// Enable/disable use of SD-WAN to reach remote gateway.
func (o LookupSystemIpiptunnelResultOutput) UseSdwan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemIpiptunnelResult) string { return v.UseSdwan }).(pulumi.StringOutput)
}

func (o LookupSystemIpiptunnelResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSystemIpiptunnelResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSystemIpiptunnelResultOutput{})
}
