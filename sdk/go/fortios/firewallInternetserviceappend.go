// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure additional port mappings for Internet Services. Applies to FortiOS Version `6.2.4,6.2.6,6.4.1,6.4.2,6.4.10,7.0.0,7.0.1,7.0.2,7.0.3,7.0.4,7.0.5,7.0.6,7.2.0,7.2.1,7.2.2`.
//
// ## Import
//
// # Firewall InternetServiceAppend can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/firewallInternetserviceappend:FirewallInternetserviceappend labelname FirewallInternetServiceAppend
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/firewallInternetserviceappend:FirewallInternetserviceappend labelname FirewallInternetServiceAppend
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FirewallInternetserviceappend struct {
	pulumi.CustomResourceState

	// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
	AddrMode pulumi.StringOutput `pulumi:"addrMode"`
	// Appending TCP/UDP/SCTP destination port (1 to 65535).
	AppendPort pulumi.IntOutput `pulumi:"appendPort"`
	// Matching TCP/UDP/SCTP destination port (1 to 65535).
	MatchPort pulumi.IntOutput `pulumi:"matchPort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallInternetserviceappend registers a new resource with the given unique name, arguments, and options.
func NewFirewallInternetserviceappend(ctx *pulumi.Context,
	name string, args *FirewallInternetserviceappendArgs, opts ...pulumi.ResourceOption) (*FirewallInternetserviceappend, error) {
	if args == nil {
		args = &FirewallInternetserviceappendArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallInternetserviceappend
	err := ctx.RegisterResource("fortios:index/firewallInternetserviceappend:FirewallInternetserviceappend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallInternetserviceappend gets an existing FirewallInternetserviceappend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallInternetserviceappend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallInternetserviceappendState, opts ...pulumi.ResourceOption) (*FirewallInternetserviceappend, error) {
	var resource FirewallInternetserviceappend
	err := ctx.ReadResource("fortios:index/firewallInternetserviceappend:FirewallInternetserviceappend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallInternetserviceappend resources.
type firewallInternetserviceappendState struct {
	// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
	AddrMode *string `pulumi:"addrMode"`
	// Appending TCP/UDP/SCTP destination port (1 to 65535).
	AppendPort *int `pulumi:"appendPort"`
	// Matching TCP/UDP/SCTP destination port (1 to 65535).
	MatchPort *int `pulumi:"matchPort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallInternetserviceappendState struct {
	// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
	AddrMode pulumi.StringPtrInput
	// Appending TCP/UDP/SCTP destination port (1 to 65535).
	AppendPort pulumi.IntPtrInput
	// Matching TCP/UDP/SCTP destination port (1 to 65535).
	MatchPort pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallInternetserviceappendState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallInternetserviceappendState)(nil)).Elem()
}

type firewallInternetserviceappendArgs struct {
	// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
	AddrMode *string `pulumi:"addrMode"`
	// Appending TCP/UDP/SCTP destination port (1 to 65535).
	AppendPort *int `pulumi:"appendPort"`
	// Matching TCP/UDP/SCTP destination port (1 to 65535).
	MatchPort *int `pulumi:"matchPort"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallInternetserviceappend resource.
type FirewallInternetserviceappendArgs struct {
	// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
	AddrMode pulumi.StringPtrInput
	// Appending TCP/UDP/SCTP destination port (1 to 65535).
	AppendPort pulumi.IntPtrInput
	// Matching TCP/UDP/SCTP destination port (1 to 65535).
	MatchPort pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallInternetserviceappendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallInternetserviceappendArgs)(nil)).Elem()
}

type FirewallInternetserviceappendInput interface {
	pulumi.Input

	ToFirewallInternetserviceappendOutput() FirewallInternetserviceappendOutput
	ToFirewallInternetserviceappendOutputWithContext(ctx context.Context) FirewallInternetserviceappendOutput
}

func (*FirewallInternetserviceappend) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallInternetserviceappend)(nil)).Elem()
}

func (i *FirewallInternetserviceappend) ToFirewallInternetserviceappendOutput() FirewallInternetserviceappendOutput {
	return i.ToFirewallInternetserviceappendOutputWithContext(context.Background())
}

func (i *FirewallInternetserviceappend) ToFirewallInternetserviceappendOutputWithContext(ctx context.Context) FirewallInternetserviceappendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInternetserviceappendOutput)
}

// FirewallInternetserviceappendArrayInput is an input type that accepts FirewallInternetserviceappendArray and FirewallInternetserviceappendArrayOutput values.
// You can construct a concrete instance of `FirewallInternetserviceappendArrayInput` via:
//
//	FirewallInternetserviceappendArray{ FirewallInternetserviceappendArgs{...} }
type FirewallInternetserviceappendArrayInput interface {
	pulumi.Input

	ToFirewallInternetserviceappendArrayOutput() FirewallInternetserviceappendArrayOutput
	ToFirewallInternetserviceappendArrayOutputWithContext(context.Context) FirewallInternetserviceappendArrayOutput
}

type FirewallInternetserviceappendArray []FirewallInternetserviceappendInput

func (FirewallInternetserviceappendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallInternetserviceappend)(nil)).Elem()
}

func (i FirewallInternetserviceappendArray) ToFirewallInternetserviceappendArrayOutput() FirewallInternetserviceappendArrayOutput {
	return i.ToFirewallInternetserviceappendArrayOutputWithContext(context.Background())
}

func (i FirewallInternetserviceappendArray) ToFirewallInternetserviceappendArrayOutputWithContext(ctx context.Context) FirewallInternetserviceappendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInternetserviceappendArrayOutput)
}

// FirewallInternetserviceappendMapInput is an input type that accepts FirewallInternetserviceappendMap and FirewallInternetserviceappendMapOutput values.
// You can construct a concrete instance of `FirewallInternetserviceappendMapInput` via:
//
//	FirewallInternetserviceappendMap{ "key": FirewallInternetserviceappendArgs{...} }
type FirewallInternetserviceappendMapInput interface {
	pulumi.Input

	ToFirewallInternetserviceappendMapOutput() FirewallInternetserviceappendMapOutput
	ToFirewallInternetserviceappendMapOutputWithContext(context.Context) FirewallInternetserviceappendMapOutput
}

type FirewallInternetserviceappendMap map[string]FirewallInternetserviceappendInput

func (FirewallInternetserviceappendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallInternetserviceappend)(nil)).Elem()
}

func (i FirewallInternetserviceappendMap) ToFirewallInternetserviceappendMapOutput() FirewallInternetserviceappendMapOutput {
	return i.ToFirewallInternetserviceappendMapOutputWithContext(context.Background())
}

func (i FirewallInternetserviceappendMap) ToFirewallInternetserviceappendMapOutputWithContext(ctx context.Context) FirewallInternetserviceappendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInternetserviceappendMapOutput)
}

type FirewallInternetserviceappendOutput struct{ *pulumi.OutputState }

func (FirewallInternetserviceappendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallInternetserviceappend)(nil)).Elem()
}

func (o FirewallInternetserviceappendOutput) ToFirewallInternetserviceappendOutput() FirewallInternetserviceappendOutput {
	return o
}

func (o FirewallInternetserviceappendOutput) ToFirewallInternetserviceappendOutputWithContext(ctx context.Context) FirewallInternetserviceappendOutput {
	return o
}

// Address mode (IPv4 or IPv6) Valid values: `ipv4`, `ipv6`, `both`.
func (o FirewallInternetserviceappendOutput) AddrMode() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInternetserviceappend) pulumi.StringOutput { return v.AddrMode }).(pulumi.StringOutput)
}

// Appending TCP/UDP/SCTP destination port (1 to 65535).
func (o FirewallInternetserviceappendOutput) AppendPort() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallInternetserviceappend) pulumi.IntOutput { return v.AppendPort }).(pulumi.IntOutput)
}

// Matching TCP/UDP/SCTP destination port (1 to 65535).
func (o FirewallInternetserviceappendOutput) MatchPort() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallInternetserviceappend) pulumi.IntOutput { return v.MatchPort }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FirewallInternetserviceappendOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInternetserviceappend) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallInternetserviceappendArrayOutput struct{ *pulumi.OutputState }

func (FirewallInternetserviceappendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallInternetserviceappend)(nil)).Elem()
}

func (o FirewallInternetserviceappendArrayOutput) ToFirewallInternetserviceappendArrayOutput() FirewallInternetserviceappendArrayOutput {
	return o
}

func (o FirewallInternetserviceappendArrayOutput) ToFirewallInternetserviceappendArrayOutputWithContext(ctx context.Context) FirewallInternetserviceappendArrayOutput {
	return o
}

func (o FirewallInternetserviceappendArrayOutput) Index(i pulumi.IntInput) FirewallInternetserviceappendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallInternetserviceappend {
		return vs[0].([]*FirewallInternetserviceappend)[vs[1].(int)]
	}).(FirewallInternetserviceappendOutput)
}

type FirewallInternetserviceappendMapOutput struct{ *pulumi.OutputState }

func (FirewallInternetserviceappendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallInternetserviceappend)(nil)).Elem()
}

func (o FirewallInternetserviceappendMapOutput) ToFirewallInternetserviceappendMapOutput() FirewallInternetserviceappendMapOutput {
	return o
}

func (o FirewallInternetserviceappendMapOutput) ToFirewallInternetserviceappendMapOutputWithContext(ctx context.Context) FirewallInternetserviceappendMapOutput {
	return o
}

func (o FirewallInternetserviceappendMapOutput) MapIndex(k pulumi.StringInput) FirewallInternetserviceappendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallInternetserviceappend {
		return vs[0].(map[string]*FirewallInternetserviceappend)[vs[1].(string)]
	}).(FirewallInternetserviceappendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInternetserviceappendInput)(nil)).Elem(), &FirewallInternetserviceappend{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInternetserviceappendArrayInput)(nil)).Elem(), FirewallInternetserviceappendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInternetserviceappendMapInput)(nil)).Elem(), FirewallInternetserviceappendMap{})
	pulumi.RegisterOutputType(FirewallInternetserviceappendOutput{})
	pulumi.RegisterOutputType(FirewallInternetserviceappendArrayOutput{})
	pulumi.RegisterOutputType(FirewallInternetserviceappendMapOutput{})
}
