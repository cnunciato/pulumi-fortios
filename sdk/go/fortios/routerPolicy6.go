// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPv6 routing policies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewRouterPolicy6(ctx, "trname", &fortios.RouterPolicy6Args{
//				Dst:          pulumi.String("::/0"),
//				EndPort:      pulumi.Int(65535),
//				Gateway:      pulumi.String("::"),
//				InputDevice:  pulumi.String("port1"),
//				OutputDevice: pulumi.String("port3"),
//				Protocol:     pulumi.Int(33),
//				SeqNum:       pulumi.Int(1),
//				Src:          pulumi.String("2001:db8:85a3::8a2e:370:7334/128"),
//				StartPort:    pulumi.Int(1),
//				Status:       pulumi.String("enable"),
//				Tos:          pulumi.String("0x00"),
//				TosMask:      pulumi.String("0x00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Router Policy6 can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/routerPolicy6:RouterPolicy6 labelname {{seq_num}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/routerPolicy6:RouterPolicy6 labelname {{seq_num}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type RouterPolicy6 struct {
	pulumi.CustomResourceState

	// Action of the policy route. Valid values: `deny`, `permit`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Optional comments.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Destination IPv6 prefix.
	Dst pulumi.StringOutput `pulumi:"dst"`
	// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
	DstNegate pulumi.StringOutput `pulumi:"dstNegate"`
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs RouterPolicy6DstaddrArrayOutput `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// End destination port number (1 - 65535).
	EndPort pulumi.IntOutput `pulumi:"endPort"`
	// IPv6 address of the gateway.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Incoming interface name. Configuration examples: for FortiOS Version <= "6.2.4": `inputDevice  = "port2"`, for FortiOS Version >= "6.2.4": `inputDevice  = "\"fortilink\" \"port1\""`.
	InputDevice pulumi.StringOutput `pulumi:"inputDevice"`
	// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
	InputDeviceNegate pulumi.StringOutput `pulumi:"inputDeviceNegate"`
	// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms RouterPolicy6InternetServiceCustomArrayOutput `pulumi:"internetServiceCustoms"`
	// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds RouterPolicy6InternetServiceIdArrayOutput `pulumi:"internetServiceIds"`
	// Outgoing interface name.
	OutputDevice pulumi.StringOutput `pulumi:"outputDevice"`
	// Protocol number (0 - 255).
	Protocol pulumi.IntOutput `pulumi:"protocol"`
	// Sequence number.
	SeqNum pulumi.IntOutput `pulumi:"seqNum"`
	// Source IPv6 prefix.
	Src pulumi.StringOutput `pulumi:"src"`
	// Enable/disable negating source address match. Valid values: `enable`, `disable`.
	SrcNegate pulumi.StringOutput `pulumi:"srcNegate"`
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs RouterPolicy6SrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Start destination port number (1 - 65535).
	StartPort pulumi.IntOutput `pulumi:"startPort"`
	// Enable/disable this policy route. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of service bit pattern.
	Tos pulumi.StringOutput `pulumi:"tos"`
	// Type of service evaluated bits.
	TosMask pulumi.StringOutput `pulumi:"tosMask"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewRouterPolicy6 registers a new resource with the given unique name, arguments, and options.
func NewRouterPolicy6(ctx *pulumi.Context,
	name string, args *RouterPolicy6Args, opts ...pulumi.ResourceOption) (*RouterPolicy6, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InputDevice == nil {
		return nil, errors.New("invalid value for required argument 'InputDevice'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RouterPolicy6
	err := ctx.RegisterResource("fortios:index/routerPolicy6:RouterPolicy6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterPolicy6 gets an existing RouterPolicy6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterPolicy6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterPolicy6State, opts ...pulumi.ResourceOption) (*RouterPolicy6, error) {
	var resource RouterPolicy6
	err := ctx.ReadResource("fortios:index/routerPolicy6:RouterPolicy6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterPolicy6 resources.
type routerPolicy6State struct {
	// Action of the policy route. Valid values: `deny`, `permit`.
	Action *string `pulumi:"action"`
	// Optional comments.
	Comments *string `pulumi:"comments"`
	// Destination IPv6 prefix.
	Dst *string `pulumi:"dst"`
	// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
	DstNegate *string `pulumi:"dstNegate"`
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs []RouterPolicy6Dstaddr `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// End destination port number (1 - 65535).
	EndPort *int `pulumi:"endPort"`
	// IPv6 address of the gateway.
	Gateway *string `pulumi:"gateway"`
	// Incoming interface name. Configuration examples: for FortiOS Version <= "6.2.4": `inputDevice  = "port2"`, for FortiOS Version >= "6.2.4": `inputDevice  = "\"fortilink\" \"port1\""`.
	InputDevice *string `pulumi:"inputDevice"`
	// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
	InputDeviceNegate *string `pulumi:"inputDeviceNegate"`
	// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []RouterPolicy6InternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []RouterPolicy6InternetServiceId `pulumi:"internetServiceIds"`
	// Outgoing interface name.
	OutputDevice *string `pulumi:"outputDevice"`
	// Protocol number (0 - 255).
	Protocol *int `pulumi:"protocol"`
	// Sequence number.
	SeqNum *int `pulumi:"seqNum"`
	// Source IPv6 prefix.
	Src *string `pulumi:"src"`
	// Enable/disable negating source address match. Valid values: `enable`, `disable`.
	SrcNegate *string `pulumi:"srcNegate"`
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs []RouterPolicy6Srcaddr `pulumi:"srcaddrs"`
	// Start destination port number (1 - 65535).
	StartPort *int `pulumi:"startPort"`
	// Enable/disable this policy route. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Type of service bit pattern.
	Tos *string `pulumi:"tos"`
	// Type of service evaluated bits.
	TosMask *string `pulumi:"tosMask"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type RouterPolicy6State struct {
	// Action of the policy route. Valid values: `deny`, `permit`.
	Action pulumi.StringPtrInput
	// Optional comments.
	Comments pulumi.StringPtrInput
	// Destination IPv6 prefix.
	Dst pulumi.StringPtrInput
	// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
	DstNegate pulumi.StringPtrInput
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs RouterPolicy6DstaddrArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// End destination port number (1 - 65535).
	EndPort pulumi.IntPtrInput
	// IPv6 address of the gateway.
	Gateway pulumi.StringPtrInput
	// Incoming interface name. Configuration examples: for FortiOS Version <= "6.2.4": `inputDevice  = "port2"`, for FortiOS Version >= "6.2.4": `inputDevice  = "\"fortilink\" \"port1\""`.
	InputDevice pulumi.StringPtrInput
	// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
	InputDeviceNegate pulumi.StringPtrInput
	// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms RouterPolicy6InternetServiceCustomArrayInput
	// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds RouterPolicy6InternetServiceIdArrayInput
	// Outgoing interface name.
	OutputDevice pulumi.StringPtrInput
	// Protocol number (0 - 255).
	Protocol pulumi.IntPtrInput
	// Sequence number.
	SeqNum pulumi.IntPtrInput
	// Source IPv6 prefix.
	Src pulumi.StringPtrInput
	// Enable/disable negating source address match. Valid values: `enable`, `disable`.
	SrcNegate pulumi.StringPtrInput
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs RouterPolicy6SrcaddrArrayInput
	// Start destination port number (1 - 65535).
	StartPort pulumi.IntPtrInput
	// Enable/disable this policy route. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Type of service bit pattern.
	Tos pulumi.StringPtrInput
	// Type of service evaluated bits.
	TosMask pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterPolicy6State) ElementType() reflect.Type {
	return reflect.TypeOf((*routerPolicy6State)(nil)).Elem()
}

type routerPolicy6Args struct {
	// Action of the policy route. Valid values: `deny`, `permit`.
	Action *string `pulumi:"action"`
	// Optional comments.
	Comments *string `pulumi:"comments"`
	// Destination IPv6 prefix.
	Dst *string `pulumi:"dst"`
	// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
	DstNegate *string `pulumi:"dstNegate"`
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs []RouterPolicy6Dstaddr `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// End destination port number (1 - 65535).
	EndPort *int `pulumi:"endPort"`
	// IPv6 address of the gateway.
	Gateway *string `pulumi:"gateway"`
	// Incoming interface name. Configuration examples: for FortiOS Version <= "6.2.4": `inputDevice  = "port2"`, for FortiOS Version >= "6.2.4": `inputDevice  = "\"fortilink\" \"port1\""`.
	InputDevice string `pulumi:"inputDevice"`
	// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
	InputDeviceNegate *string `pulumi:"inputDeviceNegate"`
	// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []RouterPolicy6InternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []RouterPolicy6InternetServiceId `pulumi:"internetServiceIds"`
	// Outgoing interface name.
	OutputDevice *string `pulumi:"outputDevice"`
	// Protocol number (0 - 255).
	Protocol *int `pulumi:"protocol"`
	// Sequence number.
	SeqNum *int `pulumi:"seqNum"`
	// Source IPv6 prefix.
	Src *string `pulumi:"src"`
	// Enable/disable negating source address match. Valid values: `enable`, `disable`.
	SrcNegate *string `pulumi:"srcNegate"`
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs []RouterPolicy6Srcaddr `pulumi:"srcaddrs"`
	// Start destination port number (1 - 65535).
	StartPort *int `pulumi:"startPort"`
	// Enable/disable this policy route. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Type of service bit pattern.
	Tos *string `pulumi:"tos"`
	// Type of service evaluated bits.
	TosMask *string `pulumi:"tosMask"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterPolicy6 resource.
type RouterPolicy6Args struct {
	// Action of the policy route. Valid values: `deny`, `permit`.
	Action pulumi.StringPtrInput
	// Optional comments.
	Comments pulumi.StringPtrInput
	// Destination IPv6 prefix.
	Dst pulumi.StringPtrInput
	// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
	DstNegate pulumi.StringPtrInput
	// Destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs RouterPolicy6DstaddrArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// End destination port number (1 - 65535).
	EndPort pulumi.IntPtrInput
	// IPv6 address of the gateway.
	Gateway pulumi.StringPtrInput
	// Incoming interface name. Configuration examples: for FortiOS Version <= "6.2.4": `inputDevice  = "port2"`, for FortiOS Version >= "6.2.4": `inputDevice  = "\"fortilink\" \"port1\""`.
	InputDevice pulumi.StringInput
	// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
	InputDeviceNegate pulumi.StringPtrInput
	// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms RouterPolicy6InternetServiceCustomArrayInput
	// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds RouterPolicy6InternetServiceIdArrayInput
	// Outgoing interface name.
	OutputDevice pulumi.StringPtrInput
	// Protocol number (0 - 255).
	Protocol pulumi.IntPtrInput
	// Sequence number.
	SeqNum pulumi.IntPtrInput
	// Source IPv6 prefix.
	Src pulumi.StringPtrInput
	// Enable/disable negating source address match. Valid values: `enable`, `disable`.
	SrcNegate pulumi.StringPtrInput
	// Source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs RouterPolicy6SrcaddrArrayInput
	// Start destination port number (1 - 65535).
	StartPort pulumi.IntPtrInput
	// Enable/disable this policy route. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Type of service bit pattern.
	Tos pulumi.StringPtrInput
	// Type of service evaluated bits.
	TosMask pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterPolicy6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*routerPolicy6Args)(nil)).Elem()
}

type RouterPolicy6Input interface {
	pulumi.Input

	ToRouterPolicy6Output() RouterPolicy6Output
	ToRouterPolicy6OutputWithContext(ctx context.Context) RouterPolicy6Output
}

func (*RouterPolicy6) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterPolicy6)(nil)).Elem()
}

func (i *RouterPolicy6) ToRouterPolicy6Output() RouterPolicy6Output {
	return i.ToRouterPolicy6OutputWithContext(context.Background())
}

func (i *RouterPolicy6) ToRouterPolicy6OutputWithContext(ctx context.Context) RouterPolicy6Output {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicy6Output)
}

// RouterPolicy6ArrayInput is an input type that accepts RouterPolicy6Array and RouterPolicy6ArrayOutput values.
// You can construct a concrete instance of `RouterPolicy6ArrayInput` via:
//
//	RouterPolicy6Array{ RouterPolicy6Args{...} }
type RouterPolicy6ArrayInput interface {
	pulumi.Input

	ToRouterPolicy6ArrayOutput() RouterPolicy6ArrayOutput
	ToRouterPolicy6ArrayOutputWithContext(context.Context) RouterPolicy6ArrayOutput
}

type RouterPolicy6Array []RouterPolicy6Input

func (RouterPolicy6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterPolicy6)(nil)).Elem()
}

func (i RouterPolicy6Array) ToRouterPolicy6ArrayOutput() RouterPolicy6ArrayOutput {
	return i.ToRouterPolicy6ArrayOutputWithContext(context.Background())
}

func (i RouterPolicy6Array) ToRouterPolicy6ArrayOutputWithContext(ctx context.Context) RouterPolicy6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicy6ArrayOutput)
}

// RouterPolicy6MapInput is an input type that accepts RouterPolicy6Map and RouterPolicy6MapOutput values.
// You can construct a concrete instance of `RouterPolicy6MapInput` via:
//
//	RouterPolicy6Map{ "key": RouterPolicy6Args{...} }
type RouterPolicy6MapInput interface {
	pulumi.Input

	ToRouterPolicy6MapOutput() RouterPolicy6MapOutput
	ToRouterPolicy6MapOutputWithContext(context.Context) RouterPolicy6MapOutput
}

type RouterPolicy6Map map[string]RouterPolicy6Input

func (RouterPolicy6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterPolicy6)(nil)).Elem()
}

func (i RouterPolicy6Map) ToRouterPolicy6MapOutput() RouterPolicy6MapOutput {
	return i.ToRouterPolicy6MapOutputWithContext(context.Background())
}

func (i RouterPolicy6Map) ToRouterPolicy6MapOutputWithContext(ctx context.Context) RouterPolicy6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterPolicy6MapOutput)
}

type RouterPolicy6Output struct{ *pulumi.OutputState }

func (RouterPolicy6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterPolicy6)(nil)).Elem()
}

func (o RouterPolicy6Output) ToRouterPolicy6Output() RouterPolicy6Output {
	return o
}

func (o RouterPolicy6Output) ToRouterPolicy6OutputWithContext(ctx context.Context) RouterPolicy6Output {
	return o
}

// Action of the policy route. Valid values: `deny`, `permit`.
func (o RouterPolicy6Output) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Optional comments.
func (o RouterPolicy6Output) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Destination IPv6 prefix.
func (o RouterPolicy6Output) Dst() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.Dst }).(pulumi.StringOutput)
}

// Enable/disable negating destination address match. Valid values: `enable`, `disable`.
func (o RouterPolicy6Output) DstNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.DstNegate }).(pulumi.StringOutput)
}

// Destination address name. The structure of `dstaddr` block is documented below.
func (o RouterPolicy6Output) Dstaddrs() RouterPolicy6DstaddrArrayOutput {
	return o.ApplyT(func(v *RouterPolicy6) RouterPolicy6DstaddrArrayOutput { return v.Dstaddrs }).(RouterPolicy6DstaddrArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o RouterPolicy6Output) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// End destination port number (1 - 65535).
func (o RouterPolicy6Output) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.IntOutput { return v.EndPort }).(pulumi.IntOutput)
}

// IPv6 address of the gateway.
func (o RouterPolicy6Output) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Incoming interface name. Configuration examples: for FortiOS Version <= "6.2.4": `inputDevice  = "port2"`, for FortiOS Version >= "6.2.4": `inputDevice  = "\"fortilink\" \"port1\""`.
func (o RouterPolicy6Output) InputDevice() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.InputDevice }).(pulumi.StringOutput)
}

// Enable/disable negation of input device match. Valid values: `enable`, `disable`.
func (o RouterPolicy6Output) InputDeviceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.InputDeviceNegate }).(pulumi.StringOutput)
}

// Custom Destination Internet Service name. The structure of `internetServiceCustom` block is documented below.
func (o RouterPolicy6Output) InternetServiceCustoms() RouterPolicy6InternetServiceCustomArrayOutput {
	return o.ApplyT(func(v *RouterPolicy6) RouterPolicy6InternetServiceCustomArrayOutput { return v.InternetServiceCustoms }).(RouterPolicy6InternetServiceCustomArrayOutput)
}

// Destination Internet Service ID. The structure of `internetServiceId` block is documented below.
func (o RouterPolicy6Output) InternetServiceIds() RouterPolicy6InternetServiceIdArrayOutput {
	return o.ApplyT(func(v *RouterPolicy6) RouterPolicy6InternetServiceIdArrayOutput { return v.InternetServiceIds }).(RouterPolicy6InternetServiceIdArrayOutput)
}

// Outgoing interface name.
func (o RouterPolicy6Output) OutputDevice() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.OutputDevice }).(pulumi.StringOutput)
}

// Protocol number (0 - 255).
func (o RouterPolicy6Output) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.IntOutput { return v.Protocol }).(pulumi.IntOutput)
}

// Sequence number.
func (o RouterPolicy6Output) SeqNum() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.IntOutput { return v.SeqNum }).(pulumi.IntOutput)
}

// Source IPv6 prefix.
func (o RouterPolicy6Output) Src() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.Src }).(pulumi.StringOutput)
}

// Enable/disable negating source address match. Valid values: `enable`, `disable`.
func (o RouterPolicy6Output) SrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.SrcNegate }).(pulumi.StringOutput)
}

// Source address name. The structure of `srcaddr` block is documented below.
func (o RouterPolicy6Output) Srcaddrs() RouterPolicy6SrcaddrArrayOutput {
	return o.ApplyT(func(v *RouterPolicy6) RouterPolicy6SrcaddrArrayOutput { return v.Srcaddrs }).(RouterPolicy6SrcaddrArrayOutput)
}

// Start destination port number (1 - 65535).
func (o RouterPolicy6Output) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.IntOutput { return v.StartPort }).(pulumi.IntOutput)
}

// Enable/disable this policy route. Valid values: `enable`, `disable`.
func (o RouterPolicy6Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Type of service bit pattern.
func (o RouterPolicy6Output) Tos() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.Tos }).(pulumi.StringOutput)
}

// Type of service evaluated bits.
func (o RouterPolicy6Output) TosMask() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringOutput { return v.TosMask }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o RouterPolicy6Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterPolicy6) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterPolicy6ArrayOutput struct{ *pulumi.OutputState }

func (RouterPolicy6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterPolicy6)(nil)).Elem()
}

func (o RouterPolicy6ArrayOutput) ToRouterPolicy6ArrayOutput() RouterPolicy6ArrayOutput {
	return o
}

func (o RouterPolicy6ArrayOutput) ToRouterPolicy6ArrayOutputWithContext(ctx context.Context) RouterPolicy6ArrayOutput {
	return o
}

func (o RouterPolicy6ArrayOutput) Index(i pulumi.IntInput) RouterPolicy6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterPolicy6 {
		return vs[0].([]*RouterPolicy6)[vs[1].(int)]
	}).(RouterPolicy6Output)
}

type RouterPolicy6MapOutput struct{ *pulumi.OutputState }

func (RouterPolicy6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterPolicy6)(nil)).Elem()
}

func (o RouterPolicy6MapOutput) ToRouterPolicy6MapOutput() RouterPolicy6MapOutput {
	return o
}

func (o RouterPolicy6MapOutput) ToRouterPolicy6MapOutputWithContext(ctx context.Context) RouterPolicy6MapOutput {
	return o
}

func (o RouterPolicy6MapOutput) MapIndex(k pulumi.StringInput) RouterPolicy6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterPolicy6 {
		return vs[0].(map[string]*RouterPolicy6)[vs[1].(string)]
	}).(RouterPolicy6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterPolicy6Input)(nil)).Elem(), &RouterPolicy6{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterPolicy6ArrayInput)(nil)).Elem(), RouterPolicy6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterPolicy6MapInput)(nil)).Elem(), RouterPolicy6Map{})
	pulumi.RegisterOutputType(RouterPolicy6Output{})
	pulumi.RegisterOutputType(RouterPolicy6ArrayOutput{})
	pulumi.RegisterOutputType(RouterPolicy6MapOutput{})
}
