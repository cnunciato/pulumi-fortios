// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure wireless access gateway (WAG) profiles used for tunnels on AP. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// # WirelessController WagProfile can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerWagprofile:WirelesscontrollerWagprofile labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerWagprofile:WirelesscontrollerWagprofile labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WirelesscontrollerWagprofile struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// IP address of the monitoring DHCP request packet sent through the tunnel.
	DhcpIpAddr pulumi.StringOutput `pulumi:"dhcpIpAddr"`
	// Tunnel profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
	PingInterval pulumi.IntOutput `pulumi:"pingInterval"`
	// Number of the tunnel monitoring echo packets (1 - 65535, default = 5).
	PingNumber pulumi.IntOutput `pulumi:"pingNumber"`
	// Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
	ReturnPacketTimeout pulumi.IntOutput `pulumi:"returnPacketTimeout"`
	// Tunnel type. Valid values: `l2tpv3`, `gre`.
	TunnelType pulumi.StringOutput `pulumi:"tunnelType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// IP Address of the wireless access gateway.
	WagIp pulumi.StringOutput `pulumi:"wagIp"`
	// UDP port of the wireless access gateway.
	WagPort pulumi.IntOutput `pulumi:"wagPort"`
}

// NewWirelesscontrollerWagprofile registers a new resource with the given unique name, arguments, and options.
func NewWirelesscontrollerWagprofile(ctx *pulumi.Context,
	name string, args *WirelesscontrollerWagprofileArgs, opts ...pulumi.ResourceOption) (*WirelesscontrollerWagprofile, error) {
	if args == nil {
		args = &WirelesscontrollerWagprofileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelesscontrollerWagprofile
	err := ctx.RegisterResource("fortios:index/wirelesscontrollerWagprofile:WirelesscontrollerWagprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelesscontrollerWagprofile gets an existing WirelesscontrollerWagprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelesscontrollerWagprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelesscontrollerWagprofileState, opts ...pulumi.ResourceOption) (*WirelesscontrollerWagprofile, error) {
	var resource WirelesscontrollerWagprofile
	err := ctx.ReadResource("fortios:index/wirelesscontrollerWagprofile:WirelesscontrollerWagprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelesscontrollerWagprofile resources.
type wirelesscontrollerWagprofileState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// IP address of the monitoring DHCP request packet sent through the tunnel.
	DhcpIpAddr *string `pulumi:"dhcpIpAddr"`
	// Tunnel profile name.
	Name *string `pulumi:"name"`
	// Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
	PingInterval *int `pulumi:"pingInterval"`
	// Number of the tunnel monitoring echo packets (1 - 65535, default = 5).
	PingNumber *int `pulumi:"pingNumber"`
	// Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
	ReturnPacketTimeout *int `pulumi:"returnPacketTimeout"`
	// Tunnel type. Valid values: `l2tpv3`, `gre`.
	TunnelType *string `pulumi:"tunnelType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// IP Address of the wireless access gateway.
	WagIp *string `pulumi:"wagIp"`
	// UDP port of the wireless access gateway.
	WagPort *int `pulumi:"wagPort"`
}

type WirelesscontrollerWagprofileState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// IP address of the monitoring DHCP request packet sent through the tunnel.
	DhcpIpAddr pulumi.StringPtrInput
	// Tunnel profile name.
	Name pulumi.StringPtrInput
	// Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
	PingInterval pulumi.IntPtrInput
	// Number of the tunnel monitoring echo packets (1 - 65535, default = 5).
	PingNumber pulumi.IntPtrInput
	// Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
	ReturnPacketTimeout pulumi.IntPtrInput
	// Tunnel type. Valid values: `l2tpv3`, `gre`.
	TunnelType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// IP Address of the wireless access gateway.
	WagIp pulumi.StringPtrInput
	// UDP port of the wireless access gateway.
	WagPort pulumi.IntPtrInput
}

func (WirelesscontrollerWagprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerWagprofileState)(nil)).Elem()
}

type wirelesscontrollerWagprofileArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// IP address of the monitoring DHCP request packet sent through the tunnel.
	DhcpIpAddr *string `pulumi:"dhcpIpAddr"`
	// Tunnel profile name.
	Name *string `pulumi:"name"`
	// Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
	PingInterval *int `pulumi:"pingInterval"`
	// Number of the tunnel monitoring echo packets (1 - 65535, default = 5).
	PingNumber *int `pulumi:"pingNumber"`
	// Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
	ReturnPacketTimeout *int `pulumi:"returnPacketTimeout"`
	// Tunnel type. Valid values: `l2tpv3`, `gre`.
	TunnelType *string `pulumi:"tunnelType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// IP Address of the wireless access gateway.
	WagIp *string `pulumi:"wagIp"`
	// UDP port of the wireless access gateway.
	WagPort *int `pulumi:"wagPort"`
}

// The set of arguments for constructing a WirelesscontrollerWagprofile resource.
type WirelesscontrollerWagprofileArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// IP address of the monitoring DHCP request packet sent through the tunnel.
	DhcpIpAddr pulumi.StringPtrInput
	// Tunnel profile name.
	Name pulumi.StringPtrInput
	// Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
	PingInterval pulumi.IntPtrInput
	// Number of the tunnel monitoring echo packets (1 - 65535, default = 5).
	PingNumber pulumi.IntPtrInput
	// Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
	ReturnPacketTimeout pulumi.IntPtrInput
	// Tunnel type. Valid values: `l2tpv3`, `gre`.
	TunnelType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// IP Address of the wireless access gateway.
	WagIp pulumi.StringPtrInput
	// UDP port of the wireless access gateway.
	WagPort pulumi.IntPtrInput
}

func (WirelesscontrollerWagprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerWagprofileArgs)(nil)).Elem()
}

type WirelesscontrollerWagprofileInput interface {
	pulumi.Input

	ToWirelesscontrollerWagprofileOutput() WirelesscontrollerWagprofileOutput
	ToWirelesscontrollerWagprofileOutputWithContext(ctx context.Context) WirelesscontrollerWagprofileOutput
}

func (*WirelesscontrollerWagprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerWagprofile)(nil)).Elem()
}

func (i *WirelesscontrollerWagprofile) ToWirelesscontrollerWagprofileOutput() WirelesscontrollerWagprofileOutput {
	return i.ToWirelesscontrollerWagprofileOutputWithContext(context.Background())
}

func (i *WirelesscontrollerWagprofile) ToWirelesscontrollerWagprofileOutputWithContext(ctx context.Context) WirelesscontrollerWagprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerWagprofileOutput)
}

// WirelesscontrollerWagprofileArrayInput is an input type that accepts WirelesscontrollerWagprofileArray and WirelesscontrollerWagprofileArrayOutput values.
// You can construct a concrete instance of `WirelesscontrollerWagprofileArrayInput` via:
//
//	WirelesscontrollerWagprofileArray{ WirelesscontrollerWagprofileArgs{...} }
type WirelesscontrollerWagprofileArrayInput interface {
	pulumi.Input

	ToWirelesscontrollerWagprofileArrayOutput() WirelesscontrollerWagprofileArrayOutput
	ToWirelesscontrollerWagprofileArrayOutputWithContext(context.Context) WirelesscontrollerWagprofileArrayOutput
}

type WirelesscontrollerWagprofileArray []WirelesscontrollerWagprofileInput

func (WirelesscontrollerWagprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerWagprofile)(nil)).Elem()
}

func (i WirelesscontrollerWagprofileArray) ToWirelesscontrollerWagprofileArrayOutput() WirelesscontrollerWagprofileArrayOutput {
	return i.ToWirelesscontrollerWagprofileArrayOutputWithContext(context.Background())
}

func (i WirelesscontrollerWagprofileArray) ToWirelesscontrollerWagprofileArrayOutputWithContext(ctx context.Context) WirelesscontrollerWagprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerWagprofileArrayOutput)
}

// WirelesscontrollerWagprofileMapInput is an input type that accepts WirelesscontrollerWagprofileMap and WirelesscontrollerWagprofileMapOutput values.
// You can construct a concrete instance of `WirelesscontrollerWagprofileMapInput` via:
//
//	WirelesscontrollerWagprofileMap{ "key": WirelesscontrollerWagprofileArgs{...} }
type WirelesscontrollerWagprofileMapInput interface {
	pulumi.Input

	ToWirelesscontrollerWagprofileMapOutput() WirelesscontrollerWagprofileMapOutput
	ToWirelesscontrollerWagprofileMapOutputWithContext(context.Context) WirelesscontrollerWagprofileMapOutput
}

type WirelesscontrollerWagprofileMap map[string]WirelesscontrollerWagprofileInput

func (WirelesscontrollerWagprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerWagprofile)(nil)).Elem()
}

func (i WirelesscontrollerWagprofileMap) ToWirelesscontrollerWagprofileMapOutput() WirelesscontrollerWagprofileMapOutput {
	return i.ToWirelesscontrollerWagprofileMapOutputWithContext(context.Background())
}

func (i WirelesscontrollerWagprofileMap) ToWirelesscontrollerWagprofileMapOutputWithContext(ctx context.Context) WirelesscontrollerWagprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerWagprofileMapOutput)
}

type WirelesscontrollerWagprofileOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerWagprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerWagprofile)(nil)).Elem()
}

func (o WirelesscontrollerWagprofileOutput) ToWirelesscontrollerWagprofileOutput() WirelesscontrollerWagprofileOutput {
	return o
}

func (o WirelesscontrollerWagprofileOutput) ToWirelesscontrollerWagprofileOutputWithContext(ctx context.Context) WirelesscontrollerWagprofileOutput {
	return o
}

// Comment.
func (o WirelesscontrollerWagprofileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerWagprofile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// IP address of the monitoring DHCP request packet sent through the tunnel.
func (o WirelesscontrollerWagprofileOutput) DhcpIpAddr() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerWagprofile) pulumi.StringOutput { return v.DhcpIpAddr }).(pulumi.StringOutput)
}

// Tunnel profile name.
func (o WirelesscontrollerWagprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerWagprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Interval between two tunnel monitoring echo packets (1 - 65535 sec, default = 1).
func (o WirelesscontrollerWagprofileOutput) PingInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerWagprofile) pulumi.IntOutput { return v.PingInterval }).(pulumi.IntOutput)
}

// Number of the tunnel monitoring echo packets (1 - 65535, default = 5).
func (o WirelesscontrollerWagprofileOutput) PingNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerWagprofile) pulumi.IntOutput { return v.PingNumber }).(pulumi.IntOutput)
}

// Window of time for the return packets from the tunnel's remote end (1 - 65535 sec, default = 160).
func (o WirelesscontrollerWagprofileOutput) ReturnPacketTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerWagprofile) pulumi.IntOutput { return v.ReturnPacketTimeout }).(pulumi.IntOutput)
}

// Tunnel type. Valid values: `l2tpv3`, `gre`.
func (o WirelesscontrollerWagprofileOutput) TunnelType() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerWagprofile) pulumi.StringOutput { return v.TunnelType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WirelesscontrollerWagprofileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerWagprofile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// IP Address of the wireless access gateway.
func (o WirelesscontrollerWagprofileOutput) WagIp() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerWagprofile) pulumi.StringOutput { return v.WagIp }).(pulumi.StringOutput)
}

// UDP port of the wireless access gateway.
func (o WirelesscontrollerWagprofileOutput) WagPort() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerWagprofile) pulumi.IntOutput { return v.WagPort }).(pulumi.IntOutput)
}

type WirelesscontrollerWagprofileArrayOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerWagprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerWagprofile)(nil)).Elem()
}

func (o WirelesscontrollerWagprofileArrayOutput) ToWirelesscontrollerWagprofileArrayOutput() WirelesscontrollerWagprofileArrayOutput {
	return o
}

func (o WirelesscontrollerWagprofileArrayOutput) ToWirelesscontrollerWagprofileArrayOutputWithContext(ctx context.Context) WirelesscontrollerWagprofileArrayOutput {
	return o
}

func (o WirelesscontrollerWagprofileArrayOutput) Index(i pulumi.IntInput) WirelesscontrollerWagprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelesscontrollerWagprofile {
		return vs[0].([]*WirelesscontrollerWagprofile)[vs[1].(int)]
	}).(WirelesscontrollerWagprofileOutput)
}

type WirelesscontrollerWagprofileMapOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerWagprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerWagprofile)(nil)).Elem()
}

func (o WirelesscontrollerWagprofileMapOutput) ToWirelesscontrollerWagprofileMapOutput() WirelesscontrollerWagprofileMapOutput {
	return o
}

func (o WirelesscontrollerWagprofileMapOutput) ToWirelesscontrollerWagprofileMapOutputWithContext(ctx context.Context) WirelesscontrollerWagprofileMapOutput {
	return o
}

func (o WirelesscontrollerWagprofileMapOutput) MapIndex(k pulumi.StringInput) WirelesscontrollerWagprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelesscontrollerWagprofile {
		return vs[0].(map[string]*WirelesscontrollerWagprofile)[vs[1].(string)]
	}).(WirelesscontrollerWagprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerWagprofileInput)(nil)).Elem(), &WirelesscontrollerWagprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerWagprofileArrayInput)(nil)).Elem(), WirelesscontrollerWagprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerWagprofileMapInput)(nil)).Elem(), WirelesscontrollerWagprofileMap{})
	pulumi.RegisterOutputType(WirelesscontrollerWagprofileOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerWagprofileArrayOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerWagprofileMapOutput{})
}
