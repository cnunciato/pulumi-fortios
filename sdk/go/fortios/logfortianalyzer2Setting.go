// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Global FortiAnalyzer settings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewLogfortianalyzer2Setting(ctx, "trname", &fortios.Logfortianalyzer2SettingArgs{
//				__changeIp:                pulumi.Int(0),
//				ConnTimeout:               pulumi.Int(10),
//				EncAlgorithm:              pulumi.String("high"),
//				FazType:                   pulumi.Int(2),
//				HmacAlgorithm:             pulumi.String("sha256"),
//				IpsArchive:                pulumi.String("enable"),
//				MgmtName:                  pulumi.String("FGh_Log2"),
//				MonitorFailureRetryPeriod: pulumi.Int(5),
//				MonitorKeepalivePeriod:    pulumi.Int(5),
//				Reliable:                  pulumi.String("disable"),
//				SslMinProtoVersion:        pulumi.String("default"),
//				Status:                    pulumi.String("disable"),
//				UploadInterval:            pulumi.String("daily"),
//				UploadOption:              pulumi.String("5-minute"),
//				UploadTime:                pulumi.String("00:59"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # LogFortianalyzer2 Setting can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/logfortianalyzer2Setting:Logfortianalyzer2Setting labelname LogFortianalyzer2Setting
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/logfortianalyzer2Setting:Logfortianalyzer2Setting labelname LogFortianalyzer2Setting
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type Logfortianalyzer2Setting struct {
	pulumi.CustomResourceState

	// Hidden attribute.
	__changeIp pulumi.IntOutput `pulumi:"__changeIp"`
	// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
	AccessConfig pulumi.StringOutput `pulumi:"accessConfig"`
	// Certificate used to communicate with FortiAnalyzer.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
	CertificateVerification pulumi.StringOutput `pulumi:"certificateVerification"`
	// FortiAnalyzer connection time-out in seconds (for status and log buffer).
	ConnTimeout pulumi.IntOutput `pulumi:"connTimeout"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
	EncAlgorithm pulumi.StringOutput `pulumi:"encAlgorithm"`
	// Hidden setting index of FortiAnalyzer.
	FazType pulumi.IntOutput `pulumi:"fazType"`
	// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
	HmacAlgorithm pulumi.StringOutput `pulumi:"hmacAlgorithm"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
	IpsArchive pulumi.StringOutput `pulumi:"ipsArchive"`
	// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
	MaxLogRate pulumi.IntOutput `pulumi:"maxLogRate"`
	// Hidden management name of FortiAnalyzer.
	MgmtName pulumi.StringOutput `pulumi:"mgmtName"`
	// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
	MonitorFailureRetryPeriod pulumi.IntOutput `pulumi:"monitorFailureRetryPeriod"`
	// Time between OFTP keepalives in seconds (for status and log buffer).
	MonitorKeepalivePeriod pulumi.IntOutput `pulumi:"monitorKeepalivePeriod"`
	// Preshared-key used for auto-authorization on FortiAnalyzer.
	PresharedKey pulumi.StringOutput `pulumi:"presharedKey"`
	// Set log transmission priority. Valid values: `default`, `low`.
	Priority pulumi.StringOutput `pulumi:"priority"`
	// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Reliable pulumi.StringOutput `pulumi:"reliable"`
	// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
	Serials Logfortianalyzer2SettingSerialArrayOutput `pulumi:"serials"`
	// The remote FortiAnalyzer.
	Server pulumi.StringOutput `pulumi:"server"`
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringOutput `pulumi:"sslMinProtoVersion"`
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Day of week (month) to upload logs.
	UploadDay pulumi.StringOutput `pulumi:"uploadDay"`
	// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
	UploadInterval pulumi.StringOutput `pulumi:"uploadInterval"`
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
	UploadOption pulumi.StringOutput `pulumi:"uploadOption"`
	// Time to upload logs (hh:mm).
	UploadTime pulumi.StringOutput `pulumi:"uploadTime"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLogfortianalyzer2Setting registers a new resource with the given unique name, arguments, and options.
func NewLogfortianalyzer2Setting(ctx *pulumi.Context,
	name string, args *Logfortianalyzer2SettingArgs, opts ...pulumi.ResourceOption) (*Logfortianalyzer2Setting, error) {
	if args == nil {
		args = &Logfortianalyzer2SettingArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Logfortianalyzer2Setting
	err := ctx.RegisterResource("fortios:index/logfortianalyzer2Setting:Logfortianalyzer2Setting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogfortianalyzer2Setting gets an existing Logfortianalyzer2Setting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogfortianalyzer2Setting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Logfortianalyzer2SettingState, opts ...pulumi.ResourceOption) (*Logfortianalyzer2Setting, error) {
	var resource Logfortianalyzer2Setting
	err := ctx.ReadResource("fortios:index/logfortianalyzer2Setting:Logfortianalyzer2Setting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logfortianalyzer2Setting resources.
type logfortianalyzer2SettingState struct {
	// Hidden attribute.
	__changeIp *int `pulumi:"__changeIp"`
	// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
	AccessConfig *string `pulumi:"accessConfig"`
	// Certificate used to communicate with FortiAnalyzer.
	Certificate *string `pulumi:"certificate"`
	// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
	CertificateVerification *string `pulumi:"certificateVerification"`
	// FortiAnalyzer connection time-out in seconds (for status and log buffer).
	ConnTimeout *int `pulumi:"connTimeout"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
	EncAlgorithm *string `pulumi:"encAlgorithm"`
	// Hidden setting index of FortiAnalyzer.
	FazType *int `pulumi:"fazType"`
	// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
	HmacAlgorithm *string `pulumi:"hmacAlgorithm"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
	IpsArchive *string `pulumi:"ipsArchive"`
	// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
	MaxLogRate *int `pulumi:"maxLogRate"`
	// Hidden management name of FortiAnalyzer.
	MgmtName *string `pulumi:"mgmtName"`
	// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
	MonitorFailureRetryPeriod *int `pulumi:"monitorFailureRetryPeriod"`
	// Time between OFTP keepalives in seconds (for status and log buffer).
	MonitorKeepalivePeriod *int `pulumi:"monitorKeepalivePeriod"`
	// Preshared-key used for auto-authorization on FortiAnalyzer.
	PresharedKey *string `pulumi:"presharedKey"`
	// Set log transmission priority. Valid values: `default`, `low`.
	Priority *string `pulumi:"priority"`
	// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Reliable *string `pulumi:"reliable"`
	// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
	Serials []Logfortianalyzer2SettingSerial `pulumi:"serials"`
	// The remote FortiAnalyzer.
	Server *string `pulumi:"server"`
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp *string `pulumi:"sourceIp"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Day of week (month) to upload logs.
	UploadDay *string `pulumi:"uploadDay"`
	// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
	UploadInterval *string `pulumi:"uploadInterval"`
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
	UploadOption *string `pulumi:"uploadOption"`
	// Time to upload logs (hh:mm).
	UploadTime *string `pulumi:"uploadTime"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Logfortianalyzer2SettingState struct {
	// Hidden attribute.
	__changeIp pulumi.IntPtrInput
	// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
	AccessConfig pulumi.StringPtrInput
	// Certificate used to communicate with FortiAnalyzer.
	Certificate pulumi.StringPtrInput
	// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
	CertificateVerification pulumi.StringPtrInput
	// FortiAnalyzer connection time-out in seconds (for status and log buffer).
	ConnTimeout pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
	EncAlgorithm pulumi.StringPtrInput
	// Hidden setting index of FortiAnalyzer.
	FazType pulumi.IntPtrInput
	// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
	HmacAlgorithm pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
	IpsArchive pulumi.StringPtrInput
	// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
	MaxLogRate pulumi.IntPtrInput
	// Hidden management name of FortiAnalyzer.
	MgmtName pulumi.StringPtrInput
	// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
	MonitorFailureRetryPeriod pulumi.IntPtrInput
	// Time between OFTP keepalives in seconds (for status and log buffer).
	MonitorKeepalivePeriod pulumi.IntPtrInput
	// Preshared-key used for auto-authorization on FortiAnalyzer.
	PresharedKey pulumi.StringPtrInput
	// Set log transmission priority. Valid values: `default`, `low`.
	Priority pulumi.StringPtrInput
	// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Reliable pulumi.StringPtrInput
	// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
	Serials Logfortianalyzer2SettingSerialArrayInput
	// The remote FortiAnalyzer.
	Server pulumi.StringPtrInput
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringPtrInput
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Day of week (month) to upload logs.
	UploadDay pulumi.StringPtrInput
	// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
	UploadInterval pulumi.StringPtrInput
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
	UploadOption pulumi.StringPtrInput
	// Time to upload logs (hh:mm).
	UploadTime pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Logfortianalyzer2SettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*logfortianalyzer2SettingState)(nil)).Elem()
}

type logfortianalyzer2SettingArgs struct {
	// Hidden attribute.
	__changeIp *int `pulumi:"__changeIp"`
	// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
	AccessConfig *string `pulumi:"accessConfig"`
	// Certificate used to communicate with FortiAnalyzer.
	Certificate *string `pulumi:"certificate"`
	// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
	CertificateVerification *string `pulumi:"certificateVerification"`
	// FortiAnalyzer connection time-out in seconds (for status and log buffer).
	ConnTimeout *int `pulumi:"connTimeout"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
	EncAlgorithm *string `pulumi:"encAlgorithm"`
	// Hidden setting index of FortiAnalyzer.
	FazType *int `pulumi:"fazType"`
	// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
	HmacAlgorithm *string `pulumi:"hmacAlgorithm"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
	IpsArchive *string `pulumi:"ipsArchive"`
	// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
	MaxLogRate *int `pulumi:"maxLogRate"`
	// Hidden management name of FortiAnalyzer.
	MgmtName *string `pulumi:"mgmtName"`
	// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
	MonitorFailureRetryPeriod *int `pulumi:"monitorFailureRetryPeriod"`
	// Time between OFTP keepalives in seconds (for status and log buffer).
	MonitorKeepalivePeriod *int `pulumi:"monitorKeepalivePeriod"`
	// Preshared-key used for auto-authorization on FortiAnalyzer.
	PresharedKey *string `pulumi:"presharedKey"`
	// Set log transmission priority. Valid values: `default`, `low`.
	Priority *string `pulumi:"priority"`
	// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Reliable *string `pulumi:"reliable"`
	// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
	Serials []Logfortianalyzer2SettingSerial `pulumi:"serials"`
	// The remote FortiAnalyzer.
	Server *string `pulumi:"server"`
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp *string `pulumi:"sourceIp"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Day of week (month) to upload logs.
	UploadDay *string `pulumi:"uploadDay"`
	// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
	UploadInterval *string `pulumi:"uploadInterval"`
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
	UploadOption *string `pulumi:"uploadOption"`
	// Time to upload logs (hh:mm).
	UploadTime *string `pulumi:"uploadTime"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Logfortianalyzer2Setting resource.
type Logfortianalyzer2SettingArgs struct {
	// Hidden attribute.
	__changeIp pulumi.IntPtrInput
	// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
	AccessConfig pulumi.StringPtrInput
	// Certificate used to communicate with FortiAnalyzer.
	Certificate pulumi.StringPtrInput
	// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
	CertificateVerification pulumi.StringPtrInput
	// FortiAnalyzer connection time-out in seconds (for status and log buffer).
	ConnTimeout pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
	EncAlgorithm pulumi.StringPtrInput
	// Hidden setting index of FortiAnalyzer.
	FazType pulumi.IntPtrInput
	// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
	HmacAlgorithm pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
	IpsArchive pulumi.StringPtrInput
	// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
	MaxLogRate pulumi.IntPtrInput
	// Hidden management name of FortiAnalyzer.
	MgmtName pulumi.StringPtrInput
	// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
	MonitorFailureRetryPeriod pulumi.IntPtrInput
	// Time between OFTP keepalives in seconds (for status and log buffer).
	MonitorKeepalivePeriod pulumi.IntPtrInput
	// Preshared-key used for auto-authorization on FortiAnalyzer.
	PresharedKey pulumi.StringPtrInput
	// Set log transmission priority. Valid values: `default`, `low`.
	Priority pulumi.StringPtrInput
	// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Reliable pulumi.StringPtrInput
	// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
	Serials Logfortianalyzer2SettingSerialArrayInput
	// The remote FortiAnalyzer.
	Server pulumi.StringPtrInput
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringPtrInput
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Day of week (month) to upload logs.
	UploadDay pulumi.StringPtrInput
	// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
	UploadInterval pulumi.StringPtrInput
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
	UploadOption pulumi.StringPtrInput
	// Time to upload logs (hh:mm).
	UploadTime pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Logfortianalyzer2SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logfortianalyzer2SettingArgs)(nil)).Elem()
}

type Logfortianalyzer2SettingInput interface {
	pulumi.Input

	ToLogfortianalyzer2SettingOutput() Logfortianalyzer2SettingOutput
	ToLogfortianalyzer2SettingOutputWithContext(ctx context.Context) Logfortianalyzer2SettingOutput
}

func (*Logfortianalyzer2Setting) ElementType() reflect.Type {
	return reflect.TypeOf((**Logfortianalyzer2Setting)(nil)).Elem()
}

func (i *Logfortianalyzer2Setting) ToLogfortianalyzer2SettingOutput() Logfortianalyzer2SettingOutput {
	return i.ToLogfortianalyzer2SettingOutputWithContext(context.Background())
}

func (i *Logfortianalyzer2Setting) ToLogfortianalyzer2SettingOutputWithContext(ctx context.Context) Logfortianalyzer2SettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logfortianalyzer2SettingOutput)
}

// Logfortianalyzer2SettingArrayInput is an input type that accepts Logfortianalyzer2SettingArray and Logfortianalyzer2SettingArrayOutput values.
// You can construct a concrete instance of `Logfortianalyzer2SettingArrayInput` via:
//
//	Logfortianalyzer2SettingArray{ Logfortianalyzer2SettingArgs{...} }
type Logfortianalyzer2SettingArrayInput interface {
	pulumi.Input

	ToLogfortianalyzer2SettingArrayOutput() Logfortianalyzer2SettingArrayOutput
	ToLogfortianalyzer2SettingArrayOutputWithContext(context.Context) Logfortianalyzer2SettingArrayOutput
}

type Logfortianalyzer2SettingArray []Logfortianalyzer2SettingInput

func (Logfortianalyzer2SettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logfortianalyzer2Setting)(nil)).Elem()
}

func (i Logfortianalyzer2SettingArray) ToLogfortianalyzer2SettingArrayOutput() Logfortianalyzer2SettingArrayOutput {
	return i.ToLogfortianalyzer2SettingArrayOutputWithContext(context.Background())
}

func (i Logfortianalyzer2SettingArray) ToLogfortianalyzer2SettingArrayOutputWithContext(ctx context.Context) Logfortianalyzer2SettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logfortianalyzer2SettingArrayOutput)
}

// Logfortianalyzer2SettingMapInput is an input type that accepts Logfortianalyzer2SettingMap and Logfortianalyzer2SettingMapOutput values.
// You can construct a concrete instance of `Logfortianalyzer2SettingMapInput` via:
//
//	Logfortianalyzer2SettingMap{ "key": Logfortianalyzer2SettingArgs{...} }
type Logfortianalyzer2SettingMapInput interface {
	pulumi.Input

	ToLogfortianalyzer2SettingMapOutput() Logfortianalyzer2SettingMapOutput
	ToLogfortianalyzer2SettingMapOutputWithContext(context.Context) Logfortianalyzer2SettingMapOutput
}

type Logfortianalyzer2SettingMap map[string]Logfortianalyzer2SettingInput

func (Logfortianalyzer2SettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logfortianalyzer2Setting)(nil)).Elem()
}

func (i Logfortianalyzer2SettingMap) ToLogfortianalyzer2SettingMapOutput() Logfortianalyzer2SettingMapOutput {
	return i.ToLogfortianalyzer2SettingMapOutputWithContext(context.Background())
}

func (i Logfortianalyzer2SettingMap) ToLogfortianalyzer2SettingMapOutputWithContext(ctx context.Context) Logfortianalyzer2SettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logfortianalyzer2SettingMapOutput)
}

type Logfortianalyzer2SettingOutput struct{ *pulumi.OutputState }

func (Logfortianalyzer2SettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logfortianalyzer2Setting)(nil)).Elem()
}

func (o Logfortianalyzer2SettingOutput) ToLogfortianalyzer2SettingOutput() Logfortianalyzer2SettingOutput {
	return o
}

func (o Logfortianalyzer2SettingOutput) ToLogfortianalyzer2SettingOutputWithContext(ctx context.Context) Logfortianalyzer2SettingOutput {
	return o
}

// Hidden attribute.
func (o Logfortianalyzer2SettingOutput) __changeIp() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.IntOutput { return v.__changeIp }).(pulumi.IntOutput)
}

// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2SettingOutput) AccessConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.AccessConfig }).(pulumi.StringOutput)
}

// Certificate used to communicate with FortiAnalyzer.
func (o Logfortianalyzer2SettingOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2SettingOutput) CertificateVerification() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.CertificateVerification }).(pulumi.StringOutput)
}

// FortiAnalyzer connection time-out in seconds (for status and log buffer).
func (o Logfortianalyzer2SettingOutput) ConnTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.IntOutput { return v.ConnTimeout }).(pulumi.IntOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Logfortianalyzer2SettingOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
func (o Logfortianalyzer2SettingOutput) EncAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.EncAlgorithm }).(pulumi.StringOutput)
}

// Hidden setting index of FortiAnalyzer.
func (o Logfortianalyzer2SettingOutput) FazType() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.IntOutput { return v.FazType }).(pulumi.IntOutput)
}

// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
func (o Logfortianalyzer2SettingOutput) HmacAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.HmacAlgorithm }).(pulumi.StringOutput)
}

// Specify outgoing interface to reach server.
func (o Logfortianalyzer2SettingOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o Logfortianalyzer2SettingOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2SettingOutput) IpsArchive() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.IpsArchive }).(pulumi.StringOutput)
}

// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
func (o Logfortianalyzer2SettingOutput) MaxLogRate() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.IntOutput { return v.MaxLogRate }).(pulumi.IntOutput)
}

// Hidden management name of FortiAnalyzer.
func (o Logfortianalyzer2SettingOutput) MgmtName() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.MgmtName }).(pulumi.StringOutput)
}

// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
func (o Logfortianalyzer2SettingOutput) MonitorFailureRetryPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.IntOutput { return v.MonitorFailureRetryPeriod }).(pulumi.IntOutput)
}

// Time between OFTP keepalives in seconds (for status and log buffer).
func (o Logfortianalyzer2SettingOutput) MonitorKeepalivePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.IntOutput { return v.MonitorKeepalivePeriod }).(pulumi.IntOutput)
}

// Preshared-key used for auto-authorization on FortiAnalyzer.
func (o Logfortianalyzer2SettingOutput) PresharedKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.PresharedKey }).(pulumi.StringOutput)
}

// Set log transmission priority. Valid values: `default`, `low`.
func (o Logfortianalyzer2SettingOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.Priority }).(pulumi.StringOutput)
}

// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2SettingOutput) Reliable() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.Reliable }).(pulumi.StringOutput)
}

// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
func (o Logfortianalyzer2SettingOutput) Serials() Logfortianalyzer2SettingSerialArrayOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) Logfortianalyzer2SettingSerialArrayOutput { return v.Serials }).(Logfortianalyzer2SettingSerialArrayOutput)
}

// The remote FortiAnalyzer.
func (o Logfortianalyzer2SettingOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
func (o Logfortianalyzer2SettingOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
func (o Logfortianalyzer2SettingOutput) SslMinProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.SslMinProtoVersion }).(pulumi.StringOutput)
}

// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2SettingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Day of week (month) to upload logs.
func (o Logfortianalyzer2SettingOutput) UploadDay() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.UploadDay }).(pulumi.StringOutput)
}

// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
func (o Logfortianalyzer2SettingOutput) UploadInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.UploadInterval }).(pulumi.StringOutput)
}

// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
func (o Logfortianalyzer2SettingOutput) UploadOption() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.UploadOption }).(pulumi.StringOutput)
}

// Time to upload logs (hh:mm).
func (o Logfortianalyzer2SettingOutput) UploadTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringOutput { return v.UploadTime }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Logfortianalyzer2SettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Setting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Logfortianalyzer2SettingArrayOutput struct{ *pulumi.OutputState }

func (Logfortianalyzer2SettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logfortianalyzer2Setting)(nil)).Elem()
}

func (o Logfortianalyzer2SettingArrayOutput) ToLogfortianalyzer2SettingArrayOutput() Logfortianalyzer2SettingArrayOutput {
	return o
}

func (o Logfortianalyzer2SettingArrayOutput) ToLogfortianalyzer2SettingArrayOutputWithContext(ctx context.Context) Logfortianalyzer2SettingArrayOutput {
	return o
}

func (o Logfortianalyzer2SettingArrayOutput) Index(i pulumi.IntInput) Logfortianalyzer2SettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logfortianalyzer2Setting {
		return vs[0].([]*Logfortianalyzer2Setting)[vs[1].(int)]
	}).(Logfortianalyzer2SettingOutput)
}

type Logfortianalyzer2SettingMapOutput struct{ *pulumi.OutputState }

func (Logfortianalyzer2SettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logfortianalyzer2Setting)(nil)).Elem()
}

func (o Logfortianalyzer2SettingMapOutput) ToLogfortianalyzer2SettingMapOutput() Logfortianalyzer2SettingMapOutput {
	return o
}

func (o Logfortianalyzer2SettingMapOutput) ToLogfortianalyzer2SettingMapOutputWithContext(ctx context.Context) Logfortianalyzer2SettingMapOutput {
	return o
}

func (o Logfortianalyzer2SettingMapOutput) MapIndex(k pulumi.StringInput) Logfortianalyzer2SettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logfortianalyzer2Setting {
		return vs[0].(map[string]*Logfortianalyzer2Setting)[vs[1].(string)]
	}).(Logfortianalyzer2SettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Logfortianalyzer2SettingInput)(nil)).Elem(), &Logfortianalyzer2Setting{})
	pulumi.RegisterInputType(reflect.TypeOf((*Logfortianalyzer2SettingArrayInput)(nil)).Elem(), Logfortianalyzer2SettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Logfortianalyzer2SettingMapInput)(nil)).Elem(), Logfortianalyzer2SettingMap{})
	pulumi.RegisterOutputType(Logfortianalyzer2SettingOutput{})
	pulumi.RegisterOutputType(Logfortianalyzer2SettingArrayOutput{})
	pulumi.RegisterOutputType(Logfortianalyzer2SettingMapOutput{})
}
