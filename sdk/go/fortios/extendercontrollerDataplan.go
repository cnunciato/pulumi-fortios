// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// FortiExtender dataplan configuration. Applies to FortiOS Version `6.4.2,6.4.10,7.0.0,7.0.1,7.0.2,7.0.3,7.0.4,7.0.5,7.0.6,7.2.0`.
//
// ## Import
//
// # ExtenderController Dataplan can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/extendercontrollerDataplan:ExtendercontrollerDataplan labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/extendercontrollerDataplan:ExtendercontrollerDataplan labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type ExtendercontrollerDataplan struct {
	pulumi.CustomResourceState

	// APN configuration.
	Apn pulumi.StringOutput `pulumi:"apn"`
	// Authentication type. Valid values: `none`, `pap`, `chap`.
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// Billing day of the month (1 - 31).
	BillingDate pulumi.IntOutput `pulumi:"billingDate"`
	// Capacity in MB (0 - 102400000).
	Capacity pulumi.IntOutput `pulumi:"capacity"`
	// Carrier configuration.
	Carrier pulumi.StringOutput `pulumi:"carrier"`
	// ICCID configuration.
	Iccid pulumi.StringOutput `pulumi:"iccid"`
	// Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
	ModemId pulumi.StringOutput `pulumi:"modemId"`
	// Monthly fee of dataplan (0 - 100000, in local currency).
	MonthlyFee pulumi.IntOutput `pulumi:"monthlyFee"`
	// FortiExtender dataplan name
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
	Overage pulumi.StringOutput `pulumi:"overage"`
	// Password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
	Pdn pulumi.StringOutput `pulumi:"pdn"`
	// Preferred subnet mask (8 - 32).
	PreferredSubnet pulumi.IntOutput `pulumi:"preferredSubnet"`
	// Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
	PrivateNetwork pulumi.StringOutput `pulumi:"privateNetwork"`
	// Signal period (600 to 18000 seconds).
	SignalPeriod pulumi.IntOutput `pulumi:"signalPeriod"`
	// Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
	SignalThreshold pulumi.IntOutput `pulumi:"signalThreshold"`
	// SIM slot configuration. Valid values: `sim1`, `sim2`.
	Slot pulumi.StringOutput `pulumi:"slot"`
	// Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Username.
	Username pulumi.StringOutput `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewExtendercontrollerDataplan registers a new resource with the given unique name, arguments, and options.
func NewExtendercontrollerDataplan(ctx *pulumi.Context,
	name string, args *ExtendercontrollerDataplanArgs, opts ...pulumi.ResourceOption) (*ExtendercontrollerDataplan, error) {
	if args == nil {
		args = &ExtendercontrollerDataplanArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource ExtendercontrollerDataplan
	err := ctx.RegisterResource("fortios:index/extendercontrollerDataplan:ExtendercontrollerDataplan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtendercontrollerDataplan gets an existing ExtendercontrollerDataplan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtendercontrollerDataplan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtendercontrollerDataplanState, opts ...pulumi.ResourceOption) (*ExtendercontrollerDataplan, error) {
	var resource ExtendercontrollerDataplan
	err := ctx.ReadResource("fortios:index/extendercontrollerDataplan:ExtendercontrollerDataplan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtendercontrollerDataplan resources.
type extendercontrollerDataplanState struct {
	// APN configuration.
	Apn *string `pulumi:"apn"`
	// Authentication type. Valid values: `none`, `pap`, `chap`.
	AuthType *string `pulumi:"authType"`
	// Billing day of the month (1 - 31).
	BillingDate *int `pulumi:"billingDate"`
	// Capacity in MB (0 - 102400000).
	Capacity *int `pulumi:"capacity"`
	// Carrier configuration.
	Carrier *string `pulumi:"carrier"`
	// ICCID configuration.
	Iccid *string `pulumi:"iccid"`
	// Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
	ModemId *string `pulumi:"modemId"`
	// Monthly fee of dataplan (0 - 100000, in local currency).
	MonthlyFee *int `pulumi:"monthlyFee"`
	// FortiExtender dataplan name
	Name *string `pulumi:"name"`
	// Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
	Overage *string `pulumi:"overage"`
	// Password.
	Password *string `pulumi:"password"`
	// PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
	Pdn *string `pulumi:"pdn"`
	// Preferred subnet mask (8 - 32).
	PreferredSubnet *int `pulumi:"preferredSubnet"`
	// Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
	PrivateNetwork *string `pulumi:"privateNetwork"`
	// Signal period (600 to 18000 seconds).
	SignalPeriod *int `pulumi:"signalPeriod"`
	// Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
	SignalThreshold *int `pulumi:"signalThreshold"`
	// SIM slot configuration. Valid values: `sim1`, `sim2`.
	Slot *string `pulumi:"slot"`
	// Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
	Type *string `pulumi:"type"`
	// Username.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type ExtendercontrollerDataplanState struct {
	// APN configuration.
	Apn pulumi.StringPtrInput
	// Authentication type. Valid values: `none`, `pap`, `chap`.
	AuthType pulumi.StringPtrInput
	// Billing day of the month (1 - 31).
	BillingDate pulumi.IntPtrInput
	// Capacity in MB (0 - 102400000).
	Capacity pulumi.IntPtrInput
	// Carrier configuration.
	Carrier pulumi.StringPtrInput
	// ICCID configuration.
	Iccid pulumi.StringPtrInput
	// Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
	ModemId pulumi.StringPtrInput
	// Monthly fee of dataplan (0 - 100000, in local currency).
	MonthlyFee pulumi.IntPtrInput
	// FortiExtender dataplan name
	Name pulumi.StringPtrInput
	// Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
	Overage pulumi.StringPtrInput
	// Password.
	Password pulumi.StringPtrInput
	// PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
	Pdn pulumi.StringPtrInput
	// Preferred subnet mask (8 - 32).
	PreferredSubnet pulumi.IntPtrInput
	// Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
	PrivateNetwork pulumi.StringPtrInput
	// Signal period (600 to 18000 seconds).
	SignalPeriod pulumi.IntPtrInput
	// Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
	SignalThreshold pulumi.IntPtrInput
	// SIM slot configuration. Valid values: `sim1`, `sim2`.
	Slot pulumi.StringPtrInput
	// Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
	Type pulumi.StringPtrInput
	// Username.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ExtendercontrollerDataplanState) ElementType() reflect.Type {
	return reflect.TypeOf((*extendercontrollerDataplanState)(nil)).Elem()
}

type extendercontrollerDataplanArgs struct {
	// APN configuration.
	Apn *string `pulumi:"apn"`
	// Authentication type. Valid values: `none`, `pap`, `chap`.
	AuthType *string `pulumi:"authType"`
	// Billing day of the month (1 - 31).
	BillingDate *int `pulumi:"billingDate"`
	// Capacity in MB (0 - 102400000).
	Capacity *int `pulumi:"capacity"`
	// Carrier configuration.
	Carrier *string `pulumi:"carrier"`
	// ICCID configuration.
	Iccid *string `pulumi:"iccid"`
	// Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
	ModemId *string `pulumi:"modemId"`
	// Monthly fee of dataplan (0 - 100000, in local currency).
	MonthlyFee *int `pulumi:"monthlyFee"`
	// FortiExtender dataplan name
	Name *string `pulumi:"name"`
	// Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
	Overage *string `pulumi:"overage"`
	// Password.
	Password *string `pulumi:"password"`
	// PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
	Pdn *string `pulumi:"pdn"`
	// Preferred subnet mask (8 - 32).
	PreferredSubnet *int `pulumi:"preferredSubnet"`
	// Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
	PrivateNetwork *string `pulumi:"privateNetwork"`
	// Signal period (600 to 18000 seconds).
	SignalPeriod *int `pulumi:"signalPeriod"`
	// Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
	SignalThreshold *int `pulumi:"signalThreshold"`
	// SIM slot configuration. Valid values: `sim1`, `sim2`.
	Slot *string `pulumi:"slot"`
	// Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
	Type *string `pulumi:"type"`
	// Username.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a ExtendercontrollerDataplan resource.
type ExtendercontrollerDataplanArgs struct {
	// APN configuration.
	Apn pulumi.StringPtrInput
	// Authentication type. Valid values: `none`, `pap`, `chap`.
	AuthType pulumi.StringPtrInput
	// Billing day of the month (1 - 31).
	BillingDate pulumi.IntPtrInput
	// Capacity in MB (0 - 102400000).
	Capacity pulumi.IntPtrInput
	// Carrier configuration.
	Carrier pulumi.StringPtrInput
	// ICCID configuration.
	Iccid pulumi.StringPtrInput
	// Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
	ModemId pulumi.StringPtrInput
	// Monthly fee of dataplan (0 - 100000, in local currency).
	MonthlyFee pulumi.IntPtrInput
	// FortiExtender dataplan name
	Name pulumi.StringPtrInput
	// Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
	Overage pulumi.StringPtrInput
	// Password.
	Password pulumi.StringPtrInput
	// PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
	Pdn pulumi.StringPtrInput
	// Preferred subnet mask (8 - 32).
	PreferredSubnet pulumi.IntPtrInput
	// Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
	PrivateNetwork pulumi.StringPtrInput
	// Signal period (600 to 18000 seconds).
	SignalPeriod pulumi.IntPtrInput
	// Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
	SignalThreshold pulumi.IntPtrInput
	// SIM slot configuration. Valid values: `sim1`, `sim2`.
	Slot pulumi.StringPtrInput
	// Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
	Type pulumi.StringPtrInput
	// Username.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (ExtendercontrollerDataplanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extendercontrollerDataplanArgs)(nil)).Elem()
}

type ExtendercontrollerDataplanInput interface {
	pulumi.Input

	ToExtendercontrollerDataplanOutput() ExtendercontrollerDataplanOutput
	ToExtendercontrollerDataplanOutputWithContext(ctx context.Context) ExtendercontrollerDataplanOutput
}

func (*ExtendercontrollerDataplan) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendercontrollerDataplan)(nil)).Elem()
}

func (i *ExtendercontrollerDataplan) ToExtendercontrollerDataplanOutput() ExtendercontrollerDataplanOutput {
	return i.ToExtendercontrollerDataplanOutputWithContext(context.Background())
}

func (i *ExtendercontrollerDataplan) ToExtendercontrollerDataplanOutputWithContext(ctx context.Context) ExtendercontrollerDataplanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendercontrollerDataplanOutput)
}

// ExtendercontrollerDataplanArrayInput is an input type that accepts ExtendercontrollerDataplanArray and ExtendercontrollerDataplanArrayOutput values.
// You can construct a concrete instance of `ExtendercontrollerDataplanArrayInput` via:
//
//	ExtendercontrollerDataplanArray{ ExtendercontrollerDataplanArgs{...} }
type ExtendercontrollerDataplanArrayInput interface {
	pulumi.Input

	ToExtendercontrollerDataplanArrayOutput() ExtendercontrollerDataplanArrayOutput
	ToExtendercontrollerDataplanArrayOutputWithContext(context.Context) ExtendercontrollerDataplanArrayOutput
}

type ExtendercontrollerDataplanArray []ExtendercontrollerDataplanInput

func (ExtendercontrollerDataplanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtendercontrollerDataplan)(nil)).Elem()
}

func (i ExtendercontrollerDataplanArray) ToExtendercontrollerDataplanArrayOutput() ExtendercontrollerDataplanArrayOutput {
	return i.ToExtendercontrollerDataplanArrayOutputWithContext(context.Background())
}

func (i ExtendercontrollerDataplanArray) ToExtendercontrollerDataplanArrayOutputWithContext(ctx context.Context) ExtendercontrollerDataplanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendercontrollerDataplanArrayOutput)
}

// ExtendercontrollerDataplanMapInput is an input type that accepts ExtendercontrollerDataplanMap and ExtendercontrollerDataplanMapOutput values.
// You can construct a concrete instance of `ExtendercontrollerDataplanMapInput` via:
//
//	ExtendercontrollerDataplanMap{ "key": ExtendercontrollerDataplanArgs{...} }
type ExtendercontrollerDataplanMapInput interface {
	pulumi.Input

	ToExtendercontrollerDataplanMapOutput() ExtendercontrollerDataplanMapOutput
	ToExtendercontrollerDataplanMapOutputWithContext(context.Context) ExtendercontrollerDataplanMapOutput
}

type ExtendercontrollerDataplanMap map[string]ExtendercontrollerDataplanInput

func (ExtendercontrollerDataplanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtendercontrollerDataplan)(nil)).Elem()
}

func (i ExtendercontrollerDataplanMap) ToExtendercontrollerDataplanMapOutput() ExtendercontrollerDataplanMapOutput {
	return i.ToExtendercontrollerDataplanMapOutputWithContext(context.Background())
}

func (i ExtendercontrollerDataplanMap) ToExtendercontrollerDataplanMapOutputWithContext(ctx context.Context) ExtendercontrollerDataplanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendercontrollerDataplanMapOutput)
}

type ExtendercontrollerDataplanOutput struct{ *pulumi.OutputState }

func (ExtendercontrollerDataplanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendercontrollerDataplan)(nil)).Elem()
}

func (o ExtendercontrollerDataplanOutput) ToExtendercontrollerDataplanOutput() ExtendercontrollerDataplanOutput {
	return o
}

func (o ExtendercontrollerDataplanOutput) ToExtendercontrollerDataplanOutputWithContext(ctx context.Context) ExtendercontrollerDataplanOutput {
	return o
}

// APN configuration.
func (o ExtendercontrollerDataplanOutput) Apn() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.Apn }).(pulumi.StringOutput)
}

// Authentication type. Valid values: `none`, `pap`, `chap`.
func (o ExtendercontrollerDataplanOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// Billing day of the month (1 - 31).
func (o ExtendercontrollerDataplanOutput) BillingDate() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.IntOutput { return v.BillingDate }).(pulumi.IntOutput)
}

// Capacity in MB (0 - 102400000).
func (o ExtendercontrollerDataplanOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.IntOutput { return v.Capacity }).(pulumi.IntOutput)
}

// Carrier configuration.
func (o ExtendercontrollerDataplanOutput) Carrier() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.Carrier }).(pulumi.StringOutput)
}

// ICCID configuration.
func (o ExtendercontrollerDataplanOutput) Iccid() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.Iccid }).(pulumi.StringOutput)
}

// Dataplan's modem specifics, if any. Valid values: `modem1`, `modem2`, `all`.
func (o ExtendercontrollerDataplanOutput) ModemId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.ModemId }).(pulumi.StringOutput)
}

// Monthly fee of dataplan (0 - 100000, in local currency).
func (o ExtendercontrollerDataplanOutput) MonthlyFee() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.IntOutput { return v.MonthlyFee }).(pulumi.IntOutput)
}

// FortiExtender dataplan name
func (o ExtendercontrollerDataplanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable dataplan overage detection. Valid values: `disable`, `enable`.
func (o ExtendercontrollerDataplanOutput) Overage() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.Overage }).(pulumi.StringOutput)
}

// Password.
func (o ExtendercontrollerDataplanOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// PDN type. Valid values: `ipv4-only`, `ipv6-only`, `ipv4-ipv6`.
func (o ExtendercontrollerDataplanOutput) Pdn() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.Pdn }).(pulumi.StringOutput)
}

// Preferred subnet mask (8 - 32).
func (o ExtendercontrollerDataplanOutput) PreferredSubnet() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.IntOutput { return v.PreferredSubnet }).(pulumi.IntOutput)
}

// Enable/disable dataplan private network support. Valid values: `disable`, `enable`.
func (o ExtendercontrollerDataplanOutput) PrivateNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.PrivateNetwork }).(pulumi.StringOutput)
}

// Signal period (600 to 18000 seconds).
func (o ExtendercontrollerDataplanOutput) SignalPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.IntOutput { return v.SignalPeriod }).(pulumi.IntOutput)
}

// Signal threshold. Specify the range between 50 - 100, where 50/100 means -50/-100 dBm.
func (o ExtendercontrollerDataplanOutput) SignalThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.IntOutput { return v.SignalThreshold }).(pulumi.IntOutput)
}

// SIM slot configuration. Valid values: `sim1`, `sim2`.
func (o ExtendercontrollerDataplanOutput) Slot() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.Slot }).(pulumi.StringOutput)
}

// Type preferences configuration. Valid values: `carrier`, `slot`, `iccid`, `generic`.
func (o ExtendercontrollerDataplanOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Username.
func (o ExtendercontrollerDataplanOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o ExtendercontrollerDataplanOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendercontrollerDataplan) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type ExtendercontrollerDataplanArrayOutput struct{ *pulumi.OutputState }

func (ExtendercontrollerDataplanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtendercontrollerDataplan)(nil)).Elem()
}

func (o ExtendercontrollerDataplanArrayOutput) ToExtendercontrollerDataplanArrayOutput() ExtendercontrollerDataplanArrayOutput {
	return o
}

func (o ExtendercontrollerDataplanArrayOutput) ToExtendercontrollerDataplanArrayOutputWithContext(ctx context.Context) ExtendercontrollerDataplanArrayOutput {
	return o
}

func (o ExtendercontrollerDataplanArrayOutput) Index(i pulumi.IntInput) ExtendercontrollerDataplanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExtendercontrollerDataplan {
		return vs[0].([]*ExtendercontrollerDataplan)[vs[1].(int)]
	}).(ExtendercontrollerDataplanOutput)
}

type ExtendercontrollerDataplanMapOutput struct{ *pulumi.OutputState }

func (ExtendercontrollerDataplanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtendercontrollerDataplan)(nil)).Elem()
}

func (o ExtendercontrollerDataplanMapOutput) ToExtendercontrollerDataplanMapOutput() ExtendercontrollerDataplanMapOutput {
	return o
}

func (o ExtendercontrollerDataplanMapOutput) ToExtendercontrollerDataplanMapOutputWithContext(ctx context.Context) ExtendercontrollerDataplanMapOutput {
	return o
}

func (o ExtendercontrollerDataplanMapOutput) MapIndex(k pulumi.StringInput) ExtendercontrollerDataplanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExtendercontrollerDataplan {
		return vs[0].(map[string]*ExtendercontrollerDataplan)[vs[1].(string)]
	}).(ExtendercontrollerDataplanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtendercontrollerDataplanInput)(nil)).Elem(), &ExtendercontrollerDataplan{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtendercontrollerDataplanArrayInput)(nil)).Elem(), ExtendercontrollerDataplanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtendercontrollerDataplanMapInput)(nil)).Elem(), ExtendercontrollerDataplanMap{})
	pulumi.RegisterOutputType(ExtendercontrollerDataplanOutput{})
	pulumi.RegisterOutputType(ExtendercontrollerDataplanArrayOutput{})
	pulumi.RegisterOutputType(ExtendercontrollerDataplanMapOutput{})
}
