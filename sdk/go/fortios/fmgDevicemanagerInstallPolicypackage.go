// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports installing devicemanager policy package from FortiManager to the related FortiGate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFmgDevicemanagerInstallPolicypackage(ctx, "test1", &fortios.FmgDevicemanagerInstallPolicypackageArgs{
//				PackageName: pulumi.String("test-pkg1"),
//				Timeout:     pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FmgDevicemanagerInstallPolicypackage struct {
	pulumi.CustomResourceState

	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// The installation package name.
	PackageName pulumi.StringOutput `pulumi:"packageName"`
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
}

// NewFmgDevicemanagerInstallPolicypackage registers a new resource with the given unique name, arguments, and options.
func NewFmgDevicemanagerInstallPolicypackage(ctx *pulumi.Context,
	name string, args *FmgDevicemanagerInstallPolicypackageArgs, opts ...pulumi.ResourceOption) (*FmgDevicemanagerInstallPolicypackage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PackageName == nil {
		return nil, errors.New("invalid value for required argument 'PackageName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FmgDevicemanagerInstallPolicypackage
	err := ctx.RegisterResource("fortios:index/fmgDevicemanagerInstallPolicypackage:FmgDevicemanagerInstallPolicypackage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFmgDevicemanagerInstallPolicypackage gets an existing FmgDevicemanagerInstallPolicypackage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFmgDevicemanagerInstallPolicypackage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FmgDevicemanagerInstallPolicypackageState, opts ...pulumi.ResourceOption) (*FmgDevicemanagerInstallPolicypackage, error) {
	var resource FmgDevicemanagerInstallPolicypackage
	err := ctx.ReadResource("fortios:index/fmgDevicemanagerInstallPolicypackage:FmgDevicemanagerInstallPolicypackage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FmgDevicemanagerInstallPolicypackage resources.
type fmgDevicemanagerInstallPolicypackageState struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// The installation package name.
	PackageName *string `pulumi:"packageName"`
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout *int `pulumi:"timeout"`
}

type FmgDevicemanagerInstallPolicypackageState struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// The installation package name.
	PackageName pulumi.StringPtrInput
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout pulumi.IntPtrInput
}

func (FmgDevicemanagerInstallPolicypackageState) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgDevicemanagerInstallPolicypackageState)(nil)).Elem()
}

type fmgDevicemanagerInstallPolicypackageArgs struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// The installation package name.
	PackageName string `pulumi:"packageName"`
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a FmgDevicemanagerInstallPolicypackage resource.
type FmgDevicemanagerInstallPolicypackageArgs struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// The installation package name.
	PackageName pulumi.StringInput
	// Timeout for installing the package to the target, default: 3 minutes.
	Timeout pulumi.IntPtrInput
}

func (FmgDevicemanagerInstallPolicypackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgDevicemanagerInstallPolicypackageArgs)(nil)).Elem()
}

type FmgDevicemanagerInstallPolicypackageInput interface {
	pulumi.Input

	ToFmgDevicemanagerInstallPolicypackageOutput() FmgDevicemanagerInstallPolicypackageOutput
	ToFmgDevicemanagerInstallPolicypackageOutputWithContext(ctx context.Context) FmgDevicemanagerInstallPolicypackageOutput
}

func (*FmgDevicemanagerInstallPolicypackage) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgDevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (i *FmgDevicemanagerInstallPolicypackage) ToFmgDevicemanagerInstallPolicypackageOutput() FmgDevicemanagerInstallPolicypackageOutput {
	return i.ToFmgDevicemanagerInstallPolicypackageOutputWithContext(context.Background())
}

func (i *FmgDevicemanagerInstallPolicypackage) ToFmgDevicemanagerInstallPolicypackageOutputWithContext(ctx context.Context) FmgDevicemanagerInstallPolicypackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgDevicemanagerInstallPolicypackageOutput)
}

// FmgDevicemanagerInstallPolicypackageArrayInput is an input type that accepts FmgDevicemanagerInstallPolicypackageArray and FmgDevicemanagerInstallPolicypackageArrayOutput values.
// You can construct a concrete instance of `FmgDevicemanagerInstallPolicypackageArrayInput` via:
//
//	FmgDevicemanagerInstallPolicypackageArray{ FmgDevicemanagerInstallPolicypackageArgs{...} }
type FmgDevicemanagerInstallPolicypackageArrayInput interface {
	pulumi.Input

	ToFmgDevicemanagerInstallPolicypackageArrayOutput() FmgDevicemanagerInstallPolicypackageArrayOutput
	ToFmgDevicemanagerInstallPolicypackageArrayOutputWithContext(context.Context) FmgDevicemanagerInstallPolicypackageArrayOutput
}

type FmgDevicemanagerInstallPolicypackageArray []FmgDevicemanagerInstallPolicypackageInput

func (FmgDevicemanagerInstallPolicypackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgDevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (i FmgDevicemanagerInstallPolicypackageArray) ToFmgDevicemanagerInstallPolicypackageArrayOutput() FmgDevicemanagerInstallPolicypackageArrayOutput {
	return i.ToFmgDevicemanagerInstallPolicypackageArrayOutputWithContext(context.Background())
}

func (i FmgDevicemanagerInstallPolicypackageArray) ToFmgDevicemanagerInstallPolicypackageArrayOutputWithContext(ctx context.Context) FmgDevicemanagerInstallPolicypackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgDevicemanagerInstallPolicypackageArrayOutput)
}

// FmgDevicemanagerInstallPolicypackageMapInput is an input type that accepts FmgDevicemanagerInstallPolicypackageMap and FmgDevicemanagerInstallPolicypackageMapOutput values.
// You can construct a concrete instance of `FmgDevicemanagerInstallPolicypackageMapInput` via:
//
//	FmgDevicemanagerInstallPolicypackageMap{ "key": FmgDevicemanagerInstallPolicypackageArgs{...} }
type FmgDevicemanagerInstallPolicypackageMapInput interface {
	pulumi.Input

	ToFmgDevicemanagerInstallPolicypackageMapOutput() FmgDevicemanagerInstallPolicypackageMapOutput
	ToFmgDevicemanagerInstallPolicypackageMapOutputWithContext(context.Context) FmgDevicemanagerInstallPolicypackageMapOutput
}

type FmgDevicemanagerInstallPolicypackageMap map[string]FmgDevicemanagerInstallPolicypackageInput

func (FmgDevicemanagerInstallPolicypackageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgDevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (i FmgDevicemanagerInstallPolicypackageMap) ToFmgDevicemanagerInstallPolicypackageMapOutput() FmgDevicemanagerInstallPolicypackageMapOutput {
	return i.ToFmgDevicemanagerInstallPolicypackageMapOutputWithContext(context.Background())
}

func (i FmgDevicemanagerInstallPolicypackageMap) ToFmgDevicemanagerInstallPolicypackageMapOutputWithContext(ctx context.Context) FmgDevicemanagerInstallPolicypackageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgDevicemanagerInstallPolicypackageMapOutput)
}

type FmgDevicemanagerInstallPolicypackageOutput struct{ *pulumi.OutputState }

func (FmgDevicemanagerInstallPolicypackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgDevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (o FmgDevicemanagerInstallPolicypackageOutput) ToFmgDevicemanagerInstallPolicypackageOutput() FmgDevicemanagerInstallPolicypackageOutput {
	return o
}

func (o FmgDevicemanagerInstallPolicypackageOutput) ToFmgDevicemanagerInstallPolicypackageOutputWithContext(ctx context.Context) FmgDevicemanagerInstallPolicypackageOutput {
	return o
}

// Source ADOM name. default is 'root'
func (o FmgDevicemanagerInstallPolicypackageOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgDevicemanagerInstallPolicypackage) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// The installation package name.
func (o FmgDevicemanagerInstallPolicypackageOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgDevicemanagerInstallPolicypackage) pulumi.StringOutput { return v.PackageName }).(pulumi.StringOutput)
}

// Timeout for installing the package to the target, default: 3 minutes.
func (o FmgDevicemanagerInstallPolicypackageOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FmgDevicemanagerInstallPolicypackage) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

type FmgDevicemanagerInstallPolicypackageArrayOutput struct{ *pulumi.OutputState }

func (FmgDevicemanagerInstallPolicypackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgDevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (o FmgDevicemanagerInstallPolicypackageArrayOutput) ToFmgDevicemanagerInstallPolicypackageArrayOutput() FmgDevicemanagerInstallPolicypackageArrayOutput {
	return o
}

func (o FmgDevicemanagerInstallPolicypackageArrayOutput) ToFmgDevicemanagerInstallPolicypackageArrayOutputWithContext(ctx context.Context) FmgDevicemanagerInstallPolicypackageArrayOutput {
	return o
}

func (o FmgDevicemanagerInstallPolicypackageArrayOutput) Index(i pulumi.IntInput) FmgDevicemanagerInstallPolicypackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FmgDevicemanagerInstallPolicypackage {
		return vs[0].([]*FmgDevicemanagerInstallPolicypackage)[vs[1].(int)]
	}).(FmgDevicemanagerInstallPolicypackageOutput)
}

type FmgDevicemanagerInstallPolicypackageMapOutput struct{ *pulumi.OutputState }

func (FmgDevicemanagerInstallPolicypackageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgDevicemanagerInstallPolicypackage)(nil)).Elem()
}

func (o FmgDevicemanagerInstallPolicypackageMapOutput) ToFmgDevicemanagerInstallPolicypackageMapOutput() FmgDevicemanagerInstallPolicypackageMapOutput {
	return o
}

func (o FmgDevicemanagerInstallPolicypackageMapOutput) ToFmgDevicemanagerInstallPolicypackageMapOutputWithContext(ctx context.Context) FmgDevicemanagerInstallPolicypackageMapOutput {
	return o
}

func (o FmgDevicemanagerInstallPolicypackageMapOutput) MapIndex(k pulumi.StringInput) FmgDevicemanagerInstallPolicypackageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FmgDevicemanagerInstallPolicypackage {
		return vs[0].(map[string]*FmgDevicemanagerInstallPolicypackage)[vs[1].(string)]
	}).(FmgDevicemanagerInstallPolicypackageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FmgDevicemanagerInstallPolicypackageInput)(nil)).Elem(), &FmgDevicemanagerInstallPolicypackage{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgDevicemanagerInstallPolicypackageArrayInput)(nil)).Elem(), FmgDevicemanagerInstallPolicypackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgDevicemanagerInstallPolicypackageMapInput)(nil)).Elem(), FmgDevicemanagerInstallPolicypackageMap{})
	pulumi.RegisterOutputType(FmgDevicemanagerInstallPolicypackageOutput{})
	pulumi.RegisterOutputType(FmgDevicemanagerInstallPolicypackageArrayOutput{})
	pulumi.RegisterOutputType(FmgDevicemanagerInstallPolicypackageMapOutput{})
}
