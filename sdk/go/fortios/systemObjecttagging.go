// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure object tagging.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemObjecttagging(ctx, "trname", &fortios.SystemObjecttaggingArgs{
//				Address:   pulumi.String("disable"),
//				Category:  pulumi.String("s1"),
//				Color:     pulumi.Int(0),
//				Device:    pulumi.String("mandatory"),
//				Interface: pulumi.String("disable"),
//				Multiple:  pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # System ObjectTagging can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemObjecttagging:SystemObjecttagging labelname {{category}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemObjecttagging:SystemObjecttagging labelname {{category}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemObjecttagging struct {
	pulumi.CustomResourceState

	// Address. Valid values: `disable`, `mandatory`, `optional`.
	Address pulumi.StringOutput `pulumi:"address"`
	// Tag Category.
	Category pulumi.StringOutput `pulumi:"category"`
	// Color of icon on the GUI.
	Color pulumi.IntOutput `pulumi:"color"`
	// Device. Valid values: `disable`, `mandatory`, `optional`.
	Device pulumi.StringOutput `pulumi:"device"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Interface. Valid values: `disable`, `mandatory`, `optional`.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Allow multiple tag selection. Valid values: `enable`, `disable`.
	Multiple pulumi.StringOutput `pulumi:"multiple"`
	// Tags. The structure of `tags` block is documented below.
	Tags SystemObjecttaggingTagArrayOutput `pulumi:"tags"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemObjecttagging registers a new resource with the given unique name, arguments, and options.
func NewSystemObjecttagging(ctx *pulumi.Context,
	name string, args *SystemObjecttaggingArgs, opts ...pulumi.ResourceOption) (*SystemObjecttagging, error) {
	if args == nil {
		args = &SystemObjecttaggingArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemObjecttagging
	err := ctx.RegisterResource("fortios:index/systemObjecttagging:SystemObjecttagging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemObjecttagging gets an existing SystemObjecttagging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemObjecttagging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemObjecttaggingState, opts ...pulumi.ResourceOption) (*SystemObjecttagging, error) {
	var resource SystemObjecttagging
	err := ctx.ReadResource("fortios:index/systemObjecttagging:SystemObjecttagging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemObjecttagging resources.
type systemObjecttaggingState struct {
	// Address. Valid values: `disable`, `mandatory`, `optional`.
	Address *string `pulumi:"address"`
	// Tag Category.
	Category *string `pulumi:"category"`
	// Color of icon on the GUI.
	Color *int `pulumi:"color"`
	// Device. Valid values: `disable`, `mandatory`, `optional`.
	Device *string `pulumi:"device"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Interface. Valid values: `disable`, `mandatory`, `optional`.
	Interface *string `pulumi:"interface"`
	// Allow multiple tag selection. Valid values: `enable`, `disable`.
	Multiple *string `pulumi:"multiple"`
	// Tags. The structure of `tags` block is documented below.
	Tags []SystemObjecttaggingTag `pulumi:"tags"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemObjecttaggingState struct {
	// Address. Valid values: `disable`, `mandatory`, `optional`.
	Address pulumi.StringPtrInput
	// Tag Category.
	Category pulumi.StringPtrInput
	// Color of icon on the GUI.
	Color pulumi.IntPtrInput
	// Device. Valid values: `disable`, `mandatory`, `optional`.
	Device pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Interface. Valid values: `disable`, `mandatory`, `optional`.
	Interface pulumi.StringPtrInput
	// Allow multiple tag selection. Valid values: `enable`, `disable`.
	Multiple pulumi.StringPtrInput
	// Tags. The structure of `tags` block is documented below.
	Tags SystemObjecttaggingTagArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemObjecttaggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemObjecttaggingState)(nil)).Elem()
}

type systemObjecttaggingArgs struct {
	// Address. Valid values: `disable`, `mandatory`, `optional`.
	Address *string `pulumi:"address"`
	// Tag Category.
	Category *string `pulumi:"category"`
	// Color of icon on the GUI.
	Color *int `pulumi:"color"`
	// Device. Valid values: `disable`, `mandatory`, `optional`.
	Device *string `pulumi:"device"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Interface. Valid values: `disable`, `mandatory`, `optional`.
	Interface *string `pulumi:"interface"`
	// Allow multiple tag selection. Valid values: `enable`, `disable`.
	Multiple *string `pulumi:"multiple"`
	// Tags. The structure of `tags` block is documented below.
	Tags []SystemObjecttaggingTag `pulumi:"tags"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemObjecttagging resource.
type SystemObjecttaggingArgs struct {
	// Address. Valid values: `disable`, `mandatory`, `optional`.
	Address pulumi.StringPtrInput
	// Tag Category.
	Category pulumi.StringPtrInput
	// Color of icon on the GUI.
	Color pulumi.IntPtrInput
	// Device. Valid values: `disable`, `mandatory`, `optional`.
	Device pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Interface. Valid values: `disable`, `mandatory`, `optional`.
	Interface pulumi.StringPtrInput
	// Allow multiple tag selection. Valid values: `enable`, `disable`.
	Multiple pulumi.StringPtrInput
	// Tags. The structure of `tags` block is documented below.
	Tags SystemObjecttaggingTagArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemObjecttaggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemObjecttaggingArgs)(nil)).Elem()
}

type SystemObjecttaggingInput interface {
	pulumi.Input

	ToSystemObjecttaggingOutput() SystemObjecttaggingOutput
	ToSystemObjecttaggingOutputWithContext(ctx context.Context) SystemObjecttaggingOutput
}

func (*SystemObjecttagging) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemObjecttagging)(nil)).Elem()
}

func (i *SystemObjecttagging) ToSystemObjecttaggingOutput() SystemObjecttaggingOutput {
	return i.ToSystemObjecttaggingOutputWithContext(context.Background())
}

func (i *SystemObjecttagging) ToSystemObjecttaggingOutputWithContext(ctx context.Context) SystemObjecttaggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemObjecttaggingOutput)
}

// SystemObjecttaggingArrayInput is an input type that accepts SystemObjecttaggingArray and SystemObjecttaggingArrayOutput values.
// You can construct a concrete instance of `SystemObjecttaggingArrayInput` via:
//
//	SystemObjecttaggingArray{ SystemObjecttaggingArgs{...} }
type SystemObjecttaggingArrayInput interface {
	pulumi.Input

	ToSystemObjecttaggingArrayOutput() SystemObjecttaggingArrayOutput
	ToSystemObjecttaggingArrayOutputWithContext(context.Context) SystemObjecttaggingArrayOutput
}

type SystemObjecttaggingArray []SystemObjecttaggingInput

func (SystemObjecttaggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemObjecttagging)(nil)).Elem()
}

func (i SystemObjecttaggingArray) ToSystemObjecttaggingArrayOutput() SystemObjecttaggingArrayOutput {
	return i.ToSystemObjecttaggingArrayOutputWithContext(context.Background())
}

func (i SystemObjecttaggingArray) ToSystemObjecttaggingArrayOutputWithContext(ctx context.Context) SystemObjecttaggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemObjecttaggingArrayOutput)
}

// SystemObjecttaggingMapInput is an input type that accepts SystemObjecttaggingMap and SystemObjecttaggingMapOutput values.
// You can construct a concrete instance of `SystemObjecttaggingMapInput` via:
//
//	SystemObjecttaggingMap{ "key": SystemObjecttaggingArgs{...} }
type SystemObjecttaggingMapInput interface {
	pulumi.Input

	ToSystemObjecttaggingMapOutput() SystemObjecttaggingMapOutput
	ToSystemObjecttaggingMapOutputWithContext(context.Context) SystemObjecttaggingMapOutput
}

type SystemObjecttaggingMap map[string]SystemObjecttaggingInput

func (SystemObjecttaggingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemObjecttagging)(nil)).Elem()
}

func (i SystemObjecttaggingMap) ToSystemObjecttaggingMapOutput() SystemObjecttaggingMapOutput {
	return i.ToSystemObjecttaggingMapOutputWithContext(context.Background())
}

func (i SystemObjecttaggingMap) ToSystemObjecttaggingMapOutputWithContext(ctx context.Context) SystemObjecttaggingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemObjecttaggingMapOutput)
}

type SystemObjecttaggingOutput struct{ *pulumi.OutputState }

func (SystemObjecttaggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemObjecttagging)(nil)).Elem()
}

func (o SystemObjecttaggingOutput) ToSystemObjecttaggingOutput() SystemObjecttaggingOutput {
	return o
}

func (o SystemObjecttaggingOutput) ToSystemObjecttaggingOutputWithContext(ctx context.Context) SystemObjecttaggingOutput {
	return o
}

// Address. Valid values: `disable`, `mandatory`, `optional`.
func (o SystemObjecttaggingOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemObjecttagging) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Tag Category.
func (o SystemObjecttaggingOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemObjecttagging) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Color of icon on the GUI.
func (o SystemObjecttaggingOutput) Color() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemObjecttagging) pulumi.IntOutput { return v.Color }).(pulumi.IntOutput)
}

// Device. Valid values: `disable`, `mandatory`, `optional`.
func (o SystemObjecttaggingOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemObjecttagging) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SystemObjecttaggingOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemObjecttagging) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Interface. Valid values: `disable`, `mandatory`, `optional`.
func (o SystemObjecttaggingOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemObjecttagging) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Allow multiple tag selection. Valid values: `enable`, `disable`.
func (o SystemObjecttaggingOutput) Multiple() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemObjecttagging) pulumi.StringOutput { return v.Multiple }).(pulumi.StringOutput)
}

// Tags. The structure of `tags` block is documented below.
func (o SystemObjecttaggingOutput) Tags() SystemObjecttaggingTagArrayOutput {
	return o.ApplyT(func(v *SystemObjecttagging) SystemObjecttaggingTagArrayOutput { return v.Tags }).(SystemObjecttaggingTagArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemObjecttaggingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemObjecttagging) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemObjecttaggingArrayOutput struct{ *pulumi.OutputState }

func (SystemObjecttaggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemObjecttagging)(nil)).Elem()
}

func (o SystemObjecttaggingArrayOutput) ToSystemObjecttaggingArrayOutput() SystemObjecttaggingArrayOutput {
	return o
}

func (o SystemObjecttaggingArrayOutput) ToSystemObjecttaggingArrayOutputWithContext(ctx context.Context) SystemObjecttaggingArrayOutput {
	return o
}

func (o SystemObjecttaggingArrayOutput) Index(i pulumi.IntInput) SystemObjecttaggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemObjecttagging {
		return vs[0].([]*SystemObjecttagging)[vs[1].(int)]
	}).(SystemObjecttaggingOutput)
}

type SystemObjecttaggingMapOutput struct{ *pulumi.OutputState }

func (SystemObjecttaggingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemObjecttagging)(nil)).Elem()
}

func (o SystemObjecttaggingMapOutput) ToSystemObjecttaggingMapOutput() SystemObjecttaggingMapOutput {
	return o
}

func (o SystemObjecttaggingMapOutput) ToSystemObjecttaggingMapOutputWithContext(ctx context.Context) SystemObjecttaggingMapOutput {
	return o
}

func (o SystemObjecttaggingMapOutput) MapIndex(k pulumi.StringInput) SystemObjecttaggingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemObjecttagging {
		return vs[0].(map[string]*SystemObjecttagging)[vs[1].(string)]
	}).(SystemObjecttaggingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemObjecttaggingInput)(nil)).Elem(), &SystemObjecttagging{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemObjecttaggingArrayInput)(nil)).Elem(), SystemObjecttaggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemObjecttaggingMapInput)(nil)).Elem(), SystemObjecttaggingMap{})
	pulumi.RegisterOutputType(SystemObjecttaggingOutput{})
	pulumi.RegisterOutputType(SystemObjecttaggingArrayOutput{})
	pulumi.RegisterOutputType(SystemObjecttaggingMapOutput{})
}
