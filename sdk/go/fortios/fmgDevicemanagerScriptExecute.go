// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports executing devicemanager script on Fortimanager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFmgDevicemanagerScriptExecute(ctx, "test3", &fortios.FmgDevicemanagerScriptExecuteArgs{
//				ScriptName:    pulumi.String("config-intf3"),
//				TargetDevname: pulumi.String("devname"),
//				Timeout:       pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FmgDevicemanagerScriptExecute struct {
	pulumi.CustomResourceState

	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Policy package.
	Package pulumi.StringPtrOutput `pulumi:"package"`
	// Script name.
	ScriptName pulumi.StringOutput `pulumi:"scriptName"`
	// Target device name, which the script will be installed.
	TargetDevname pulumi.StringPtrOutput `pulumi:"targetDevname"`
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrOutput `pulumi:"vdom"`
}

// NewFmgDevicemanagerScriptExecute registers a new resource with the given unique name, arguments, and options.
func NewFmgDevicemanagerScriptExecute(ctx *pulumi.Context,
	name string, args *FmgDevicemanagerScriptExecuteArgs, opts ...pulumi.ResourceOption) (*FmgDevicemanagerScriptExecute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FmgDevicemanagerScriptExecute
	err := ctx.RegisterResource("fortios:index/fmgDevicemanagerScriptExecute:FmgDevicemanagerScriptExecute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFmgDevicemanagerScriptExecute gets an existing FmgDevicemanagerScriptExecute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFmgDevicemanagerScriptExecute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FmgDevicemanagerScriptExecuteState, opts ...pulumi.ResourceOption) (*FmgDevicemanagerScriptExecute, error) {
	var resource FmgDevicemanagerScriptExecute
	err := ctx.ReadResource("fortios:index/fmgDevicemanagerScriptExecute:FmgDevicemanagerScriptExecute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FmgDevicemanagerScriptExecute resources.
type fmgDevicemanagerScriptExecuteState struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// Policy package.
	Package *string `pulumi:"package"`
	// Script name.
	ScriptName *string `pulumi:"scriptName"`
	// Target device name, which the script will be installed.
	TargetDevname *string `pulumi:"targetDevname"`
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout *int `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom *string `pulumi:"vdom"`
}

type FmgDevicemanagerScriptExecuteState struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// Policy package.
	Package pulumi.StringPtrInput
	// Script name.
	ScriptName pulumi.StringPtrInput
	// Target device name, which the script will be installed.
	TargetDevname pulumi.StringPtrInput
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout pulumi.IntPtrInput
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrInput
}

func (FmgDevicemanagerScriptExecuteState) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgDevicemanagerScriptExecuteState)(nil)).Elem()
}

type fmgDevicemanagerScriptExecuteArgs struct {
	// Source ADOM name. default is 'root'
	Adom *string `pulumi:"adom"`
	// Policy package.
	Package *string `pulumi:"package"`
	// Script name.
	ScriptName string `pulumi:"scriptName"`
	// Target device name, which the script will be installed.
	TargetDevname *string `pulumi:"targetDevname"`
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout *int `pulumi:"timeout"`
	// Vdom of managed device. default is 'root'
	Vdom *string `pulumi:"vdom"`
}

// The set of arguments for constructing a FmgDevicemanagerScriptExecute resource.
type FmgDevicemanagerScriptExecuteArgs struct {
	// Source ADOM name. default is 'root'
	Adom pulumi.StringPtrInput
	// Policy package.
	Package pulumi.StringPtrInput
	// Script name.
	ScriptName pulumi.StringInput
	// Target device name, which the script will be installed.
	TargetDevname pulumi.StringPtrInput
	// Timeout(minute) for executing the script, default is 3 minutes.
	Timeout pulumi.IntPtrInput
	// Vdom of managed device. default is 'root'
	Vdom pulumi.StringPtrInput
}

func (FmgDevicemanagerScriptExecuteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgDevicemanagerScriptExecuteArgs)(nil)).Elem()
}

type FmgDevicemanagerScriptExecuteInput interface {
	pulumi.Input

	ToFmgDevicemanagerScriptExecuteOutput() FmgDevicemanagerScriptExecuteOutput
	ToFmgDevicemanagerScriptExecuteOutputWithContext(ctx context.Context) FmgDevicemanagerScriptExecuteOutput
}

func (*FmgDevicemanagerScriptExecute) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgDevicemanagerScriptExecute)(nil)).Elem()
}

func (i *FmgDevicemanagerScriptExecute) ToFmgDevicemanagerScriptExecuteOutput() FmgDevicemanagerScriptExecuteOutput {
	return i.ToFmgDevicemanagerScriptExecuteOutputWithContext(context.Background())
}

func (i *FmgDevicemanagerScriptExecute) ToFmgDevicemanagerScriptExecuteOutputWithContext(ctx context.Context) FmgDevicemanagerScriptExecuteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgDevicemanagerScriptExecuteOutput)
}

// FmgDevicemanagerScriptExecuteArrayInput is an input type that accepts FmgDevicemanagerScriptExecuteArray and FmgDevicemanagerScriptExecuteArrayOutput values.
// You can construct a concrete instance of `FmgDevicemanagerScriptExecuteArrayInput` via:
//
//	FmgDevicemanagerScriptExecuteArray{ FmgDevicemanagerScriptExecuteArgs{...} }
type FmgDevicemanagerScriptExecuteArrayInput interface {
	pulumi.Input

	ToFmgDevicemanagerScriptExecuteArrayOutput() FmgDevicemanagerScriptExecuteArrayOutput
	ToFmgDevicemanagerScriptExecuteArrayOutputWithContext(context.Context) FmgDevicemanagerScriptExecuteArrayOutput
}

type FmgDevicemanagerScriptExecuteArray []FmgDevicemanagerScriptExecuteInput

func (FmgDevicemanagerScriptExecuteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgDevicemanagerScriptExecute)(nil)).Elem()
}

func (i FmgDevicemanagerScriptExecuteArray) ToFmgDevicemanagerScriptExecuteArrayOutput() FmgDevicemanagerScriptExecuteArrayOutput {
	return i.ToFmgDevicemanagerScriptExecuteArrayOutputWithContext(context.Background())
}

func (i FmgDevicemanagerScriptExecuteArray) ToFmgDevicemanagerScriptExecuteArrayOutputWithContext(ctx context.Context) FmgDevicemanagerScriptExecuteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgDevicemanagerScriptExecuteArrayOutput)
}

// FmgDevicemanagerScriptExecuteMapInput is an input type that accepts FmgDevicemanagerScriptExecuteMap and FmgDevicemanagerScriptExecuteMapOutput values.
// You can construct a concrete instance of `FmgDevicemanagerScriptExecuteMapInput` via:
//
//	FmgDevicemanagerScriptExecuteMap{ "key": FmgDevicemanagerScriptExecuteArgs{...} }
type FmgDevicemanagerScriptExecuteMapInput interface {
	pulumi.Input

	ToFmgDevicemanagerScriptExecuteMapOutput() FmgDevicemanagerScriptExecuteMapOutput
	ToFmgDevicemanagerScriptExecuteMapOutputWithContext(context.Context) FmgDevicemanagerScriptExecuteMapOutput
}

type FmgDevicemanagerScriptExecuteMap map[string]FmgDevicemanagerScriptExecuteInput

func (FmgDevicemanagerScriptExecuteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgDevicemanagerScriptExecute)(nil)).Elem()
}

func (i FmgDevicemanagerScriptExecuteMap) ToFmgDevicemanagerScriptExecuteMapOutput() FmgDevicemanagerScriptExecuteMapOutput {
	return i.ToFmgDevicemanagerScriptExecuteMapOutputWithContext(context.Background())
}

func (i FmgDevicemanagerScriptExecuteMap) ToFmgDevicemanagerScriptExecuteMapOutputWithContext(ctx context.Context) FmgDevicemanagerScriptExecuteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgDevicemanagerScriptExecuteMapOutput)
}

type FmgDevicemanagerScriptExecuteOutput struct{ *pulumi.OutputState }

func (FmgDevicemanagerScriptExecuteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgDevicemanagerScriptExecute)(nil)).Elem()
}

func (o FmgDevicemanagerScriptExecuteOutput) ToFmgDevicemanagerScriptExecuteOutput() FmgDevicemanagerScriptExecuteOutput {
	return o
}

func (o FmgDevicemanagerScriptExecuteOutput) ToFmgDevicemanagerScriptExecuteOutputWithContext(ctx context.Context) FmgDevicemanagerScriptExecuteOutput {
	return o
}

// Source ADOM name. default is 'root'
func (o FmgDevicemanagerScriptExecuteOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgDevicemanagerScriptExecute) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// Policy package.
func (o FmgDevicemanagerScriptExecuteOutput) Package() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgDevicemanagerScriptExecute) pulumi.StringPtrOutput { return v.Package }).(pulumi.StringPtrOutput)
}

// Script name.
func (o FmgDevicemanagerScriptExecuteOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgDevicemanagerScriptExecute) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

// Target device name, which the script will be installed.
func (o FmgDevicemanagerScriptExecuteOutput) TargetDevname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgDevicemanagerScriptExecute) pulumi.StringPtrOutput { return v.TargetDevname }).(pulumi.StringPtrOutput)
}

// Timeout(minute) for executing the script, default is 3 minutes.
func (o FmgDevicemanagerScriptExecuteOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FmgDevicemanagerScriptExecute) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Vdom of managed device. default is 'root'
func (o FmgDevicemanagerScriptExecuteOutput) Vdom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgDevicemanagerScriptExecute) pulumi.StringPtrOutput { return v.Vdom }).(pulumi.StringPtrOutput)
}

type FmgDevicemanagerScriptExecuteArrayOutput struct{ *pulumi.OutputState }

func (FmgDevicemanagerScriptExecuteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgDevicemanagerScriptExecute)(nil)).Elem()
}

func (o FmgDevicemanagerScriptExecuteArrayOutput) ToFmgDevicemanagerScriptExecuteArrayOutput() FmgDevicemanagerScriptExecuteArrayOutput {
	return o
}

func (o FmgDevicemanagerScriptExecuteArrayOutput) ToFmgDevicemanagerScriptExecuteArrayOutputWithContext(ctx context.Context) FmgDevicemanagerScriptExecuteArrayOutput {
	return o
}

func (o FmgDevicemanagerScriptExecuteArrayOutput) Index(i pulumi.IntInput) FmgDevicemanagerScriptExecuteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FmgDevicemanagerScriptExecute {
		return vs[0].([]*FmgDevicemanagerScriptExecute)[vs[1].(int)]
	}).(FmgDevicemanagerScriptExecuteOutput)
}

type FmgDevicemanagerScriptExecuteMapOutput struct{ *pulumi.OutputState }

func (FmgDevicemanagerScriptExecuteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgDevicemanagerScriptExecute)(nil)).Elem()
}

func (o FmgDevicemanagerScriptExecuteMapOutput) ToFmgDevicemanagerScriptExecuteMapOutput() FmgDevicemanagerScriptExecuteMapOutput {
	return o
}

func (o FmgDevicemanagerScriptExecuteMapOutput) ToFmgDevicemanagerScriptExecuteMapOutputWithContext(ctx context.Context) FmgDevicemanagerScriptExecuteMapOutput {
	return o
}

func (o FmgDevicemanagerScriptExecuteMapOutput) MapIndex(k pulumi.StringInput) FmgDevicemanagerScriptExecuteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FmgDevicemanagerScriptExecute {
		return vs[0].(map[string]*FmgDevicemanagerScriptExecute)[vs[1].(string)]
	}).(FmgDevicemanagerScriptExecuteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FmgDevicemanagerScriptExecuteInput)(nil)).Elem(), &FmgDevicemanagerScriptExecute{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgDevicemanagerScriptExecuteArrayInput)(nil)).Elem(), FmgDevicemanagerScriptExecuteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgDevicemanagerScriptExecuteMapInput)(nil)).Elem(), FmgDevicemanagerScriptExecuteMap{})
	pulumi.RegisterOutputType(FmgDevicemanagerScriptExecuteOutput{})
	pulumi.RegisterOutputType(FmgDevicemanagerScriptExecuteArrayOutput{})
	pulumi.RegisterOutputType(FmgDevicemanagerScriptExecuteMapOutput{})
}
