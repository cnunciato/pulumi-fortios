// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure ACME client. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// # System Acme can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemAcme:SystemAcme labelname SystemAcme
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemAcme:SystemAcme labelname SystemAcme
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemAcme struct {
	pulumi.CustomResourceState

	// ACME accounts list. The structure of `accounts` block is documented below.
	Accounts SystemAcmeAccountArrayOutput `pulumi:"accounts"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Interface(s) on which the ACME client will listen for challenges. The structure of `interface` block is documented below.
	Interfaces SystemAcmeInterfaceArrayOutput `pulumi:"interfaces"`
	// Source IPv4 address used to connect to the ACME server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Source IPv6 address used to connect to the ACME server.
	SourceIp6 pulumi.StringOutput `pulumi:"sourceIp6"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemAcme registers a new resource with the given unique name, arguments, and options.
func NewSystemAcme(ctx *pulumi.Context,
	name string, args *SystemAcmeArgs, opts ...pulumi.ResourceOption) (*SystemAcme, error) {
	if args == nil {
		args = &SystemAcmeArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemAcme
	err := ctx.RegisterResource("fortios:index/systemAcme:SystemAcme", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemAcme gets an existing SystemAcme resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemAcme(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemAcmeState, opts ...pulumi.ResourceOption) (*SystemAcme, error) {
	var resource SystemAcme
	err := ctx.ReadResource("fortios:index/systemAcme:SystemAcme", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemAcme resources.
type systemAcmeState struct {
	// ACME accounts list. The structure of `accounts` block is documented below.
	Accounts []SystemAcmeAccount `pulumi:"accounts"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Interface(s) on which the ACME client will listen for challenges. The structure of `interface` block is documented below.
	Interfaces []SystemAcmeInterface `pulumi:"interfaces"`
	// Source IPv4 address used to connect to the ACME server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address used to connect to the ACME server.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemAcmeState struct {
	// ACME accounts list. The structure of `accounts` block is documented below.
	Accounts SystemAcmeAccountArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Interface(s) on which the ACME client will listen for challenges. The structure of `interface` block is documented below.
	Interfaces SystemAcmeInterfaceArrayInput
	// Source IPv4 address used to connect to the ACME server.
	SourceIp pulumi.StringPtrInput
	// Source IPv6 address used to connect to the ACME server.
	SourceIp6 pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemAcmeState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemAcmeState)(nil)).Elem()
}

type systemAcmeArgs struct {
	// ACME accounts list. The structure of `accounts` block is documented below.
	Accounts []SystemAcmeAccount `pulumi:"accounts"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Interface(s) on which the ACME client will listen for challenges. The structure of `interface` block is documented below.
	Interfaces []SystemAcmeInterface `pulumi:"interfaces"`
	// Source IPv4 address used to connect to the ACME server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address used to connect to the ACME server.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemAcme resource.
type SystemAcmeArgs struct {
	// ACME accounts list. The structure of `accounts` block is documented below.
	Accounts SystemAcmeAccountArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Interface(s) on which the ACME client will listen for challenges. The structure of `interface` block is documented below.
	Interfaces SystemAcmeInterfaceArrayInput
	// Source IPv4 address used to connect to the ACME server.
	SourceIp pulumi.StringPtrInput
	// Source IPv6 address used to connect to the ACME server.
	SourceIp6 pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemAcmeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemAcmeArgs)(nil)).Elem()
}

type SystemAcmeInput interface {
	pulumi.Input

	ToSystemAcmeOutput() SystemAcmeOutput
	ToSystemAcmeOutputWithContext(ctx context.Context) SystemAcmeOutput
}

func (*SystemAcme) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAcme)(nil)).Elem()
}

func (i *SystemAcme) ToSystemAcmeOutput() SystemAcmeOutput {
	return i.ToSystemAcmeOutputWithContext(context.Background())
}

func (i *SystemAcme) ToSystemAcmeOutputWithContext(ctx context.Context) SystemAcmeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAcmeOutput)
}

// SystemAcmeArrayInput is an input type that accepts SystemAcmeArray and SystemAcmeArrayOutput values.
// You can construct a concrete instance of `SystemAcmeArrayInput` via:
//
//	SystemAcmeArray{ SystemAcmeArgs{...} }
type SystemAcmeArrayInput interface {
	pulumi.Input

	ToSystemAcmeArrayOutput() SystemAcmeArrayOutput
	ToSystemAcmeArrayOutputWithContext(context.Context) SystemAcmeArrayOutput
}

type SystemAcmeArray []SystemAcmeInput

func (SystemAcmeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemAcme)(nil)).Elem()
}

func (i SystemAcmeArray) ToSystemAcmeArrayOutput() SystemAcmeArrayOutput {
	return i.ToSystemAcmeArrayOutputWithContext(context.Background())
}

func (i SystemAcmeArray) ToSystemAcmeArrayOutputWithContext(ctx context.Context) SystemAcmeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAcmeArrayOutput)
}

// SystemAcmeMapInput is an input type that accepts SystemAcmeMap and SystemAcmeMapOutput values.
// You can construct a concrete instance of `SystemAcmeMapInput` via:
//
//	SystemAcmeMap{ "key": SystemAcmeArgs{...} }
type SystemAcmeMapInput interface {
	pulumi.Input

	ToSystemAcmeMapOutput() SystemAcmeMapOutput
	ToSystemAcmeMapOutputWithContext(context.Context) SystemAcmeMapOutput
}

type SystemAcmeMap map[string]SystemAcmeInput

func (SystemAcmeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemAcme)(nil)).Elem()
}

func (i SystemAcmeMap) ToSystemAcmeMapOutput() SystemAcmeMapOutput {
	return i.ToSystemAcmeMapOutputWithContext(context.Background())
}

func (i SystemAcmeMap) ToSystemAcmeMapOutputWithContext(ctx context.Context) SystemAcmeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAcmeMapOutput)
}

type SystemAcmeOutput struct{ *pulumi.OutputState }

func (SystemAcmeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAcme)(nil)).Elem()
}

func (o SystemAcmeOutput) ToSystemAcmeOutput() SystemAcmeOutput {
	return o
}

func (o SystemAcmeOutput) ToSystemAcmeOutputWithContext(ctx context.Context) SystemAcmeOutput {
	return o
}

// ACME accounts list. The structure of `accounts` block is documented below.
func (o SystemAcmeOutput) Accounts() SystemAcmeAccountArrayOutput {
	return o.ApplyT(func(v *SystemAcme) SystemAcmeAccountArrayOutput { return v.Accounts }).(SystemAcmeAccountArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SystemAcmeOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAcme) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Interface(s) on which the ACME client will listen for challenges. The structure of `interface` block is documented below.
func (o SystemAcmeOutput) Interfaces() SystemAcmeInterfaceArrayOutput {
	return o.ApplyT(func(v *SystemAcme) SystemAcmeInterfaceArrayOutput { return v.Interfaces }).(SystemAcmeInterfaceArrayOutput)
}

// Source IPv4 address used to connect to the ACME server.
func (o SystemAcmeOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemAcme) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Source IPv6 address used to connect to the ACME server.
func (o SystemAcmeOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemAcme) pulumi.StringOutput { return v.SourceIp6 }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemAcmeOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAcme) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemAcmeArrayOutput struct{ *pulumi.OutputState }

func (SystemAcmeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemAcme)(nil)).Elem()
}

func (o SystemAcmeArrayOutput) ToSystemAcmeArrayOutput() SystemAcmeArrayOutput {
	return o
}

func (o SystemAcmeArrayOutput) ToSystemAcmeArrayOutputWithContext(ctx context.Context) SystemAcmeArrayOutput {
	return o
}

func (o SystemAcmeArrayOutput) Index(i pulumi.IntInput) SystemAcmeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemAcme {
		return vs[0].([]*SystemAcme)[vs[1].(int)]
	}).(SystemAcmeOutput)
}

type SystemAcmeMapOutput struct{ *pulumi.OutputState }

func (SystemAcmeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemAcme)(nil)).Elem()
}

func (o SystemAcmeMapOutput) ToSystemAcmeMapOutput() SystemAcmeMapOutput {
	return o
}

func (o SystemAcmeMapOutput) ToSystemAcmeMapOutputWithContext(ctx context.Context) SystemAcmeMapOutput {
	return o
}

func (o SystemAcmeMapOutput) MapIndex(k pulumi.StringInput) SystemAcmeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemAcme {
		return vs[0].(map[string]*SystemAcme)[vs[1].(string)]
	}).(SystemAcmeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemAcmeInput)(nil)).Elem(), &SystemAcme{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemAcmeArrayInput)(nil)).Elem(), SystemAcmeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemAcmeMapInput)(nil)).Elem(), SystemAcmeMap{})
	pulumi.RegisterOutputType(SystemAcmeOutput{})
	pulumi.RegisterOutputType(SystemAcmeArrayOutput{})
	pulumi.RegisterOutputType(SystemAcmeMapOutput{})
}
