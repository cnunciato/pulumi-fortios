// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure multicast-flow.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewRouterMulticastflow(ctx, "trname", &fortios.RouterMulticastflowArgs{
//				Flows: fortios.RouterMulticastflowFlowArray{
//					&fortios.RouterMulticastflowFlowArgs{
//						GroupAddr:  pulumi.String("224.252.0.0"),
//						SourceAddr: pulumi.String("224.112.0.0"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Router MulticastFlow can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/routerMulticastflow:RouterMulticastflow labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/routerMulticastflow:RouterMulticastflow labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type RouterMulticastflow struct {
	pulumi.CustomResourceState

	// Comment.
	Comments pulumi.StringOutput `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Multicast-flow entries. The structure of `flows` block is documented below.
	Flows RouterMulticastflowFlowArrayOutput `pulumi:"flows"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewRouterMulticastflow registers a new resource with the given unique name, arguments, and options.
func NewRouterMulticastflow(ctx *pulumi.Context,
	name string, args *RouterMulticastflowArgs, opts ...pulumi.ResourceOption) (*RouterMulticastflow, error) {
	if args == nil {
		args = &RouterMulticastflowArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource RouterMulticastflow
	err := ctx.RegisterResource("fortios:index/routerMulticastflow:RouterMulticastflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterMulticastflow gets an existing RouterMulticastflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterMulticastflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterMulticastflowState, opts ...pulumi.ResourceOption) (*RouterMulticastflow, error) {
	var resource RouterMulticastflow
	err := ctx.ReadResource("fortios:index/routerMulticastflow:RouterMulticastflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterMulticastflow resources.
type routerMulticastflowState struct {
	// Comment.
	Comments *string `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Multicast-flow entries. The structure of `flows` block is documented below.
	Flows []RouterMulticastflowFlow `pulumi:"flows"`
	// Name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type RouterMulticastflowState struct {
	// Comment.
	Comments pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Multicast-flow entries. The structure of `flows` block is documented below.
	Flows RouterMulticastflowFlowArrayInput
	// Name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterMulticastflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerMulticastflowState)(nil)).Elem()
}

type routerMulticastflowArgs struct {
	// Comment.
	Comments *string `pulumi:"comments"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Multicast-flow entries. The structure of `flows` block is documented below.
	Flows []RouterMulticastflowFlow `pulumi:"flows"`
	// Name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterMulticastflow resource.
type RouterMulticastflowArgs struct {
	// Comment.
	Comments pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Multicast-flow entries. The structure of `flows` block is documented below.
	Flows RouterMulticastflowFlowArrayInput
	// Name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (RouterMulticastflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerMulticastflowArgs)(nil)).Elem()
}

type RouterMulticastflowInput interface {
	pulumi.Input

	ToRouterMulticastflowOutput() RouterMulticastflowOutput
	ToRouterMulticastflowOutputWithContext(ctx context.Context) RouterMulticastflowOutput
}

func (*RouterMulticastflow) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterMulticastflow)(nil)).Elem()
}

func (i *RouterMulticastflow) ToRouterMulticastflowOutput() RouterMulticastflowOutput {
	return i.ToRouterMulticastflowOutputWithContext(context.Background())
}

func (i *RouterMulticastflow) ToRouterMulticastflowOutputWithContext(ctx context.Context) RouterMulticastflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastflowOutput)
}

// RouterMulticastflowArrayInput is an input type that accepts RouterMulticastflowArray and RouterMulticastflowArrayOutput values.
// You can construct a concrete instance of `RouterMulticastflowArrayInput` via:
//
//	RouterMulticastflowArray{ RouterMulticastflowArgs{...} }
type RouterMulticastflowArrayInput interface {
	pulumi.Input

	ToRouterMulticastflowArrayOutput() RouterMulticastflowArrayOutput
	ToRouterMulticastflowArrayOutputWithContext(context.Context) RouterMulticastflowArrayOutput
}

type RouterMulticastflowArray []RouterMulticastflowInput

func (RouterMulticastflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterMulticastflow)(nil)).Elem()
}

func (i RouterMulticastflowArray) ToRouterMulticastflowArrayOutput() RouterMulticastflowArrayOutput {
	return i.ToRouterMulticastflowArrayOutputWithContext(context.Background())
}

func (i RouterMulticastflowArray) ToRouterMulticastflowArrayOutputWithContext(ctx context.Context) RouterMulticastflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastflowArrayOutput)
}

// RouterMulticastflowMapInput is an input type that accepts RouterMulticastflowMap and RouterMulticastflowMapOutput values.
// You can construct a concrete instance of `RouterMulticastflowMapInput` via:
//
//	RouterMulticastflowMap{ "key": RouterMulticastflowArgs{...} }
type RouterMulticastflowMapInput interface {
	pulumi.Input

	ToRouterMulticastflowMapOutput() RouterMulticastflowMapOutput
	ToRouterMulticastflowMapOutputWithContext(context.Context) RouterMulticastflowMapOutput
}

type RouterMulticastflowMap map[string]RouterMulticastflowInput

func (RouterMulticastflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterMulticastflow)(nil)).Elem()
}

func (i RouterMulticastflowMap) ToRouterMulticastflowMapOutput() RouterMulticastflowMapOutput {
	return i.ToRouterMulticastflowMapOutputWithContext(context.Background())
}

func (i RouterMulticastflowMap) ToRouterMulticastflowMapOutputWithContext(ctx context.Context) RouterMulticastflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterMulticastflowMapOutput)
}

type RouterMulticastflowOutput struct{ *pulumi.OutputState }

func (RouterMulticastflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterMulticastflow)(nil)).Elem()
}

func (o RouterMulticastflowOutput) ToRouterMulticastflowOutput() RouterMulticastflowOutput {
	return o
}

func (o RouterMulticastflowOutput) ToRouterMulticastflowOutputWithContext(ctx context.Context) RouterMulticastflowOutput {
	return o
}

// Comment.
func (o RouterMulticastflowOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterMulticastflow) pulumi.StringOutput { return v.Comments }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o RouterMulticastflowOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterMulticastflow) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Multicast-flow entries. The structure of `flows` block is documented below.
func (o RouterMulticastflowOutput) Flows() RouterMulticastflowFlowArrayOutput {
	return o.ApplyT(func(v *RouterMulticastflow) RouterMulticastflowFlowArrayOutput { return v.Flows }).(RouterMulticastflowFlowArrayOutput)
}

// Name.
func (o RouterMulticastflowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterMulticastflow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o RouterMulticastflowOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterMulticastflow) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterMulticastflowArrayOutput struct{ *pulumi.OutputState }

func (RouterMulticastflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterMulticastflow)(nil)).Elem()
}

func (o RouterMulticastflowArrayOutput) ToRouterMulticastflowArrayOutput() RouterMulticastflowArrayOutput {
	return o
}

func (o RouterMulticastflowArrayOutput) ToRouterMulticastflowArrayOutputWithContext(ctx context.Context) RouterMulticastflowArrayOutput {
	return o
}

func (o RouterMulticastflowArrayOutput) Index(i pulumi.IntInput) RouterMulticastflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterMulticastflow {
		return vs[0].([]*RouterMulticastflow)[vs[1].(int)]
	}).(RouterMulticastflowOutput)
}

type RouterMulticastflowMapOutput struct{ *pulumi.OutputState }

func (RouterMulticastflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterMulticastflow)(nil)).Elem()
}

func (o RouterMulticastflowMapOutput) ToRouterMulticastflowMapOutput() RouterMulticastflowMapOutput {
	return o
}

func (o RouterMulticastflowMapOutput) ToRouterMulticastflowMapOutputWithContext(ctx context.Context) RouterMulticastflowMapOutput {
	return o
}

func (o RouterMulticastflowMapOutput) MapIndex(k pulumi.StringInput) RouterMulticastflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterMulticastflow {
		return vs[0].(map[string]*RouterMulticastflow)[vs[1].(string)]
	}).(RouterMulticastflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastflowInput)(nil)).Elem(), &RouterMulticastflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastflowArrayInput)(nil)).Elem(), RouterMulticastflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterMulticastflowMapInput)(nil)).Elem(), RouterMulticastflowMap{})
	pulumi.RegisterOutputType(RouterMulticastflowOutput{})
	pulumi.RegisterOutputType(RouterMulticastflowArrayOutput{})
	pulumi.RegisterOutputType(RouterMulticastflowMapOutput{})
}
