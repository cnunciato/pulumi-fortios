// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure virtual network enabler tunnel. Applies to FortiOS Version `>= 6.4.1`.
//
// ## Import
//
// # System VneTunnel can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemVnetunnel:SystemVnetunnel labelname SystemVneTunnel
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemVnetunnel:SystemVnetunnel labelname SystemVneTunnel
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemVnetunnel struct {
	pulumi.CustomResourceState

	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// BMR hostname.
	BmrHostname pulumi.StringPtrOutput `pulumi:"bmrHostname"`
	// Border relay IPv6 address.
	Br pulumi.StringOutput `pulumi:"br"`
	// HTTP authentication password.
	HttpPassword pulumi.StringPtrOutput `pulumi:"httpPassword"`
	// HTTP authentication user name.
	HttpUsername pulumi.StringOutput `pulumi:"httpUsername"`
	// Interface name.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Tunnel IPv4 address and netmask.
	Ipv4Address pulumi.StringOutput `pulumi:"ipv4Address"`
	// VNE tunnel mode.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringOutput `pulumi:"sslCertificate"`
	// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// URL of provisioning server.
	UpdateUrl pulumi.StringOutput `pulumi:"updateUrl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemVnetunnel registers a new resource with the given unique name, arguments, and options.
func NewSystemVnetunnel(ctx *pulumi.Context,
	name string, args *SystemVnetunnelArgs, opts ...pulumi.ResourceOption) (*SystemVnetunnel, error) {
	if args == nil {
		args = &SystemVnetunnelArgs{}
	}

	if args.BmrHostname != nil {
		args.BmrHostname = pulumi.ToSecret(args.BmrHostname).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"bmrHostname",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemVnetunnel
	err := ctx.RegisterResource("fortios:index/systemVnetunnel:SystemVnetunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemVnetunnel gets an existing SystemVnetunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemVnetunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemVnetunnelState, opts ...pulumi.ResourceOption) (*SystemVnetunnel, error) {
	var resource SystemVnetunnel
	err := ctx.ReadResource("fortios:index/systemVnetunnel:SystemVnetunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemVnetunnel resources.
type systemVnetunnelState struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// BMR hostname.
	BmrHostname *string `pulumi:"bmrHostname"`
	// Border relay IPv6 address.
	Br *string `pulumi:"br"`
	// HTTP authentication password.
	HttpPassword *string `pulumi:"httpPassword"`
	// HTTP authentication user name.
	HttpUsername *string `pulumi:"httpUsername"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// Tunnel IPv4 address and netmask.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// VNE tunnel mode.
	Mode *string `pulumi:"mode"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// URL of provisioning server.
	UpdateUrl *string `pulumi:"updateUrl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemVnetunnelState struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// BMR hostname.
	BmrHostname pulumi.StringPtrInput
	// Border relay IPv6 address.
	Br pulumi.StringPtrInput
	// HTTP authentication password.
	HttpPassword pulumi.StringPtrInput
	// HTTP authentication user name.
	HttpUsername pulumi.StringPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// Tunnel IPv4 address and netmask.
	Ipv4Address pulumi.StringPtrInput
	// VNE tunnel mode.
	Mode pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// URL of provisioning server.
	UpdateUrl pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemVnetunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVnetunnelState)(nil)).Elem()
}

type systemVnetunnelArgs struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// BMR hostname.
	BmrHostname *string `pulumi:"bmrHostname"`
	// Border relay IPv6 address.
	Br *string `pulumi:"br"`
	// HTTP authentication password.
	HttpPassword *string `pulumi:"httpPassword"`
	// HTTP authentication user name.
	HttpUsername *string `pulumi:"httpUsername"`
	// Interface name.
	Interface *string `pulumi:"interface"`
	// Tunnel IPv4 address and netmask.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// VNE tunnel mode.
	Mode *string `pulumi:"mode"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// URL of provisioning server.
	UpdateUrl *string `pulumi:"updateUrl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemVnetunnel resource.
type SystemVnetunnelArgs struct {
	// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// BMR hostname.
	BmrHostname pulumi.StringPtrInput
	// Border relay IPv6 address.
	Br pulumi.StringPtrInput
	// HTTP authentication password.
	HttpPassword pulumi.StringPtrInput
	// HTTP authentication user name.
	HttpUsername pulumi.StringPtrInput
	// Interface name.
	Interface pulumi.StringPtrInput
	// Tunnel IPv4 address and netmask.
	Ipv4Address pulumi.StringPtrInput
	// VNE tunnel mode.
	Mode pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// URL of provisioning server.
	UpdateUrl pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemVnetunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVnetunnelArgs)(nil)).Elem()
}

type SystemVnetunnelInput interface {
	pulumi.Input

	ToSystemVnetunnelOutput() SystemVnetunnelOutput
	ToSystemVnetunnelOutputWithContext(ctx context.Context) SystemVnetunnelOutput
}

func (*SystemVnetunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVnetunnel)(nil)).Elem()
}

func (i *SystemVnetunnel) ToSystemVnetunnelOutput() SystemVnetunnelOutput {
	return i.ToSystemVnetunnelOutputWithContext(context.Background())
}

func (i *SystemVnetunnel) ToSystemVnetunnelOutputWithContext(ctx context.Context) SystemVnetunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVnetunnelOutput)
}

// SystemVnetunnelArrayInput is an input type that accepts SystemVnetunnelArray and SystemVnetunnelArrayOutput values.
// You can construct a concrete instance of `SystemVnetunnelArrayInput` via:
//
//	SystemVnetunnelArray{ SystemVnetunnelArgs{...} }
type SystemVnetunnelArrayInput interface {
	pulumi.Input

	ToSystemVnetunnelArrayOutput() SystemVnetunnelArrayOutput
	ToSystemVnetunnelArrayOutputWithContext(context.Context) SystemVnetunnelArrayOutput
}

type SystemVnetunnelArray []SystemVnetunnelInput

func (SystemVnetunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVnetunnel)(nil)).Elem()
}

func (i SystemVnetunnelArray) ToSystemVnetunnelArrayOutput() SystemVnetunnelArrayOutput {
	return i.ToSystemVnetunnelArrayOutputWithContext(context.Background())
}

func (i SystemVnetunnelArray) ToSystemVnetunnelArrayOutputWithContext(ctx context.Context) SystemVnetunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVnetunnelArrayOutput)
}

// SystemVnetunnelMapInput is an input type that accepts SystemVnetunnelMap and SystemVnetunnelMapOutput values.
// You can construct a concrete instance of `SystemVnetunnelMapInput` via:
//
//	SystemVnetunnelMap{ "key": SystemVnetunnelArgs{...} }
type SystemVnetunnelMapInput interface {
	pulumi.Input

	ToSystemVnetunnelMapOutput() SystemVnetunnelMapOutput
	ToSystemVnetunnelMapOutputWithContext(context.Context) SystemVnetunnelMapOutput
}

type SystemVnetunnelMap map[string]SystemVnetunnelInput

func (SystemVnetunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVnetunnel)(nil)).Elem()
}

func (i SystemVnetunnelMap) ToSystemVnetunnelMapOutput() SystemVnetunnelMapOutput {
	return i.ToSystemVnetunnelMapOutputWithContext(context.Background())
}

func (i SystemVnetunnelMap) ToSystemVnetunnelMapOutputWithContext(ctx context.Context) SystemVnetunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVnetunnelMapOutput)
}

type SystemVnetunnelOutput struct{ *pulumi.OutputState }

func (SystemVnetunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVnetunnel)(nil)).Elem()
}

func (o SystemVnetunnelOutput) ToSystemVnetunnelOutput() SystemVnetunnelOutput {
	return o
}

func (o SystemVnetunnelOutput) ToSystemVnetunnelOutputWithContext(ctx context.Context) SystemVnetunnelOutput {
	return o
}

// Enable/disable tunnel ASIC offloading. Valid values: `enable`, `disable`.
func (o SystemVnetunnelOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// BMR hostname.
func (o SystemVnetunnelOutput) BmrHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringPtrOutput { return v.BmrHostname }).(pulumi.StringPtrOutput)
}

// Border relay IPv6 address.
func (o SystemVnetunnelOutput) Br() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringOutput { return v.Br }).(pulumi.StringOutput)
}

// HTTP authentication password.
func (o SystemVnetunnelOutput) HttpPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringPtrOutput { return v.HttpPassword }).(pulumi.StringPtrOutput)
}

// HTTP authentication user name.
func (o SystemVnetunnelOutput) HttpUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringOutput { return v.HttpUsername }).(pulumi.StringOutput)
}

// Interface name.
func (o SystemVnetunnelOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Tunnel IPv4 address and netmask.
func (o SystemVnetunnelOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringOutput { return v.Ipv4Address }).(pulumi.StringOutput)
}

// VNE tunnel mode.
func (o SystemVnetunnelOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Name of local certificate for SSL connections.
func (o SystemVnetunnelOutput) SslCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringOutput { return v.SslCertificate }).(pulumi.StringOutput)
}

// Enable/disable VNE tunnel. Valid values: `enable`, `disable`.
func (o SystemVnetunnelOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// URL of provisioning server.
func (o SystemVnetunnelOutput) UpdateUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringOutput { return v.UpdateUrl }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemVnetunnelOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVnetunnel) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemVnetunnelArrayOutput struct{ *pulumi.OutputState }

func (SystemVnetunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVnetunnel)(nil)).Elem()
}

func (o SystemVnetunnelArrayOutput) ToSystemVnetunnelArrayOutput() SystemVnetunnelArrayOutput {
	return o
}

func (o SystemVnetunnelArrayOutput) ToSystemVnetunnelArrayOutputWithContext(ctx context.Context) SystemVnetunnelArrayOutput {
	return o
}

func (o SystemVnetunnelArrayOutput) Index(i pulumi.IntInput) SystemVnetunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemVnetunnel {
		return vs[0].([]*SystemVnetunnel)[vs[1].(int)]
	}).(SystemVnetunnelOutput)
}

type SystemVnetunnelMapOutput struct{ *pulumi.OutputState }

func (SystemVnetunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVnetunnel)(nil)).Elem()
}

func (o SystemVnetunnelMapOutput) ToSystemVnetunnelMapOutput() SystemVnetunnelMapOutput {
	return o
}

func (o SystemVnetunnelMapOutput) ToSystemVnetunnelMapOutputWithContext(ctx context.Context) SystemVnetunnelMapOutput {
	return o
}

func (o SystemVnetunnelMapOutput) MapIndex(k pulumi.StringInput) SystemVnetunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemVnetunnel {
		return vs[0].(map[string]*SystemVnetunnel)[vs[1].(string)]
	}).(SystemVnetunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVnetunnelInput)(nil)).Elem(), &SystemVnetunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVnetunnelArrayInput)(nil)).Elem(), SystemVnetunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVnetunnelMapInput)(nil)).Elem(), SystemVnetunnelMap{})
	pulumi.RegisterOutputType(SystemVnetunnelOutput{})
	pulumi.RegisterOutputType(SystemVnetunnelArrayOutput{})
	pulumi.RegisterOutputType(SystemVnetunnelMapOutput{})
}
