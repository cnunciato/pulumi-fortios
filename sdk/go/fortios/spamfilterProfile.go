// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure AntiSpam profiles. Applies to FortiOS Version `<= 6.2.0`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSpamfilterProfile(ctx, "trname", &fortios.SpamfilterProfileArgs{
//				Comment:   pulumi.String("terraform test"),
//				External:  pulumi.String("disable"),
//				FlowBased: pulumi.String("disable"),
//				Gmail: &fortios.SpamfilterProfileGmailArgs{
//					Log: pulumi.String("disable"),
//				},
//				Imap: &fortios.SpamfilterProfileImapArgs{
//					Action:  pulumi.String("tag"),
//					Log:     pulumi.String("disable"),
//					TagMsg:  pulumi.String("Spam"),
//					TagType: pulumi.String("subject spaminfo"),
//				},
//				Mapi: &fortios.SpamfilterProfileMapiArgs{
//					Action: pulumi.String("discard"),
//					Log:    pulumi.String("disable"),
//				},
//				MsnHotmail: &fortios.SpamfilterProfileMsnHotmailArgs{
//					Log: pulumi.String("disable"),
//				},
//				Pop3: &fortios.SpamfilterProfilePop3Args{
//					Action:  pulumi.String("tag"),
//					Log:     pulumi.String("disable"),
//					TagMsg:  pulumi.String("Spam"),
//					TagType: pulumi.String("subject spaminfo"),
//				},
//				Smtp: &fortios.SpamfilterProfileSmtpArgs{
//					Action:        pulumi.String("discard"),
//					Hdrip:         pulumi.String("disable"),
//					LocalOverride: pulumi.String("disable"),
//					Log:           pulumi.String("disable"),
//					TagMsg:        pulumi.String("Spam"),
//					TagType:       pulumi.String("subject spaminfo"),
//				},
//				SpamBwlTable:              pulumi.Int(0),
//				SpamBwordTable:            pulumi.Int(0),
//				SpamBwordThreshold:        pulumi.Int(10),
//				SpamFiltering:             pulumi.String("disable"),
//				SpamIptrustTable:          pulumi.Int(0),
//				SpamLog:                   pulumi.String("enable"),
//				SpamLogFortiguardResponse: pulumi.String("disable"),
//				SpamMheaderTable:          pulumi.Int(0),
//				SpamRblTable:              pulumi.Int(0),
//				YahooMail: &fortios.SpamfilterProfileYahooMailArgs{
//					Log: pulumi.String("disable"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Spamfilter Profile can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/spamfilterProfile:SpamfilterProfile labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/spamfilterProfile:SpamfilterProfile labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SpamfilterProfile struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Enable/disable external Email inspection. Valid values: `enable`, `disable`.
	External pulumi.StringOutput `pulumi:"external"`
	// Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
	FlowBased pulumi.StringOutput `pulumi:"flowBased"`
	// Gmail. The structure of `gmail` block is documented below.
	Gmail SpamfilterProfileGmailOutput `pulumi:"gmail"`
	// IMAP. The structure of `imap` block is documented below.
	Imap SpamfilterProfileImapOutput `pulumi:"imap"`
	// MAPI. The structure of `mapi` block is documented below.
	Mapi SpamfilterProfileMapiOutput `pulumi:"mapi"`
	// MSN Hotmail. The structure of `msnHotmail` block is documented below.
	MsnHotmail SpamfilterProfileMsnHotmailOutput `pulumi:"msnHotmail"`
	// Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
	Options pulumi.StringOutput `pulumi:"options"`
	// POP3. The structure of `pop3` block is documented below.
	Pop3 SpamfilterProfilePop3Output `pulumi:"pop3"`
	// Replacement message group.
	ReplacemsgGroup pulumi.StringOutput `pulumi:"replacemsgGroup"`
	// SMTP. The structure of `smtp` block is documented below.
	Smtp SpamfilterProfileSmtpOutput `pulumi:"smtp"`
	// Anti-spam black/white list table ID.
	SpamBwlTable pulumi.IntOutput `pulumi:"spamBwlTable"`
	// Anti-spam banned word table ID.
	SpamBwordTable pulumi.IntOutput `pulumi:"spamBwordTable"`
	// Spam banned word threshold.
	SpamBwordThreshold pulumi.IntOutput `pulumi:"spamBwordThreshold"`
	// Enable/disable spam filtering. Valid values: `enable`, `disable`.
	SpamFiltering pulumi.StringOutput `pulumi:"spamFiltering"`
	// Anti-spam IP trust table ID.
	SpamIptrustTable pulumi.IntOutput `pulumi:"spamIptrustTable"`
	// Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
	SpamLog pulumi.StringOutput `pulumi:"spamLog"`
	// Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
	SpamLogFortiguardResponse pulumi.StringOutput `pulumi:"spamLogFortiguardResponse"`
	// Anti-spam MIME header table ID.
	SpamMheaderTable pulumi.IntOutput `pulumi:"spamMheaderTable"`
	// Anti-spam DNSBL table ID.
	SpamRblTable pulumi.IntOutput `pulumi:"spamRblTable"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Yahoo! Mail. The structure of `yahooMail` block is documented below.
	YahooMail SpamfilterProfileYahooMailOutput `pulumi:"yahooMail"`
}

// NewSpamfilterProfile registers a new resource with the given unique name, arguments, and options.
func NewSpamfilterProfile(ctx *pulumi.Context,
	name string, args *SpamfilterProfileArgs, opts ...pulumi.ResourceOption) (*SpamfilterProfile, error) {
	if args == nil {
		args = &SpamfilterProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SpamfilterProfile
	err := ctx.RegisterResource("fortios:index/spamfilterProfile:SpamfilterProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpamfilterProfile gets an existing SpamfilterProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpamfilterProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpamfilterProfileState, opts ...pulumi.ResourceOption) (*SpamfilterProfile, error) {
	var resource SpamfilterProfile
	err := ctx.ReadResource("fortios:index/spamfilterProfile:SpamfilterProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpamfilterProfile resources.
type spamfilterProfileState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Enable/disable external Email inspection. Valid values: `enable`, `disable`.
	External *string `pulumi:"external"`
	// Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
	FlowBased *string `pulumi:"flowBased"`
	// Gmail. The structure of `gmail` block is documented below.
	Gmail *SpamfilterProfileGmail `pulumi:"gmail"`
	// IMAP. The structure of `imap` block is documented below.
	Imap *SpamfilterProfileImap `pulumi:"imap"`
	// MAPI. The structure of `mapi` block is documented below.
	Mapi *SpamfilterProfileMapi `pulumi:"mapi"`
	// MSN Hotmail. The structure of `msnHotmail` block is documented below.
	MsnHotmail *SpamfilterProfileMsnHotmail `pulumi:"msnHotmail"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
	Options *string `pulumi:"options"`
	// POP3. The structure of `pop3` block is documented below.
	Pop3 *SpamfilterProfilePop3 `pulumi:"pop3"`
	// Replacement message group.
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// SMTP. The structure of `smtp` block is documented below.
	Smtp *SpamfilterProfileSmtp `pulumi:"smtp"`
	// Anti-spam black/white list table ID.
	SpamBwlTable *int `pulumi:"spamBwlTable"`
	// Anti-spam banned word table ID.
	SpamBwordTable *int `pulumi:"spamBwordTable"`
	// Spam banned word threshold.
	SpamBwordThreshold *int `pulumi:"spamBwordThreshold"`
	// Enable/disable spam filtering. Valid values: `enable`, `disable`.
	SpamFiltering *string `pulumi:"spamFiltering"`
	// Anti-spam IP trust table ID.
	SpamIptrustTable *int `pulumi:"spamIptrustTable"`
	// Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
	SpamLog *string `pulumi:"spamLog"`
	// Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
	SpamLogFortiguardResponse *string `pulumi:"spamLogFortiguardResponse"`
	// Anti-spam MIME header table ID.
	SpamMheaderTable *int `pulumi:"spamMheaderTable"`
	// Anti-spam DNSBL table ID.
	SpamRblTable *int `pulumi:"spamRblTable"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Yahoo! Mail. The structure of `yahooMail` block is documented below.
	YahooMail *SpamfilterProfileYahooMail `pulumi:"yahooMail"`
}

type SpamfilterProfileState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Enable/disable external Email inspection. Valid values: `enable`, `disable`.
	External pulumi.StringPtrInput
	// Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
	FlowBased pulumi.StringPtrInput
	// Gmail. The structure of `gmail` block is documented below.
	Gmail SpamfilterProfileGmailPtrInput
	// IMAP. The structure of `imap` block is documented below.
	Imap SpamfilterProfileImapPtrInput
	// MAPI. The structure of `mapi` block is documented below.
	Mapi SpamfilterProfileMapiPtrInput
	// MSN Hotmail. The structure of `msnHotmail` block is documented below.
	MsnHotmail SpamfilterProfileMsnHotmailPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
	Options pulumi.StringPtrInput
	// POP3. The structure of `pop3` block is documented below.
	Pop3 SpamfilterProfilePop3PtrInput
	// Replacement message group.
	ReplacemsgGroup pulumi.StringPtrInput
	// SMTP. The structure of `smtp` block is documented below.
	Smtp SpamfilterProfileSmtpPtrInput
	// Anti-spam black/white list table ID.
	SpamBwlTable pulumi.IntPtrInput
	// Anti-spam banned word table ID.
	SpamBwordTable pulumi.IntPtrInput
	// Spam banned word threshold.
	SpamBwordThreshold pulumi.IntPtrInput
	// Enable/disable spam filtering. Valid values: `enable`, `disable`.
	SpamFiltering pulumi.StringPtrInput
	// Anti-spam IP trust table ID.
	SpamIptrustTable pulumi.IntPtrInput
	// Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
	SpamLog pulumi.StringPtrInput
	// Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
	SpamLogFortiguardResponse pulumi.StringPtrInput
	// Anti-spam MIME header table ID.
	SpamMheaderTable pulumi.IntPtrInput
	// Anti-spam DNSBL table ID.
	SpamRblTable pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Yahoo! Mail. The structure of `yahooMail` block is documented below.
	YahooMail SpamfilterProfileYahooMailPtrInput
}

func (SpamfilterProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*spamfilterProfileState)(nil)).Elem()
}

type spamfilterProfileArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Enable/disable external Email inspection. Valid values: `enable`, `disable`.
	External *string `pulumi:"external"`
	// Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
	FlowBased *string `pulumi:"flowBased"`
	// Gmail. The structure of `gmail` block is documented below.
	Gmail *SpamfilterProfileGmail `pulumi:"gmail"`
	// IMAP. The structure of `imap` block is documented below.
	Imap *SpamfilterProfileImap `pulumi:"imap"`
	// MAPI. The structure of `mapi` block is documented below.
	Mapi *SpamfilterProfileMapi `pulumi:"mapi"`
	// MSN Hotmail. The structure of `msnHotmail` block is documented below.
	MsnHotmail *SpamfilterProfileMsnHotmail `pulumi:"msnHotmail"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
	Options *string `pulumi:"options"`
	// POP3. The structure of `pop3` block is documented below.
	Pop3 *SpamfilterProfilePop3 `pulumi:"pop3"`
	// Replacement message group.
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// SMTP. The structure of `smtp` block is documented below.
	Smtp *SpamfilterProfileSmtp `pulumi:"smtp"`
	// Anti-spam black/white list table ID.
	SpamBwlTable *int `pulumi:"spamBwlTable"`
	// Anti-spam banned word table ID.
	SpamBwordTable *int `pulumi:"spamBwordTable"`
	// Spam banned word threshold.
	SpamBwordThreshold *int `pulumi:"spamBwordThreshold"`
	// Enable/disable spam filtering. Valid values: `enable`, `disable`.
	SpamFiltering *string `pulumi:"spamFiltering"`
	// Anti-spam IP trust table ID.
	SpamIptrustTable *int `pulumi:"spamIptrustTable"`
	// Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
	SpamLog *string `pulumi:"spamLog"`
	// Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
	SpamLogFortiguardResponse *string `pulumi:"spamLogFortiguardResponse"`
	// Anti-spam MIME header table ID.
	SpamMheaderTable *int `pulumi:"spamMheaderTable"`
	// Anti-spam DNSBL table ID.
	SpamRblTable *int `pulumi:"spamRblTable"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Yahoo! Mail. The structure of `yahooMail` block is documented below.
	YahooMail *SpamfilterProfileYahooMail `pulumi:"yahooMail"`
}

// The set of arguments for constructing a SpamfilterProfile resource.
type SpamfilterProfileArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Enable/disable external Email inspection. Valid values: `enable`, `disable`.
	External pulumi.StringPtrInput
	// Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
	FlowBased pulumi.StringPtrInput
	// Gmail. The structure of `gmail` block is documented below.
	Gmail SpamfilterProfileGmailPtrInput
	// IMAP. The structure of `imap` block is documented below.
	Imap SpamfilterProfileImapPtrInput
	// MAPI. The structure of `mapi` block is documented below.
	Mapi SpamfilterProfileMapiPtrInput
	// MSN Hotmail. The structure of `msnHotmail` block is documented below.
	MsnHotmail SpamfilterProfileMsnHotmailPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
	Options pulumi.StringPtrInput
	// POP3. The structure of `pop3` block is documented below.
	Pop3 SpamfilterProfilePop3PtrInput
	// Replacement message group.
	ReplacemsgGroup pulumi.StringPtrInput
	// SMTP. The structure of `smtp` block is documented below.
	Smtp SpamfilterProfileSmtpPtrInput
	// Anti-spam black/white list table ID.
	SpamBwlTable pulumi.IntPtrInput
	// Anti-spam banned word table ID.
	SpamBwordTable pulumi.IntPtrInput
	// Spam banned word threshold.
	SpamBwordThreshold pulumi.IntPtrInput
	// Enable/disable spam filtering. Valid values: `enable`, `disable`.
	SpamFiltering pulumi.StringPtrInput
	// Anti-spam IP trust table ID.
	SpamIptrustTable pulumi.IntPtrInput
	// Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
	SpamLog pulumi.StringPtrInput
	// Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
	SpamLogFortiguardResponse pulumi.StringPtrInput
	// Anti-spam MIME header table ID.
	SpamMheaderTable pulumi.IntPtrInput
	// Anti-spam DNSBL table ID.
	SpamRblTable pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Yahoo! Mail. The structure of `yahooMail` block is documented below.
	YahooMail SpamfilterProfileYahooMailPtrInput
}

func (SpamfilterProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spamfilterProfileArgs)(nil)).Elem()
}

type SpamfilterProfileInput interface {
	pulumi.Input

	ToSpamfilterProfileOutput() SpamfilterProfileOutput
	ToSpamfilterProfileOutputWithContext(ctx context.Context) SpamfilterProfileOutput
}

func (*SpamfilterProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**SpamfilterProfile)(nil)).Elem()
}

func (i *SpamfilterProfile) ToSpamfilterProfileOutput() SpamfilterProfileOutput {
	return i.ToSpamfilterProfileOutputWithContext(context.Background())
}

func (i *SpamfilterProfile) ToSpamfilterProfileOutputWithContext(ctx context.Context) SpamfilterProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterProfileOutput)
}

// SpamfilterProfileArrayInput is an input type that accepts SpamfilterProfileArray and SpamfilterProfileArrayOutput values.
// You can construct a concrete instance of `SpamfilterProfileArrayInput` via:
//
//	SpamfilterProfileArray{ SpamfilterProfileArgs{...} }
type SpamfilterProfileArrayInput interface {
	pulumi.Input

	ToSpamfilterProfileArrayOutput() SpamfilterProfileArrayOutput
	ToSpamfilterProfileArrayOutputWithContext(context.Context) SpamfilterProfileArrayOutput
}

type SpamfilterProfileArray []SpamfilterProfileInput

func (SpamfilterProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpamfilterProfile)(nil)).Elem()
}

func (i SpamfilterProfileArray) ToSpamfilterProfileArrayOutput() SpamfilterProfileArrayOutput {
	return i.ToSpamfilterProfileArrayOutputWithContext(context.Background())
}

func (i SpamfilterProfileArray) ToSpamfilterProfileArrayOutputWithContext(ctx context.Context) SpamfilterProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterProfileArrayOutput)
}

// SpamfilterProfileMapInput is an input type that accepts SpamfilterProfileMap and SpamfilterProfileMapOutput values.
// You can construct a concrete instance of `SpamfilterProfileMapInput` via:
//
//	SpamfilterProfileMap{ "key": SpamfilterProfileArgs{...} }
type SpamfilterProfileMapInput interface {
	pulumi.Input

	ToSpamfilterProfileMapOutput() SpamfilterProfileMapOutput
	ToSpamfilterProfileMapOutputWithContext(context.Context) SpamfilterProfileMapOutput
}

type SpamfilterProfileMap map[string]SpamfilterProfileInput

func (SpamfilterProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpamfilterProfile)(nil)).Elem()
}

func (i SpamfilterProfileMap) ToSpamfilterProfileMapOutput() SpamfilterProfileMapOutput {
	return i.ToSpamfilterProfileMapOutputWithContext(context.Background())
}

func (i SpamfilterProfileMap) ToSpamfilterProfileMapOutputWithContext(ctx context.Context) SpamfilterProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpamfilterProfileMapOutput)
}

type SpamfilterProfileOutput struct{ *pulumi.OutputState }

func (SpamfilterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpamfilterProfile)(nil)).Elem()
}

func (o SpamfilterProfileOutput) ToSpamfilterProfileOutput() SpamfilterProfileOutput {
	return o
}

func (o SpamfilterProfileOutput) ToSpamfilterProfileOutputWithContext(ctx context.Context) SpamfilterProfileOutput {
	return o
}

// Comment.
func (o SpamfilterProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Enable/disable external Email inspection. Valid values: `enable`, `disable`.
func (o SpamfilterProfileOutput) External() pulumi.StringOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.StringOutput { return v.External }).(pulumi.StringOutput)
}

// Enable/disable flow-based spam filtering. Valid values: `enable`, `disable`.
func (o SpamfilterProfileOutput) FlowBased() pulumi.StringOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.StringOutput { return v.FlowBased }).(pulumi.StringOutput)
}

// Gmail. The structure of `gmail` block is documented below.
func (o SpamfilterProfileOutput) Gmail() SpamfilterProfileGmailOutput {
	return o.ApplyT(func(v *SpamfilterProfile) SpamfilterProfileGmailOutput { return v.Gmail }).(SpamfilterProfileGmailOutput)
}

// IMAP. The structure of `imap` block is documented below.
func (o SpamfilterProfileOutput) Imap() SpamfilterProfileImapOutput {
	return o.ApplyT(func(v *SpamfilterProfile) SpamfilterProfileImapOutput { return v.Imap }).(SpamfilterProfileImapOutput)
}

// MAPI. The structure of `mapi` block is documented below.
func (o SpamfilterProfileOutput) Mapi() SpamfilterProfileMapiOutput {
	return o.ApplyT(func(v *SpamfilterProfile) SpamfilterProfileMapiOutput { return v.Mapi }).(SpamfilterProfileMapiOutput)
}

// MSN Hotmail. The structure of `msnHotmail` block is documented below.
func (o SpamfilterProfileOutput) MsnHotmail() SpamfilterProfileMsnHotmailOutput {
	return o.ApplyT(func(v *SpamfilterProfile) SpamfilterProfileMsnHotmailOutput { return v.MsnHotmail }).(SpamfilterProfileMsnHotmailOutput)
}

// Profile name.
func (o SpamfilterProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Options. Valid values: `bannedword`, `spambwl`, `spamfsip`, `spamfssubmit`, `spamfschksum`, `spamfsurl`, `spamhelodns`, `spamraddrdns`, `spamrbl`, `spamhdrcheck`, `spamfsphish`.
func (o SpamfilterProfileOutput) Options() pulumi.StringOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.StringOutput { return v.Options }).(pulumi.StringOutput)
}

// POP3. The structure of `pop3` block is documented below.
func (o SpamfilterProfileOutput) Pop3() SpamfilterProfilePop3Output {
	return o.ApplyT(func(v *SpamfilterProfile) SpamfilterProfilePop3Output { return v.Pop3 }).(SpamfilterProfilePop3Output)
}

// Replacement message group.
func (o SpamfilterProfileOutput) ReplacemsgGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.StringOutput { return v.ReplacemsgGroup }).(pulumi.StringOutput)
}

// SMTP. The structure of `smtp` block is documented below.
func (o SpamfilterProfileOutput) Smtp() SpamfilterProfileSmtpOutput {
	return o.ApplyT(func(v *SpamfilterProfile) SpamfilterProfileSmtpOutput { return v.Smtp }).(SpamfilterProfileSmtpOutput)
}

// Anti-spam black/white list table ID.
func (o SpamfilterProfileOutput) SpamBwlTable() pulumi.IntOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.IntOutput { return v.SpamBwlTable }).(pulumi.IntOutput)
}

// Anti-spam banned word table ID.
func (o SpamfilterProfileOutput) SpamBwordTable() pulumi.IntOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.IntOutput { return v.SpamBwordTable }).(pulumi.IntOutput)
}

// Spam banned word threshold.
func (o SpamfilterProfileOutput) SpamBwordThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.IntOutput { return v.SpamBwordThreshold }).(pulumi.IntOutput)
}

// Enable/disable spam filtering. Valid values: `enable`, `disable`.
func (o SpamfilterProfileOutput) SpamFiltering() pulumi.StringOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.StringOutput { return v.SpamFiltering }).(pulumi.StringOutput)
}

// Anti-spam IP trust table ID.
func (o SpamfilterProfileOutput) SpamIptrustTable() pulumi.IntOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.IntOutput { return v.SpamIptrustTable }).(pulumi.IntOutput)
}

// Enable/disable spam logging for email filtering. Valid values: `disable`, `enable`.
func (o SpamfilterProfileOutput) SpamLog() pulumi.StringOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.StringOutput { return v.SpamLog }).(pulumi.StringOutput)
}

// Enable/disable logging FortiGuard spam response. Valid values: `disable`, `enable`.
func (o SpamfilterProfileOutput) SpamLogFortiguardResponse() pulumi.StringOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.StringOutput { return v.SpamLogFortiguardResponse }).(pulumi.StringOutput)
}

// Anti-spam MIME header table ID.
func (o SpamfilterProfileOutput) SpamMheaderTable() pulumi.IntOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.IntOutput { return v.SpamMheaderTable }).(pulumi.IntOutput)
}

// Anti-spam DNSBL table ID.
func (o SpamfilterProfileOutput) SpamRblTable() pulumi.IntOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.IntOutput { return v.SpamRblTable }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SpamfilterProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpamfilterProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Yahoo! Mail. The structure of `yahooMail` block is documented below.
func (o SpamfilterProfileOutput) YahooMail() SpamfilterProfileYahooMailOutput {
	return o.ApplyT(func(v *SpamfilterProfile) SpamfilterProfileYahooMailOutput { return v.YahooMail }).(SpamfilterProfileYahooMailOutput)
}

type SpamfilterProfileArrayOutput struct{ *pulumi.OutputState }

func (SpamfilterProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpamfilterProfile)(nil)).Elem()
}

func (o SpamfilterProfileArrayOutput) ToSpamfilterProfileArrayOutput() SpamfilterProfileArrayOutput {
	return o
}

func (o SpamfilterProfileArrayOutput) ToSpamfilterProfileArrayOutputWithContext(ctx context.Context) SpamfilterProfileArrayOutput {
	return o
}

func (o SpamfilterProfileArrayOutput) Index(i pulumi.IntInput) SpamfilterProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpamfilterProfile {
		return vs[0].([]*SpamfilterProfile)[vs[1].(int)]
	}).(SpamfilterProfileOutput)
}

type SpamfilterProfileMapOutput struct{ *pulumi.OutputState }

func (SpamfilterProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpamfilterProfile)(nil)).Elem()
}

func (o SpamfilterProfileMapOutput) ToSpamfilterProfileMapOutput() SpamfilterProfileMapOutput {
	return o
}

func (o SpamfilterProfileMapOutput) ToSpamfilterProfileMapOutputWithContext(ctx context.Context) SpamfilterProfileMapOutput {
	return o
}

func (o SpamfilterProfileMapOutput) MapIndex(k pulumi.StringInput) SpamfilterProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpamfilterProfile {
		return vs[0].(map[string]*SpamfilterProfile)[vs[1].(string)]
	}).(SpamfilterProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterProfileInput)(nil)).Elem(), &SpamfilterProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterProfileArrayInput)(nil)).Elem(), SpamfilterProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpamfilterProfileMapInput)(nil)).Elem(), SpamfilterProfileMap{})
	pulumi.RegisterOutputType(SpamfilterProfileOutput{})
	pulumi.RegisterOutputType(SpamfilterProfileArrayOutput{})
	pulumi.RegisterOutputType(SpamfilterProfileMapOutput{})
}
