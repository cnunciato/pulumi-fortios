// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch QoS policy.
//
// ## Import
//
// # SwitchControllerQos QosPolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerqosQospolicy:SwitchcontrollerqosQospolicy labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerqosQospolicy:SwitchcontrollerqosQospolicy labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerqosQospolicy struct {
	pulumi.CustomResourceState

	// Default cos queue for untagged packets.
	DefaultCos pulumi.IntOutput `pulumi:"defaultCos"`
	// QoS policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// QoS egress queue policy.
	QueuePolicy pulumi.StringOutput `pulumi:"queuePolicy"`
	// QoS trust 802.1p map.
	TrustDot1pMap pulumi.StringOutput `pulumi:"trustDot1pMap"`
	// QoS trust ip dscp map.
	TrustIpDscpMap pulumi.StringOutput `pulumi:"trustIpDscpMap"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchcontrollerqosQospolicy registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerqosQospolicy(ctx *pulumi.Context,
	name string, args *SwitchcontrollerqosQospolicyArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerqosQospolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultCos == nil {
		return nil, errors.New("invalid value for required argument 'DefaultCos'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerqosQospolicy
	err := ctx.RegisterResource("fortios:index/switchcontrollerqosQospolicy:SwitchcontrollerqosQospolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerqosQospolicy gets an existing SwitchcontrollerqosQospolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerqosQospolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerqosQospolicyState, opts ...pulumi.ResourceOption) (*SwitchcontrollerqosQospolicy, error) {
	var resource SwitchcontrollerqosQospolicy
	err := ctx.ReadResource("fortios:index/switchcontrollerqosQospolicy:SwitchcontrollerqosQospolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerqosQospolicy resources.
type switchcontrollerqosQospolicyState struct {
	// Default cos queue for untagged packets.
	DefaultCos *int `pulumi:"defaultCos"`
	// QoS policy name.
	Name *string `pulumi:"name"`
	// QoS egress queue policy.
	QueuePolicy *string `pulumi:"queuePolicy"`
	// QoS trust 802.1p map.
	TrustDot1pMap *string `pulumi:"trustDot1pMap"`
	// QoS trust ip dscp map.
	TrustIpDscpMap *string `pulumi:"trustIpDscpMap"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchcontrollerqosQospolicyState struct {
	// Default cos queue for untagged packets.
	DefaultCos pulumi.IntPtrInput
	// QoS policy name.
	Name pulumi.StringPtrInput
	// QoS egress queue policy.
	QueuePolicy pulumi.StringPtrInput
	// QoS trust 802.1p map.
	TrustDot1pMap pulumi.StringPtrInput
	// QoS trust ip dscp map.
	TrustIpDscpMap pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerqosQospolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerqosQospolicyState)(nil)).Elem()
}

type switchcontrollerqosQospolicyArgs struct {
	// Default cos queue for untagged packets.
	DefaultCos int `pulumi:"defaultCos"`
	// QoS policy name.
	Name *string `pulumi:"name"`
	// QoS egress queue policy.
	QueuePolicy *string `pulumi:"queuePolicy"`
	// QoS trust 802.1p map.
	TrustDot1pMap *string `pulumi:"trustDot1pMap"`
	// QoS trust ip dscp map.
	TrustIpDscpMap *string `pulumi:"trustIpDscpMap"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchcontrollerqosQospolicy resource.
type SwitchcontrollerqosQospolicyArgs struct {
	// Default cos queue for untagged packets.
	DefaultCos pulumi.IntInput
	// QoS policy name.
	Name pulumi.StringPtrInput
	// QoS egress queue policy.
	QueuePolicy pulumi.StringPtrInput
	// QoS trust 802.1p map.
	TrustDot1pMap pulumi.StringPtrInput
	// QoS trust ip dscp map.
	TrustIpDscpMap pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerqosQospolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerqosQospolicyArgs)(nil)).Elem()
}

type SwitchcontrollerqosQospolicyInput interface {
	pulumi.Input

	ToSwitchcontrollerqosQospolicyOutput() SwitchcontrollerqosQospolicyOutput
	ToSwitchcontrollerqosQospolicyOutputWithContext(ctx context.Context) SwitchcontrollerqosQospolicyOutput
}

func (*SwitchcontrollerqosQospolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerqosQospolicy)(nil)).Elem()
}

func (i *SwitchcontrollerqosQospolicy) ToSwitchcontrollerqosQospolicyOutput() SwitchcontrollerqosQospolicyOutput {
	return i.ToSwitchcontrollerqosQospolicyOutputWithContext(context.Background())
}

func (i *SwitchcontrollerqosQospolicy) ToSwitchcontrollerqosQospolicyOutputWithContext(ctx context.Context) SwitchcontrollerqosQospolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerqosQospolicyOutput)
}

// SwitchcontrollerqosQospolicyArrayInput is an input type that accepts SwitchcontrollerqosQospolicyArray and SwitchcontrollerqosQospolicyArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerqosQospolicyArrayInput` via:
//
//	SwitchcontrollerqosQospolicyArray{ SwitchcontrollerqosQospolicyArgs{...} }
type SwitchcontrollerqosQospolicyArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerqosQospolicyArrayOutput() SwitchcontrollerqosQospolicyArrayOutput
	ToSwitchcontrollerqosQospolicyArrayOutputWithContext(context.Context) SwitchcontrollerqosQospolicyArrayOutput
}

type SwitchcontrollerqosQospolicyArray []SwitchcontrollerqosQospolicyInput

func (SwitchcontrollerqosQospolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerqosQospolicy)(nil)).Elem()
}

func (i SwitchcontrollerqosQospolicyArray) ToSwitchcontrollerqosQospolicyArrayOutput() SwitchcontrollerqosQospolicyArrayOutput {
	return i.ToSwitchcontrollerqosQospolicyArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerqosQospolicyArray) ToSwitchcontrollerqosQospolicyArrayOutputWithContext(ctx context.Context) SwitchcontrollerqosQospolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerqosQospolicyArrayOutput)
}

// SwitchcontrollerqosQospolicyMapInput is an input type that accepts SwitchcontrollerqosQospolicyMap and SwitchcontrollerqosQospolicyMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerqosQospolicyMapInput` via:
//
//	SwitchcontrollerqosQospolicyMap{ "key": SwitchcontrollerqosQospolicyArgs{...} }
type SwitchcontrollerqosQospolicyMapInput interface {
	pulumi.Input

	ToSwitchcontrollerqosQospolicyMapOutput() SwitchcontrollerqosQospolicyMapOutput
	ToSwitchcontrollerqosQospolicyMapOutputWithContext(context.Context) SwitchcontrollerqosQospolicyMapOutput
}

type SwitchcontrollerqosQospolicyMap map[string]SwitchcontrollerqosQospolicyInput

func (SwitchcontrollerqosQospolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerqosQospolicy)(nil)).Elem()
}

func (i SwitchcontrollerqosQospolicyMap) ToSwitchcontrollerqosQospolicyMapOutput() SwitchcontrollerqosQospolicyMapOutput {
	return i.ToSwitchcontrollerqosQospolicyMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerqosQospolicyMap) ToSwitchcontrollerqosQospolicyMapOutputWithContext(ctx context.Context) SwitchcontrollerqosQospolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerqosQospolicyMapOutput)
}

type SwitchcontrollerqosQospolicyOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerqosQospolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerqosQospolicy)(nil)).Elem()
}

func (o SwitchcontrollerqosQospolicyOutput) ToSwitchcontrollerqosQospolicyOutput() SwitchcontrollerqosQospolicyOutput {
	return o
}

func (o SwitchcontrollerqosQospolicyOutput) ToSwitchcontrollerqosQospolicyOutputWithContext(ctx context.Context) SwitchcontrollerqosQospolicyOutput {
	return o
}

// Default cos queue for untagged packets.
func (o SwitchcontrollerqosQospolicyOutput) DefaultCos() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerqosQospolicy) pulumi.IntOutput { return v.DefaultCos }).(pulumi.IntOutput)
}

// QoS policy name.
func (o SwitchcontrollerqosQospolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerqosQospolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// QoS egress queue policy.
func (o SwitchcontrollerqosQospolicyOutput) QueuePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerqosQospolicy) pulumi.StringOutput { return v.QueuePolicy }).(pulumi.StringOutput)
}

// QoS trust 802.1p map.
func (o SwitchcontrollerqosQospolicyOutput) TrustDot1pMap() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerqosQospolicy) pulumi.StringOutput { return v.TrustDot1pMap }).(pulumi.StringOutput)
}

// QoS trust ip dscp map.
func (o SwitchcontrollerqosQospolicyOutput) TrustIpDscpMap() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerqosQospolicy) pulumi.StringOutput { return v.TrustIpDscpMap }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerqosQospolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerqosQospolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchcontrollerqosQospolicyArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerqosQospolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerqosQospolicy)(nil)).Elem()
}

func (o SwitchcontrollerqosQospolicyArrayOutput) ToSwitchcontrollerqosQospolicyArrayOutput() SwitchcontrollerqosQospolicyArrayOutput {
	return o
}

func (o SwitchcontrollerqosQospolicyArrayOutput) ToSwitchcontrollerqosQospolicyArrayOutputWithContext(ctx context.Context) SwitchcontrollerqosQospolicyArrayOutput {
	return o
}

func (o SwitchcontrollerqosQospolicyArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerqosQospolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerqosQospolicy {
		return vs[0].([]*SwitchcontrollerqosQospolicy)[vs[1].(int)]
	}).(SwitchcontrollerqosQospolicyOutput)
}

type SwitchcontrollerqosQospolicyMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerqosQospolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerqosQospolicy)(nil)).Elem()
}

func (o SwitchcontrollerqosQospolicyMapOutput) ToSwitchcontrollerqosQospolicyMapOutput() SwitchcontrollerqosQospolicyMapOutput {
	return o
}

func (o SwitchcontrollerqosQospolicyMapOutput) ToSwitchcontrollerqosQospolicyMapOutputWithContext(ctx context.Context) SwitchcontrollerqosQospolicyMapOutput {
	return o
}

func (o SwitchcontrollerqosQospolicyMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerqosQospolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerqosQospolicy {
		return vs[0].(map[string]*SwitchcontrollerqosQospolicy)[vs[1].(string)]
	}).(SwitchcontrollerqosQospolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerqosQospolicyInput)(nil)).Elem(), &SwitchcontrollerqosQospolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerqosQospolicyArrayInput)(nil)).Elem(), SwitchcontrollerqosQospolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerqosQospolicyMapInput)(nil)).Elem(), SwitchcontrollerqosQospolicyMap{})
	pulumi.RegisterOutputType(SwitchcontrollerqosQospolicyOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerqosQospolicyArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerqosQospolicyMapOutput{})
}
