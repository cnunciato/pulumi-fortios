// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Designate cache-service for wan-optimization and webcache.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewWanoptCacheservice(ctx, "trname", &fortios.WanoptCacheserviceArgs{
//				AcceptableConnections: pulumi.String("any"),
//				Collaboration:         pulumi.String("disable"),
//				DeviceId:              pulumi.String("default_dev_id"),
//				PreferScenario:        pulumi.String("balance"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Wanopt CacheService can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/wanoptCacheservice:WanoptCacheservice labelname WanoptCacheService
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/wanoptCacheservice:WanoptCacheservice labelname WanoptCacheService
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WanoptCacheservice struct {
	pulumi.CustomResourceState

	// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
	AcceptableConnections pulumi.StringOutput `pulumi:"acceptableConnections"`
	// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
	Collaboration pulumi.StringOutput `pulumi:"collaboration"`
	// Set identifier for this cache device.
	DeviceId pulumi.StringOutput `pulumi:"deviceId"`
	// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
	DstPeers WanoptCacheserviceDstPeerArrayOutput `pulumi:"dstPeers"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
	PreferScenario pulumi.StringOutput `pulumi:"preferScenario"`
	// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
	SrcPeers WanoptCacheserviceSrcPeerArrayOutput `pulumi:"srcPeers"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWanoptCacheservice registers a new resource with the given unique name, arguments, and options.
func NewWanoptCacheservice(ctx *pulumi.Context,
	name string, args *WanoptCacheserviceArgs, opts ...pulumi.ResourceOption) (*WanoptCacheservice, error) {
	if args == nil {
		args = &WanoptCacheserviceArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WanoptCacheservice
	err := ctx.RegisterResource("fortios:index/wanoptCacheservice:WanoptCacheservice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWanoptCacheservice gets an existing WanoptCacheservice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWanoptCacheservice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WanoptCacheserviceState, opts ...pulumi.ResourceOption) (*WanoptCacheservice, error) {
	var resource WanoptCacheservice
	err := ctx.ReadResource("fortios:index/wanoptCacheservice:WanoptCacheservice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WanoptCacheservice resources.
type wanoptCacheserviceState struct {
	// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
	AcceptableConnections *string `pulumi:"acceptableConnections"`
	// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
	Collaboration *string `pulumi:"collaboration"`
	// Set identifier for this cache device.
	DeviceId *string `pulumi:"deviceId"`
	// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
	DstPeers []WanoptCacheserviceDstPeer `pulumi:"dstPeers"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
	PreferScenario *string `pulumi:"preferScenario"`
	// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
	SrcPeers []WanoptCacheserviceSrcPeer `pulumi:"srcPeers"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WanoptCacheserviceState struct {
	// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
	AcceptableConnections pulumi.StringPtrInput
	// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
	Collaboration pulumi.StringPtrInput
	// Set identifier for this cache device.
	DeviceId pulumi.StringPtrInput
	// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
	DstPeers WanoptCacheserviceDstPeerArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
	PreferScenario pulumi.StringPtrInput
	// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
	SrcPeers WanoptCacheserviceSrcPeerArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WanoptCacheserviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*wanoptCacheserviceState)(nil)).Elem()
}

type wanoptCacheserviceArgs struct {
	// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
	AcceptableConnections *string `pulumi:"acceptableConnections"`
	// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
	Collaboration *string `pulumi:"collaboration"`
	// Set identifier for this cache device.
	DeviceId *string `pulumi:"deviceId"`
	// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
	DstPeers []WanoptCacheserviceDstPeer `pulumi:"dstPeers"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
	PreferScenario *string `pulumi:"preferScenario"`
	// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
	SrcPeers []WanoptCacheserviceSrcPeer `pulumi:"srcPeers"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WanoptCacheservice resource.
type WanoptCacheserviceArgs struct {
	// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
	AcceptableConnections pulumi.StringPtrInput
	// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
	Collaboration pulumi.StringPtrInput
	// Set identifier for this cache device.
	DeviceId pulumi.StringPtrInput
	// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
	DstPeers WanoptCacheserviceDstPeerArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
	PreferScenario pulumi.StringPtrInput
	// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
	SrcPeers WanoptCacheserviceSrcPeerArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WanoptCacheserviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wanoptCacheserviceArgs)(nil)).Elem()
}

type WanoptCacheserviceInput interface {
	pulumi.Input

	ToWanoptCacheserviceOutput() WanoptCacheserviceOutput
	ToWanoptCacheserviceOutputWithContext(ctx context.Context) WanoptCacheserviceOutput
}

func (*WanoptCacheservice) ElementType() reflect.Type {
	return reflect.TypeOf((**WanoptCacheservice)(nil)).Elem()
}

func (i *WanoptCacheservice) ToWanoptCacheserviceOutput() WanoptCacheserviceOutput {
	return i.ToWanoptCacheserviceOutputWithContext(context.Background())
}

func (i *WanoptCacheservice) ToWanoptCacheserviceOutputWithContext(ctx context.Context) WanoptCacheserviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptCacheserviceOutput)
}

// WanoptCacheserviceArrayInput is an input type that accepts WanoptCacheserviceArray and WanoptCacheserviceArrayOutput values.
// You can construct a concrete instance of `WanoptCacheserviceArrayInput` via:
//
//	WanoptCacheserviceArray{ WanoptCacheserviceArgs{...} }
type WanoptCacheserviceArrayInput interface {
	pulumi.Input

	ToWanoptCacheserviceArrayOutput() WanoptCacheserviceArrayOutput
	ToWanoptCacheserviceArrayOutputWithContext(context.Context) WanoptCacheserviceArrayOutput
}

type WanoptCacheserviceArray []WanoptCacheserviceInput

func (WanoptCacheserviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WanoptCacheservice)(nil)).Elem()
}

func (i WanoptCacheserviceArray) ToWanoptCacheserviceArrayOutput() WanoptCacheserviceArrayOutput {
	return i.ToWanoptCacheserviceArrayOutputWithContext(context.Background())
}

func (i WanoptCacheserviceArray) ToWanoptCacheserviceArrayOutputWithContext(ctx context.Context) WanoptCacheserviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptCacheserviceArrayOutput)
}

// WanoptCacheserviceMapInput is an input type that accepts WanoptCacheserviceMap and WanoptCacheserviceMapOutput values.
// You can construct a concrete instance of `WanoptCacheserviceMapInput` via:
//
//	WanoptCacheserviceMap{ "key": WanoptCacheserviceArgs{...} }
type WanoptCacheserviceMapInput interface {
	pulumi.Input

	ToWanoptCacheserviceMapOutput() WanoptCacheserviceMapOutput
	ToWanoptCacheserviceMapOutputWithContext(context.Context) WanoptCacheserviceMapOutput
}

type WanoptCacheserviceMap map[string]WanoptCacheserviceInput

func (WanoptCacheserviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WanoptCacheservice)(nil)).Elem()
}

func (i WanoptCacheserviceMap) ToWanoptCacheserviceMapOutput() WanoptCacheserviceMapOutput {
	return i.ToWanoptCacheserviceMapOutputWithContext(context.Background())
}

func (i WanoptCacheserviceMap) ToWanoptCacheserviceMapOutputWithContext(ctx context.Context) WanoptCacheserviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WanoptCacheserviceMapOutput)
}

type WanoptCacheserviceOutput struct{ *pulumi.OutputState }

func (WanoptCacheserviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WanoptCacheservice)(nil)).Elem()
}

func (o WanoptCacheserviceOutput) ToWanoptCacheserviceOutput() WanoptCacheserviceOutput {
	return o
}

func (o WanoptCacheserviceOutput) ToWanoptCacheserviceOutputWithContext(ctx context.Context) WanoptCacheserviceOutput {
	return o
}

// Set strategy when accepting cache collaboration connection. Valid values: `any`, `peers`.
func (o WanoptCacheserviceOutput) AcceptableConnections() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptCacheservice) pulumi.StringOutput { return v.AcceptableConnections }).(pulumi.StringOutput)
}

// Enable/disable cache-collaboration between cache-service clusters. Valid values: `enable`, `disable`.
func (o WanoptCacheserviceOutput) Collaboration() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptCacheservice) pulumi.StringOutput { return v.Collaboration }).(pulumi.StringOutput)
}

// Set identifier for this cache device.
func (o WanoptCacheserviceOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptCacheservice) pulumi.StringOutput { return v.DeviceId }).(pulumi.StringOutput)
}

// Modify cache-service destination peer list. The structure of `dstPeer` block is documented below.
func (o WanoptCacheserviceOutput) DstPeers() WanoptCacheserviceDstPeerArrayOutput {
	return o.ApplyT(func(v *WanoptCacheservice) WanoptCacheserviceDstPeerArrayOutput { return v.DstPeers }).(WanoptCacheserviceDstPeerArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o WanoptCacheserviceOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WanoptCacheservice) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Set the preferred cache behavior towards the balance between latency and hit-ratio. Valid values: `balance`, `prefer-speed`, `prefer-cache`.
func (o WanoptCacheserviceOutput) PreferScenario() pulumi.StringOutput {
	return o.ApplyT(func(v *WanoptCacheservice) pulumi.StringOutput { return v.PreferScenario }).(pulumi.StringOutput)
}

// Modify cache-service source peer list. The structure of `srcPeer` block is documented below.
func (o WanoptCacheserviceOutput) SrcPeers() WanoptCacheserviceSrcPeerArrayOutput {
	return o.ApplyT(func(v *WanoptCacheservice) WanoptCacheserviceSrcPeerArrayOutput { return v.SrcPeers }).(WanoptCacheserviceSrcPeerArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WanoptCacheserviceOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WanoptCacheservice) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WanoptCacheserviceArrayOutput struct{ *pulumi.OutputState }

func (WanoptCacheserviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WanoptCacheservice)(nil)).Elem()
}

func (o WanoptCacheserviceArrayOutput) ToWanoptCacheserviceArrayOutput() WanoptCacheserviceArrayOutput {
	return o
}

func (o WanoptCacheserviceArrayOutput) ToWanoptCacheserviceArrayOutputWithContext(ctx context.Context) WanoptCacheserviceArrayOutput {
	return o
}

func (o WanoptCacheserviceArrayOutput) Index(i pulumi.IntInput) WanoptCacheserviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WanoptCacheservice {
		return vs[0].([]*WanoptCacheservice)[vs[1].(int)]
	}).(WanoptCacheserviceOutput)
}

type WanoptCacheserviceMapOutput struct{ *pulumi.OutputState }

func (WanoptCacheserviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WanoptCacheservice)(nil)).Elem()
}

func (o WanoptCacheserviceMapOutput) ToWanoptCacheserviceMapOutput() WanoptCacheserviceMapOutput {
	return o
}

func (o WanoptCacheserviceMapOutput) ToWanoptCacheserviceMapOutputWithContext(ctx context.Context) WanoptCacheserviceMapOutput {
	return o
}

func (o WanoptCacheserviceMapOutput) MapIndex(k pulumi.StringInput) WanoptCacheserviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WanoptCacheservice {
		return vs[0].(map[string]*WanoptCacheservice)[vs[1].(string)]
	}).(WanoptCacheserviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptCacheserviceInput)(nil)).Elem(), &WanoptCacheservice{})
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptCacheserviceArrayInput)(nil)).Elem(), WanoptCacheserviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WanoptCacheserviceMapInput)(nil)).Elem(), WanoptCacheserviceMap{})
	pulumi.RegisterOutputType(WanoptCacheserviceOutput{})
	pulumi.RegisterOutputType(WanoptCacheserviceArrayOutput{})
	pulumi.RegisterOutputType(WanoptCacheserviceMapOutput{})
}
