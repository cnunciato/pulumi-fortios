// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure DHCP servers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemdhcpServer(ctx, "trname", &fortios.SystemdhcpServerArgs{
//				DnsService: pulumi.String("default"),
//				Fosid:      pulumi.Int(1),
//				Interface:  pulumi.String("port2"),
//				IpRanges: fortios.SystemdhcpServerIpRangeArray{
//					&fortios.SystemdhcpServerIpRangeArgs{
//						EndIp:   pulumi.String("1.1.1.22"),
//						Id:      pulumi.Int(1),
//						StartIp: pulumi.String("1.1.1.1"),
//					},
//				},
//				Netmask:    pulumi.String("255.255.255.0"),
//				NtpServer1: pulumi.String("192.168.52.22"),
//				Status:     pulumi.String("disable"),
//				Timezone:   pulumi.String("00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # SystemDhcp Server can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemdhcpServer:SystemdhcpServer labelname {{fosid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemdhcpServer:SystemdhcpServer labelname {{fosid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemdhcpServer struct {
	pulumi.CustomResourceState

	// Enable/disable auto configuration. Valid values: `disable`, `enable`.
	AutoConfiguration pulumi.StringOutput `pulumi:"autoConfiguration"`
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
	AutoManagedStatus pulumi.StringOutput `pulumi:"autoManagedStatus"`
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout pulumi.IntOutput `pulumi:"conflictedIpTimeout"`
	// DDNS authentication mode. Valid values: `disable`, `tsig`.
	DdnsAuth pulumi.StringOutput `pulumi:"ddnsAuth"`
	// DDNS update key (base 64 encoding).
	DdnsKey pulumi.StringOutput `pulumi:"ddnsKey"`
	// DDNS update key name.
	DdnsKeyname pulumi.StringOutput `pulumi:"ddnsKeyname"`
	// DDNS server IP.
	DdnsServerIp pulumi.StringOutput `pulumi:"ddnsServerIp"`
	// TTL.
	DdnsTtl pulumi.IntOutput `pulumi:"ddnsTtl"`
	// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdate pulumi.StringOutput `pulumi:"ddnsUpdate"`
	// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdateOverride pulumi.StringOutput `pulumi:"ddnsUpdateOverride"`
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone pulumi.StringOutput `pulumi:"ddnsZone"`
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway pulumi.StringOutput `pulumi:"defaultGateway"`
	// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
	DhcpSettingsFromFortiipam pulumi.StringOutput `pulumi:"dhcpSettingsFromFortiipam"`
	// DNS server 1.
	DnsServer1 pulumi.StringOutput `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 pulumi.StringOutput `pulumi:"dnsServer2"`
	// DNS server 3.
	DnsServer3 pulumi.StringOutput `pulumi:"dnsServer3"`
	// DNS server 4.
	DnsServer4 pulumi.StringOutput `pulumi:"dnsServer4"`
	// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	DnsService pulumi.StringOutput `pulumi:"dnsService"`
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges SystemdhcpServerExcludeRangeArrayOutput `pulumi:"excludeRanges"`
	// Name of the boot file on the TFTP server.
	Filename pulumi.StringOutput `pulumi:"filename"`
	// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
	ForticlientOnNetStatus pulumi.StringOutput `pulumi:"forticlientOnNetStatus"`
	// ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Method used to assign client IP. Valid values: `range`, `usrgrp`.
	IpMode pulumi.StringOutput `pulumi:"ipMode"`
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges SystemdhcpServerIpRangeArrayOutput `pulumi:"ipRanges"`
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold pulumi.IntOutput `pulumi:"ipsecLeaseHold"`
	// Lease time in seconds, 0 means unlimited.
	LeaseTime pulumi.IntOutput `pulumi:"leaseTime"`
	// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
	MacAclDefaultAction pulumi.StringOutput `pulumi:"macAclDefaultAction"`
	// Netmask assigned by the DHCP server.
	Netmask pulumi.StringOutput `pulumi:"netmask"`
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer pulumi.StringOutput `pulumi:"nextServer"`
	// NTP server 1.
	NtpServer1 pulumi.StringOutput `pulumi:"ntpServer1"`
	// NTP server 2.
	NtpServer2 pulumi.StringOutput `pulumi:"ntpServer2"`
	// NTP server 3.
	NtpServer3 pulumi.StringOutput `pulumi:"ntpServer3"`
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	NtpService pulumi.StringOutput `pulumi:"ntpService"`
	// DHCP options. The structure of `options` block is documented below.
	Options SystemdhcpServerOptionArrayOutput `pulumi:"options"`
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses SystemdhcpServerReservedAddressArrayOutput `pulumi:"reservedAddresses"`
	// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
	TftpServers SystemdhcpServerTftpServerArrayOutput `pulumi:"tftpServers"`
	// Select the time zone to be assigned to DHCP clients. Valid values: `01`, `02`, `03`, `04`, `05`, `81`, `06`, `07`, `08`, `09`, `10`, `11`, `12`, `13`, `74`, `14`, `77`, `15`, `87`, `16`, `17`, `18`, `19`, `20`, `75`, `21`, `22`, `23`, `24`, `80`, `79`, `25`, `26`, `27`, `28`, `78`, `29`, `30`, `31`, `32`, `33`, `34`, `35`, `36`, `37`, `38`, `83`, `84`, `40`, `85`, `41`, `42`, `43`, `39`, `44`, `46`, `47`, `51`, `48`, `45`, `49`, `50`, `52`, `53`, `54`, `55`, `56`, `57`, `58`, `59`, `60`, `62`, `63`, `61`, `64`, `65`, `66`, `67`, `68`, `69`, `70`, `71`, `72`, `00`, `82`, `73`, `86`, `76`.
	Timezone pulumi.StringOutput `pulumi:"timezone"`
	// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
	TimezoneOption pulumi.StringOutput `pulumi:"timezoneOption"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
	VciMatch pulumi.StringOutput `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings SystemdhcpServerVciStringArrayOutput `pulumi:"vciStrings"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 pulumi.StringOutput `pulumi:"wifiAc1"`
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 pulumi.StringOutput `pulumi:"wifiAc2"`
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 pulumi.StringOutput `pulumi:"wifiAc3"`
	// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
	WifiAcService pulumi.StringOutput `pulumi:"wifiAcService"`
	// WINS server 1.
	WinsServer1 pulumi.StringOutput `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 pulumi.StringOutput `pulumi:"winsServer2"`
}

// NewSystemdhcpServer registers a new resource with the given unique name, arguments, and options.
func NewSystemdhcpServer(ctx *pulumi.Context,
	name string, args *SystemdhcpServerArgs, opts ...pulumi.ResourceOption) (*SystemdhcpServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Netmask == nil {
		return nil, errors.New("invalid value for required argument 'Netmask'")
	}
	if args.DdnsKey != nil {
		args.DdnsKey = pulumi.ToSecret(args.DdnsKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"ddnsKey",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemdhcpServer
	err := ctx.RegisterResource("fortios:index/systemdhcpServer:SystemdhcpServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemdhcpServer gets an existing SystemdhcpServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemdhcpServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemdhcpServerState, opts ...pulumi.ResourceOption) (*SystemdhcpServer, error) {
	var resource SystemdhcpServer
	err := ctx.ReadResource("fortios:index/systemdhcpServer:SystemdhcpServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemdhcpServer resources.
type systemdhcpServerState struct {
	// Enable/disable auto configuration. Valid values: `disable`, `enable`.
	AutoConfiguration *string `pulumi:"autoConfiguration"`
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
	AutoManagedStatus *string `pulumi:"autoManagedStatus"`
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout *int `pulumi:"conflictedIpTimeout"`
	// DDNS authentication mode. Valid values: `disable`, `tsig`.
	DdnsAuth *string `pulumi:"ddnsAuth"`
	// DDNS update key (base 64 encoding).
	DdnsKey *string `pulumi:"ddnsKey"`
	// DDNS update key name.
	DdnsKeyname *string `pulumi:"ddnsKeyname"`
	// DDNS server IP.
	DdnsServerIp *string `pulumi:"ddnsServerIp"`
	// TTL.
	DdnsTtl *int `pulumi:"ddnsTtl"`
	// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdate *string `pulumi:"ddnsUpdate"`
	// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdateOverride *string `pulumi:"ddnsUpdateOverride"`
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone *string `pulumi:"ddnsZone"`
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway *string `pulumi:"defaultGateway"`
	// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
	DhcpSettingsFromFortiipam *string `pulumi:"dhcpSettingsFromFortiipam"`
	// DNS server 1.
	DnsServer1 *string `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 *string `pulumi:"dnsServer2"`
	// DNS server 3.
	DnsServer3 *string `pulumi:"dnsServer3"`
	// DNS server 4.
	DnsServer4 *string `pulumi:"dnsServer4"`
	// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	DnsService *string `pulumi:"dnsService"`
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain *string `pulumi:"domain"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges []SystemdhcpServerExcludeRange `pulumi:"excludeRanges"`
	// Name of the boot file on the TFTP server.
	Filename *string `pulumi:"filename"`
	// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
	ForticlientOnNetStatus *string `pulumi:"forticlientOnNetStatus"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface *string `pulumi:"interface"`
	// Method used to assign client IP. Valid values: `range`, `usrgrp`.
	IpMode *string `pulumi:"ipMode"`
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges []SystemdhcpServerIpRange `pulumi:"ipRanges"`
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold *int `pulumi:"ipsecLeaseHold"`
	// Lease time in seconds, 0 means unlimited.
	LeaseTime *int `pulumi:"leaseTime"`
	// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
	MacAclDefaultAction *string `pulumi:"macAclDefaultAction"`
	// Netmask assigned by the DHCP server.
	Netmask *string `pulumi:"netmask"`
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer *string `pulumi:"nextServer"`
	// NTP server 1.
	NtpServer1 *string `pulumi:"ntpServer1"`
	// NTP server 2.
	NtpServer2 *string `pulumi:"ntpServer2"`
	// NTP server 3.
	NtpServer3 *string `pulumi:"ntpServer3"`
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	NtpService *string `pulumi:"ntpService"`
	// DHCP options. The structure of `options` block is documented below.
	Options []SystemdhcpServerOption `pulumi:"options"`
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses []SystemdhcpServerReservedAddress `pulumi:"reservedAddresses"`
	// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
	ServerType *string `pulumi:"serverType"`
	// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
	TftpServers []SystemdhcpServerTftpServer `pulumi:"tftpServers"`
	// Select the time zone to be assigned to DHCP clients. Valid values: `01`, `02`, `03`, `04`, `05`, `81`, `06`, `07`, `08`, `09`, `10`, `11`, `12`, `13`, `74`, `14`, `77`, `15`, `87`, `16`, `17`, `18`, `19`, `20`, `75`, `21`, `22`, `23`, `24`, `80`, `79`, `25`, `26`, `27`, `28`, `78`, `29`, `30`, `31`, `32`, `33`, `34`, `35`, `36`, `37`, `38`, `83`, `84`, `40`, `85`, `41`, `42`, `43`, `39`, `44`, `46`, `47`, `51`, `48`, `45`, `49`, `50`, `52`, `53`, `54`, `55`, `56`, `57`, `58`, `59`, `60`, `62`, `63`, `61`, `64`, `65`, `66`, `67`, `68`, `69`, `70`, `71`, `72`, `00`, `82`, `73`, `86`, `76`.
	Timezone *string `pulumi:"timezone"`
	// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
	TimezoneOption *string `pulumi:"timezoneOption"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
	VciMatch *string `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings []SystemdhcpServerVciString `pulumi:"vciStrings"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 *string `pulumi:"wifiAc1"`
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 *string `pulumi:"wifiAc2"`
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 *string `pulumi:"wifiAc3"`
	// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
	WifiAcService *string `pulumi:"wifiAcService"`
	// WINS server 1.
	WinsServer1 *string `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 *string `pulumi:"winsServer2"`
}

type SystemdhcpServerState struct {
	// Enable/disable auto configuration. Valid values: `disable`, `enable`.
	AutoConfiguration pulumi.StringPtrInput
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
	AutoManagedStatus pulumi.StringPtrInput
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout pulumi.IntPtrInput
	// DDNS authentication mode. Valid values: `disable`, `tsig`.
	DdnsAuth pulumi.StringPtrInput
	// DDNS update key (base 64 encoding).
	DdnsKey pulumi.StringPtrInput
	// DDNS update key name.
	DdnsKeyname pulumi.StringPtrInput
	// DDNS server IP.
	DdnsServerIp pulumi.StringPtrInput
	// TTL.
	DdnsTtl pulumi.IntPtrInput
	// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdate pulumi.StringPtrInput
	// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdateOverride pulumi.StringPtrInput
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone pulumi.StringPtrInput
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway pulumi.StringPtrInput
	// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
	DhcpSettingsFromFortiipam pulumi.StringPtrInput
	// DNS server 1.
	DnsServer1 pulumi.StringPtrInput
	// DNS server 2.
	DnsServer2 pulumi.StringPtrInput
	// DNS server 3.
	DnsServer3 pulumi.StringPtrInput
	// DNS server 4.
	DnsServer4 pulumi.StringPtrInput
	// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	DnsService pulumi.StringPtrInput
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges SystemdhcpServerExcludeRangeArrayInput
	// Name of the boot file on the TFTP server.
	Filename pulumi.StringPtrInput
	// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
	ForticlientOnNetStatus pulumi.StringPtrInput
	// ID.
	Fosid pulumi.IntPtrInput
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface pulumi.StringPtrInput
	// Method used to assign client IP. Valid values: `range`, `usrgrp`.
	IpMode pulumi.StringPtrInput
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges SystemdhcpServerIpRangeArrayInput
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold pulumi.IntPtrInput
	// Lease time in seconds, 0 means unlimited.
	LeaseTime pulumi.IntPtrInput
	// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
	MacAclDefaultAction pulumi.StringPtrInput
	// Netmask assigned by the DHCP server.
	Netmask pulumi.StringPtrInput
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer pulumi.StringPtrInput
	// NTP server 1.
	NtpServer1 pulumi.StringPtrInput
	// NTP server 2.
	NtpServer2 pulumi.StringPtrInput
	// NTP server 3.
	NtpServer3 pulumi.StringPtrInput
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	NtpService pulumi.StringPtrInput
	// DHCP options. The structure of `options` block is documented below.
	Options SystemdhcpServerOptionArrayInput
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses SystemdhcpServerReservedAddressArrayInput
	// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
	ServerType pulumi.StringPtrInput
	// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
	TftpServers SystemdhcpServerTftpServerArrayInput
	// Select the time zone to be assigned to DHCP clients. Valid values: `01`, `02`, `03`, `04`, `05`, `81`, `06`, `07`, `08`, `09`, `10`, `11`, `12`, `13`, `74`, `14`, `77`, `15`, `87`, `16`, `17`, `18`, `19`, `20`, `75`, `21`, `22`, `23`, `24`, `80`, `79`, `25`, `26`, `27`, `28`, `78`, `29`, `30`, `31`, `32`, `33`, `34`, `35`, `36`, `37`, `38`, `83`, `84`, `40`, `85`, `41`, `42`, `43`, `39`, `44`, `46`, `47`, `51`, `48`, `45`, `49`, `50`, `52`, `53`, `54`, `55`, `56`, `57`, `58`, `59`, `60`, `62`, `63`, `61`, `64`, `65`, `66`, `67`, `68`, `69`, `70`, `71`, `72`, `00`, `82`, `73`, `86`, `76`.
	Timezone pulumi.StringPtrInput
	// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
	TimezoneOption pulumi.StringPtrInput
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
	VciMatch pulumi.StringPtrInput
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings SystemdhcpServerVciStringArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 pulumi.StringPtrInput
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 pulumi.StringPtrInput
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 pulumi.StringPtrInput
	// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
	WifiAcService pulumi.StringPtrInput
	// WINS server 1.
	WinsServer1 pulumi.StringPtrInput
	// WINS server 2.
	WinsServer2 pulumi.StringPtrInput
}

func (SystemdhcpServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemdhcpServerState)(nil)).Elem()
}

type systemdhcpServerArgs struct {
	// Enable/disable auto configuration. Valid values: `disable`, `enable`.
	AutoConfiguration *string `pulumi:"autoConfiguration"`
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
	AutoManagedStatus *string `pulumi:"autoManagedStatus"`
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout *int `pulumi:"conflictedIpTimeout"`
	// DDNS authentication mode. Valid values: `disable`, `tsig`.
	DdnsAuth *string `pulumi:"ddnsAuth"`
	// DDNS update key (base 64 encoding).
	DdnsKey *string `pulumi:"ddnsKey"`
	// DDNS update key name.
	DdnsKeyname *string `pulumi:"ddnsKeyname"`
	// DDNS server IP.
	DdnsServerIp *string `pulumi:"ddnsServerIp"`
	// TTL.
	DdnsTtl *int `pulumi:"ddnsTtl"`
	// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdate *string `pulumi:"ddnsUpdate"`
	// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdateOverride *string `pulumi:"ddnsUpdateOverride"`
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone *string `pulumi:"ddnsZone"`
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway *string `pulumi:"defaultGateway"`
	// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
	DhcpSettingsFromFortiipam *string `pulumi:"dhcpSettingsFromFortiipam"`
	// DNS server 1.
	DnsServer1 *string `pulumi:"dnsServer1"`
	// DNS server 2.
	DnsServer2 *string `pulumi:"dnsServer2"`
	// DNS server 3.
	DnsServer3 *string `pulumi:"dnsServer3"`
	// DNS server 4.
	DnsServer4 *string `pulumi:"dnsServer4"`
	// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	DnsService *string `pulumi:"dnsService"`
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain *string `pulumi:"domain"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges []SystemdhcpServerExcludeRange `pulumi:"excludeRanges"`
	// Name of the boot file on the TFTP server.
	Filename *string `pulumi:"filename"`
	// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
	ForticlientOnNetStatus *string `pulumi:"forticlientOnNetStatus"`
	// ID.
	Fosid *int `pulumi:"fosid"`
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface string `pulumi:"interface"`
	// Method used to assign client IP. Valid values: `range`, `usrgrp`.
	IpMode *string `pulumi:"ipMode"`
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges []SystemdhcpServerIpRange `pulumi:"ipRanges"`
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold *int `pulumi:"ipsecLeaseHold"`
	// Lease time in seconds, 0 means unlimited.
	LeaseTime *int `pulumi:"leaseTime"`
	// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
	MacAclDefaultAction *string `pulumi:"macAclDefaultAction"`
	// Netmask assigned by the DHCP server.
	Netmask string `pulumi:"netmask"`
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer *string `pulumi:"nextServer"`
	// NTP server 1.
	NtpServer1 *string `pulumi:"ntpServer1"`
	// NTP server 2.
	NtpServer2 *string `pulumi:"ntpServer2"`
	// NTP server 3.
	NtpServer3 *string `pulumi:"ntpServer3"`
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	NtpService *string `pulumi:"ntpService"`
	// DHCP options. The structure of `options` block is documented below.
	Options []SystemdhcpServerOption `pulumi:"options"`
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses []SystemdhcpServerReservedAddress `pulumi:"reservedAddresses"`
	// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
	ServerType *string `pulumi:"serverType"`
	// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
	TftpServers []SystemdhcpServerTftpServer `pulumi:"tftpServers"`
	// Select the time zone to be assigned to DHCP clients. Valid values: `01`, `02`, `03`, `04`, `05`, `81`, `06`, `07`, `08`, `09`, `10`, `11`, `12`, `13`, `74`, `14`, `77`, `15`, `87`, `16`, `17`, `18`, `19`, `20`, `75`, `21`, `22`, `23`, `24`, `80`, `79`, `25`, `26`, `27`, `28`, `78`, `29`, `30`, `31`, `32`, `33`, `34`, `35`, `36`, `37`, `38`, `83`, `84`, `40`, `85`, `41`, `42`, `43`, `39`, `44`, `46`, `47`, `51`, `48`, `45`, `49`, `50`, `52`, `53`, `54`, `55`, `56`, `57`, `58`, `59`, `60`, `62`, `63`, `61`, `64`, `65`, `66`, `67`, `68`, `69`, `70`, `71`, `72`, `00`, `82`, `73`, `86`, `76`.
	Timezone *string `pulumi:"timezone"`
	// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
	TimezoneOption *string `pulumi:"timezoneOption"`
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
	VciMatch *string `pulumi:"vciMatch"`
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings []SystemdhcpServerVciString `pulumi:"vciStrings"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 *string `pulumi:"wifiAc1"`
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 *string `pulumi:"wifiAc2"`
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 *string `pulumi:"wifiAc3"`
	// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
	WifiAcService *string `pulumi:"wifiAcService"`
	// WINS server 1.
	WinsServer1 *string `pulumi:"winsServer1"`
	// WINS server 2.
	WinsServer2 *string `pulumi:"winsServer2"`
}

// The set of arguments for constructing a SystemdhcpServer resource.
type SystemdhcpServerArgs struct {
	// Enable/disable auto configuration. Valid values: `disable`, `enable`.
	AutoConfiguration pulumi.StringPtrInput
	// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
	AutoManagedStatus pulumi.StringPtrInput
	// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
	ConflictedIpTimeout pulumi.IntPtrInput
	// DDNS authentication mode. Valid values: `disable`, `tsig`.
	DdnsAuth pulumi.StringPtrInput
	// DDNS update key (base 64 encoding).
	DdnsKey pulumi.StringPtrInput
	// DDNS update key name.
	DdnsKeyname pulumi.StringPtrInput
	// DDNS server IP.
	DdnsServerIp pulumi.StringPtrInput
	// TTL.
	DdnsTtl pulumi.IntPtrInput
	// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdate pulumi.StringPtrInput
	// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
	DdnsUpdateOverride pulumi.StringPtrInput
	// Zone of your domain name (ex. DDNS.com).
	DdnsZone pulumi.StringPtrInput
	// Default gateway IP address assigned by the DHCP server.
	DefaultGateway pulumi.StringPtrInput
	// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
	DhcpSettingsFromFortiipam pulumi.StringPtrInput
	// DNS server 1.
	DnsServer1 pulumi.StringPtrInput
	// DNS server 2.
	DnsServer2 pulumi.StringPtrInput
	// DNS server 3.
	DnsServer3 pulumi.StringPtrInput
	// DNS server 4.
	DnsServer4 pulumi.StringPtrInput
	// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	DnsService pulumi.StringPtrInput
	// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
	Domain pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
	ExcludeRanges SystemdhcpServerExcludeRangeArrayInput
	// Name of the boot file on the TFTP server.
	Filename pulumi.StringPtrInput
	// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
	ForticlientOnNetStatus pulumi.StringPtrInput
	// ID.
	Fosid pulumi.IntPtrInput
	// DHCP server can assign IP configurations to clients connected to this interface.
	Interface pulumi.StringInput
	// Method used to assign client IP. Valid values: `range`, `usrgrp`.
	IpMode pulumi.StringPtrInput
	// DHCP IP range configuration. The structure of `ipRange` block is documented below.
	IpRanges SystemdhcpServerIpRangeArrayInput
	// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
	IpsecLeaseHold pulumi.IntPtrInput
	// Lease time in seconds, 0 means unlimited.
	LeaseTime pulumi.IntPtrInput
	// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
	MacAclDefaultAction pulumi.StringPtrInput
	// Netmask assigned by the DHCP server.
	Netmask pulumi.StringInput
	// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
	NextServer pulumi.StringPtrInput
	// NTP server 1.
	NtpServer1 pulumi.StringPtrInput
	// NTP server 2.
	NtpServer2 pulumi.StringPtrInput
	// NTP server 3.
	NtpServer3 pulumi.StringPtrInput
	// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
	NtpService pulumi.StringPtrInput
	// DHCP options. The structure of `options` block is documented below.
	Options SystemdhcpServerOptionArrayInput
	// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
	ReservedAddresses SystemdhcpServerReservedAddressArrayInput
	// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
	ServerType pulumi.StringPtrInput
	// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
	TftpServers SystemdhcpServerTftpServerArrayInput
	// Select the time zone to be assigned to DHCP clients. Valid values: `01`, `02`, `03`, `04`, `05`, `81`, `06`, `07`, `08`, `09`, `10`, `11`, `12`, `13`, `74`, `14`, `77`, `15`, `87`, `16`, `17`, `18`, `19`, `20`, `75`, `21`, `22`, `23`, `24`, `80`, `79`, `25`, `26`, `27`, `28`, `78`, `29`, `30`, `31`, `32`, `33`, `34`, `35`, `36`, `37`, `38`, `83`, `84`, `40`, `85`, `41`, `42`, `43`, `39`, `44`, `46`, `47`, `51`, `48`, `45`, `49`, `50`, `52`, `53`, `54`, `55`, `56`, `57`, `58`, `59`, `60`, `62`, `63`, `61`, `64`, `65`, `66`, `67`, `68`, `69`, `70`, `71`, `72`, `00`, `82`, `73`, `86`, `76`.
	Timezone pulumi.StringPtrInput
	// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
	TimezoneOption pulumi.StringPtrInput
	// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
	VciMatch pulumi.StringPtrInput
	// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
	VciStrings SystemdhcpServerVciStringArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
	WifiAc1 pulumi.StringPtrInput
	// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
	WifiAc2 pulumi.StringPtrInput
	// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
	WifiAc3 pulumi.StringPtrInput
	// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
	WifiAcService pulumi.StringPtrInput
	// WINS server 1.
	WinsServer1 pulumi.StringPtrInput
	// WINS server 2.
	WinsServer2 pulumi.StringPtrInput
}

func (SystemdhcpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemdhcpServerArgs)(nil)).Elem()
}

type SystemdhcpServerInput interface {
	pulumi.Input

	ToSystemdhcpServerOutput() SystemdhcpServerOutput
	ToSystemdhcpServerOutputWithContext(ctx context.Context) SystemdhcpServerOutput
}

func (*SystemdhcpServer) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemdhcpServer)(nil)).Elem()
}

func (i *SystemdhcpServer) ToSystemdhcpServerOutput() SystemdhcpServerOutput {
	return i.ToSystemdhcpServerOutputWithContext(context.Background())
}

func (i *SystemdhcpServer) ToSystemdhcpServerOutputWithContext(ctx context.Context) SystemdhcpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdhcpServerOutput)
}

// SystemdhcpServerArrayInput is an input type that accepts SystemdhcpServerArray and SystemdhcpServerArrayOutput values.
// You can construct a concrete instance of `SystemdhcpServerArrayInput` via:
//
//	SystemdhcpServerArray{ SystemdhcpServerArgs{...} }
type SystemdhcpServerArrayInput interface {
	pulumi.Input

	ToSystemdhcpServerArrayOutput() SystemdhcpServerArrayOutput
	ToSystemdhcpServerArrayOutputWithContext(context.Context) SystemdhcpServerArrayOutput
}

type SystemdhcpServerArray []SystemdhcpServerInput

func (SystemdhcpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemdhcpServer)(nil)).Elem()
}

func (i SystemdhcpServerArray) ToSystemdhcpServerArrayOutput() SystemdhcpServerArrayOutput {
	return i.ToSystemdhcpServerArrayOutputWithContext(context.Background())
}

func (i SystemdhcpServerArray) ToSystemdhcpServerArrayOutputWithContext(ctx context.Context) SystemdhcpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdhcpServerArrayOutput)
}

// SystemdhcpServerMapInput is an input type that accepts SystemdhcpServerMap and SystemdhcpServerMapOutput values.
// You can construct a concrete instance of `SystemdhcpServerMapInput` via:
//
//	SystemdhcpServerMap{ "key": SystemdhcpServerArgs{...} }
type SystemdhcpServerMapInput interface {
	pulumi.Input

	ToSystemdhcpServerMapOutput() SystemdhcpServerMapOutput
	ToSystemdhcpServerMapOutputWithContext(context.Context) SystemdhcpServerMapOutput
}

type SystemdhcpServerMap map[string]SystemdhcpServerInput

func (SystemdhcpServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemdhcpServer)(nil)).Elem()
}

func (i SystemdhcpServerMap) ToSystemdhcpServerMapOutput() SystemdhcpServerMapOutput {
	return i.ToSystemdhcpServerMapOutputWithContext(context.Background())
}

func (i SystemdhcpServerMap) ToSystemdhcpServerMapOutputWithContext(ctx context.Context) SystemdhcpServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemdhcpServerMapOutput)
}

type SystemdhcpServerOutput struct{ *pulumi.OutputState }

func (SystemdhcpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemdhcpServer)(nil)).Elem()
}

func (o SystemdhcpServerOutput) ToSystemdhcpServerOutput() SystemdhcpServerOutput {
	return o
}

func (o SystemdhcpServerOutput) ToSystemdhcpServerOutputWithContext(ctx context.Context) SystemdhcpServerOutput {
	return o
}

// Enable/disable auto configuration. Valid values: `disable`, `enable`.
func (o SystemdhcpServerOutput) AutoConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.AutoConfiguration }).(pulumi.StringOutput)
}

// Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
func (o SystemdhcpServerOutput) AutoManagedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.AutoManagedStatus }).(pulumi.StringOutput)
}

// Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
func (o SystemdhcpServerOutput) ConflictedIpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.IntOutput { return v.ConflictedIpTimeout }).(pulumi.IntOutput)
}

// DDNS authentication mode. Valid values: `disable`, `tsig`.
func (o SystemdhcpServerOutput) DdnsAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DdnsAuth }).(pulumi.StringOutput)
}

// DDNS update key (base 64 encoding).
func (o SystemdhcpServerOutput) DdnsKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DdnsKey }).(pulumi.StringOutput)
}

// DDNS update key name.
func (o SystemdhcpServerOutput) DdnsKeyname() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DdnsKeyname }).(pulumi.StringOutput)
}

// DDNS server IP.
func (o SystemdhcpServerOutput) DdnsServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DdnsServerIp }).(pulumi.StringOutput)
}

// TTL.
func (o SystemdhcpServerOutput) DdnsTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.IntOutput { return v.DdnsTtl }).(pulumi.IntOutput)
}

// Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
func (o SystemdhcpServerOutput) DdnsUpdate() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DdnsUpdate }).(pulumi.StringOutput)
}

// Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
func (o SystemdhcpServerOutput) DdnsUpdateOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DdnsUpdateOverride }).(pulumi.StringOutput)
}

// Zone of your domain name (ex. DDNS.com).
func (o SystemdhcpServerOutput) DdnsZone() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DdnsZone }).(pulumi.StringOutput)
}

// Default gateway IP address assigned by the DHCP server.
func (o SystemdhcpServerOutput) DefaultGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DefaultGateway }).(pulumi.StringOutput)
}

// Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
func (o SystemdhcpServerOutput) DhcpSettingsFromFortiipam() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DhcpSettingsFromFortiipam }).(pulumi.StringOutput)
}

// DNS server 1.
func (o SystemdhcpServerOutput) DnsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DnsServer1 }).(pulumi.StringOutput)
}

// DNS server 2.
func (o SystemdhcpServerOutput) DnsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DnsServer2 }).(pulumi.StringOutput)
}

// DNS server 3.
func (o SystemdhcpServerOutput) DnsServer3() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DnsServer3 }).(pulumi.StringOutput)
}

// DNS server 4.
func (o SystemdhcpServerOutput) DnsServer4() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DnsServer4 }).(pulumi.StringOutput)
}

// Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
func (o SystemdhcpServerOutput) DnsService() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.DnsService }).(pulumi.StringOutput)
}

// Domain name suffix for the IP addresses that the DHCP server assigns to clients.
func (o SystemdhcpServerOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SystemdhcpServerOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `excludeRange` block is documented below.
func (o SystemdhcpServerOutput) ExcludeRanges() SystemdhcpServerExcludeRangeArrayOutput {
	return o.ApplyT(func(v *SystemdhcpServer) SystemdhcpServerExcludeRangeArrayOutput { return v.ExcludeRanges }).(SystemdhcpServerExcludeRangeArrayOutput)
}

// Name of the boot file on the TFTP server.
func (o SystemdhcpServerOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.Filename }).(pulumi.StringOutput)
}

// Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
func (o SystemdhcpServerOutput) ForticlientOnNetStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.ForticlientOnNetStatus }).(pulumi.StringOutput)
}

// ID.
func (o SystemdhcpServerOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// DHCP server can assign IP configurations to clients connected to this interface.
func (o SystemdhcpServerOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Method used to assign client IP. Valid values: `range`, `usrgrp`.
func (o SystemdhcpServerOutput) IpMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.IpMode }).(pulumi.StringOutput)
}

// DHCP IP range configuration. The structure of `ipRange` block is documented below.
func (o SystemdhcpServerOutput) IpRanges() SystemdhcpServerIpRangeArrayOutput {
	return o.ApplyT(func(v *SystemdhcpServer) SystemdhcpServerIpRangeArrayOutput { return v.IpRanges }).(SystemdhcpServerIpRangeArrayOutput)
}

// DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
func (o SystemdhcpServerOutput) IpsecLeaseHold() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.IntOutput { return v.IpsecLeaseHold }).(pulumi.IntOutput)
}

// Lease time in seconds, 0 means unlimited.
func (o SystemdhcpServerOutput) LeaseTime() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.IntOutput { return v.LeaseTime }).(pulumi.IntOutput)
}

// MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
func (o SystemdhcpServerOutput) MacAclDefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.MacAclDefaultAction }).(pulumi.StringOutput)
}

// Netmask assigned by the DHCP server.
func (o SystemdhcpServerOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.Netmask }).(pulumi.StringOutput)
}

// IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
func (o SystemdhcpServerOutput) NextServer() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.NextServer }).(pulumi.StringOutput)
}

// NTP server 1.
func (o SystemdhcpServerOutput) NtpServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.NtpServer1 }).(pulumi.StringOutput)
}

// NTP server 2.
func (o SystemdhcpServerOutput) NtpServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.NtpServer2 }).(pulumi.StringOutput)
}

// NTP server 3.
func (o SystemdhcpServerOutput) NtpServer3() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.NtpServer3 }).(pulumi.StringOutput)
}

// Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
func (o SystemdhcpServerOutput) NtpService() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.NtpService }).(pulumi.StringOutput)
}

// DHCP options. The structure of `options` block is documented below.
func (o SystemdhcpServerOutput) Options() SystemdhcpServerOptionArrayOutput {
	return o.ApplyT(func(v *SystemdhcpServer) SystemdhcpServerOptionArrayOutput { return v.Options }).(SystemdhcpServerOptionArrayOutput)
}

// Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reservedAddress` block is documented below.
func (o SystemdhcpServerOutput) ReservedAddresses() SystemdhcpServerReservedAddressArrayOutput {
	return o.ApplyT(func(v *SystemdhcpServer) SystemdhcpServerReservedAddressArrayOutput { return v.ReservedAddresses }).(SystemdhcpServerReservedAddressArrayOutput)
}

// DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
func (o SystemdhcpServerOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

// Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
func (o SystemdhcpServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftpServer` block is documented below.
func (o SystemdhcpServerOutput) TftpServers() SystemdhcpServerTftpServerArrayOutput {
	return o.ApplyT(func(v *SystemdhcpServer) SystemdhcpServerTftpServerArrayOutput { return v.TftpServers }).(SystemdhcpServerTftpServerArrayOutput)
}

// Select the time zone to be assigned to DHCP clients. Valid values: `01`, `02`, `03`, `04`, `05`, `81`, `06`, `07`, `08`, `09`, `10`, `11`, `12`, `13`, `74`, `14`, `77`, `15`, `87`, `16`, `17`, `18`, `19`, `20`, `75`, `21`, `22`, `23`, `24`, `80`, `79`, `25`, `26`, `27`, `28`, `78`, `29`, `30`, `31`, `32`, `33`, `34`, `35`, `36`, `37`, `38`, `83`, `84`, `40`, `85`, `41`, `42`, `43`, `39`, `44`, `46`, `47`, `51`, `48`, `45`, `49`, `50`, `52`, `53`, `54`, `55`, `56`, `57`, `58`, `59`, `60`, `62`, `63`, `61`, `64`, `65`, `66`, `67`, `68`, `69`, `70`, `71`, `72`, `00`, `82`, `73`, `86`, `76`.
func (o SystemdhcpServerOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

// Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
func (o SystemdhcpServerOutput) TimezoneOption() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.TimezoneOption }).(pulumi.StringOutput)
}

// Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
func (o SystemdhcpServerOutput) VciMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.VciMatch }).(pulumi.StringOutput)
}

// One or more VCI strings in quotes separated by spaces. The structure of `vciString` block is documented below.
func (o SystemdhcpServerOutput) VciStrings() SystemdhcpServerVciStringArrayOutput {
	return o.ApplyT(func(v *SystemdhcpServer) SystemdhcpServerVciStringArrayOutput { return v.VciStrings }).(SystemdhcpServerVciStringArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemdhcpServerOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
func (o SystemdhcpServerOutput) WifiAc1() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.WifiAc1 }).(pulumi.StringOutput)
}

// WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
func (o SystemdhcpServerOutput) WifiAc2() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.WifiAc2 }).(pulumi.StringOutput)
}

// WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
func (o SystemdhcpServerOutput) WifiAc3() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.WifiAc3 }).(pulumi.StringOutput)
}

// Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
func (o SystemdhcpServerOutput) WifiAcService() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.WifiAcService }).(pulumi.StringOutput)
}

// WINS server 1.
func (o SystemdhcpServerOutput) WinsServer1() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.WinsServer1 }).(pulumi.StringOutput)
}

// WINS server 2.
func (o SystemdhcpServerOutput) WinsServer2() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemdhcpServer) pulumi.StringOutput { return v.WinsServer2 }).(pulumi.StringOutput)
}

type SystemdhcpServerArrayOutput struct{ *pulumi.OutputState }

func (SystemdhcpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemdhcpServer)(nil)).Elem()
}

func (o SystemdhcpServerArrayOutput) ToSystemdhcpServerArrayOutput() SystemdhcpServerArrayOutput {
	return o
}

func (o SystemdhcpServerArrayOutput) ToSystemdhcpServerArrayOutputWithContext(ctx context.Context) SystemdhcpServerArrayOutput {
	return o
}

func (o SystemdhcpServerArrayOutput) Index(i pulumi.IntInput) SystemdhcpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemdhcpServer {
		return vs[0].([]*SystemdhcpServer)[vs[1].(int)]
	}).(SystemdhcpServerOutput)
}

type SystemdhcpServerMapOutput struct{ *pulumi.OutputState }

func (SystemdhcpServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemdhcpServer)(nil)).Elem()
}

func (o SystemdhcpServerMapOutput) ToSystemdhcpServerMapOutput() SystemdhcpServerMapOutput {
	return o
}

func (o SystemdhcpServerMapOutput) ToSystemdhcpServerMapOutputWithContext(ctx context.Context) SystemdhcpServerMapOutput {
	return o
}

func (o SystemdhcpServerMapOutput) MapIndex(k pulumi.StringInput) SystemdhcpServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemdhcpServer {
		return vs[0].(map[string]*SystemdhcpServer)[vs[1].(string)]
	}).(SystemdhcpServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdhcpServerInput)(nil)).Elem(), &SystemdhcpServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdhcpServerArrayInput)(nil)).Elem(), SystemdhcpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemdhcpServerMapInput)(nil)).Elem(), SystemdhcpServerMap{})
	pulumi.RegisterOutputType(SystemdhcpServerOutput{})
	pulumi.RegisterOutputType(SystemdhcpServerArrayOutput{})
	pulumi.RegisterOutputType(SystemdhcpServerMapOutput{})
}
