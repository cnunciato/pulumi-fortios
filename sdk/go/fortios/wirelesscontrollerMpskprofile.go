// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure MPSK profile. Applies to FortiOS Version `>= 6.4.2`.
//
// ## Import
//
// # WirelessController MpskProfile can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerMpskprofile:WirelesscontrollerMpskprofile labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerMpskprofile:WirelesscontrollerMpskprofile labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WirelesscontrollerMpskprofile struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Maximum number of concurrent clients that connect using the same passphrase in multiple PSK authentication (0 - 65535, default = 0, meaning no limitation).
	MpskConcurrentClients pulumi.IntOutput `pulumi:"mpskConcurrentClients"`
	// List of multiple PSK groups. The structure of `mpskGroup` block is documented below.
	MpskGroups WirelesscontrollerMpskprofileMpskGroupArrayOutput `pulumi:"mpskGroups"`
	// MPSK profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelesscontrollerMpskprofile registers a new resource with the given unique name, arguments, and options.
func NewWirelesscontrollerMpskprofile(ctx *pulumi.Context,
	name string, args *WirelesscontrollerMpskprofileArgs, opts ...pulumi.ResourceOption) (*WirelesscontrollerMpskprofile, error) {
	if args == nil {
		args = &WirelesscontrollerMpskprofileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelesscontrollerMpskprofile
	err := ctx.RegisterResource("fortios:index/wirelesscontrollerMpskprofile:WirelesscontrollerMpskprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelesscontrollerMpskprofile gets an existing WirelesscontrollerMpskprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelesscontrollerMpskprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelesscontrollerMpskprofileState, opts ...pulumi.ResourceOption) (*WirelesscontrollerMpskprofile, error) {
	var resource WirelesscontrollerMpskprofile
	err := ctx.ReadResource("fortios:index/wirelesscontrollerMpskprofile:WirelesscontrollerMpskprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelesscontrollerMpskprofile resources.
type wirelesscontrollerMpskprofileState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Maximum number of concurrent clients that connect using the same passphrase in multiple PSK authentication (0 - 65535, default = 0, meaning no limitation).
	MpskConcurrentClients *int `pulumi:"mpskConcurrentClients"`
	// List of multiple PSK groups. The structure of `mpskGroup` block is documented below.
	MpskGroups []WirelesscontrollerMpskprofileMpskGroup `pulumi:"mpskGroups"`
	// MPSK profile name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WirelesscontrollerMpskprofileState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Maximum number of concurrent clients that connect using the same passphrase in multiple PSK authentication (0 - 65535, default = 0, meaning no limitation).
	MpskConcurrentClients pulumi.IntPtrInput
	// List of multiple PSK groups. The structure of `mpskGroup` block is documented below.
	MpskGroups WirelesscontrollerMpskprofileMpskGroupArrayInput
	// MPSK profile name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelesscontrollerMpskprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerMpskprofileState)(nil)).Elem()
}

type wirelesscontrollerMpskprofileArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Maximum number of concurrent clients that connect using the same passphrase in multiple PSK authentication (0 - 65535, default = 0, meaning no limitation).
	MpskConcurrentClients *int `pulumi:"mpskConcurrentClients"`
	// List of multiple PSK groups. The structure of `mpskGroup` block is documented below.
	MpskGroups []WirelesscontrollerMpskprofileMpskGroup `pulumi:"mpskGroups"`
	// MPSK profile name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelesscontrollerMpskprofile resource.
type WirelesscontrollerMpskprofileArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Maximum number of concurrent clients that connect using the same passphrase in multiple PSK authentication (0 - 65535, default = 0, meaning no limitation).
	MpskConcurrentClients pulumi.IntPtrInput
	// List of multiple PSK groups. The structure of `mpskGroup` block is documented below.
	MpskGroups WirelesscontrollerMpskprofileMpskGroupArrayInput
	// MPSK profile name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelesscontrollerMpskprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerMpskprofileArgs)(nil)).Elem()
}

type WirelesscontrollerMpskprofileInput interface {
	pulumi.Input

	ToWirelesscontrollerMpskprofileOutput() WirelesscontrollerMpskprofileOutput
	ToWirelesscontrollerMpskprofileOutputWithContext(ctx context.Context) WirelesscontrollerMpskprofileOutput
}

func (*WirelesscontrollerMpskprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerMpskprofile)(nil)).Elem()
}

func (i *WirelesscontrollerMpskprofile) ToWirelesscontrollerMpskprofileOutput() WirelesscontrollerMpskprofileOutput {
	return i.ToWirelesscontrollerMpskprofileOutputWithContext(context.Background())
}

func (i *WirelesscontrollerMpskprofile) ToWirelesscontrollerMpskprofileOutputWithContext(ctx context.Context) WirelesscontrollerMpskprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerMpskprofileOutput)
}

// WirelesscontrollerMpskprofileArrayInput is an input type that accepts WirelesscontrollerMpskprofileArray and WirelesscontrollerMpskprofileArrayOutput values.
// You can construct a concrete instance of `WirelesscontrollerMpskprofileArrayInput` via:
//
//	WirelesscontrollerMpskprofileArray{ WirelesscontrollerMpskprofileArgs{...} }
type WirelesscontrollerMpskprofileArrayInput interface {
	pulumi.Input

	ToWirelesscontrollerMpskprofileArrayOutput() WirelesscontrollerMpskprofileArrayOutput
	ToWirelesscontrollerMpskprofileArrayOutputWithContext(context.Context) WirelesscontrollerMpskprofileArrayOutput
}

type WirelesscontrollerMpskprofileArray []WirelesscontrollerMpskprofileInput

func (WirelesscontrollerMpskprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerMpskprofile)(nil)).Elem()
}

func (i WirelesscontrollerMpskprofileArray) ToWirelesscontrollerMpskprofileArrayOutput() WirelesscontrollerMpskprofileArrayOutput {
	return i.ToWirelesscontrollerMpskprofileArrayOutputWithContext(context.Background())
}

func (i WirelesscontrollerMpskprofileArray) ToWirelesscontrollerMpskprofileArrayOutputWithContext(ctx context.Context) WirelesscontrollerMpskprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerMpskprofileArrayOutput)
}

// WirelesscontrollerMpskprofileMapInput is an input type that accepts WirelesscontrollerMpskprofileMap and WirelesscontrollerMpskprofileMapOutput values.
// You can construct a concrete instance of `WirelesscontrollerMpskprofileMapInput` via:
//
//	WirelesscontrollerMpskprofileMap{ "key": WirelesscontrollerMpskprofileArgs{...} }
type WirelesscontrollerMpskprofileMapInput interface {
	pulumi.Input

	ToWirelesscontrollerMpskprofileMapOutput() WirelesscontrollerMpskprofileMapOutput
	ToWirelesscontrollerMpskprofileMapOutputWithContext(context.Context) WirelesscontrollerMpskprofileMapOutput
}

type WirelesscontrollerMpskprofileMap map[string]WirelesscontrollerMpskprofileInput

func (WirelesscontrollerMpskprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerMpskprofile)(nil)).Elem()
}

func (i WirelesscontrollerMpskprofileMap) ToWirelesscontrollerMpskprofileMapOutput() WirelesscontrollerMpskprofileMapOutput {
	return i.ToWirelesscontrollerMpskprofileMapOutputWithContext(context.Background())
}

func (i WirelesscontrollerMpskprofileMap) ToWirelesscontrollerMpskprofileMapOutputWithContext(ctx context.Context) WirelesscontrollerMpskprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerMpskprofileMapOutput)
}

type WirelesscontrollerMpskprofileOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerMpskprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerMpskprofile)(nil)).Elem()
}

func (o WirelesscontrollerMpskprofileOutput) ToWirelesscontrollerMpskprofileOutput() WirelesscontrollerMpskprofileOutput {
	return o
}

func (o WirelesscontrollerMpskprofileOutput) ToWirelesscontrollerMpskprofileOutputWithContext(ctx context.Context) WirelesscontrollerMpskprofileOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o WirelesscontrollerMpskprofileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerMpskprofile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Maximum number of concurrent clients that connect using the same passphrase in multiple PSK authentication (0 - 65535, default = 0, meaning no limitation).
func (o WirelesscontrollerMpskprofileOutput) MpskConcurrentClients() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerMpskprofile) pulumi.IntOutput { return v.MpskConcurrentClients }).(pulumi.IntOutput)
}

// List of multiple PSK groups. The structure of `mpskGroup` block is documented below.
func (o WirelesscontrollerMpskprofileOutput) MpskGroups() WirelesscontrollerMpskprofileMpskGroupArrayOutput {
	return o.ApplyT(func(v *WirelesscontrollerMpskprofile) WirelesscontrollerMpskprofileMpskGroupArrayOutput {
		return v.MpskGroups
	}).(WirelesscontrollerMpskprofileMpskGroupArrayOutput)
}

// MPSK profile name.
func (o WirelesscontrollerMpskprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerMpskprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WirelesscontrollerMpskprofileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerMpskprofile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WirelesscontrollerMpskprofileArrayOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerMpskprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerMpskprofile)(nil)).Elem()
}

func (o WirelesscontrollerMpskprofileArrayOutput) ToWirelesscontrollerMpskprofileArrayOutput() WirelesscontrollerMpskprofileArrayOutput {
	return o
}

func (o WirelesscontrollerMpskprofileArrayOutput) ToWirelesscontrollerMpskprofileArrayOutputWithContext(ctx context.Context) WirelesscontrollerMpskprofileArrayOutput {
	return o
}

func (o WirelesscontrollerMpskprofileArrayOutput) Index(i pulumi.IntInput) WirelesscontrollerMpskprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelesscontrollerMpskprofile {
		return vs[0].([]*WirelesscontrollerMpskprofile)[vs[1].(int)]
	}).(WirelesscontrollerMpskprofileOutput)
}

type WirelesscontrollerMpskprofileMapOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerMpskprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerMpskprofile)(nil)).Elem()
}

func (o WirelesscontrollerMpskprofileMapOutput) ToWirelesscontrollerMpskprofileMapOutput() WirelesscontrollerMpskprofileMapOutput {
	return o
}

func (o WirelesscontrollerMpskprofileMapOutput) ToWirelesscontrollerMpskprofileMapOutputWithContext(ctx context.Context) WirelesscontrollerMpskprofileMapOutput {
	return o
}

func (o WirelesscontrollerMpskprofileMapOutput) MapIndex(k pulumi.StringInput) WirelesscontrollerMpskprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelesscontrollerMpskprofile {
		return vs[0].(map[string]*WirelesscontrollerMpskprofile)[vs[1].(string)]
	}).(WirelesscontrollerMpskprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerMpskprofileInput)(nil)).Elem(), &WirelesscontrollerMpskprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerMpskprofileArrayInput)(nil)).Elem(), WirelesscontrollerMpskprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerMpskprofileMapInput)(nil)).Elem(), WirelesscontrollerMpskprofileMap{})
	pulumi.RegisterOutputType(WirelesscontrollerMpskprofileOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerMpskprofileArrayOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerMpskprofileMapOutput{})
}
