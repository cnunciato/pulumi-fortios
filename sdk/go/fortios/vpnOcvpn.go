// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure Overlay Controller VPN settings. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// # Vpn Ocvpn can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/vpnOcvpn:VpnOcvpn labelname VpnOcvpn
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/vpnOcvpn:VpnOcvpn labelname VpnOcvpn
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type VpnOcvpn struct {
	pulumi.CustomResourceState

	// Enable/disable auto-discovery shortcuts. Valid values: `enable`, `disable`.
	AutoDiscovery pulumi.StringOutput `pulumi:"autoDiscovery"`
	// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
	AutoDiscoveryShortcutMode pulumi.StringOutput `pulumi:"autoDiscoveryShortcutMode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable EAP client authentication. Valid values: `enable`, `disable`.
	Eap pulumi.StringOutput `pulumi:"eap"`
	// EAP authentication user group.
	EapUsers pulumi.StringOutput `pulumi:"eapUsers"`
	// Configure FortiClient settings. The structure of `forticlientAccess` block is documented below.
	ForticlientAccess VpnOcvpnForticlientAccessOutput `pulumi:"forticlientAccess"`
	// Class B subnet reserved for private IP address assignment.
	IpAllocationBlock pulumi.StringOutput `pulumi:"ipAllocationBlock"`
	// Enable/disable multipath redundancy. Valid values: `enable`, `disable`.
	Multipath pulumi.StringOutput `pulumi:"multipath"`
	// Enable/disable inter-overlay source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringOutput `pulumi:"nat"`
	// Network overlays to register with Overlay Controller VPN service. The structure of `overlays` block is documented below.
	Overlays VpnOcvpnOverlayArrayOutput `pulumi:"overlays"`
	// Overlay Controller VPN polling interval.
	PollInterval pulumi.IntOutput `pulumi:"pollInterval"`
	// Set device role. Valid values: `spoke`, `primary-hub`, `secondary-hub`.
	Role pulumi.StringOutput `pulumi:"role"`
	// Enable/disable adding OCVPN tunnels to SDWAN. Valid values: `enable`, `disable`.
	Sdwan pulumi.StringOutput `pulumi:"sdwan"`
	// Set SD-WAN zone.
	SdwanZone pulumi.StringOutput `pulumi:"sdwanZone"`
	// Enable/disable Overlay Controller cloud assisted VPN. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// FortiGate WAN interfaces to use with OCVPN. The structure of `wanInterface` block is documented below.
	WanInterfaces VpnOcvpnWanInterfaceArrayOutput `pulumi:"wanInterfaces"`
}

// NewVpnOcvpn registers a new resource with the given unique name, arguments, and options.
func NewVpnOcvpn(ctx *pulumi.Context,
	name string, args *VpnOcvpnArgs, opts ...pulumi.ResourceOption) (*VpnOcvpn, error) {
	if args == nil {
		args = &VpnOcvpnArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource VpnOcvpn
	err := ctx.RegisterResource("fortios:index/vpnOcvpn:VpnOcvpn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnOcvpn gets an existing VpnOcvpn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnOcvpn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnOcvpnState, opts ...pulumi.ResourceOption) (*VpnOcvpn, error) {
	var resource VpnOcvpn
	err := ctx.ReadResource("fortios:index/vpnOcvpn:VpnOcvpn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnOcvpn resources.
type vpnOcvpnState struct {
	// Enable/disable auto-discovery shortcuts. Valid values: `enable`, `disable`.
	AutoDiscovery *string `pulumi:"autoDiscovery"`
	// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
	AutoDiscoveryShortcutMode *string `pulumi:"autoDiscoveryShortcutMode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable EAP client authentication. Valid values: `enable`, `disable`.
	Eap *string `pulumi:"eap"`
	// EAP authentication user group.
	EapUsers *string `pulumi:"eapUsers"`
	// Configure FortiClient settings. The structure of `forticlientAccess` block is documented below.
	ForticlientAccess *VpnOcvpnForticlientAccess `pulumi:"forticlientAccess"`
	// Class B subnet reserved for private IP address assignment.
	IpAllocationBlock *string `pulumi:"ipAllocationBlock"`
	// Enable/disable multipath redundancy. Valid values: `enable`, `disable`.
	Multipath *string `pulumi:"multipath"`
	// Enable/disable inter-overlay source NAT. Valid values: `enable`, `disable`.
	Nat *string `pulumi:"nat"`
	// Network overlays to register with Overlay Controller VPN service. The structure of `overlays` block is documented below.
	Overlays []VpnOcvpnOverlay `pulumi:"overlays"`
	// Overlay Controller VPN polling interval.
	PollInterval *int `pulumi:"pollInterval"`
	// Set device role. Valid values: `spoke`, `primary-hub`, `secondary-hub`.
	Role *string `pulumi:"role"`
	// Enable/disable adding OCVPN tunnels to SDWAN. Valid values: `enable`, `disable`.
	Sdwan *string `pulumi:"sdwan"`
	// Set SD-WAN zone.
	SdwanZone *string `pulumi:"sdwanZone"`
	// Enable/disable Overlay Controller cloud assisted VPN. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// FortiGate WAN interfaces to use with OCVPN. The structure of `wanInterface` block is documented below.
	WanInterfaces []VpnOcvpnWanInterface `pulumi:"wanInterfaces"`
}

type VpnOcvpnState struct {
	// Enable/disable auto-discovery shortcuts. Valid values: `enable`, `disable`.
	AutoDiscovery pulumi.StringPtrInput
	// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
	AutoDiscoveryShortcutMode pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable EAP client authentication. Valid values: `enable`, `disable`.
	Eap pulumi.StringPtrInput
	// EAP authentication user group.
	EapUsers pulumi.StringPtrInput
	// Configure FortiClient settings. The structure of `forticlientAccess` block is documented below.
	ForticlientAccess VpnOcvpnForticlientAccessPtrInput
	// Class B subnet reserved for private IP address assignment.
	IpAllocationBlock pulumi.StringPtrInput
	// Enable/disable multipath redundancy. Valid values: `enable`, `disable`.
	Multipath pulumi.StringPtrInput
	// Enable/disable inter-overlay source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringPtrInput
	// Network overlays to register with Overlay Controller VPN service. The structure of `overlays` block is documented below.
	Overlays VpnOcvpnOverlayArrayInput
	// Overlay Controller VPN polling interval.
	PollInterval pulumi.IntPtrInput
	// Set device role. Valid values: `spoke`, `primary-hub`, `secondary-hub`.
	Role pulumi.StringPtrInput
	// Enable/disable adding OCVPN tunnels to SDWAN. Valid values: `enable`, `disable`.
	Sdwan pulumi.StringPtrInput
	// Set SD-WAN zone.
	SdwanZone pulumi.StringPtrInput
	// Enable/disable Overlay Controller cloud assisted VPN. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// FortiGate WAN interfaces to use with OCVPN. The structure of `wanInterface` block is documented below.
	WanInterfaces VpnOcvpnWanInterfaceArrayInput
}

func (VpnOcvpnState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnOcvpnState)(nil)).Elem()
}

type vpnOcvpnArgs struct {
	// Enable/disable auto-discovery shortcuts. Valid values: `enable`, `disable`.
	AutoDiscovery *string `pulumi:"autoDiscovery"`
	// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
	AutoDiscoveryShortcutMode *string `pulumi:"autoDiscoveryShortcutMode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable EAP client authentication. Valid values: `enable`, `disable`.
	Eap *string `pulumi:"eap"`
	// EAP authentication user group.
	EapUsers *string `pulumi:"eapUsers"`
	// Configure FortiClient settings. The structure of `forticlientAccess` block is documented below.
	ForticlientAccess *VpnOcvpnForticlientAccess `pulumi:"forticlientAccess"`
	// Class B subnet reserved for private IP address assignment.
	IpAllocationBlock *string `pulumi:"ipAllocationBlock"`
	// Enable/disable multipath redundancy. Valid values: `enable`, `disable`.
	Multipath *string `pulumi:"multipath"`
	// Enable/disable inter-overlay source NAT. Valid values: `enable`, `disable`.
	Nat *string `pulumi:"nat"`
	// Network overlays to register with Overlay Controller VPN service. The structure of `overlays` block is documented below.
	Overlays []VpnOcvpnOverlay `pulumi:"overlays"`
	// Overlay Controller VPN polling interval.
	PollInterval *int `pulumi:"pollInterval"`
	// Set device role. Valid values: `spoke`, `primary-hub`, `secondary-hub`.
	Role *string `pulumi:"role"`
	// Enable/disable adding OCVPN tunnels to SDWAN. Valid values: `enable`, `disable`.
	Sdwan *string `pulumi:"sdwan"`
	// Set SD-WAN zone.
	SdwanZone *string `pulumi:"sdwanZone"`
	// Enable/disable Overlay Controller cloud assisted VPN. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// FortiGate WAN interfaces to use with OCVPN. The structure of `wanInterface` block is documented below.
	WanInterfaces []VpnOcvpnWanInterface `pulumi:"wanInterfaces"`
}

// The set of arguments for constructing a VpnOcvpn resource.
type VpnOcvpnArgs struct {
	// Enable/disable auto-discovery shortcuts. Valid values: `enable`, `disable`.
	AutoDiscovery pulumi.StringPtrInput
	// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
	AutoDiscoveryShortcutMode pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable EAP client authentication. Valid values: `enable`, `disable`.
	Eap pulumi.StringPtrInput
	// EAP authentication user group.
	EapUsers pulumi.StringPtrInput
	// Configure FortiClient settings. The structure of `forticlientAccess` block is documented below.
	ForticlientAccess VpnOcvpnForticlientAccessPtrInput
	// Class B subnet reserved for private IP address assignment.
	IpAllocationBlock pulumi.StringPtrInput
	// Enable/disable multipath redundancy. Valid values: `enable`, `disable`.
	Multipath pulumi.StringPtrInput
	// Enable/disable inter-overlay source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringPtrInput
	// Network overlays to register with Overlay Controller VPN service. The structure of `overlays` block is documented below.
	Overlays VpnOcvpnOverlayArrayInput
	// Overlay Controller VPN polling interval.
	PollInterval pulumi.IntPtrInput
	// Set device role. Valid values: `spoke`, `primary-hub`, `secondary-hub`.
	Role pulumi.StringPtrInput
	// Enable/disable adding OCVPN tunnels to SDWAN. Valid values: `enable`, `disable`.
	Sdwan pulumi.StringPtrInput
	// Set SD-WAN zone.
	SdwanZone pulumi.StringPtrInput
	// Enable/disable Overlay Controller cloud assisted VPN. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// FortiGate WAN interfaces to use with OCVPN. The structure of `wanInterface` block is documented below.
	WanInterfaces VpnOcvpnWanInterfaceArrayInput
}

func (VpnOcvpnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnOcvpnArgs)(nil)).Elem()
}

type VpnOcvpnInput interface {
	pulumi.Input

	ToVpnOcvpnOutput() VpnOcvpnOutput
	ToVpnOcvpnOutputWithContext(ctx context.Context) VpnOcvpnOutput
}

func (*VpnOcvpn) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnOcvpn)(nil)).Elem()
}

func (i *VpnOcvpn) ToVpnOcvpnOutput() VpnOcvpnOutput {
	return i.ToVpnOcvpnOutputWithContext(context.Background())
}

func (i *VpnOcvpn) ToVpnOcvpnOutputWithContext(ctx context.Context) VpnOcvpnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnOcvpnOutput)
}

// VpnOcvpnArrayInput is an input type that accepts VpnOcvpnArray and VpnOcvpnArrayOutput values.
// You can construct a concrete instance of `VpnOcvpnArrayInput` via:
//
//	VpnOcvpnArray{ VpnOcvpnArgs{...} }
type VpnOcvpnArrayInput interface {
	pulumi.Input

	ToVpnOcvpnArrayOutput() VpnOcvpnArrayOutput
	ToVpnOcvpnArrayOutputWithContext(context.Context) VpnOcvpnArrayOutput
}

type VpnOcvpnArray []VpnOcvpnInput

func (VpnOcvpnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnOcvpn)(nil)).Elem()
}

func (i VpnOcvpnArray) ToVpnOcvpnArrayOutput() VpnOcvpnArrayOutput {
	return i.ToVpnOcvpnArrayOutputWithContext(context.Background())
}

func (i VpnOcvpnArray) ToVpnOcvpnArrayOutputWithContext(ctx context.Context) VpnOcvpnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnOcvpnArrayOutput)
}

// VpnOcvpnMapInput is an input type that accepts VpnOcvpnMap and VpnOcvpnMapOutput values.
// You can construct a concrete instance of `VpnOcvpnMapInput` via:
//
//	VpnOcvpnMap{ "key": VpnOcvpnArgs{...} }
type VpnOcvpnMapInput interface {
	pulumi.Input

	ToVpnOcvpnMapOutput() VpnOcvpnMapOutput
	ToVpnOcvpnMapOutputWithContext(context.Context) VpnOcvpnMapOutput
}

type VpnOcvpnMap map[string]VpnOcvpnInput

func (VpnOcvpnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnOcvpn)(nil)).Elem()
}

func (i VpnOcvpnMap) ToVpnOcvpnMapOutput() VpnOcvpnMapOutput {
	return i.ToVpnOcvpnMapOutputWithContext(context.Background())
}

func (i VpnOcvpnMap) ToVpnOcvpnMapOutputWithContext(ctx context.Context) VpnOcvpnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnOcvpnMapOutput)
}

type VpnOcvpnOutput struct{ *pulumi.OutputState }

func (VpnOcvpnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnOcvpn)(nil)).Elem()
}

func (o VpnOcvpnOutput) ToVpnOcvpnOutput() VpnOcvpnOutput {
	return o
}

func (o VpnOcvpnOutput) ToVpnOcvpnOutputWithContext(ctx context.Context) VpnOcvpnOutput {
	return o
}

// Enable/disable auto-discovery shortcuts. Valid values: `enable`, `disable`.
func (o VpnOcvpnOutput) AutoDiscovery() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.AutoDiscovery }).(pulumi.StringOutput)
}

// Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
func (o VpnOcvpnOutput) AutoDiscoveryShortcutMode() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.AutoDiscoveryShortcutMode }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o VpnOcvpnOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable EAP client authentication. Valid values: `enable`, `disable`.
func (o VpnOcvpnOutput) Eap() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Eap }).(pulumi.StringOutput)
}

// EAP authentication user group.
func (o VpnOcvpnOutput) EapUsers() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.EapUsers }).(pulumi.StringOutput)
}

// Configure FortiClient settings. The structure of `forticlientAccess` block is documented below.
func (o VpnOcvpnOutput) ForticlientAccess() VpnOcvpnForticlientAccessOutput {
	return o.ApplyT(func(v *VpnOcvpn) VpnOcvpnForticlientAccessOutput { return v.ForticlientAccess }).(VpnOcvpnForticlientAccessOutput)
}

// Class B subnet reserved for private IP address assignment.
func (o VpnOcvpnOutput) IpAllocationBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.IpAllocationBlock }).(pulumi.StringOutput)
}

// Enable/disable multipath redundancy. Valid values: `enable`, `disable`.
func (o VpnOcvpnOutput) Multipath() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Multipath }).(pulumi.StringOutput)
}

// Enable/disable inter-overlay source NAT. Valid values: `enable`, `disable`.
func (o VpnOcvpnOutput) Nat() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Nat }).(pulumi.StringOutput)
}

// Network overlays to register with Overlay Controller VPN service. The structure of `overlays` block is documented below.
func (o VpnOcvpnOutput) Overlays() VpnOcvpnOverlayArrayOutput {
	return o.ApplyT(func(v *VpnOcvpn) VpnOcvpnOverlayArrayOutput { return v.Overlays }).(VpnOcvpnOverlayArrayOutput)
}

// Overlay Controller VPN polling interval.
func (o VpnOcvpnOutput) PollInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.IntOutput { return v.PollInterval }).(pulumi.IntOutput)
}

// Set device role. Valid values: `spoke`, `primary-hub`, `secondary-hub`.
func (o VpnOcvpnOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Enable/disable adding OCVPN tunnels to SDWAN. Valid values: `enable`, `disable`.
func (o VpnOcvpnOutput) Sdwan() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Sdwan }).(pulumi.StringOutput)
}

// Set SD-WAN zone.
func (o VpnOcvpnOutput) SdwanZone() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.SdwanZone }).(pulumi.StringOutput)
}

// Enable/disable Overlay Controller cloud assisted VPN. Valid values: `enable`, `disable`.
func (o VpnOcvpnOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o VpnOcvpnOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnOcvpn) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// FortiGate WAN interfaces to use with OCVPN. The structure of `wanInterface` block is documented below.
func (o VpnOcvpnOutput) WanInterfaces() VpnOcvpnWanInterfaceArrayOutput {
	return o.ApplyT(func(v *VpnOcvpn) VpnOcvpnWanInterfaceArrayOutput { return v.WanInterfaces }).(VpnOcvpnWanInterfaceArrayOutput)
}

type VpnOcvpnArrayOutput struct{ *pulumi.OutputState }

func (VpnOcvpnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnOcvpn)(nil)).Elem()
}

func (o VpnOcvpnArrayOutput) ToVpnOcvpnArrayOutput() VpnOcvpnArrayOutput {
	return o
}

func (o VpnOcvpnArrayOutput) ToVpnOcvpnArrayOutputWithContext(ctx context.Context) VpnOcvpnArrayOutput {
	return o
}

func (o VpnOcvpnArrayOutput) Index(i pulumi.IntInput) VpnOcvpnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnOcvpn {
		return vs[0].([]*VpnOcvpn)[vs[1].(int)]
	}).(VpnOcvpnOutput)
}

type VpnOcvpnMapOutput struct{ *pulumi.OutputState }

func (VpnOcvpnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnOcvpn)(nil)).Elem()
}

func (o VpnOcvpnMapOutput) ToVpnOcvpnMapOutput() VpnOcvpnMapOutput {
	return o
}

func (o VpnOcvpnMapOutput) ToVpnOcvpnMapOutputWithContext(ctx context.Context) VpnOcvpnMapOutput {
	return o
}

func (o VpnOcvpnMapOutput) MapIndex(k pulumi.StringInput) VpnOcvpnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnOcvpn {
		return vs[0].(map[string]*VpnOcvpn)[vs[1].(string)]
	}).(VpnOcvpnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnOcvpnInput)(nil)).Elem(), &VpnOcvpn{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnOcvpnArrayInput)(nil)).Elem(), VpnOcvpnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnOcvpnMapInput)(nil)).Elem(), VpnOcvpnMap{})
	pulumi.RegisterOutputType(VpnOcvpnOutput{})
	pulumi.RegisterOutputType(VpnOcvpnArrayOutput{})
	pulumi.RegisterOutputType(VpnOcvpnMapOutput{})
}
