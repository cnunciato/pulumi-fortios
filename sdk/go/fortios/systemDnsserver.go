// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure DNS servers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemDnsserver(ctx, "trname", &fortios.SystemDnsserverArgs{
//				DnsfilterProfile: pulumi.String("default"),
//				Mode:             pulumi.String("forward-only"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # System DnsServer can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemDnsserver:SystemDnsserver labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemDnsserver:SystemDnsserver labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemDnsserver struct {
	pulumi.CustomResourceState

	// DNS filter profile.
	DnsfilterProfile pulumi.StringOutput `pulumi:"dnsfilterProfile"`
	// DNS over HTTPS. Valid values: `enable`, `disable`.
	Doh pulumi.StringOutput `pulumi:"doh"`
	// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// DNS server name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemDnsserver registers a new resource with the given unique name, arguments, and options.
func NewSystemDnsserver(ctx *pulumi.Context,
	name string, args *SystemDnsserverArgs, opts ...pulumi.ResourceOption) (*SystemDnsserver, error) {
	if args == nil {
		args = &SystemDnsserverArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemDnsserver
	err := ctx.RegisterResource("fortios:index/systemDnsserver:SystemDnsserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemDnsserver gets an existing SystemDnsserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemDnsserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemDnsserverState, opts ...pulumi.ResourceOption) (*SystemDnsserver, error) {
	var resource SystemDnsserver
	err := ctx.ReadResource("fortios:index/systemDnsserver:SystemDnsserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemDnsserver resources.
type systemDnsserverState struct {
	// DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// DNS over HTTPS. Valid values: `enable`, `disable`.
	Doh *string `pulumi:"doh"`
	// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
	Mode *string `pulumi:"mode"`
	// DNS server name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemDnsserverState struct {
	// DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// DNS over HTTPS. Valid values: `enable`, `disable`.
	Doh pulumi.StringPtrInput
	// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
	Mode pulumi.StringPtrInput
	// DNS server name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemDnsserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDnsserverState)(nil)).Elem()
}

type systemDnsserverArgs struct {
	// DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// DNS over HTTPS. Valid values: `enable`, `disable`.
	Doh *string `pulumi:"doh"`
	// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
	Mode *string `pulumi:"mode"`
	// DNS server name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemDnsserver resource.
type SystemDnsserverArgs struct {
	// DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// DNS over HTTPS. Valid values: `enable`, `disable`.
	Doh pulumi.StringPtrInput
	// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
	Mode pulumi.StringPtrInput
	// DNS server name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemDnsserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemDnsserverArgs)(nil)).Elem()
}

type SystemDnsserverInput interface {
	pulumi.Input

	ToSystemDnsserverOutput() SystemDnsserverOutput
	ToSystemDnsserverOutputWithContext(ctx context.Context) SystemDnsserverOutput
}

func (*SystemDnsserver) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDnsserver)(nil)).Elem()
}

func (i *SystemDnsserver) ToSystemDnsserverOutput() SystemDnsserverOutput {
	return i.ToSystemDnsserverOutputWithContext(context.Background())
}

func (i *SystemDnsserver) ToSystemDnsserverOutputWithContext(ctx context.Context) SystemDnsserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsserverOutput)
}

// SystemDnsserverArrayInput is an input type that accepts SystemDnsserverArray and SystemDnsserverArrayOutput values.
// You can construct a concrete instance of `SystemDnsserverArrayInput` via:
//
//	SystemDnsserverArray{ SystemDnsserverArgs{...} }
type SystemDnsserverArrayInput interface {
	pulumi.Input

	ToSystemDnsserverArrayOutput() SystemDnsserverArrayOutput
	ToSystemDnsserverArrayOutputWithContext(context.Context) SystemDnsserverArrayOutput
}

type SystemDnsserverArray []SystemDnsserverInput

func (SystemDnsserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDnsserver)(nil)).Elem()
}

func (i SystemDnsserverArray) ToSystemDnsserverArrayOutput() SystemDnsserverArrayOutput {
	return i.ToSystemDnsserverArrayOutputWithContext(context.Background())
}

func (i SystemDnsserverArray) ToSystemDnsserverArrayOutputWithContext(ctx context.Context) SystemDnsserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsserverArrayOutput)
}

// SystemDnsserverMapInput is an input type that accepts SystemDnsserverMap and SystemDnsserverMapOutput values.
// You can construct a concrete instance of `SystemDnsserverMapInput` via:
//
//	SystemDnsserverMap{ "key": SystemDnsserverArgs{...} }
type SystemDnsserverMapInput interface {
	pulumi.Input

	ToSystemDnsserverMapOutput() SystemDnsserverMapOutput
	ToSystemDnsserverMapOutputWithContext(context.Context) SystemDnsserverMapOutput
}

type SystemDnsserverMap map[string]SystemDnsserverInput

func (SystemDnsserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDnsserver)(nil)).Elem()
}

func (i SystemDnsserverMap) ToSystemDnsserverMapOutput() SystemDnsserverMapOutput {
	return i.ToSystemDnsserverMapOutputWithContext(context.Background())
}

func (i SystemDnsserverMap) ToSystemDnsserverMapOutputWithContext(ctx context.Context) SystemDnsserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemDnsserverMapOutput)
}

type SystemDnsserverOutput struct{ *pulumi.OutputState }

func (SystemDnsserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDnsserver)(nil)).Elem()
}

func (o SystemDnsserverOutput) ToSystemDnsserverOutput() SystemDnsserverOutput {
	return o
}

func (o SystemDnsserverOutput) ToSystemDnsserverOutputWithContext(ctx context.Context) SystemDnsserverOutput {
	return o
}

// DNS filter profile.
func (o SystemDnsserverOutput) DnsfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDnsserver) pulumi.StringOutput { return v.DnsfilterProfile }).(pulumi.StringOutput)
}

// DNS over HTTPS. Valid values: `enable`, `disable`.
func (o SystemDnsserverOutput) Doh() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDnsserver) pulumi.StringOutput { return v.Doh }).(pulumi.StringOutput)
}

// DNS server mode. Valid values: `recursive`, `non-recursive`, `forward-only`.
func (o SystemDnsserverOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDnsserver) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// DNS server name.
func (o SystemDnsserverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemDnsserver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemDnsserverOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDnsserver) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemDnsserverArrayOutput struct{ *pulumi.OutputState }

func (SystemDnsserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemDnsserver)(nil)).Elem()
}

func (o SystemDnsserverArrayOutput) ToSystemDnsserverArrayOutput() SystemDnsserverArrayOutput {
	return o
}

func (o SystemDnsserverArrayOutput) ToSystemDnsserverArrayOutputWithContext(ctx context.Context) SystemDnsserverArrayOutput {
	return o
}

func (o SystemDnsserverArrayOutput) Index(i pulumi.IntInput) SystemDnsserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemDnsserver {
		return vs[0].([]*SystemDnsserver)[vs[1].(int)]
	}).(SystemDnsserverOutput)
}

type SystemDnsserverMapOutput struct{ *pulumi.OutputState }

func (SystemDnsserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemDnsserver)(nil)).Elem()
}

func (o SystemDnsserverMapOutput) ToSystemDnsserverMapOutput() SystemDnsserverMapOutput {
	return o
}

func (o SystemDnsserverMapOutput) ToSystemDnsserverMapOutputWithContext(ctx context.Context) SystemDnsserverMapOutput {
	return o
}

func (o SystemDnsserverMapOutput) MapIndex(k pulumi.StringInput) SystemDnsserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemDnsserver {
		return vs[0].(map[string]*SystemDnsserver)[vs[1].(string)]
	}).(SystemDnsserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsserverInput)(nil)).Elem(), &SystemDnsserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsserverArrayInput)(nil)).Elem(), SystemDnsserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemDnsserverMapInput)(nil)).Elem(), SystemDnsserverMap{})
	pulumi.RegisterOutputType(SystemDnsserverOutput{})
	pulumi.RegisterOutputType(SystemDnsserverArrayOutput{})
	pulumi.RegisterOutputType(SystemDnsserverMapOutput{})
}
