// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch SNMP v1/v2c communities globally. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// # SwitchController SnmpCommunity can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerSnmpcommunity:SwitchcontrollerSnmpcommunity labelname {{fosid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerSnmpcommunity:SwitchcontrollerSnmpcommunity labelname {{fosid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerSnmpcommunity struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events pulumi.StringOutput `pulumi:"events"`
	// SNMP community ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts SwitchcontrollerSnmpcommunityHostArrayOutput `pulumi:"hosts"`
	// SNMP community name.
	Name pulumi.StringOutput `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port pulumi.IntOutput `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status pulumi.StringOutput `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort pulumi.IntOutput `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus pulumi.StringOutput `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport pulumi.IntOutput `pulumi:"trapV1Lport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport pulumi.IntOutput `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status pulumi.StringOutput `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport pulumi.IntOutput `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport pulumi.IntOutput `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus pulumi.StringOutput `pulumi:"trapV2cStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchcontrollerSnmpcommunity registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerSnmpcommunity(ctx *pulumi.Context,
	name string, args *SwitchcontrollerSnmpcommunityArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerSnmpcommunity, error) {
	if args == nil {
		args = &SwitchcontrollerSnmpcommunityArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerSnmpcommunity
	err := ctx.RegisterResource("fortios:index/switchcontrollerSnmpcommunity:SwitchcontrollerSnmpcommunity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerSnmpcommunity gets an existing SwitchcontrollerSnmpcommunity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerSnmpcommunity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerSnmpcommunityState, opts ...pulumi.ResourceOption) (*SwitchcontrollerSnmpcommunity, error) {
	var resource SwitchcontrollerSnmpcommunity
	err := ctx.ReadResource("fortios:index/switchcontrollerSnmpcommunity:SwitchcontrollerSnmpcommunity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerSnmpcommunity resources.
type switchcontrollerSnmpcommunityState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events *string `pulumi:"events"`
	// SNMP community ID.
	Fosid *int `pulumi:"fosid"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts []SwitchcontrollerSnmpcommunityHost `pulumi:"hosts"`
	// SNMP community name.
	Name *string `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port *int `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status *string `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort *int `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus *string `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport *int `pulumi:"trapV1Lport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport *int `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status *string `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport *int `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport *int `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus *string `pulumi:"trapV2cStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchcontrollerSnmpcommunityState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events pulumi.StringPtrInput
	// SNMP community ID.
	Fosid pulumi.IntPtrInput
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts SwitchcontrollerSnmpcommunityHostArrayInput
	// SNMP community name.
	Name pulumi.StringPtrInput
	// SNMP v1 query port (default = 161).
	QueryV1Port pulumi.IntPtrInput
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status pulumi.StringPtrInput
	// SNMP v2c query port (default = 161).
	QueryV2cPort pulumi.IntPtrInput
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus pulumi.StringPtrInput
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport pulumi.IntPtrInput
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport pulumi.IntPtrInput
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status pulumi.StringPtrInput
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport pulumi.IntPtrInput
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport pulumi.IntPtrInput
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerSnmpcommunityState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerSnmpcommunityState)(nil)).Elem()
}

type switchcontrollerSnmpcommunityArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events *string `pulumi:"events"`
	// SNMP community ID.
	Fosid *int `pulumi:"fosid"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts []SwitchcontrollerSnmpcommunityHost `pulumi:"hosts"`
	// SNMP community name.
	Name *string `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port *int `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status *string `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort *int `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus *string `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status *string `pulumi:"status"`
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport *int `pulumi:"trapV1Lport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport *int `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status *string `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport *int `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport *int `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus *string `pulumi:"trapV2cStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchcontrollerSnmpcommunity resource.
type SwitchcontrollerSnmpcommunityArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
	Events pulumi.StringPtrInput
	// SNMP community ID.
	Fosid pulumi.IntPtrInput
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts SwitchcontrollerSnmpcommunityHostArrayInput
	// SNMP community name.
	Name pulumi.StringPtrInput
	// SNMP v1 query port (default = 161).
	QueryV1Port pulumi.IntPtrInput
	// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
	QueryV1Status pulumi.StringPtrInput
	// SNMP v2c query port (default = 161).
	QueryV2cPort pulumi.IntPtrInput
	// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
	QueryV2cStatus pulumi.StringPtrInput
	// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
	Status pulumi.StringPtrInput
	// SNMP v2c trap local port (default = 162).
	TrapV1Lport pulumi.IntPtrInput
	// SNMP v2c trap remote port (default = 162).
	TrapV1Rport pulumi.IntPtrInput
	// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
	TrapV1Status pulumi.StringPtrInput
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport pulumi.IntPtrInput
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport pulumi.IntPtrInput
	// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
	TrapV2cStatus pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerSnmpcommunityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerSnmpcommunityArgs)(nil)).Elem()
}

type SwitchcontrollerSnmpcommunityInput interface {
	pulumi.Input

	ToSwitchcontrollerSnmpcommunityOutput() SwitchcontrollerSnmpcommunityOutput
	ToSwitchcontrollerSnmpcommunityOutputWithContext(ctx context.Context) SwitchcontrollerSnmpcommunityOutput
}

func (*SwitchcontrollerSnmpcommunity) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerSnmpcommunity)(nil)).Elem()
}

func (i *SwitchcontrollerSnmpcommunity) ToSwitchcontrollerSnmpcommunityOutput() SwitchcontrollerSnmpcommunityOutput {
	return i.ToSwitchcontrollerSnmpcommunityOutputWithContext(context.Background())
}

func (i *SwitchcontrollerSnmpcommunity) ToSwitchcontrollerSnmpcommunityOutputWithContext(ctx context.Context) SwitchcontrollerSnmpcommunityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerSnmpcommunityOutput)
}

// SwitchcontrollerSnmpcommunityArrayInput is an input type that accepts SwitchcontrollerSnmpcommunityArray and SwitchcontrollerSnmpcommunityArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerSnmpcommunityArrayInput` via:
//
//	SwitchcontrollerSnmpcommunityArray{ SwitchcontrollerSnmpcommunityArgs{...} }
type SwitchcontrollerSnmpcommunityArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerSnmpcommunityArrayOutput() SwitchcontrollerSnmpcommunityArrayOutput
	ToSwitchcontrollerSnmpcommunityArrayOutputWithContext(context.Context) SwitchcontrollerSnmpcommunityArrayOutput
}

type SwitchcontrollerSnmpcommunityArray []SwitchcontrollerSnmpcommunityInput

func (SwitchcontrollerSnmpcommunityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerSnmpcommunity)(nil)).Elem()
}

func (i SwitchcontrollerSnmpcommunityArray) ToSwitchcontrollerSnmpcommunityArrayOutput() SwitchcontrollerSnmpcommunityArrayOutput {
	return i.ToSwitchcontrollerSnmpcommunityArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerSnmpcommunityArray) ToSwitchcontrollerSnmpcommunityArrayOutputWithContext(ctx context.Context) SwitchcontrollerSnmpcommunityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerSnmpcommunityArrayOutput)
}

// SwitchcontrollerSnmpcommunityMapInput is an input type that accepts SwitchcontrollerSnmpcommunityMap and SwitchcontrollerSnmpcommunityMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerSnmpcommunityMapInput` via:
//
//	SwitchcontrollerSnmpcommunityMap{ "key": SwitchcontrollerSnmpcommunityArgs{...} }
type SwitchcontrollerSnmpcommunityMapInput interface {
	pulumi.Input

	ToSwitchcontrollerSnmpcommunityMapOutput() SwitchcontrollerSnmpcommunityMapOutput
	ToSwitchcontrollerSnmpcommunityMapOutputWithContext(context.Context) SwitchcontrollerSnmpcommunityMapOutput
}

type SwitchcontrollerSnmpcommunityMap map[string]SwitchcontrollerSnmpcommunityInput

func (SwitchcontrollerSnmpcommunityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerSnmpcommunity)(nil)).Elem()
}

func (i SwitchcontrollerSnmpcommunityMap) ToSwitchcontrollerSnmpcommunityMapOutput() SwitchcontrollerSnmpcommunityMapOutput {
	return i.ToSwitchcontrollerSnmpcommunityMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerSnmpcommunityMap) ToSwitchcontrollerSnmpcommunityMapOutputWithContext(ctx context.Context) SwitchcontrollerSnmpcommunityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerSnmpcommunityMapOutput)
}

type SwitchcontrollerSnmpcommunityOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerSnmpcommunityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerSnmpcommunity)(nil)).Elem()
}

func (o SwitchcontrollerSnmpcommunityOutput) ToSwitchcontrollerSnmpcommunityOutput() SwitchcontrollerSnmpcommunityOutput {
	return o
}

func (o SwitchcontrollerSnmpcommunityOutput) ToSwitchcontrollerSnmpcommunityOutputWithContext(ctx context.Context) SwitchcontrollerSnmpcommunityOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SwitchcontrollerSnmpcommunityOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
func (o SwitchcontrollerSnmpcommunityOutput) Events() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.StringOutput { return v.Events }).(pulumi.StringOutput)
}

// SNMP community ID.
func (o SwitchcontrollerSnmpcommunityOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
func (o SwitchcontrollerSnmpcommunityOutput) Hosts() SwitchcontrollerSnmpcommunityHostArrayOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) SwitchcontrollerSnmpcommunityHostArrayOutput { return v.Hosts }).(SwitchcontrollerSnmpcommunityHostArrayOutput)
}

// SNMP community name.
func (o SwitchcontrollerSnmpcommunityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SNMP v1 query port (default = 161).
func (o SwitchcontrollerSnmpcommunityOutput) QueryV1Port() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.IntOutput { return v.QueryV1Port }).(pulumi.IntOutput)
}

// Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
func (o SwitchcontrollerSnmpcommunityOutput) QueryV1Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.StringOutput { return v.QueryV1Status }).(pulumi.StringOutput)
}

// SNMP v2c query port (default = 161).
func (o SwitchcontrollerSnmpcommunityOutput) QueryV2cPort() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.IntOutput { return v.QueryV2cPort }).(pulumi.IntOutput)
}

// Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
func (o SwitchcontrollerSnmpcommunityOutput) QueryV2cStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.StringOutput { return v.QueryV2cStatus }).(pulumi.StringOutput)
}

// Enable/disable this SNMP community. Valid values: `disable`, `enable`.
func (o SwitchcontrollerSnmpcommunityOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// SNMP v2c trap local port (default = 162).
func (o SwitchcontrollerSnmpcommunityOutput) TrapV1Lport() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.IntOutput { return v.TrapV1Lport }).(pulumi.IntOutput)
}

// SNMP v2c trap remote port (default = 162).
func (o SwitchcontrollerSnmpcommunityOutput) TrapV1Rport() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.IntOutput { return v.TrapV1Rport }).(pulumi.IntOutput)
}

// Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
func (o SwitchcontrollerSnmpcommunityOutput) TrapV1Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.StringOutput { return v.TrapV1Status }).(pulumi.StringOutput)
}

// SNMP v2c trap local port (default = 162).
func (o SwitchcontrollerSnmpcommunityOutput) TrapV2cLport() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.IntOutput { return v.TrapV2cLport }).(pulumi.IntOutput)
}

// SNMP v2c trap remote port (default = 162).
func (o SwitchcontrollerSnmpcommunityOutput) TrapV2cRport() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.IntOutput { return v.TrapV2cRport }).(pulumi.IntOutput)
}

// Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
func (o SwitchcontrollerSnmpcommunityOutput) TrapV2cStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.StringOutput { return v.TrapV2cStatus }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerSnmpcommunityOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerSnmpcommunity) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchcontrollerSnmpcommunityArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerSnmpcommunityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerSnmpcommunity)(nil)).Elem()
}

func (o SwitchcontrollerSnmpcommunityArrayOutput) ToSwitchcontrollerSnmpcommunityArrayOutput() SwitchcontrollerSnmpcommunityArrayOutput {
	return o
}

func (o SwitchcontrollerSnmpcommunityArrayOutput) ToSwitchcontrollerSnmpcommunityArrayOutputWithContext(ctx context.Context) SwitchcontrollerSnmpcommunityArrayOutput {
	return o
}

func (o SwitchcontrollerSnmpcommunityArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerSnmpcommunityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerSnmpcommunity {
		return vs[0].([]*SwitchcontrollerSnmpcommunity)[vs[1].(int)]
	}).(SwitchcontrollerSnmpcommunityOutput)
}

type SwitchcontrollerSnmpcommunityMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerSnmpcommunityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerSnmpcommunity)(nil)).Elem()
}

func (o SwitchcontrollerSnmpcommunityMapOutput) ToSwitchcontrollerSnmpcommunityMapOutput() SwitchcontrollerSnmpcommunityMapOutput {
	return o
}

func (o SwitchcontrollerSnmpcommunityMapOutput) ToSwitchcontrollerSnmpcommunityMapOutputWithContext(ctx context.Context) SwitchcontrollerSnmpcommunityMapOutput {
	return o
}

func (o SwitchcontrollerSnmpcommunityMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerSnmpcommunityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerSnmpcommunity {
		return vs[0].(map[string]*SwitchcontrollerSnmpcommunity)[vs[1].(string)]
	}).(SwitchcontrollerSnmpcommunityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerSnmpcommunityInput)(nil)).Elem(), &SwitchcontrollerSnmpcommunity{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerSnmpcommunityArrayInput)(nil)).Elem(), SwitchcontrollerSnmpcommunityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerSnmpcommunityMapInput)(nil)).Elem(), SwitchcontrollerSnmpcommunityMap{})
	pulumi.RegisterOutputType(SwitchcontrollerSnmpcommunityOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerSnmpcommunityArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerSnmpcommunityMapOutput{})
}
