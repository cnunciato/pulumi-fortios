// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure QoS map set.
//
// ## Import
//
// # WirelessControllerHotspot20 QosMap can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerhotspot20Qosmap:Wirelesscontrollerhotspot20Qosmap labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerhotspot20Qosmap:Wirelesscontrollerhotspot20Qosmap labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type Wirelesscontrollerhotspot20Qosmap struct {
	pulumi.CustomResourceState

	// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
	DscpExcepts Wirelesscontrollerhotspot20QosmapDscpExceptArrayOutput `pulumi:"dscpExcepts"`
	// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
	DscpRanges Wirelesscontrollerhotspot20QosmapDscpRangeArrayOutput `pulumi:"dscpRanges"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// QOS-MAP name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelesscontrollerhotspot20Qosmap registers a new resource with the given unique name, arguments, and options.
func NewWirelesscontrollerhotspot20Qosmap(ctx *pulumi.Context,
	name string, args *Wirelesscontrollerhotspot20QosmapArgs, opts ...pulumi.ResourceOption) (*Wirelesscontrollerhotspot20Qosmap, error) {
	if args == nil {
		args = &Wirelesscontrollerhotspot20QosmapArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Wirelesscontrollerhotspot20Qosmap
	err := ctx.RegisterResource("fortios:index/wirelesscontrollerhotspot20Qosmap:Wirelesscontrollerhotspot20Qosmap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelesscontrollerhotspot20Qosmap gets an existing Wirelesscontrollerhotspot20Qosmap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelesscontrollerhotspot20Qosmap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Wirelesscontrollerhotspot20QosmapState, opts ...pulumi.ResourceOption) (*Wirelesscontrollerhotspot20Qosmap, error) {
	var resource Wirelesscontrollerhotspot20Qosmap
	err := ctx.ReadResource("fortios:index/wirelesscontrollerhotspot20Qosmap:Wirelesscontrollerhotspot20Qosmap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Wirelesscontrollerhotspot20Qosmap resources.
type wirelesscontrollerhotspot20QosmapState struct {
	// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
	DscpExcepts []Wirelesscontrollerhotspot20QosmapDscpExcept `pulumi:"dscpExcepts"`
	// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
	DscpRanges []Wirelesscontrollerhotspot20QosmapDscpRange `pulumi:"dscpRanges"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// QOS-MAP name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Wirelesscontrollerhotspot20QosmapState struct {
	// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
	DscpExcepts Wirelesscontrollerhotspot20QosmapDscpExceptArrayInput
	// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
	DscpRanges Wirelesscontrollerhotspot20QosmapDscpRangeArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// QOS-MAP name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Wirelesscontrollerhotspot20QosmapState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerhotspot20QosmapState)(nil)).Elem()
}

type wirelesscontrollerhotspot20QosmapArgs struct {
	// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
	DscpExcepts []Wirelesscontrollerhotspot20QosmapDscpExcept `pulumi:"dscpExcepts"`
	// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
	DscpRanges []Wirelesscontrollerhotspot20QosmapDscpRange `pulumi:"dscpRanges"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// QOS-MAP name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Wirelesscontrollerhotspot20Qosmap resource.
type Wirelesscontrollerhotspot20QosmapArgs struct {
	// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
	DscpExcepts Wirelesscontrollerhotspot20QosmapDscpExceptArrayInput
	// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
	DscpRanges Wirelesscontrollerhotspot20QosmapDscpRangeArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// QOS-MAP name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Wirelesscontrollerhotspot20QosmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerhotspot20QosmapArgs)(nil)).Elem()
}

type Wirelesscontrollerhotspot20QosmapInput interface {
	pulumi.Input

	ToWirelesscontrollerhotspot20QosmapOutput() Wirelesscontrollerhotspot20QosmapOutput
	ToWirelesscontrollerhotspot20QosmapOutputWithContext(ctx context.Context) Wirelesscontrollerhotspot20QosmapOutput
}

func (*Wirelesscontrollerhotspot20Qosmap) ElementType() reflect.Type {
	return reflect.TypeOf((**Wirelesscontrollerhotspot20Qosmap)(nil)).Elem()
}

func (i *Wirelesscontrollerhotspot20Qosmap) ToWirelesscontrollerhotspot20QosmapOutput() Wirelesscontrollerhotspot20QosmapOutput {
	return i.ToWirelesscontrollerhotspot20QosmapOutputWithContext(context.Background())
}

func (i *Wirelesscontrollerhotspot20Qosmap) ToWirelesscontrollerhotspot20QosmapOutputWithContext(ctx context.Context) Wirelesscontrollerhotspot20QosmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Wirelesscontrollerhotspot20QosmapOutput)
}

// Wirelesscontrollerhotspot20QosmapArrayInput is an input type that accepts Wirelesscontrollerhotspot20QosmapArray and Wirelesscontrollerhotspot20QosmapArrayOutput values.
// You can construct a concrete instance of `Wirelesscontrollerhotspot20QosmapArrayInput` via:
//
//	Wirelesscontrollerhotspot20QosmapArray{ Wirelesscontrollerhotspot20QosmapArgs{...} }
type Wirelesscontrollerhotspot20QosmapArrayInput interface {
	pulumi.Input

	ToWirelesscontrollerhotspot20QosmapArrayOutput() Wirelesscontrollerhotspot20QosmapArrayOutput
	ToWirelesscontrollerhotspot20QosmapArrayOutputWithContext(context.Context) Wirelesscontrollerhotspot20QosmapArrayOutput
}

type Wirelesscontrollerhotspot20QosmapArray []Wirelesscontrollerhotspot20QosmapInput

func (Wirelesscontrollerhotspot20QosmapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wirelesscontrollerhotspot20Qosmap)(nil)).Elem()
}

func (i Wirelesscontrollerhotspot20QosmapArray) ToWirelesscontrollerhotspot20QosmapArrayOutput() Wirelesscontrollerhotspot20QosmapArrayOutput {
	return i.ToWirelesscontrollerhotspot20QosmapArrayOutputWithContext(context.Background())
}

func (i Wirelesscontrollerhotspot20QosmapArray) ToWirelesscontrollerhotspot20QosmapArrayOutputWithContext(ctx context.Context) Wirelesscontrollerhotspot20QosmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Wirelesscontrollerhotspot20QosmapArrayOutput)
}

// Wirelesscontrollerhotspot20QosmapMapInput is an input type that accepts Wirelesscontrollerhotspot20QosmapMap and Wirelesscontrollerhotspot20QosmapMapOutput values.
// You can construct a concrete instance of `Wirelesscontrollerhotspot20QosmapMapInput` via:
//
//	Wirelesscontrollerhotspot20QosmapMap{ "key": Wirelesscontrollerhotspot20QosmapArgs{...} }
type Wirelesscontrollerhotspot20QosmapMapInput interface {
	pulumi.Input

	ToWirelesscontrollerhotspot20QosmapMapOutput() Wirelesscontrollerhotspot20QosmapMapOutput
	ToWirelesscontrollerhotspot20QosmapMapOutputWithContext(context.Context) Wirelesscontrollerhotspot20QosmapMapOutput
}

type Wirelesscontrollerhotspot20QosmapMap map[string]Wirelesscontrollerhotspot20QosmapInput

func (Wirelesscontrollerhotspot20QosmapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wirelesscontrollerhotspot20Qosmap)(nil)).Elem()
}

func (i Wirelesscontrollerhotspot20QosmapMap) ToWirelesscontrollerhotspot20QosmapMapOutput() Wirelesscontrollerhotspot20QosmapMapOutput {
	return i.ToWirelesscontrollerhotspot20QosmapMapOutputWithContext(context.Background())
}

func (i Wirelesscontrollerhotspot20QosmapMap) ToWirelesscontrollerhotspot20QosmapMapOutputWithContext(ctx context.Context) Wirelesscontrollerhotspot20QosmapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Wirelesscontrollerhotspot20QosmapMapOutput)
}

type Wirelesscontrollerhotspot20QosmapOutput struct{ *pulumi.OutputState }

func (Wirelesscontrollerhotspot20QosmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Wirelesscontrollerhotspot20Qosmap)(nil)).Elem()
}

func (o Wirelesscontrollerhotspot20QosmapOutput) ToWirelesscontrollerhotspot20QosmapOutput() Wirelesscontrollerhotspot20QosmapOutput {
	return o
}

func (o Wirelesscontrollerhotspot20QosmapOutput) ToWirelesscontrollerhotspot20QosmapOutputWithContext(ctx context.Context) Wirelesscontrollerhotspot20QosmapOutput {
	return o
}

// Differentiated Services Code Point (DSCP) exceptions. The structure of `dscpExcept` block is documented below.
func (o Wirelesscontrollerhotspot20QosmapOutput) DscpExcepts() Wirelesscontrollerhotspot20QosmapDscpExceptArrayOutput {
	return o.ApplyT(func(v *Wirelesscontrollerhotspot20Qosmap) Wirelesscontrollerhotspot20QosmapDscpExceptArrayOutput {
		return v.DscpExcepts
	}).(Wirelesscontrollerhotspot20QosmapDscpExceptArrayOutput)
}

// Differentiated Services Code Point (DSCP) ranges. The structure of `dscpRange` block is documented below.
func (o Wirelesscontrollerhotspot20QosmapOutput) DscpRanges() Wirelesscontrollerhotspot20QosmapDscpRangeArrayOutput {
	return o.ApplyT(func(v *Wirelesscontrollerhotspot20Qosmap) Wirelesscontrollerhotspot20QosmapDscpRangeArrayOutput {
		return v.DscpRanges
	}).(Wirelesscontrollerhotspot20QosmapDscpRangeArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Wirelesscontrollerhotspot20QosmapOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wirelesscontrollerhotspot20Qosmap) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// QOS-MAP name.
func (o Wirelesscontrollerhotspot20QosmapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Wirelesscontrollerhotspot20Qosmap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Wirelesscontrollerhotspot20QosmapOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Wirelesscontrollerhotspot20Qosmap) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Wirelesscontrollerhotspot20QosmapArrayOutput struct{ *pulumi.OutputState }

func (Wirelesscontrollerhotspot20QosmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Wirelesscontrollerhotspot20Qosmap)(nil)).Elem()
}

func (o Wirelesscontrollerhotspot20QosmapArrayOutput) ToWirelesscontrollerhotspot20QosmapArrayOutput() Wirelesscontrollerhotspot20QosmapArrayOutput {
	return o
}

func (o Wirelesscontrollerhotspot20QosmapArrayOutput) ToWirelesscontrollerhotspot20QosmapArrayOutputWithContext(ctx context.Context) Wirelesscontrollerhotspot20QosmapArrayOutput {
	return o
}

func (o Wirelesscontrollerhotspot20QosmapArrayOutput) Index(i pulumi.IntInput) Wirelesscontrollerhotspot20QosmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Wirelesscontrollerhotspot20Qosmap {
		return vs[0].([]*Wirelesscontrollerhotspot20Qosmap)[vs[1].(int)]
	}).(Wirelesscontrollerhotspot20QosmapOutput)
}

type Wirelesscontrollerhotspot20QosmapMapOutput struct{ *pulumi.OutputState }

func (Wirelesscontrollerhotspot20QosmapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Wirelesscontrollerhotspot20Qosmap)(nil)).Elem()
}

func (o Wirelesscontrollerhotspot20QosmapMapOutput) ToWirelesscontrollerhotspot20QosmapMapOutput() Wirelesscontrollerhotspot20QosmapMapOutput {
	return o
}

func (o Wirelesscontrollerhotspot20QosmapMapOutput) ToWirelesscontrollerhotspot20QosmapMapOutputWithContext(ctx context.Context) Wirelesscontrollerhotspot20QosmapMapOutput {
	return o
}

func (o Wirelesscontrollerhotspot20QosmapMapOutput) MapIndex(k pulumi.StringInput) Wirelesscontrollerhotspot20QosmapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Wirelesscontrollerhotspot20Qosmap {
		return vs[0].(map[string]*Wirelesscontrollerhotspot20Qosmap)[vs[1].(string)]
	}).(Wirelesscontrollerhotspot20QosmapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Wirelesscontrollerhotspot20QosmapInput)(nil)).Elem(), &Wirelesscontrollerhotspot20Qosmap{})
	pulumi.RegisterInputType(reflect.TypeOf((*Wirelesscontrollerhotspot20QosmapArrayInput)(nil)).Elem(), Wirelesscontrollerhotspot20QosmapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Wirelesscontrollerhotspot20QosmapMapInput)(nil)).Elem(), Wirelesscontrollerhotspot20QosmapMap{})
	pulumi.RegisterOutputType(Wirelesscontrollerhotspot20QosmapOutput{})
	pulumi.RegisterOutputType(Wirelesscontrollerhotspot20QosmapArrayOutput{})
	pulumi.RegisterOutputType(Wirelesscontrollerhotspot20QosmapMapOutput{})
}
