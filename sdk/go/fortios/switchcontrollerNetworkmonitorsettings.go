// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure network monitor settings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSwitchcontrollerNetworkmonitorsettings(ctx, "trname", &fortios.SwitchcontrollerNetworkmonitorsettingsArgs{
//				NetworkMonitoring: pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # SwitchController NetworkMonitorSettings can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerNetworkmonitorsettings:SwitchcontrollerNetworkmonitorsettings labelname SwitchControllerNetworkMonitorSettings
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerNetworkmonitorsettings:SwitchcontrollerNetworkmonitorsettings labelname SwitchControllerNetworkMonitorSettings
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerNetworkmonitorsettings struct {
	pulumi.CustomResourceState

	// Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
	NetworkMonitoring pulumi.StringOutput `pulumi:"networkMonitoring"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchcontrollerNetworkmonitorsettings registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerNetworkmonitorsettings(ctx *pulumi.Context,
	name string, args *SwitchcontrollerNetworkmonitorsettingsArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerNetworkmonitorsettings, error) {
	if args == nil {
		args = &SwitchcontrollerNetworkmonitorsettingsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerNetworkmonitorsettings
	err := ctx.RegisterResource("fortios:index/switchcontrollerNetworkmonitorsettings:SwitchcontrollerNetworkmonitorsettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerNetworkmonitorsettings gets an existing SwitchcontrollerNetworkmonitorsettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerNetworkmonitorsettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerNetworkmonitorsettingsState, opts ...pulumi.ResourceOption) (*SwitchcontrollerNetworkmonitorsettings, error) {
	var resource SwitchcontrollerNetworkmonitorsettings
	err := ctx.ReadResource("fortios:index/switchcontrollerNetworkmonitorsettings:SwitchcontrollerNetworkmonitorsettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerNetworkmonitorsettings resources.
type switchcontrollerNetworkmonitorsettingsState struct {
	// Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
	NetworkMonitoring *string `pulumi:"networkMonitoring"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchcontrollerNetworkmonitorsettingsState struct {
	// Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
	NetworkMonitoring pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerNetworkmonitorsettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerNetworkmonitorsettingsState)(nil)).Elem()
}

type switchcontrollerNetworkmonitorsettingsArgs struct {
	// Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
	NetworkMonitoring *string `pulumi:"networkMonitoring"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchcontrollerNetworkmonitorsettings resource.
type SwitchcontrollerNetworkmonitorsettingsArgs struct {
	// Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
	NetworkMonitoring pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerNetworkmonitorsettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerNetworkmonitorsettingsArgs)(nil)).Elem()
}

type SwitchcontrollerNetworkmonitorsettingsInput interface {
	pulumi.Input

	ToSwitchcontrollerNetworkmonitorsettingsOutput() SwitchcontrollerNetworkmonitorsettingsOutput
	ToSwitchcontrollerNetworkmonitorsettingsOutputWithContext(ctx context.Context) SwitchcontrollerNetworkmonitorsettingsOutput
}

func (*SwitchcontrollerNetworkmonitorsettings) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerNetworkmonitorsettings)(nil)).Elem()
}

func (i *SwitchcontrollerNetworkmonitorsettings) ToSwitchcontrollerNetworkmonitorsettingsOutput() SwitchcontrollerNetworkmonitorsettingsOutput {
	return i.ToSwitchcontrollerNetworkmonitorsettingsOutputWithContext(context.Background())
}

func (i *SwitchcontrollerNetworkmonitorsettings) ToSwitchcontrollerNetworkmonitorsettingsOutputWithContext(ctx context.Context) SwitchcontrollerNetworkmonitorsettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerNetworkmonitorsettingsOutput)
}

// SwitchcontrollerNetworkmonitorsettingsArrayInput is an input type that accepts SwitchcontrollerNetworkmonitorsettingsArray and SwitchcontrollerNetworkmonitorsettingsArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerNetworkmonitorsettingsArrayInput` via:
//
//	SwitchcontrollerNetworkmonitorsettingsArray{ SwitchcontrollerNetworkmonitorsettingsArgs{...} }
type SwitchcontrollerNetworkmonitorsettingsArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerNetworkmonitorsettingsArrayOutput() SwitchcontrollerNetworkmonitorsettingsArrayOutput
	ToSwitchcontrollerNetworkmonitorsettingsArrayOutputWithContext(context.Context) SwitchcontrollerNetworkmonitorsettingsArrayOutput
}

type SwitchcontrollerNetworkmonitorsettingsArray []SwitchcontrollerNetworkmonitorsettingsInput

func (SwitchcontrollerNetworkmonitorsettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerNetworkmonitorsettings)(nil)).Elem()
}

func (i SwitchcontrollerNetworkmonitorsettingsArray) ToSwitchcontrollerNetworkmonitorsettingsArrayOutput() SwitchcontrollerNetworkmonitorsettingsArrayOutput {
	return i.ToSwitchcontrollerNetworkmonitorsettingsArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerNetworkmonitorsettingsArray) ToSwitchcontrollerNetworkmonitorsettingsArrayOutputWithContext(ctx context.Context) SwitchcontrollerNetworkmonitorsettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerNetworkmonitorsettingsArrayOutput)
}

// SwitchcontrollerNetworkmonitorsettingsMapInput is an input type that accepts SwitchcontrollerNetworkmonitorsettingsMap and SwitchcontrollerNetworkmonitorsettingsMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerNetworkmonitorsettingsMapInput` via:
//
//	SwitchcontrollerNetworkmonitorsettingsMap{ "key": SwitchcontrollerNetworkmonitorsettingsArgs{...} }
type SwitchcontrollerNetworkmonitorsettingsMapInput interface {
	pulumi.Input

	ToSwitchcontrollerNetworkmonitorsettingsMapOutput() SwitchcontrollerNetworkmonitorsettingsMapOutput
	ToSwitchcontrollerNetworkmonitorsettingsMapOutputWithContext(context.Context) SwitchcontrollerNetworkmonitorsettingsMapOutput
}

type SwitchcontrollerNetworkmonitorsettingsMap map[string]SwitchcontrollerNetworkmonitorsettingsInput

func (SwitchcontrollerNetworkmonitorsettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerNetworkmonitorsettings)(nil)).Elem()
}

func (i SwitchcontrollerNetworkmonitorsettingsMap) ToSwitchcontrollerNetworkmonitorsettingsMapOutput() SwitchcontrollerNetworkmonitorsettingsMapOutput {
	return i.ToSwitchcontrollerNetworkmonitorsettingsMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerNetworkmonitorsettingsMap) ToSwitchcontrollerNetworkmonitorsettingsMapOutputWithContext(ctx context.Context) SwitchcontrollerNetworkmonitorsettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerNetworkmonitorsettingsMapOutput)
}

type SwitchcontrollerNetworkmonitorsettingsOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerNetworkmonitorsettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerNetworkmonitorsettings)(nil)).Elem()
}

func (o SwitchcontrollerNetworkmonitorsettingsOutput) ToSwitchcontrollerNetworkmonitorsettingsOutput() SwitchcontrollerNetworkmonitorsettingsOutput {
	return o
}

func (o SwitchcontrollerNetworkmonitorsettingsOutput) ToSwitchcontrollerNetworkmonitorsettingsOutputWithContext(ctx context.Context) SwitchcontrollerNetworkmonitorsettingsOutput {
	return o
}

// Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
func (o SwitchcontrollerNetworkmonitorsettingsOutput) NetworkMonitoring() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerNetworkmonitorsettings) pulumi.StringOutput { return v.NetworkMonitoring }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerNetworkmonitorsettingsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerNetworkmonitorsettings) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchcontrollerNetworkmonitorsettingsArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerNetworkmonitorsettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerNetworkmonitorsettings)(nil)).Elem()
}

func (o SwitchcontrollerNetworkmonitorsettingsArrayOutput) ToSwitchcontrollerNetworkmonitorsettingsArrayOutput() SwitchcontrollerNetworkmonitorsettingsArrayOutput {
	return o
}

func (o SwitchcontrollerNetworkmonitorsettingsArrayOutput) ToSwitchcontrollerNetworkmonitorsettingsArrayOutputWithContext(ctx context.Context) SwitchcontrollerNetworkmonitorsettingsArrayOutput {
	return o
}

func (o SwitchcontrollerNetworkmonitorsettingsArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerNetworkmonitorsettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerNetworkmonitorsettings {
		return vs[0].([]*SwitchcontrollerNetworkmonitorsettings)[vs[1].(int)]
	}).(SwitchcontrollerNetworkmonitorsettingsOutput)
}

type SwitchcontrollerNetworkmonitorsettingsMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerNetworkmonitorsettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerNetworkmonitorsettings)(nil)).Elem()
}

func (o SwitchcontrollerNetworkmonitorsettingsMapOutput) ToSwitchcontrollerNetworkmonitorsettingsMapOutput() SwitchcontrollerNetworkmonitorsettingsMapOutput {
	return o
}

func (o SwitchcontrollerNetworkmonitorsettingsMapOutput) ToSwitchcontrollerNetworkmonitorsettingsMapOutputWithContext(ctx context.Context) SwitchcontrollerNetworkmonitorsettingsMapOutput {
	return o
}

func (o SwitchcontrollerNetworkmonitorsettingsMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerNetworkmonitorsettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerNetworkmonitorsettings {
		return vs[0].(map[string]*SwitchcontrollerNetworkmonitorsettings)[vs[1].(string)]
	}).(SwitchcontrollerNetworkmonitorsettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerNetworkmonitorsettingsInput)(nil)).Elem(), &SwitchcontrollerNetworkmonitorsettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerNetworkmonitorsettingsArrayInput)(nil)).Elem(), SwitchcontrollerNetworkmonitorsettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerNetworkmonitorsettingsMapInput)(nil)).Elem(), SwitchcontrollerNetworkmonitorsettingsMap{})
	pulumi.RegisterOutputType(SwitchcontrollerNetworkmonitorsettingsOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerNetworkmonitorsettingsArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerNetworkmonitorsettingsMapOutput{})
}
