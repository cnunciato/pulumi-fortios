// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure multicast NAT policies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFirewallMulticastpolicy(ctx, "trname", &fortios.FirewallMulticastpolicyArgs{
//				Action: pulumi.String("accept"),
//				Dnat:   pulumi.String("0.0.0.0"),
//				Dstaddrs: fortios.FirewallMulticastpolicyDstaddrArray{
//					&fortios.FirewallMulticastpolicyDstaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Dstintf:    pulumi.String("port4"),
//				EndPort:    pulumi.Int(65535),
//				Fosid:      pulumi.Int(1),
//				Logtraffic: pulumi.String("enable"),
//				Protocol:   pulumi.Int(0),
//				Snat:       pulumi.String("disable"),
//				SnatIp:     pulumi.String("0.0.0.0"),
//				Srcaddrs: fortios.FirewallMulticastpolicySrcaddrArray{
//					&fortios.FirewallMulticastpolicySrcaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Srcintf:   pulumi.String("port3"),
//				StartPort: pulumi.Int(1),
//				Status:    pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Firewall MulticastPolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/firewallMulticastpolicy:FirewallMulticastpolicy labelname {{fosid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/firewallMulticastpolicy:FirewallMulticastpolicy labelname {{fosid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FirewallMulticastpolicy struct {
	pulumi.CustomResourceState

	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// IPv4 DNAT address used for multicast destination addresses.
	Dnat pulumi.StringOutput `pulumi:"dnat"`
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallMulticastpolicyDstaddrArrayOutput `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf pulumi.StringOutput `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	EndPort pulumi.IntOutput `pulumi:"endPort"`
	// Policy ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol pulumi.IntOutput `pulumi:"protocol"`
	// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
	Snat pulumi.StringOutput `pulumi:"snat"`
	// IPv4 address to be used as the source address for NATed traffic.
	SnatIp pulumi.StringOutput `pulumi:"snatIp"`
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallMulticastpolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf pulumi.StringOutput `pulumi:"srcintf"`
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort pulumi.IntOutput `pulumi:"startPort"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Traffic shaper to apply to traffic forwarded by the multicast policy.
	TrafficShaper pulumi.StringOutput `pulumi:"trafficShaper"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallMulticastpolicy registers a new resource with the given unique name, arguments, and options.
func NewFirewallMulticastpolicy(ctx *pulumi.Context,
	name string, args *FirewallMulticastpolicyArgs, opts ...pulumi.ResourceOption) (*FirewallMulticastpolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Dstintf == nil {
		return nil, errors.New("invalid value for required argument 'Dstintf'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	if args.Srcintf == nil {
		return nil, errors.New("invalid value for required argument 'Srcintf'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallMulticastpolicy
	err := ctx.RegisterResource("fortios:index/firewallMulticastpolicy:FirewallMulticastpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallMulticastpolicy gets an existing FirewallMulticastpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallMulticastpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallMulticastpolicyState, opts ...pulumi.ResourceOption) (*FirewallMulticastpolicy, error) {
	var resource FirewallMulticastpolicy
	err := ctx.ReadResource("fortios:index/firewallMulticastpolicy:FirewallMulticastpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallMulticastpolicy resources.
type firewallMulticastpolicyState struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// IPv4 DNAT address used for multicast destination addresses.
	Dnat *string `pulumi:"dnat"`
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs []FirewallMulticastpolicyDstaddr `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf *string `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	EndPort *int `pulumi:"endPort"`
	// Policy ID.
	Fosid *int `pulumi:"fosid"`
	// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol *int `pulumi:"protocol"`
	// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
	Snat *string `pulumi:"snat"`
	// IPv4 address to be used as the source address for NATed traffic.
	SnatIp *string `pulumi:"snatIp"`
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallMulticastpolicySrcaddr `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf *string `pulumi:"srcintf"`
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort *int `pulumi:"startPort"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Traffic shaper to apply to traffic forwarded by the multicast policy.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallMulticastpolicyState struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// IPv4 DNAT address used for multicast destination addresses.
	Dnat pulumi.StringPtrInput
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallMulticastpolicyDstaddrArrayInput
	// Destination interface name.
	Dstintf pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	EndPort pulumi.IntPtrInput
	// Policy ID.
	Fosid pulumi.IntPtrInput
	// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol pulumi.IntPtrInput
	// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
	Snat pulumi.StringPtrInput
	// IPv4 address to be used as the source address for NATed traffic.
	SnatIp pulumi.StringPtrInput
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallMulticastpolicySrcaddrArrayInput
	// Source interface name.
	Srcintf pulumi.StringPtrInput
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort pulumi.IntPtrInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Traffic shaper to apply to traffic forwarded by the multicast policy.
	TrafficShaper pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallMulticastpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallMulticastpolicyState)(nil)).Elem()
}

type firewallMulticastpolicyArgs struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// IPv4 DNAT address used for multicast destination addresses.
	Dnat *string `pulumi:"dnat"`
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs []FirewallMulticastpolicyDstaddr `pulumi:"dstaddrs"`
	// Destination interface name.
	Dstintf string `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	EndPort *int `pulumi:"endPort"`
	// Policy ID.
	Fosid *int `pulumi:"fosid"`
	// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol *int `pulumi:"protocol"`
	// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
	Snat *string `pulumi:"snat"`
	// IPv4 address to be used as the source address for NATed traffic.
	SnatIp *string `pulumi:"snatIp"`
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallMulticastpolicySrcaddr `pulumi:"srcaddrs"`
	// Source interface name.
	Srcintf string `pulumi:"srcintf"`
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort *int `pulumi:"startPort"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Traffic shaper to apply to traffic forwarded by the multicast policy.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallMulticastpolicy resource.
type FirewallMulticastpolicyArgs struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// IPv4 DNAT address used for multicast destination addresses.
	Dnat pulumi.StringPtrInput
	// Destination address objects. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallMulticastpolicyDstaddrArrayInput
	// Destination interface name.
	Dstintf pulumi.StringInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	EndPort pulumi.IntPtrInput
	// Policy ID.
	Fosid pulumi.IntPtrInput
	// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol pulumi.IntPtrInput
	// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
	Snat pulumi.StringPtrInput
	// IPv4 address to be used as the source address for NATed traffic.
	SnatIp pulumi.StringPtrInput
	// Source address objects. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallMulticastpolicySrcaddrArrayInput
	// Source interface name.
	Srcintf pulumi.StringInput
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort pulumi.IntPtrInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Traffic shaper to apply to traffic forwarded by the multicast policy.
	TrafficShaper pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallMulticastpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallMulticastpolicyArgs)(nil)).Elem()
}

type FirewallMulticastpolicyInput interface {
	pulumi.Input

	ToFirewallMulticastpolicyOutput() FirewallMulticastpolicyOutput
	ToFirewallMulticastpolicyOutputWithContext(ctx context.Context) FirewallMulticastpolicyOutput
}

func (*FirewallMulticastpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallMulticastpolicy)(nil)).Elem()
}

func (i *FirewallMulticastpolicy) ToFirewallMulticastpolicyOutput() FirewallMulticastpolicyOutput {
	return i.ToFirewallMulticastpolicyOutputWithContext(context.Background())
}

func (i *FirewallMulticastpolicy) ToFirewallMulticastpolicyOutputWithContext(ctx context.Context) FirewallMulticastpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallMulticastpolicyOutput)
}

// FirewallMulticastpolicyArrayInput is an input type that accepts FirewallMulticastpolicyArray and FirewallMulticastpolicyArrayOutput values.
// You can construct a concrete instance of `FirewallMulticastpolicyArrayInput` via:
//
//	FirewallMulticastpolicyArray{ FirewallMulticastpolicyArgs{...} }
type FirewallMulticastpolicyArrayInput interface {
	pulumi.Input

	ToFirewallMulticastpolicyArrayOutput() FirewallMulticastpolicyArrayOutput
	ToFirewallMulticastpolicyArrayOutputWithContext(context.Context) FirewallMulticastpolicyArrayOutput
}

type FirewallMulticastpolicyArray []FirewallMulticastpolicyInput

func (FirewallMulticastpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallMulticastpolicy)(nil)).Elem()
}

func (i FirewallMulticastpolicyArray) ToFirewallMulticastpolicyArrayOutput() FirewallMulticastpolicyArrayOutput {
	return i.ToFirewallMulticastpolicyArrayOutputWithContext(context.Background())
}

func (i FirewallMulticastpolicyArray) ToFirewallMulticastpolicyArrayOutputWithContext(ctx context.Context) FirewallMulticastpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallMulticastpolicyArrayOutput)
}

// FirewallMulticastpolicyMapInput is an input type that accepts FirewallMulticastpolicyMap and FirewallMulticastpolicyMapOutput values.
// You can construct a concrete instance of `FirewallMulticastpolicyMapInput` via:
//
//	FirewallMulticastpolicyMap{ "key": FirewallMulticastpolicyArgs{...} }
type FirewallMulticastpolicyMapInput interface {
	pulumi.Input

	ToFirewallMulticastpolicyMapOutput() FirewallMulticastpolicyMapOutput
	ToFirewallMulticastpolicyMapOutputWithContext(context.Context) FirewallMulticastpolicyMapOutput
}

type FirewallMulticastpolicyMap map[string]FirewallMulticastpolicyInput

func (FirewallMulticastpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallMulticastpolicy)(nil)).Elem()
}

func (i FirewallMulticastpolicyMap) ToFirewallMulticastpolicyMapOutput() FirewallMulticastpolicyMapOutput {
	return i.ToFirewallMulticastpolicyMapOutputWithContext(context.Background())
}

func (i FirewallMulticastpolicyMap) ToFirewallMulticastpolicyMapOutputWithContext(ctx context.Context) FirewallMulticastpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallMulticastpolicyMapOutput)
}

type FirewallMulticastpolicyOutput struct{ *pulumi.OutputState }

func (FirewallMulticastpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallMulticastpolicy)(nil)).Elem()
}

func (o FirewallMulticastpolicyOutput) ToFirewallMulticastpolicyOutput() FirewallMulticastpolicyOutput {
	return o
}

func (o FirewallMulticastpolicyOutput) ToFirewallMulticastpolicyOutputWithContext(ctx context.Context) FirewallMulticastpolicyOutput {
	return o
}

// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
func (o FirewallMulticastpolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
func (o FirewallMulticastpolicyOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Comment.
func (o FirewallMulticastpolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// IPv4 DNAT address used for multicast destination addresses.
func (o FirewallMulticastpolicyOutput) Dnat() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.Dnat }).(pulumi.StringOutput)
}

// Destination address objects. The structure of `dstaddr` block is documented below.
func (o FirewallMulticastpolicyOutput) Dstaddrs() FirewallMulticastpolicyDstaddrArrayOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) FirewallMulticastpolicyDstaddrArrayOutput { return v.Dstaddrs }).(FirewallMulticastpolicyDstaddrArrayOutput)
}

// Destination interface name.
func (o FirewallMulticastpolicyOutput) Dstintf() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.Dstintf }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o FirewallMulticastpolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
func (o FirewallMulticastpolicyOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.IntOutput { return v.EndPort }).(pulumi.IntOutput)
}

// Policy ID.
func (o FirewallMulticastpolicyOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
func (o FirewallMulticastpolicyOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Policy name.
func (o FirewallMulticastpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
func (o FirewallMulticastpolicyOutput) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.IntOutput { return v.Protocol }).(pulumi.IntOutput)
}

// Enable/disable substitution of the outgoing interface IP address for the original source IP address (called source NAT or SNAT). Valid values: `enable`, `disable`.
func (o FirewallMulticastpolicyOutput) Snat() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.Snat }).(pulumi.StringOutput)
}

// IPv4 address to be used as the source address for NATed traffic.
func (o FirewallMulticastpolicyOutput) SnatIp() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.SnatIp }).(pulumi.StringOutput)
}

// Source address objects. The structure of `srcaddr` block is documented below.
func (o FirewallMulticastpolicyOutput) Srcaddrs() FirewallMulticastpolicySrcaddrArrayOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) FirewallMulticastpolicySrcaddrArrayOutput { return v.Srcaddrs }).(FirewallMulticastpolicySrcaddrArrayOutput)
}

// Source interface name.
func (o FirewallMulticastpolicyOutput) Srcintf() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.Srcintf }).(pulumi.StringOutput)
}

// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
func (o FirewallMulticastpolicyOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.IntOutput { return v.StartPort }).(pulumi.IntOutput)
}

// Enable/disable this policy. Valid values: `enable`, `disable`.
func (o FirewallMulticastpolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Traffic shaper to apply to traffic forwarded by the multicast policy.
func (o FirewallMulticastpolicyOutput) TrafficShaper() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.TrafficShaper }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o FirewallMulticastpolicyOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FirewallMulticastpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallMulticastpolicyArrayOutput struct{ *pulumi.OutputState }

func (FirewallMulticastpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallMulticastpolicy)(nil)).Elem()
}

func (o FirewallMulticastpolicyArrayOutput) ToFirewallMulticastpolicyArrayOutput() FirewallMulticastpolicyArrayOutput {
	return o
}

func (o FirewallMulticastpolicyArrayOutput) ToFirewallMulticastpolicyArrayOutputWithContext(ctx context.Context) FirewallMulticastpolicyArrayOutput {
	return o
}

func (o FirewallMulticastpolicyArrayOutput) Index(i pulumi.IntInput) FirewallMulticastpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallMulticastpolicy {
		return vs[0].([]*FirewallMulticastpolicy)[vs[1].(int)]
	}).(FirewallMulticastpolicyOutput)
}

type FirewallMulticastpolicyMapOutput struct{ *pulumi.OutputState }

func (FirewallMulticastpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallMulticastpolicy)(nil)).Elem()
}

func (o FirewallMulticastpolicyMapOutput) ToFirewallMulticastpolicyMapOutput() FirewallMulticastpolicyMapOutput {
	return o
}

func (o FirewallMulticastpolicyMapOutput) ToFirewallMulticastpolicyMapOutputWithContext(ctx context.Context) FirewallMulticastpolicyMapOutput {
	return o
}

func (o FirewallMulticastpolicyMapOutput) MapIndex(k pulumi.StringInput) FirewallMulticastpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallMulticastpolicy {
		return vs[0].(map[string]*FirewallMulticastpolicy)[vs[1].(string)]
	}).(FirewallMulticastpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallMulticastpolicyInput)(nil)).Elem(), &FirewallMulticastpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallMulticastpolicyArrayInput)(nil)).Elem(), FirewallMulticastpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallMulticastpolicyMapInput)(nil)).Elem(), FirewallMulticastpolicyMap{})
	pulumi.RegisterOutputType(FirewallMulticastpolicyOutput{})
	pulumi.RegisterOutputType(FirewallMulticastpolicyArrayOutput{})
	pulumi.RegisterOutputType(FirewallMulticastpolicyMapOutput{})
}
