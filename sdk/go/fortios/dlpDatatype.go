// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure predefined data type used by DLP blocking. Applies to FortiOS Version `>= 7.2.0`.
//
// ## Import
//
// # Dlp DataType can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/dlpDatatype:DlpDatatype labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/dlpDatatype:DlpDatatype labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type DlpDatatype struct {
	pulumi.CustomResourceState

	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Number of characters to obtain in advance for verification (1 - 255, default = 1).
	LookAhead pulumi.IntOutput `pulumi:"lookAhead"`
	// Number of characters required to save for verification (1 - 255, default = 1).
	LookBack pulumi.IntOutput `pulumi:"lookBack"`
	// Name of table containing the data type.
	Name pulumi.StringOutput `pulumi:"name"`
	// Regular expression pattern string without look around.
	Pattern pulumi.StringOutput `pulumi:"pattern"`
	// Template to transform user input to a pattern using capture group from 'pattern'.
	Transform pulumi.StringOutput `pulumi:"transform"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Regular expression pattern string used to verify the data type.
	Verify pulumi.StringOutput `pulumi:"verify"`
	// Enable/disable verification for transformed pattern. Valid values: `enable`, `disable`.
	VerifyTransformedPattern pulumi.StringOutput `pulumi:"verifyTransformedPattern"`
}

// NewDlpDatatype registers a new resource with the given unique name, arguments, and options.
func NewDlpDatatype(ctx *pulumi.Context,
	name string, args *DlpDatatypeArgs, opts ...pulumi.ResourceOption) (*DlpDatatype, error) {
	if args == nil {
		args = &DlpDatatypeArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource DlpDatatype
	err := ctx.RegisterResource("fortios:index/dlpDatatype:DlpDatatype", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDlpDatatype gets an existing DlpDatatype resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDlpDatatype(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DlpDatatypeState, opts ...pulumi.ResourceOption) (*DlpDatatype, error) {
	var resource DlpDatatype
	err := ctx.ReadResource("fortios:index/dlpDatatype:DlpDatatype", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DlpDatatype resources.
type dlpDatatypeState struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Number of characters to obtain in advance for verification (1 - 255, default = 1).
	LookAhead *int `pulumi:"lookAhead"`
	// Number of characters required to save for verification (1 - 255, default = 1).
	LookBack *int `pulumi:"lookBack"`
	// Name of table containing the data type.
	Name *string `pulumi:"name"`
	// Regular expression pattern string without look around.
	Pattern *string `pulumi:"pattern"`
	// Template to transform user input to a pattern using capture group from 'pattern'.
	Transform *string `pulumi:"transform"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Regular expression pattern string used to verify the data type.
	Verify *string `pulumi:"verify"`
	// Enable/disable verification for transformed pattern. Valid values: `enable`, `disable`.
	VerifyTransformedPattern *string `pulumi:"verifyTransformedPattern"`
}

type DlpDatatypeState struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Number of characters to obtain in advance for verification (1 - 255, default = 1).
	LookAhead pulumi.IntPtrInput
	// Number of characters required to save for verification (1 - 255, default = 1).
	LookBack pulumi.IntPtrInput
	// Name of table containing the data type.
	Name pulumi.StringPtrInput
	// Regular expression pattern string without look around.
	Pattern pulumi.StringPtrInput
	// Template to transform user input to a pattern using capture group from 'pattern'.
	Transform pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Regular expression pattern string used to verify the data type.
	Verify pulumi.StringPtrInput
	// Enable/disable verification for transformed pattern. Valid values: `enable`, `disable`.
	VerifyTransformedPattern pulumi.StringPtrInput
}

func (DlpDatatypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpDatatypeState)(nil)).Elem()
}

type dlpDatatypeArgs struct {
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Number of characters to obtain in advance for verification (1 - 255, default = 1).
	LookAhead *int `pulumi:"lookAhead"`
	// Number of characters required to save for verification (1 - 255, default = 1).
	LookBack *int `pulumi:"lookBack"`
	// Name of table containing the data type.
	Name *string `pulumi:"name"`
	// Regular expression pattern string without look around.
	Pattern *string `pulumi:"pattern"`
	// Template to transform user input to a pattern using capture group from 'pattern'.
	Transform *string `pulumi:"transform"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Regular expression pattern string used to verify the data type.
	Verify *string `pulumi:"verify"`
	// Enable/disable verification for transformed pattern. Valid values: `enable`, `disable`.
	VerifyTransformedPattern *string `pulumi:"verifyTransformedPattern"`
}

// The set of arguments for constructing a DlpDatatype resource.
type DlpDatatypeArgs struct {
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Number of characters to obtain in advance for verification (1 - 255, default = 1).
	LookAhead pulumi.IntPtrInput
	// Number of characters required to save for verification (1 - 255, default = 1).
	LookBack pulumi.IntPtrInput
	// Name of table containing the data type.
	Name pulumi.StringPtrInput
	// Regular expression pattern string without look around.
	Pattern pulumi.StringPtrInput
	// Template to transform user input to a pattern using capture group from 'pattern'.
	Transform pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Regular expression pattern string used to verify the data type.
	Verify pulumi.StringPtrInput
	// Enable/disable verification for transformed pattern. Valid values: `enable`, `disable`.
	VerifyTransformedPattern pulumi.StringPtrInput
}

func (DlpDatatypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpDatatypeArgs)(nil)).Elem()
}

type DlpDatatypeInput interface {
	pulumi.Input

	ToDlpDatatypeOutput() DlpDatatypeOutput
	ToDlpDatatypeOutputWithContext(ctx context.Context) DlpDatatypeOutput
}

func (*DlpDatatype) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpDatatype)(nil)).Elem()
}

func (i *DlpDatatype) ToDlpDatatypeOutput() DlpDatatypeOutput {
	return i.ToDlpDatatypeOutputWithContext(context.Background())
}

func (i *DlpDatatype) ToDlpDatatypeOutputWithContext(ctx context.Context) DlpDatatypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpDatatypeOutput)
}

// DlpDatatypeArrayInput is an input type that accepts DlpDatatypeArray and DlpDatatypeArrayOutput values.
// You can construct a concrete instance of `DlpDatatypeArrayInput` via:
//
//	DlpDatatypeArray{ DlpDatatypeArgs{...} }
type DlpDatatypeArrayInput interface {
	pulumi.Input

	ToDlpDatatypeArrayOutput() DlpDatatypeArrayOutput
	ToDlpDatatypeArrayOutputWithContext(context.Context) DlpDatatypeArrayOutput
}

type DlpDatatypeArray []DlpDatatypeInput

func (DlpDatatypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpDatatype)(nil)).Elem()
}

func (i DlpDatatypeArray) ToDlpDatatypeArrayOutput() DlpDatatypeArrayOutput {
	return i.ToDlpDatatypeArrayOutputWithContext(context.Background())
}

func (i DlpDatatypeArray) ToDlpDatatypeArrayOutputWithContext(ctx context.Context) DlpDatatypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpDatatypeArrayOutput)
}

// DlpDatatypeMapInput is an input type that accepts DlpDatatypeMap and DlpDatatypeMapOutput values.
// You can construct a concrete instance of `DlpDatatypeMapInput` via:
//
//	DlpDatatypeMap{ "key": DlpDatatypeArgs{...} }
type DlpDatatypeMapInput interface {
	pulumi.Input

	ToDlpDatatypeMapOutput() DlpDatatypeMapOutput
	ToDlpDatatypeMapOutputWithContext(context.Context) DlpDatatypeMapOutput
}

type DlpDatatypeMap map[string]DlpDatatypeInput

func (DlpDatatypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpDatatype)(nil)).Elem()
}

func (i DlpDatatypeMap) ToDlpDatatypeMapOutput() DlpDatatypeMapOutput {
	return i.ToDlpDatatypeMapOutputWithContext(context.Background())
}

func (i DlpDatatypeMap) ToDlpDatatypeMapOutputWithContext(ctx context.Context) DlpDatatypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DlpDatatypeMapOutput)
}

type DlpDatatypeOutput struct{ *pulumi.OutputState }

func (DlpDatatypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DlpDatatype)(nil)).Elem()
}

func (o DlpDatatypeOutput) ToDlpDatatypeOutput() DlpDatatypeOutput {
	return o
}

func (o DlpDatatypeOutput) ToDlpDatatypeOutputWithContext(ctx context.Context) DlpDatatypeOutput {
	return o
}

// Optional comments.
func (o DlpDatatypeOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpDatatype) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Number of characters to obtain in advance for verification (1 - 255, default = 1).
func (o DlpDatatypeOutput) LookAhead() pulumi.IntOutput {
	return o.ApplyT(func(v *DlpDatatype) pulumi.IntOutput { return v.LookAhead }).(pulumi.IntOutput)
}

// Number of characters required to save for verification (1 - 255, default = 1).
func (o DlpDatatypeOutput) LookBack() pulumi.IntOutput {
	return o.ApplyT(func(v *DlpDatatype) pulumi.IntOutput { return v.LookBack }).(pulumi.IntOutput)
}

// Name of table containing the data type.
func (o DlpDatatypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDatatype) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Regular expression pattern string without look around.
func (o DlpDatatypeOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDatatype) pulumi.StringOutput { return v.Pattern }).(pulumi.StringOutput)
}

// Template to transform user input to a pattern using capture group from 'pattern'.
func (o DlpDatatypeOutput) Transform() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDatatype) pulumi.StringOutput { return v.Transform }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o DlpDatatypeOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DlpDatatype) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Regular expression pattern string used to verify the data type.
func (o DlpDatatypeOutput) Verify() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDatatype) pulumi.StringOutput { return v.Verify }).(pulumi.StringOutput)
}

// Enable/disable verification for transformed pattern. Valid values: `enable`, `disable`.
func (o DlpDatatypeOutput) VerifyTransformedPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *DlpDatatype) pulumi.StringOutput { return v.VerifyTransformedPattern }).(pulumi.StringOutput)
}

type DlpDatatypeArrayOutput struct{ *pulumi.OutputState }

func (DlpDatatypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DlpDatatype)(nil)).Elem()
}

func (o DlpDatatypeArrayOutput) ToDlpDatatypeArrayOutput() DlpDatatypeArrayOutput {
	return o
}

func (o DlpDatatypeArrayOutput) ToDlpDatatypeArrayOutputWithContext(ctx context.Context) DlpDatatypeArrayOutput {
	return o
}

func (o DlpDatatypeArrayOutput) Index(i pulumi.IntInput) DlpDatatypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DlpDatatype {
		return vs[0].([]*DlpDatatype)[vs[1].(int)]
	}).(DlpDatatypeOutput)
}

type DlpDatatypeMapOutput struct{ *pulumi.OutputState }

func (DlpDatatypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DlpDatatype)(nil)).Elem()
}

func (o DlpDatatypeMapOutput) ToDlpDatatypeMapOutput() DlpDatatypeMapOutput {
	return o
}

func (o DlpDatatypeMapOutput) ToDlpDatatypeMapOutputWithContext(ctx context.Context) DlpDatatypeMapOutput {
	return o
}

func (o DlpDatatypeMapOutput) MapIndex(k pulumi.StringInput) DlpDatatypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DlpDatatype {
		return vs[0].(map[string]*DlpDatatype)[vs[1].(string)]
	}).(DlpDatatypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DlpDatatypeInput)(nil)).Elem(), &DlpDatatype{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpDatatypeArrayInput)(nil)).Elem(), DlpDatatypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DlpDatatypeMapInput)(nil)).Elem(), DlpDatatypeMap{})
	pulumi.RegisterOutputType(DlpDatatypeOutput{})
	pulumi.RegisterOutputType(DlpDatatypeArrayOutput{})
	pulumi.RegisterOutputType(DlpDatatypeMapOutput{})
}
