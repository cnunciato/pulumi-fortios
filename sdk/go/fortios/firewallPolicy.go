// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPv4 policies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFirewallPolicy(ctx, "trname", &fortios.FirewallPolicyArgs{
//				Action: pulumi.String("accept"),
//				Dstaddrs: fortios.FirewallPolicyDstaddrArray{
//					&fortios.FirewallPolicyDstaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Dstintfs: fortios.FirewallPolicyDstintfArray{
//					&fortios.FirewallPolicyDstintfArgs{
//						Name: pulumi.String("port4"),
//					},
//				},
//				Logtraffic: pulumi.String("utm"),
//				Policyid:   pulumi.Int(1),
//				Schedule:   pulumi.String("always"),
//				Services: fortios.FirewallPolicyServiceArray{
//					&fortios.FirewallPolicyServiceArgs{
//						Name: pulumi.String("HTTP"),
//					},
//				},
//				Srcaddrs: fortios.FirewallPolicySrcaddrArray{
//					&fortios.FirewallPolicySrcaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Srcintfs: fortios.FirewallPolicySrcintfArray{
//					&fortios.FirewallPolicySrcintfArgs{
//						Name: pulumi.String("port3"),
//					},
//				},
//				Wanopt:           pulumi.String("disable"),
//				WanoptDetection:  pulumi.String("active"),
//				WanoptPassiveOpt: pulumi.String("default"),
//				Wccp:             pulumi.String("disable"),
//				Webcache:         pulumi.String("disable"),
//				WebcacheHttps:    pulumi.String("disable"),
//				Wsso:             pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fortios.NewFirewallPolicy(ctx, "myrule", &fortios.FirewallPolicyArgs{
//				Action:          pulumi.String("accept"),
//				AntiReplay:      pulumi.String("enable"),
//				AuthPath:        pulumi.String("disable"),
//				AutoAsicOffload: pulumi.String("enable"),
//				AvProfile:       pulumi.String("wifi-default"),
//				Dstintfs: fortios.FirewallPolicyDstintfArray{
//					&fortios.FirewallPolicyDstintfArgs{
//						Name: pulumi.String("port1"),
//					},
//				},
//				InspectionMode:  pulumi.String("flow"),
//				InternetService: pulumi.String("enable"),
//				InternetServiceNames: fortios.FirewallPolicyInternetServiceNameArray{
//					&fortios.FirewallPolicyInternetServiceNameArgs{
//						Name: pulumi.String("Amazon-AWS"),
//					},
//					&fortios.FirewallPolicyInternetServiceNameArgs{
//						Name: pulumi.String("GitHub-GitHub"),
//					},
//				},
//				IpsSensor:  pulumi.String("protect_email_server"),
//				Logtraffic: pulumi.String("utm"),
//				Policyid:   pulumi.Int(2),
//				Schedule:   pulumi.String("always"),
//				Srcaddrs: fortios.FirewallPolicySrcaddrArray{
//					&fortios.FirewallPolicySrcaddrArgs{
//						Name: pulumi.String("FABRIC_DEVICE"),
//					},
//				},
//				Srcintfs: fortios.FirewallPolicySrcintfArray{
//					&fortios.FirewallPolicySrcintfArgs{
//						Name: pulumi.String("port2"),
//					},
//				},
//				SslSshProfile: pulumi.String("certificate-inspection"),
//				Status:        pulumi.String("enable"),
//				UtmStatus:     pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Firewall Policy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/firewallPolicy:FirewallPolicy labelname {{policyid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/firewallPolicy:FirewallPolicy labelname {{policyid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FirewallPolicy struct {
	pulumi.CustomResourceState

	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Enable/disable anti-replay check. Valid values: `enable`, `disable`.
	AntiReplay pulumi.StringOutput `pulumi:"antiReplay"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories FirewallPolicyAppCategoryArrayOutput `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups FirewallPolicyAppGroupArrayOutput `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrOutput `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications FirewallPolicyApplicationArrayOutput `pulumi:"applications"`
	// HTTPS server certificate for policy authentication.
	AuthCert pulumi.StringPtrOutput `pulumi:"authCert"`
	// Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
	AuthPath pulumi.StringOutput `pulumi:"authPath"`
	// HTTP-to-HTTPS redirect address for firewall authentication.
	AuthRedirectAddr pulumi.StringPtrOutput `pulumi:"authRedirectAddr"`
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrOutput `pulumi:"avProfile"`
	// Enable/disable block notification. Valid values: `enable`, `disable`.
	BlockNotification pulumi.StringOutput `pulumi:"blockNotification"`
	// Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt pulumi.StringOutput `pulumi:"captivePortalExempt"`
	// Enable/disable capture packets. Valid values: `enable`, `disable`.
	CapturePacket pulumi.StringOutput `pulumi:"capturePacket"`
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrOutput `pulumi:"cifsProfile"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
	CustomLogFields FirewallPolicyCustomLogFieldArrayOutput `pulumi:"customLogFields"`
	// Decrypted traffic mirror.
	DecryptedTrafficMirror pulumi.StringPtrOutput `pulumi:"decryptedTrafficMirror"`
	// Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
	DelayTcpNpuSession pulumi.StringOutput `pulumi:"delayTcpNpuSession"`
	// Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
	Devices FirewallPolicyDeviceArrayOutput `pulumi:"devices"`
	// Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
	DiffservCopy pulumi.StringOutput `pulumi:"diffservCopy"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward pulumi.StringOutput `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
	DiffservReverse pulumi.StringOutput `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward pulumi.StringOutput `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev pulumi.StringOutput `pulumi:"diffservcodeRev"`
	// Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
	Disclaimer pulumi.StringOutput `pulumi:"disclaimer"`
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringPtrOutput `pulumi:"dlpProfile"`
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrOutput `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrOutput `pulumi:"dnsfilterProfile"`
	// Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
	Dsri pulumi.StringOutput `pulumi:"dsri"`
	// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	Dstaddr6Negate pulumi.StringOutput `pulumi:"dstaddr6Negate"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallPolicyDstaddr6ArrayOutput `pulumi:"dstaddr6s"`
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringOutput `pulumi:"dstaddrNegate"`
	// Destination address and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallPolicyDstaddrArrayOutput `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs FirewallPolicyDstintfArrayOutput `pulumi:"dstintfs"`
	// Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
	DynamicShaping pulumi.StringOutput `pulumi:"dynamicShaping"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable email collection. Valid values: `enable`, `disable`.
	EmailCollect pulumi.StringOutput `pulumi:"emailCollect"`
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrOutput `pulumi:"emailfilterProfile"`
	// Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
	Fec pulumi.StringOutput `pulumi:"fec"`
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrOutput `pulumi:"fileFilterProfile"`
	// How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
	FirewallSessionDirty pulumi.StringOutput `pulumi:"firewallSessionDirty"`
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringOutput `pulumi:"fixedport"`
	// Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
	Fsso pulumi.StringPtrOutput `pulumi:"fsso"`
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm pulumi.StringPtrOutput `pulumi:"fssoAgentForNtlm"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups FirewallPolicyFssoGroupArrayOutput `pulumi:"fssoGroups"`
	// Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
	GeoipAnycast pulumi.StringOutput `pulumi:"geoipAnycast"`
	// Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
	GeoipMatch pulumi.StringOutput `pulumi:"geoipMatch"`
	// Label for the policy that appears when the GUI is in Global View mode.
	GlobalLabel pulumi.StringPtrOutput `pulumi:"globalLabel"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups FirewallPolicyGroupArrayOutput `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect pulumi.StringOutput `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrOutput `pulumi:"icapProfile"`
	// Name of identity-based routing rule.
	IdentityBasedRoute pulumi.StringPtrOutput `pulumi:"identityBasedRoute"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound pulumi.StringOutput `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode pulumi.StringOutput `pulumi:"inspectionMode"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService pulumi.StringOutput `pulumi:"internetService"`
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService6 pulumi.StringOutput `pulumi:"internetService6"`
	// Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups FirewallPolicyInternetService6CustomGroupArrayOutput `pulumi:"internetService6CustomGroups"`
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs FirewallPolicyInternetService6CustomArrayOutput `pulumi:"internetService6Customs"`
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups FirewallPolicyInternetService6GroupArrayOutput `pulumi:"internetService6Groups"`
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names FirewallPolicyInternetService6NameArrayOutput `pulumi:"internetService6Names"`
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate pulumi.StringOutput `pulumi:"internetService6Negate"`
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src pulumi.StringOutput `pulumi:"internetService6Src"`
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups FirewallPolicyInternetService6SrcCustomGroupArrayOutput `pulumi:"internetService6SrcCustomGroups"`
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms FirewallPolicyInternetService6SrcCustomArrayOutput `pulumi:"internetService6SrcCustoms"`
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups FirewallPolicyInternetService6SrcGroupArrayOutput `pulumi:"internetService6SrcGroups"`
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames FirewallPolicyInternetService6SrcNameArrayOutput `pulumi:"internetService6SrcNames"`
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate pulumi.StringOutput `pulumi:"internetService6SrcNegate"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups FirewallPolicyInternetServiceCustomGroupArrayOutput `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms FirewallPolicyInternetServiceCustomArrayOutput `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups FirewallPolicyInternetServiceGroupArrayOutput `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds FirewallPolicyInternetServiceIdArrayOutput `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames FirewallPolicyInternetServiceNameArrayOutput `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringOutput `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringOutput `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups FirewallPolicyInternetServiceSrcCustomGroupArrayOutput `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms FirewallPolicyInternetServiceSrcCustomArrayOutput `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups FirewallPolicyInternetServiceSrcGroupArrayOutput `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds FirewallPolicyInternetServiceSrcIdArrayOutput `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames FirewallPolicyInternetServiceSrcNameArrayOutput `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringOutput `pulumi:"internetServiceSrcNegate"`
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringOutput `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrOutput `pulumi:"ipsSensor"`
	// Label for the policy that appears when the GUI is in Section View mode.
	Label pulumi.StringPtrOutput `pulumi:"label"`
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode pulumi.StringPtrOutput `pulumi:"learningMode"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringOutput `pulumi:"logtrafficStart"`
	// Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
	MatchVip pulumi.StringOutput `pulumi:"matchVip"`
	// Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
	MatchVipOnly pulumi.StringOutput `pulumi:"matchVipOnly"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringOutput `pulumi:"nat"`
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 pulumi.StringOutput `pulumi:"nat46"`
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 pulumi.StringOutput `pulumi:"nat64"`
	// Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
	Natinbound pulumi.StringOutput `pulumi:"natinbound"`
	// Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
	Natip pulumi.StringOutput `pulumi:"natip"`
	// Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
	Natoutbound pulumi.StringOutput `pulumi:"natoutbound"`
	// Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
	NetworkServiceDynamics FirewallPolicyNetworkServiceDynamicArrayOutput `pulumi:"networkServiceDynamics"`
	// Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
	NetworkServiceSrcDynamics FirewallPolicyNetworkServiceSrcDynamicArrayOutput `pulumi:"networkServiceSrcDynamics"`
	// Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
	NpAcceleration pulumi.StringOutput `pulumi:"npAcceleration"`
	// Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
	Ntlm pulumi.StringOutput `pulumi:"ntlm"`
	// HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
	NtlmEnabledBrowsers FirewallPolicyNtlmEnabledBrowserArrayOutput `pulumi:"ntlmEnabledBrowsers"`
	// Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
	NtlmGuest pulumi.StringOutput `pulumi:"ntlmGuest"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound pulumi.StringOutput `pulumi:"outbound"`
	// Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
	PassiveWanHealthMeasurement pulumi.StringOutput `pulumi:"passiveWanHealthMeasurement"`
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringPtrOutput `pulumi:"perIpShaper"`
	// Accept UDP packets from any host. Valid values: `enable`, `disable`.
	PermitAnyHost pulumi.StringOutput `pulumi:"permitAnyHost"`
	// Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
	PermitStunHost pulumi.StringOutput `pulumi:"permitStunHost"`
	// Enable/disable policy expiry. Valid values: `enable`, `disable`.
	PolicyExpiry pulumi.StringOutput `pulumi:"policyExpiry"`
	// Policy expiry date (YYYY-MM-DD HH:MM:SS).
	PolicyExpiryDate pulumi.StringOutput `pulumi:"policyExpiryDate"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s FirewallPolicyPoolname6ArrayOutput `pulumi:"poolname6s"`
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames FirewallPolicyPoolnameArrayOutput `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroup pulumi.StringPtrOutput `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringOutput `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringOutput `pulumi:"profileType"`
	// Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
	RadiusMacAuthBypass pulumi.StringOutput `pulumi:"radiusMacAuthBypass"`
	// URL users are directed to after seeing and accepting the disclaimer or authenticating.
	RedirectUrl pulumi.StringPtrOutput `pulumi:"redirectUrl"`
	// Override the default replacement message group for this policy.
	ReplacemsgOverrideGroup pulumi.StringPtrOutput `pulumi:"replacemsgOverrideGroup"`
	// Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
	ReputationDirection pulumi.StringOutput `pulumi:"reputationDirection"`
	// Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
	ReputationDirection6 pulumi.StringOutput `pulumi:"reputationDirection6"`
	// Minimum Reputation to take action.
	ReputationMinimum pulumi.IntPtrOutput `pulumi:"reputationMinimum"`
	// IPv6 Minimum Reputation to take action.
	ReputationMinimum6 pulumi.IntPtrOutput `pulumi:"reputationMinimum6"`
	// Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
	Rsso pulumi.StringPtrOutput `pulumi:"rsso"`
	// Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
	RtpAddrs FirewallPolicyRtpAddrArrayOutput `pulumi:"rtpAddrs"`
	// Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
	RtpNat pulumi.StringOutput `pulumi:"rtpNat"`
	// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrOutput `pulumi:"scanBotnetConnections"`
	// Schedule name.(Default is `always`)
	Schedule pulumi.StringPtrOutput `pulumi:"schedule"`
	// Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
	ScheduleTimeout pulumi.StringOutput `pulumi:"scheduleTimeout"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringPtrOutput `pulumi:"sctpFilterProfile"`
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket pulumi.StringOutput `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringOutput `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services FirewallPolicyServiceArrayOutput `pulumi:"services"`
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl pulumi.IntPtrOutput `pulumi:"sessionTtl"`
	// Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
	SgtCheck pulumi.StringOutput `pulumi:"sgtCheck"`
	// Security group tags. The structure of `sgt` block is documented below.
	Sgts FirewallPolicySgtArrayOutput `pulumi:"sgts"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringPtrOutput `pulumi:"spamfilterProfile"`
	// Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
	SrcVendorMacs FirewallPolicySrcVendorMacArrayOutput `pulumi:"srcVendorMacs"`
	// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	Srcaddr6Negate pulumi.StringOutput `pulumi:"srcaddr6Negate"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallPolicySrcaddr6ArrayOutput `pulumi:"srcaddr6s"`
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringOutput `pulumi:"srcaddrNegate"`
	// Source address and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallPolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs FirewallPolicySrcintfArrayOutput `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrOutput `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect pulumi.StringOutput `pulumi:"sshPolicyRedirect"`
	// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
	SslMirror pulumi.StringPtrOutput `pulumi:"sslMirror"`
	// SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
	SslMirrorIntfs FirewallPolicySslMirrorIntfArrayOutput `pulumi:"sslMirrorIntfs"`
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringOutput `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver pulumi.IntPtrOutput `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender pulumi.IntPtrOutput `pulumi:"tcpMssSender"`
	// Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
	TcpSessionWithoutSyn pulumi.StringOutput `pulumi:"tcpSessionWithoutSyn"`
	// Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
	TimeoutSendRst pulumi.StringOutput `pulumi:"timeoutSendRst"`
	// ToS (Type of Service) value used for comparison.
	Tos pulumi.StringOutput `pulumi:"tos"`
	// Non-zero bit positions are used for comparison while zero bit positions are ignored.
	TosMask pulumi.StringOutput `pulumi:"tosMask"`
	// Enable negated TOS match. Valid values: `enable`, `disable`.
	TosNegate pulumi.StringOutput `pulumi:"tosNegate"`
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrOutput `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrOutput `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories FirewallPolicyUrlCategoryArrayOutput `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users FirewallPolicyUserArrayOutput `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringOutput `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringPtrOutput `pulumi:"videofilterProfile"`
	// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosFwd pulumi.IntOutput `pulumi:"vlanCosFwd"`
	// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosRev pulumi.IntOutput `pulumi:"vlanCosRev"`
	// Set VLAN filters.
	VlanFilter pulumi.StringPtrOutput `pulumi:"vlanFilter"`
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrOutput `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel pulumi.StringPtrOutput `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringPtrOutput `pulumi:"wafProfile"`
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt pulumi.StringOutput `pulumi:"wanopt"`
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection pulumi.StringOutput `pulumi:"wanoptDetection"`
	// WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt pulumi.StringOutput `pulumi:"wanoptPassiveOpt"`
	// WAN optimization peer.
	WanoptPeer pulumi.StringPtrOutput `pulumi:"wanoptPeer"`
	// WAN optimization profile.
	WanoptProfile pulumi.StringPtrOutput `pulumi:"wanoptProfile"`
	// Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
	Wccp pulumi.StringOutput `pulumi:"wccp"`
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache pulumi.StringOutput `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps pulumi.StringOutput `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrOutput `pulumi:"webfilterProfile"`
	// Web proxy forward server name.
	WebproxyForwardServer pulumi.StringPtrOutput `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile pulumi.StringPtrOutput `pulumi:"webproxyProfile"`
	// Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
	Wsso pulumi.StringPtrOutput `pulumi:"wsso"`
	// Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
	ZtnaEmsTags FirewallPolicyZtnaEmsTagArrayOutput `pulumi:"ztnaEmsTags"`
	// Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
	ZtnaGeoTags FirewallPolicyZtnaGeoTagArrayOutput `pulumi:"ztnaGeoTags"`
	// Enable/disable zero trust access. Valid values: `enable`, `disable`.
	ZtnaStatus pulumi.StringOutput `pulumi:"ztnaStatus"`
}

// NewFirewallPolicy registers a new resource with the given unique name, arguments, and options.
func NewFirewallPolicy(ctx *pulumi.Context,
	name string, args *FirewallPolicyArgs, opts ...pulumi.ResourceOption) (*FirewallPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstintfs == nil {
		return nil, errors.New("invalid value for required argument 'Dstintfs'")
	}
	if args.Srcintfs == nil {
		return nil, errors.New("invalid value for required argument 'Srcintfs'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallPolicy
	err := ctx.RegisterResource("fortios:index/firewallPolicy:FirewallPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallPolicy gets an existing FirewallPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallPolicyState, opts ...pulumi.ResourceOption) (*FirewallPolicy, error) {
	var resource FirewallPolicy
	err := ctx.ReadResource("fortios:index/firewallPolicy:FirewallPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallPolicy resources.
type firewallPolicyState struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action *string `pulumi:"action"`
	// Enable/disable anti-replay check. Valid values: `enable`, `disable`.
	AntiReplay *string `pulumi:"antiReplay"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []FirewallPolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []FirewallPolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []FirewallPolicyApplication `pulumi:"applications"`
	// HTTPS server certificate for policy authentication.
	AuthCert *string `pulumi:"authCert"`
	// Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
	AuthPath *string `pulumi:"authPath"`
	// HTTP-to-HTTPS redirect address for firewall authentication.
	AuthRedirectAddr *string `pulumi:"authRedirectAddr"`
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable block notification. Valid values: `enable`, `disable`.
	BlockNotification *string `pulumi:"blockNotification"`
	// Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt *string `pulumi:"captivePortalExempt"`
	// Enable/disable capture packets. Valid values: `enable`, `disable`.
	CapturePacket *string `pulumi:"capturePacket"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
	CustomLogFields []FirewallPolicyCustomLogField `pulumi:"customLogFields"`
	// Decrypted traffic mirror.
	DecryptedTrafficMirror *string `pulumi:"decryptedTrafficMirror"`
	// Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
	DelayTcpNpuSession *string `pulumi:"delayTcpNpuSession"`
	// Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
	Devices []FirewallPolicyDevice `pulumi:"devices"`
	// Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
	DiffservCopy *string `pulumi:"diffservCopy"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward *string `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
	DiffservReverse *string `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward *string `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev *string `pulumi:"diffservcodeRev"`
	// Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
	Disclaimer *string `pulumi:"disclaimer"`
	// Name of an existing DLP profile.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	Dstaddr6Negate *string `pulumi:"dstaddr6Negate"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []FirewallPolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate *string `pulumi:"dstaddrNegate"`
	// Destination address and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs []FirewallPolicyDstaddr `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []FirewallPolicyDstintf `pulumi:"dstintfs"`
	// Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
	DynamicShaping *string `pulumi:"dynamicShaping"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable email collection. Valid values: `enable`, `disable`.
	EmailCollect *string `pulumi:"emailCollect"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
	Fec *string `pulumi:"fec"`
	// Name of an existing file-filter profile.
	FileFilterProfile *string `pulumi:"fileFilterProfile"`
	// How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
	FirewallSessionDirty *string `pulumi:"firewallSessionDirty"`
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport *string `pulumi:"fixedport"`
	// Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
	Fsso *string `pulumi:"fsso"`
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm *string `pulumi:"fssoAgentForNtlm"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []FirewallPolicyFssoGroup `pulumi:"fssoGroups"`
	// Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
	GeoipAnycast *string `pulumi:"geoipAnycast"`
	// Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
	GeoipMatch *string `pulumi:"geoipMatch"`
	// Label for the policy that appears when the GUI is in Global View mode.
	GlobalLabel *string `pulumi:"globalLabel"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []FirewallPolicyGroup `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect *string `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Name of identity-based routing rule.
	IdentityBasedRoute *string `pulumi:"identityBasedRoute"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound *string `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode *string `pulumi:"inspectionMode"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService *string `pulumi:"internetService"`
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService6 *string `pulumi:"internetService6"`
	// Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups []FirewallPolicyInternetService6CustomGroup `pulumi:"internetService6CustomGroups"`
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs []FirewallPolicyInternetService6Custom `pulumi:"internetService6Customs"`
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups []FirewallPolicyInternetService6Group `pulumi:"internetService6Groups"`
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names []FirewallPolicyInternetService6Name `pulumi:"internetService6Names"`
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate *string `pulumi:"internetService6Negate"`
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src *string `pulumi:"internetService6Src"`
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups []FirewallPolicyInternetService6SrcCustomGroup `pulumi:"internetService6SrcCustomGroups"`
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms []FirewallPolicyInternetService6SrcCustom `pulumi:"internetService6SrcCustoms"`
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups []FirewallPolicyInternetService6SrcGroup `pulumi:"internetService6SrcGroups"`
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames []FirewallPolicyInternetService6SrcName `pulumi:"internetService6SrcNames"`
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate *string `pulumi:"internetService6SrcNegate"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []FirewallPolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []FirewallPolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []FirewallPolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []FirewallPolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []FirewallPolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate *string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []FirewallPolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []FirewallPolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []FirewallPolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []FirewallPolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []FirewallPolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate *string `pulumi:"internetServiceSrcNegate"`
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Label for the policy that appears when the GUI is in Section View mode.
	Label *string `pulumi:"label"`
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode *string `pulumi:"learningMode"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
	MatchVip *string `pulumi:"matchVip"`
	// Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
	MatchVipOnly *string `pulumi:"matchVipOnly"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat *string `pulumi:"nat"`
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 *string `pulumi:"nat46"`
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 *string `pulumi:"nat64"`
	// Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
	Natinbound *string `pulumi:"natinbound"`
	// Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
	Natip *string `pulumi:"natip"`
	// Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
	Natoutbound *string `pulumi:"natoutbound"`
	// Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
	NetworkServiceDynamics []FirewallPolicyNetworkServiceDynamic `pulumi:"networkServiceDynamics"`
	// Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
	NetworkServiceSrcDynamics []FirewallPolicyNetworkServiceSrcDynamic `pulumi:"networkServiceSrcDynamics"`
	// Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
	NpAcceleration *string `pulumi:"npAcceleration"`
	// Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
	Ntlm *string `pulumi:"ntlm"`
	// HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
	NtlmEnabledBrowsers []FirewallPolicyNtlmEnabledBrowser `pulumi:"ntlmEnabledBrowsers"`
	// Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
	NtlmGuest *string `pulumi:"ntlmGuest"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound *string `pulumi:"outbound"`
	// Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
	PassiveWanHealthMeasurement *string `pulumi:"passiveWanHealthMeasurement"`
	// Per-IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Accept UDP packets from any host. Valid values: `enable`, `disable`.
	PermitAnyHost *string `pulumi:"permitAnyHost"`
	// Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
	PermitStunHost *string `pulumi:"permitStunHost"`
	// Enable/disable policy expiry. Valid values: `enable`, `disable`.
	PolicyExpiry *string `pulumi:"policyExpiry"`
	// Policy expiry date (YYYY-MM-DD HH:MM:SS).
	PolicyExpiryDate *string `pulumi:"policyExpiryDate"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s []FirewallPolicyPoolname6 `pulumi:"poolname6s"`
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames []FirewallPolicyPoolname `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroup *string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType *string `pulumi:"profileType"`
	// Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
	RadiusMacAuthBypass *string `pulumi:"radiusMacAuthBypass"`
	// URL users are directed to after seeing and accepting the disclaimer or authenticating.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Override the default replacement message group for this policy.
	ReplacemsgOverrideGroup *string `pulumi:"replacemsgOverrideGroup"`
	// Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
	ReputationDirection *string `pulumi:"reputationDirection"`
	// Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
	ReputationDirection6 *string `pulumi:"reputationDirection6"`
	// Minimum Reputation to take action.
	ReputationMinimum *int `pulumi:"reputationMinimum"`
	// IPv6 Minimum Reputation to take action.
	ReputationMinimum6 *int `pulumi:"reputationMinimum6"`
	// Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
	Rsso *string `pulumi:"rsso"`
	// Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
	RtpAddrs []FirewallPolicyRtpAddr `pulumi:"rtpAddrs"`
	// Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
	RtpNat *string `pulumi:"rtpNat"`
	// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Schedule name.(Default is `always`)
	Schedule *string `pulumi:"schedule"`
	// Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
	ScheduleTimeout *string `pulumi:"scheduleTimeout"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile *string `pulumi:"sctpFilterProfile"`
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket *string `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate *string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []FirewallPolicyService `pulumi:"services"`
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl *int `pulumi:"sessionTtl"`
	// Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
	SgtCheck *string `pulumi:"sgtCheck"`
	// Security group tags. The structure of `sgt` block is documented below.
	Sgts []FirewallPolicySgt `pulumi:"sgts"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
	SrcVendorMacs []FirewallPolicySrcVendorMac `pulumi:"srcVendorMacs"`
	// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	Srcaddr6Negate *string `pulumi:"srcaddr6Negate"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []FirewallPolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate *string `pulumi:"srcaddrNegate"`
	// Source address and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallPolicySrcaddr `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []FirewallPolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect *string `pulumi:"sshPolicyRedirect"`
	// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
	SslMirror *string `pulumi:"sslMirror"`
	// SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
	SslMirrorIntfs []FirewallPolicySslMirrorIntf `pulumi:"sslMirrorIntfs"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver *int `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender *int `pulumi:"tcpMssSender"`
	// Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
	TcpSessionWithoutSyn *string `pulumi:"tcpSessionWithoutSyn"`
	// Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
	TimeoutSendRst *string `pulumi:"timeoutSendRst"`
	// ToS (Type of Service) value used for comparison.
	Tos *string `pulumi:"tos"`
	// Non-zero bit positions are used for comparison while zero bit positions are ignored.
	TosMask *string `pulumi:"tosMask"`
	// Enable negated TOS match. Valid values: `enable`, `disable`.
	TosNegate *string `pulumi:"tosNegate"`
	// Traffic shaper.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse *string `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []FirewallPolicyUrlCategory `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []FirewallPolicyUser `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus *string `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile *string `pulumi:"videofilterProfile"`
	// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosFwd *int `pulumi:"vlanCosFwd"`
	// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosRev *int `pulumi:"vlanCosRev"`
	// Set VLAN filters.
	VlanFilter *string `pulumi:"vlanFilter"`
	// Name of an existing VoIP profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel *string `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile *string `pulumi:"wafProfile"`
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt *string `pulumi:"wanopt"`
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection *string `pulumi:"wanoptDetection"`
	// WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt *string `pulumi:"wanoptPassiveOpt"`
	// WAN optimization peer.
	WanoptPeer *string `pulumi:"wanoptPeer"`
	// WAN optimization profile.
	WanoptProfile *string `pulumi:"wanoptProfile"`
	// Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
	Wccp *string `pulumi:"wccp"`
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache *string `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps *string `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Web proxy forward server name.
	WebproxyForwardServer *string `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile *string `pulumi:"webproxyProfile"`
	// Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
	Wsso *string `pulumi:"wsso"`
	// Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
	ZtnaEmsTags []FirewallPolicyZtnaEmsTag `pulumi:"ztnaEmsTags"`
	// Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
	ZtnaGeoTags []FirewallPolicyZtnaGeoTag `pulumi:"ztnaGeoTags"`
	// Enable/disable zero trust access. Valid values: `enable`, `disable`.
	ZtnaStatus *string `pulumi:"ztnaStatus"`
}

type FirewallPolicyState struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action pulumi.StringPtrInput
	// Enable/disable anti-replay check. Valid values: `enable`, `disable`.
	AntiReplay pulumi.StringPtrInput
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories FirewallPolicyAppCategoryArrayInput
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups FirewallPolicyAppGroupArrayInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Application ID list. The structure of `application` block is documented below.
	Applications FirewallPolicyApplicationArrayInput
	// HTTPS server certificate for policy authentication.
	AuthCert pulumi.StringPtrInput
	// Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
	AuthPath pulumi.StringPtrInput
	// HTTP-to-HTTPS redirect address for firewall authentication.
	AuthRedirectAddr pulumi.StringPtrInput
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable block notification. Valid values: `enable`, `disable`.
	BlockNotification pulumi.StringPtrInput
	// Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt pulumi.StringPtrInput
	// Enable/disable capture packets. Valid values: `enable`, `disable`.
	CapturePacket pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
	CustomLogFields FirewallPolicyCustomLogFieldArrayInput
	// Decrypted traffic mirror.
	DecryptedTrafficMirror pulumi.StringPtrInput
	// Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
	DelayTcpNpuSession pulumi.StringPtrInput
	// Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
	Devices FirewallPolicyDeviceArrayInput
	// Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
	DiffservCopy pulumi.StringPtrInput
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward pulumi.StringPtrInput
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
	DiffservReverse pulumi.StringPtrInput
	// Change packet's DiffServ to this value.
	DiffservcodeForward pulumi.StringPtrInput
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev pulumi.StringPtrInput
	// Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
	Disclaimer pulumi.StringPtrInput
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	Dstaddr6Negate pulumi.StringPtrInput
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallPolicyDstaddr6ArrayInput
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringPtrInput
	// Destination address and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallPolicyDstaddrArrayInput
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs FirewallPolicyDstintfArrayInput
	// Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
	DynamicShaping pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable email collection. Valid values: `enable`, `disable`.
	EmailCollect pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
	Fec pulumi.StringPtrInput
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrInput
	// How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
	FirewallSessionDirty pulumi.StringPtrInput
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringPtrInput
	// Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
	Fsso pulumi.StringPtrInput
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm pulumi.StringPtrInput
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups FirewallPolicyFssoGroupArrayInput
	// Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
	GeoipAnycast pulumi.StringPtrInput
	// Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
	GeoipMatch pulumi.StringPtrInput
	// Label for the policy that appears when the GUI is in Global View mode.
	GlobalLabel pulumi.StringPtrInput
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups FirewallPolicyGroupArrayInput
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect pulumi.StringPtrInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Name of identity-based routing rule.
	IdentityBasedRoute pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound pulumi.StringPtrInput
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode pulumi.StringPtrInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService6 pulumi.StringPtrInput
	// Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups FirewallPolicyInternetService6CustomGroupArrayInput
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs FirewallPolicyInternetService6CustomArrayInput
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups FirewallPolicyInternetService6GroupArrayInput
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names FirewallPolicyInternetService6NameArrayInput
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src pulumi.StringPtrInput
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups FirewallPolicyInternetService6SrcCustomGroupArrayInput
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms FirewallPolicyInternetService6SrcCustomArrayInput
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups FirewallPolicyInternetService6SrcGroupArrayInput
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames FirewallPolicyInternetService6SrcNameArrayInput
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate pulumi.StringPtrInput
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups FirewallPolicyInternetServiceCustomGroupArrayInput
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms FirewallPolicyInternetServiceCustomArrayInput
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups FirewallPolicyInternetServiceGroupArrayInput
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds FirewallPolicyInternetServiceIdArrayInput
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames FirewallPolicyInternetServiceNameArrayInput
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringPtrInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringPtrInput
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups FirewallPolicyInternetServiceSrcCustomGroupArrayInput
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms FirewallPolicyInternetServiceSrcCustomArrayInput
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups FirewallPolicyInternetServiceSrcGroupArrayInput
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds FirewallPolicyInternetServiceSrcIdArrayInput
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames FirewallPolicyInternetServiceSrcNameArrayInput
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringPtrInput
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Label for the policy that appears when the GUI is in Section View mode.
	Label pulumi.StringPtrInput
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
	MatchVip pulumi.StringPtrInput
	// Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
	MatchVipOnly pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringPtrInput
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 pulumi.StringPtrInput
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 pulumi.StringPtrInput
	// Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
	Natinbound pulumi.StringPtrInput
	// Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
	Natip pulumi.StringPtrInput
	// Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
	Natoutbound pulumi.StringPtrInput
	// Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
	NetworkServiceDynamics FirewallPolicyNetworkServiceDynamicArrayInput
	// Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
	NetworkServiceSrcDynamics FirewallPolicyNetworkServiceSrcDynamicArrayInput
	// Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
	NpAcceleration pulumi.StringPtrInput
	// Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
	Ntlm pulumi.StringPtrInput
	// HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
	NtlmEnabledBrowsers FirewallPolicyNtlmEnabledBrowserArrayInput
	// Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
	NtlmGuest pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound pulumi.StringPtrInput
	// Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
	PassiveWanHealthMeasurement pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput
	// Accept UDP packets from any host. Valid values: `enable`, `disable`.
	PermitAnyHost pulumi.StringPtrInput
	// Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
	PermitStunHost pulumi.StringPtrInput
	// Enable/disable policy expiry. Valid values: `enable`, `disable`.
	PolicyExpiry pulumi.StringPtrInput
	// Policy expiry date (YYYY-MM-DD HH:MM:SS).
	PolicyExpiryDate pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s FirewallPolicyPoolname6ArrayInput
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames FirewallPolicyPoolnameArrayInput
	// Name of profile group.
	ProfileGroup pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringPtrInput
	// Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
	RadiusMacAuthBypass pulumi.StringPtrInput
	// URL users are directed to after seeing and accepting the disclaimer or authenticating.
	RedirectUrl pulumi.StringPtrInput
	// Override the default replacement message group for this policy.
	ReplacemsgOverrideGroup pulumi.StringPtrInput
	// Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
	ReputationDirection pulumi.StringPtrInput
	// Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
	ReputationDirection6 pulumi.StringPtrInput
	// Minimum Reputation to take action.
	ReputationMinimum pulumi.IntPtrInput
	// IPv6 Minimum Reputation to take action.
	ReputationMinimum6 pulumi.IntPtrInput
	// Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
	Rsso pulumi.StringPtrInput
	// Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
	RtpAddrs FirewallPolicyRtpAddrArrayInput
	// Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
	RtpNat pulumi.StringPtrInput
	// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Schedule name.(Default is `always`)
	Schedule pulumi.StringPtrInput
	// Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
	ScheduleTimeout pulumi.StringPtrInput
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringPtrInput
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket pulumi.StringPtrInput
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringPtrInput
	// Service and service group names. The structure of `service` block is documented below.
	Services FirewallPolicyServiceArrayInput
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl pulumi.IntPtrInput
	// Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
	SgtCheck pulumi.StringPtrInput
	// Security group tags. The structure of `sgt` block is documented below.
	Sgts FirewallPolicySgtArrayInput
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
	SrcVendorMacs FirewallPolicySrcVendorMacArrayInput
	// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	Srcaddr6Negate pulumi.StringPtrInput
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallPolicySrcaddr6ArrayInput
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringPtrInput
	// Source address and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallPolicySrcaddrArrayInput
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs FirewallPolicySrcintfArrayInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect pulumi.StringPtrInput
	// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
	SslMirror pulumi.StringPtrInput
	// SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
	SslMirrorIntfs FirewallPolicySslMirrorIntfArrayInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver pulumi.IntPtrInput
	// Sender TCP maximum segment size (MSS).
	TcpMssSender pulumi.IntPtrInput
	// Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
	TcpSessionWithoutSyn pulumi.StringPtrInput
	// Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
	TimeoutSendRst pulumi.StringPtrInput
	// ToS (Type of Service) value used for comparison.
	Tos pulumi.StringPtrInput
	// Non-zero bit positions are used for comparison while zero bit positions are ignored.
	TosMask pulumi.StringPtrInput
	// Enable negated TOS match. Valid values: `enable`, `disable`.
	TosNegate pulumi.StringPtrInput
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrInput
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrInput
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories FirewallPolicyUrlCategoryArrayInput
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users FirewallPolicyUserArrayInput
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringPtrInput
	// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosFwd pulumi.IntPtrInput
	// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosRev pulumi.IntPtrInput
	// Set VLAN filters.
	VlanFilter pulumi.StringPtrInput
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrInput
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel pulumi.StringPtrInput
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringPtrInput
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt pulumi.StringPtrInput
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection pulumi.StringPtrInput
	// WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt pulumi.StringPtrInput
	// WAN optimization peer.
	WanoptPeer pulumi.StringPtrInput
	// WAN optimization profile.
	WanoptProfile pulumi.StringPtrInput
	// Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
	Wccp pulumi.StringPtrInput
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache pulumi.StringPtrInput
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Web proxy forward server name.
	WebproxyForwardServer pulumi.StringPtrInput
	// Webproxy profile name.
	WebproxyProfile pulumi.StringPtrInput
	// Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
	Wsso pulumi.StringPtrInput
	// Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
	ZtnaEmsTags FirewallPolicyZtnaEmsTagArrayInput
	// Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
	ZtnaGeoTags FirewallPolicyZtnaGeoTagArrayInput
	// Enable/disable zero trust access. Valid values: `enable`, `disable`.
	ZtnaStatus pulumi.StringPtrInput
}

func (FirewallPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallPolicyState)(nil)).Elem()
}

type firewallPolicyArgs struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action *string `pulumi:"action"`
	// Enable/disable anti-replay check. Valid values: `enable`, `disable`.
	AntiReplay *string `pulumi:"antiReplay"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []FirewallPolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []FirewallPolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []FirewallPolicyApplication `pulumi:"applications"`
	// HTTPS server certificate for policy authentication.
	AuthCert *string `pulumi:"authCert"`
	// Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
	AuthPath *string `pulumi:"authPath"`
	// HTTP-to-HTTPS redirect address for firewall authentication.
	AuthRedirectAddr *string `pulumi:"authRedirectAddr"`
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable block notification. Valid values: `enable`, `disable`.
	BlockNotification *string `pulumi:"blockNotification"`
	// Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt *string `pulumi:"captivePortalExempt"`
	// Enable/disable capture packets. Valid values: `enable`, `disable`.
	CapturePacket *string `pulumi:"capturePacket"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
	CustomLogFields []FirewallPolicyCustomLogField `pulumi:"customLogFields"`
	// Decrypted traffic mirror.
	DecryptedTrafficMirror *string `pulumi:"decryptedTrafficMirror"`
	// Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
	DelayTcpNpuSession *string `pulumi:"delayTcpNpuSession"`
	// Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
	Devices []FirewallPolicyDevice `pulumi:"devices"`
	// Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
	DiffservCopy *string `pulumi:"diffservCopy"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward *string `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
	DiffservReverse *string `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward *string `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev *string `pulumi:"diffservcodeRev"`
	// Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
	Disclaimer *string `pulumi:"disclaimer"`
	// Name of an existing DLP profile.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	Dstaddr6Negate *string `pulumi:"dstaddr6Negate"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []FirewallPolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate *string `pulumi:"dstaddrNegate"`
	// Destination address and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs []FirewallPolicyDstaddr `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []FirewallPolicyDstintf `pulumi:"dstintfs"`
	// Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
	DynamicShaping *string `pulumi:"dynamicShaping"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable email collection. Valid values: `enable`, `disable`.
	EmailCollect *string `pulumi:"emailCollect"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
	Fec *string `pulumi:"fec"`
	// Name of an existing file-filter profile.
	FileFilterProfile *string `pulumi:"fileFilterProfile"`
	// How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
	FirewallSessionDirty *string `pulumi:"firewallSessionDirty"`
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport *string `pulumi:"fixedport"`
	// Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
	Fsso *string `pulumi:"fsso"`
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm *string `pulumi:"fssoAgentForNtlm"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []FirewallPolicyFssoGroup `pulumi:"fssoGroups"`
	// Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
	GeoipAnycast *string `pulumi:"geoipAnycast"`
	// Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
	GeoipMatch *string `pulumi:"geoipMatch"`
	// Label for the policy that appears when the GUI is in Global View mode.
	GlobalLabel *string `pulumi:"globalLabel"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []FirewallPolicyGroup `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect *string `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Name of identity-based routing rule.
	IdentityBasedRoute *string `pulumi:"identityBasedRoute"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound *string `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode *string `pulumi:"inspectionMode"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService *string `pulumi:"internetService"`
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService6 *string `pulumi:"internetService6"`
	// Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups []FirewallPolicyInternetService6CustomGroup `pulumi:"internetService6CustomGroups"`
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs []FirewallPolicyInternetService6Custom `pulumi:"internetService6Customs"`
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups []FirewallPolicyInternetService6Group `pulumi:"internetService6Groups"`
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names []FirewallPolicyInternetService6Name `pulumi:"internetService6Names"`
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate *string `pulumi:"internetService6Negate"`
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src *string `pulumi:"internetService6Src"`
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups []FirewallPolicyInternetService6SrcCustomGroup `pulumi:"internetService6SrcCustomGroups"`
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms []FirewallPolicyInternetService6SrcCustom `pulumi:"internetService6SrcCustoms"`
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups []FirewallPolicyInternetService6SrcGroup `pulumi:"internetService6SrcGroups"`
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames []FirewallPolicyInternetService6SrcName `pulumi:"internetService6SrcNames"`
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate *string `pulumi:"internetService6SrcNegate"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []FirewallPolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []FirewallPolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []FirewallPolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []FirewallPolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []FirewallPolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate *string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []FirewallPolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []FirewallPolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []FirewallPolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []FirewallPolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []FirewallPolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate *string `pulumi:"internetServiceSrcNegate"`
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Label for the policy that appears when the GUI is in Section View mode.
	Label *string `pulumi:"label"`
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode *string `pulumi:"learningMode"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
	MatchVip *string `pulumi:"matchVip"`
	// Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
	MatchVipOnly *string `pulumi:"matchVipOnly"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat *string `pulumi:"nat"`
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 *string `pulumi:"nat46"`
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 *string `pulumi:"nat64"`
	// Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
	Natinbound *string `pulumi:"natinbound"`
	// Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
	Natip *string `pulumi:"natip"`
	// Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
	Natoutbound *string `pulumi:"natoutbound"`
	// Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
	NetworkServiceDynamics []FirewallPolicyNetworkServiceDynamic `pulumi:"networkServiceDynamics"`
	// Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
	NetworkServiceSrcDynamics []FirewallPolicyNetworkServiceSrcDynamic `pulumi:"networkServiceSrcDynamics"`
	// Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
	NpAcceleration *string `pulumi:"npAcceleration"`
	// Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
	Ntlm *string `pulumi:"ntlm"`
	// HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
	NtlmEnabledBrowsers []FirewallPolicyNtlmEnabledBrowser `pulumi:"ntlmEnabledBrowsers"`
	// Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
	NtlmGuest *string `pulumi:"ntlmGuest"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound *string `pulumi:"outbound"`
	// Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
	PassiveWanHealthMeasurement *string `pulumi:"passiveWanHealthMeasurement"`
	// Per-IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Accept UDP packets from any host. Valid values: `enable`, `disable`.
	PermitAnyHost *string `pulumi:"permitAnyHost"`
	// Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
	PermitStunHost *string `pulumi:"permitStunHost"`
	// Enable/disable policy expiry. Valid values: `enable`, `disable`.
	PolicyExpiry *string `pulumi:"policyExpiry"`
	// Policy expiry date (YYYY-MM-DD HH:MM:SS).
	PolicyExpiryDate *string `pulumi:"policyExpiryDate"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s []FirewallPolicyPoolname6 `pulumi:"poolname6s"`
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames []FirewallPolicyPoolname `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroup *string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType *string `pulumi:"profileType"`
	// Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
	RadiusMacAuthBypass *string `pulumi:"radiusMacAuthBypass"`
	// URL users are directed to after seeing and accepting the disclaimer or authenticating.
	RedirectUrl *string `pulumi:"redirectUrl"`
	// Override the default replacement message group for this policy.
	ReplacemsgOverrideGroup *string `pulumi:"replacemsgOverrideGroup"`
	// Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
	ReputationDirection *string `pulumi:"reputationDirection"`
	// Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
	ReputationDirection6 *string `pulumi:"reputationDirection6"`
	// Minimum Reputation to take action.
	ReputationMinimum *int `pulumi:"reputationMinimum"`
	// IPv6 Minimum Reputation to take action.
	ReputationMinimum6 *int `pulumi:"reputationMinimum6"`
	// Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
	Rsso *string `pulumi:"rsso"`
	// Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
	RtpAddrs []FirewallPolicyRtpAddr `pulumi:"rtpAddrs"`
	// Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
	RtpNat *string `pulumi:"rtpNat"`
	// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Schedule name.(Default is `always`)
	Schedule *string `pulumi:"schedule"`
	// Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
	ScheduleTimeout *string `pulumi:"scheduleTimeout"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile *string `pulumi:"sctpFilterProfile"`
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket *string `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate *string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []FirewallPolicyService `pulumi:"services"`
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl *int `pulumi:"sessionTtl"`
	// Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
	SgtCheck *string `pulumi:"sgtCheck"`
	// Security group tags. The structure of `sgt` block is documented below.
	Sgts []FirewallPolicySgt `pulumi:"sgts"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
	SrcVendorMacs []FirewallPolicySrcVendorMac `pulumi:"srcVendorMacs"`
	// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	Srcaddr6Negate *string `pulumi:"srcaddr6Negate"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []FirewallPolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate *string `pulumi:"srcaddrNegate"`
	// Source address and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallPolicySrcaddr `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []FirewallPolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect *string `pulumi:"sshPolicyRedirect"`
	// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
	SslMirror *string `pulumi:"sslMirror"`
	// SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
	SslMirrorIntfs []FirewallPolicySslMirrorIntf `pulumi:"sslMirrorIntfs"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver *int `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender *int `pulumi:"tcpMssSender"`
	// Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
	TcpSessionWithoutSyn *string `pulumi:"tcpSessionWithoutSyn"`
	// Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
	TimeoutSendRst *string `pulumi:"timeoutSendRst"`
	// ToS (Type of Service) value used for comparison.
	Tos *string `pulumi:"tos"`
	// Non-zero bit positions are used for comparison while zero bit positions are ignored.
	TosMask *string `pulumi:"tosMask"`
	// Enable negated TOS match. Valid values: `enable`, `disable`.
	TosNegate *string `pulumi:"tosNegate"`
	// Traffic shaper.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse *string `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []FirewallPolicyUrlCategory `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []FirewallPolicyUser `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus *string `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile *string `pulumi:"videofilterProfile"`
	// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosFwd *int `pulumi:"vlanCosFwd"`
	// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosRev *int `pulumi:"vlanCosRev"`
	// Set VLAN filters.
	VlanFilter *string `pulumi:"vlanFilter"`
	// Name of an existing VoIP profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel *string `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile *string `pulumi:"wafProfile"`
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt *string `pulumi:"wanopt"`
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection *string `pulumi:"wanoptDetection"`
	// WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt *string `pulumi:"wanoptPassiveOpt"`
	// WAN optimization peer.
	WanoptPeer *string `pulumi:"wanoptPeer"`
	// WAN optimization profile.
	WanoptProfile *string `pulumi:"wanoptProfile"`
	// Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
	Wccp *string `pulumi:"wccp"`
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache *string `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps *string `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Web proxy forward server name.
	WebproxyForwardServer *string `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile *string `pulumi:"webproxyProfile"`
	// Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
	Wsso *string `pulumi:"wsso"`
	// Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
	ZtnaEmsTags []FirewallPolicyZtnaEmsTag `pulumi:"ztnaEmsTags"`
	// Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
	ZtnaGeoTags []FirewallPolicyZtnaGeoTag `pulumi:"ztnaGeoTags"`
	// Enable/disable zero trust access. Valid values: `enable`, `disable`.
	ZtnaStatus *string `pulumi:"ztnaStatus"`
}

// The set of arguments for constructing a FirewallPolicy resource.
type FirewallPolicyArgs struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action pulumi.StringPtrInput
	// Enable/disable anti-replay check. Valid values: `enable`, `disable`.
	AntiReplay pulumi.StringPtrInput
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories FirewallPolicyAppCategoryArrayInput
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups FirewallPolicyAppGroupArrayInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Application ID list. The structure of `application` block is documented below.
	Applications FirewallPolicyApplicationArrayInput
	// HTTPS server certificate for policy authentication.
	AuthCert pulumi.StringPtrInput
	// Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
	AuthPath pulumi.StringPtrInput
	// HTTP-to-HTTPS redirect address for firewall authentication.
	AuthRedirectAddr pulumi.StringPtrInput
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable block notification. Valid values: `enable`, `disable`.
	BlockNotification pulumi.StringPtrInput
	// Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt pulumi.StringPtrInput
	// Enable/disable capture packets. Valid values: `enable`, `disable`.
	CapturePacket pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
	CustomLogFields FirewallPolicyCustomLogFieldArrayInput
	// Decrypted traffic mirror.
	DecryptedTrafficMirror pulumi.StringPtrInput
	// Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
	DelayTcpNpuSession pulumi.StringPtrInput
	// Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
	Devices FirewallPolicyDeviceArrayInput
	// Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
	DiffservCopy pulumi.StringPtrInput
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward pulumi.StringPtrInput
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
	DiffservReverse pulumi.StringPtrInput
	// Change packet's DiffServ to this value.
	DiffservcodeForward pulumi.StringPtrInput
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev pulumi.StringPtrInput
	// Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
	Disclaimer pulumi.StringPtrInput
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	Dstaddr6Negate pulumi.StringPtrInput
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallPolicyDstaddr6ArrayInput
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringPtrInput
	// Destination address and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallPolicyDstaddrArrayInput
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs FirewallPolicyDstintfArrayInput
	// Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
	DynamicShaping pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable email collection. Valid values: `enable`, `disable`.
	EmailCollect pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
	Fec pulumi.StringPtrInput
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrInput
	// How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
	FirewallSessionDirty pulumi.StringPtrInput
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringPtrInput
	// Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
	Fsso pulumi.StringPtrInput
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm pulumi.StringPtrInput
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups FirewallPolicyFssoGroupArrayInput
	// Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
	GeoipAnycast pulumi.StringPtrInput
	// Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
	GeoipMatch pulumi.StringPtrInput
	// Label for the policy that appears when the GUI is in Global View mode.
	GlobalLabel pulumi.StringPtrInput
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups FirewallPolicyGroupArrayInput
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect pulumi.StringPtrInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Name of identity-based routing rule.
	IdentityBasedRoute pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound pulumi.StringPtrInput
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode pulumi.StringPtrInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService6 pulumi.StringPtrInput
	// Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups FirewallPolicyInternetService6CustomGroupArrayInput
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs FirewallPolicyInternetService6CustomArrayInput
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups FirewallPolicyInternetService6GroupArrayInput
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names FirewallPolicyInternetService6NameArrayInput
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src pulumi.StringPtrInput
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups FirewallPolicyInternetService6SrcCustomGroupArrayInput
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms FirewallPolicyInternetService6SrcCustomArrayInput
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups FirewallPolicyInternetService6SrcGroupArrayInput
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames FirewallPolicyInternetService6SrcNameArrayInput
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate pulumi.StringPtrInput
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups FirewallPolicyInternetServiceCustomGroupArrayInput
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms FirewallPolicyInternetServiceCustomArrayInput
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups FirewallPolicyInternetServiceGroupArrayInput
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds FirewallPolicyInternetServiceIdArrayInput
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames FirewallPolicyInternetServiceNameArrayInput
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringPtrInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringPtrInput
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups FirewallPolicyInternetServiceSrcCustomGroupArrayInput
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms FirewallPolicyInternetServiceSrcCustomArrayInput
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups FirewallPolicyInternetServiceSrcGroupArrayInput
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds FirewallPolicyInternetServiceSrcIdArrayInput
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames FirewallPolicyInternetServiceSrcNameArrayInput
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringPtrInput
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Label for the policy that appears when the GUI is in Section View mode.
	Label pulumi.StringPtrInput
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
	MatchVip pulumi.StringPtrInput
	// Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
	MatchVipOnly pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringPtrInput
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 pulumi.StringPtrInput
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 pulumi.StringPtrInput
	// Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
	Natinbound pulumi.StringPtrInput
	// Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
	Natip pulumi.StringPtrInput
	// Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
	Natoutbound pulumi.StringPtrInput
	// Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
	NetworkServiceDynamics FirewallPolicyNetworkServiceDynamicArrayInput
	// Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
	NetworkServiceSrcDynamics FirewallPolicyNetworkServiceSrcDynamicArrayInput
	// Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
	NpAcceleration pulumi.StringPtrInput
	// Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
	Ntlm pulumi.StringPtrInput
	// HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
	NtlmEnabledBrowsers FirewallPolicyNtlmEnabledBrowserArrayInput
	// Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
	NtlmGuest pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound pulumi.StringPtrInput
	// Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
	PassiveWanHealthMeasurement pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput
	// Accept UDP packets from any host. Valid values: `enable`, `disable`.
	PermitAnyHost pulumi.StringPtrInput
	// Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
	PermitStunHost pulumi.StringPtrInput
	// Enable/disable policy expiry. Valid values: `enable`, `disable`.
	PolicyExpiry pulumi.StringPtrInput
	// Policy expiry date (YYYY-MM-DD HH:MM:SS).
	PolicyExpiryDate pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s FirewallPolicyPoolname6ArrayInput
	// IP Pool names. The structure of `poolname` block is documented below.
	Poolnames FirewallPolicyPoolnameArrayInput
	// Name of profile group.
	ProfileGroup pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringPtrInput
	// Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
	RadiusMacAuthBypass pulumi.StringPtrInput
	// URL users are directed to after seeing and accepting the disclaimer or authenticating.
	RedirectUrl pulumi.StringPtrInput
	// Override the default replacement message group for this policy.
	ReplacemsgOverrideGroup pulumi.StringPtrInput
	// Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
	ReputationDirection pulumi.StringPtrInput
	// Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
	ReputationDirection6 pulumi.StringPtrInput
	// Minimum Reputation to take action.
	ReputationMinimum pulumi.IntPtrInput
	// IPv6 Minimum Reputation to take action.
	ReputationMinimum6 pulumi.IntPtrInput
	// Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
	Rsso pulumi.StringPtrInput
	// Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
	RtpAddrs FirewallPolicyRtpAddrArrayInput
	// Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
	RtpNat pulumi.StringPtrInput
	// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Schedule name.(Default is `always`)
	Schedule pulumi.StringPtrInput
	// Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
	ScheduleTimeout pulumi.StringPtrInput
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringPtrInput
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket pulumi.StringPtrInput
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringPtrInput
	// Service and service group names. The structure of `service` block is documented below.
	Services FirewallPolicyServiceArrayInput
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl pulumi.IntPtrInput
	// Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
	SgtCheck pulumi.StringPtrInput
	// Security group tags. The structure of `sgt` block is documented below.
	Sgts FirewallPolicySgtArrayInput
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
	SrcVendorMacs FirewallPolicySrcVendorMacArrayInput
	// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	Srcaddr6Negate pulumi.StringPtrInput
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallPolicySrcaddr6ArrayInput
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringPtrInput
	// Source address and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallPolicySrcaddrArrayInput
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs FirewallPolicySrcintfArrayInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect pulumi.StringPtrInput
	// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
	SslMirror pulumi.StringPtrInput
	// SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
	SslMirrorIntfs FirewallPolicySslMirrorIntfArrayInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver pulumi.IntPtrInput
	// Sender TCP maximum segment size (MSS).
	TcpMssSender pulumi.IntPtrInput
	// Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
	TcpSessionWithoutSyn pulumi.StringPtrInput
	// Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
	TimeoutSendRst pulumi.StringPtrInput
	// ToS (Type of Service) value used for comparison.
	Tos pulumi.StringPtrInput
	// Non-zero bit positions are used for comparison while zero bit positions are ignored.
	TosMask pulumi.StringPtrInput
	// Enable negated TOS match. Valid values: `enable`, `disable`.
	TosNegate pulumi.StringPtrInput
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrInput
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrInput
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories FirewallPolicyUrlCategoryArrayInput
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users FirewallPolicyUserArrayInput
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringPtrInput
	// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosFwd pulumi.IntPtrInput
	// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosRev pulumi.IntPtrInput
	// Set VLAN filters.
	VlanFilter pulumi.StringPtrInput
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrInput
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel pulumi.StringPtrInput
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringPtrInput
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt pulumi.StringPtrInput
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection pulumi.StringPtrInput
	// WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt pulumi.StringPtrInput
	// WAN optimization peer.
	WanoptPeer pulumi.StringPtrInput
	// WAN optimization profile.
	WanoptProfile pulumi.StringPtrInput
	// Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
	Wccp pulumi.StringPtrInput
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache pulumi.StringPtrInput
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Web proxy forward server name.
	WebproxyForwardServer pulumi.StringPtrInput
	// Webproxy profile name.
	WebproxyProfile pulumi.StringPtrInput
	// Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
	Wsso pulumi.StringPtrInput
	// Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
	ZtnaEmsTags FirewallPolicyZtnaEmsTagArrayInput
	// Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
	ZtnaGeoTags FirewallPolicyZtnaGeoTagArrayInput
	// Enable/disable zero trust access. Valid values: `enable`, `disable`.
	ZtnaStatus pulumi.StringPtrInput
}

func (FirewallPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallPolicyArgs)(nil)).Elem()
}

type FirewallPolicyInput interface {
	pulumi.Input

	ToFirewallPolicyOutput() FirewallPolicyOutput
	ToFirewallPolicyOutputWithContext(ctx context.Context) FirewallPolicyOutput
}

func (*FirewallPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicy)(nil)).Elem()
}

func (i *FirewallPolicy) ToFirewallPolicyOutput() FirewallPolicyOutput {
	return i.ToFirewallPolicyOutputWithContext(context.Background())
}

func (i *FirewallPolicy) ToFirewallPolicyOutputWithContext(ctx context.Context) FirewallPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyOutput)
}

// FirewallPolicyArrayInput is an input type that accepts FirewallPolicyArray and FirewallPolicyArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyArrayInput` via:
//
//	FirewallPolicyArray{ FirewallPolicyArgs{...} }
type FirewallPolicyArrayInput interface {
	pulumi.Input

	ToFirewallPolicyArrayOutput() FirewallPolicyArrayOutput
	ToFirewallPolicyArrayOutputWithContext(context.Context) FirewallPolicyArrayOutput
}

type FirewallPolicyArray []FirewallPolicyInput

func (FirewallPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallPolicy)(nil)).Elem()
}

func (i FirewallPolicyArray) ToFirewallPolicyArrayOutput() FirewallPolicyArrayOutput {
	return i.ToFirewallPolicyArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyArray) ToFirewallPolicyArrayOutputWithContext(ctx context.Context) FirewallPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyArrayOutput)
}

// FirewallPolicyMapInput is an input type that accepts FirewallPolicyMap and FirewallPolicyMapOutput values.
// You can construct a concrete instance of `FirewallPolicyMapInput` via:
//
//	FirewallPolicyMap{ "key": FirewallPolicyArgs{...} }
type FirewallPolicyMapInput interface {
	pulumi.Input

	ToFirewallPolicyMapOutput() FirewallPolicyMapOutput
	ToFirewallPolicyMapOutputWithContext(context.Context) FirewallPolicyMapOutput
}

type FirewallPolicyMap map[string]FirewallPolicyInput

func (FirewallPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallPolicy)(nil)).Elem()
}

func (i FirewallPolicyMap) ToFirewallPolicyMapOutput() FirewallPolicyMapOutput {
	return i.ToFirewallPolicyMapOutputWithContext(context.Background())
}

func (i FirewallPolicyMap) ToFirewallPolicyMapOutputWithContext(ctx context.Context) FirewallPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyMapOutput)
}

type FirewallPolicyOutput struct{ *pulumi.OutputState }

func (FirewallPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicy)(nil)).Elem()
}

func (o FirewallPolicyOutput) ToFirewallPolicyOutput() FirewallPolicyOutput {
	return o
}

func (o FirewallPolicyOutput) ToFirewallPolicyOutputWithContext(ctx context.Context) FirewallPolicyOutput {
	return o
}

// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
func (o FirewallPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Enable/disable anti-replay check. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) AntiReplay() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.AntiReplay }).(pulumi.StringOutput)
}

// Application category ID list. The structure of `appCategory` block is documented below.
func (o FirewallPolicyOutput) AppCategories() FirewallPolicyAppCategoryArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyAppCategoryArrayOutput { return v.AppCategories }).(FirewallPolicyAppCategoryArrayOutput)
}

// Application group names. The structure of `appGroup` block is documented below.
func (o FirewallPolicyOutput) AppGroups() FirewallPolicyAppGroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyAppGroupArrayOutput { return v.AppGroups }).(FirewallPolicyAppGroupArrayOutput)
}

// Name of an existing Application list.
func (o FirewallPolicyOutput) ApplicationList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.ApplicationList }).(pulumi.StringPtrOutput)
}

// Application ID list. The structure of `application` block is documented below.
func (o FirewallPolicyOutput) Applications() FirewallPolicyApplicationArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyApplicationArrayOutput { return v.Applications }).(FirewallPolicyApplicationArrayOutput)
}

// HTTPS server certificate for policy authentication.
func (o FirewallPolicyOutput) AuthCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.AuthCert }).(pulumi.StringPtrOutput)
}

// Enable/disable authentication-based routing. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) AuthPath() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.AuthPath }).(pulumi.StringOutput)
}

// HTTP-to-HTTPS redirect address for firewall authentication.
func (o FirewallPolicyOutput) AuthRedirectAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.AuthRedirectAddr }).(pulumi.StringPtrOutput)
}

// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Name of an existing Antivirus profile.
func (o FirewallPolicyOutput) AvProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.AvProfile }).(pulumi.StringPtrOutput)
}

// Enable/disable block notification. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) BlockNotification() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.BlockNotification }).(pulumi.StringOutput)
}

// Enable to exempt some users from the captive portal. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) CaptivePortalExempt() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.CaptivePortalExempt }).(pulumi.StringOutput)
}

// Enable/disable capture packets. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) CapturePacket() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.CapturePacket }).(pulumi.StringOutput)
}

// Name of an existing CIFS profile.
func (o FirewallPolicyOutput) CifsProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.CifsProfile }).(pulumi.StringPtrOutput)
}

// Comment.
func (o FirewallPolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Custom fields to append to log messages for this policy. The structure of `customLogFields` block is documented below.
func (o FirewallPolicyOutput) CustomLogFields() FirewallPolicyCustomLogFieldArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyCustomLogFieldArrayOutput { return v.CustomLogFields }).(FirewallPolicyCustomLogFieldArrayOutput)
}

// Decrypted traffic mirror.
func (o FirewallPolicyOutput) DecryptedTrafficMirror() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.DecryptedTrafficMirror }).(pulumi.StringPtrOutput)
}

// Enable TCP NPU session delay to guarantee packet order of 3-way handshake. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) DelayTcpNpuSession() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.DelayTcpNpuSession }).(pulumi.StringOutput)
}

// Names of devices or device groups that can be matched by the policy. The structure of `devices` block is documented below.
func (o FirewallPolicyOutput) Devices() FirewallPolicyDeviceArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyDeviceArrayOutput { return v.Devices }).(FirewallPolicyDeviceArrayOutput)
}

// Enable to copy packet's DiffServ values from session's original direction to its reply direction. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) DiffservCopy() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.DiffservCopy }).(pulumi.StringOutput)
}

// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) DiffservForward() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.DiffservForward }).(pulumi.StringOutput)
}

// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) DiffservReverse() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.DiffservReverse }).(pulumi.StringOutput)
}

// Change packet's DiffServ to this value.
func (o FirewallPolicyOutput) DiffservcodeForward() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.DiffservcodeForward }).(pulumi.StringOutput)
}

// Change packet's reverse (reply) DiffServ to this value.
func (o FirewallPolicyOutput) DiffservcodeRev() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.DiffservcodeRev }).(pulumi.StringOutput)
}

// Enable/disable user authentication disclaimer. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Disclaimer() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Disclaimer }).(pulumi.StringOutput)
}

// Name of an existing DLP profile.
func (o FirewallPolicyOutput) DlpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.DlpProfile }).(pulumi.StringPtrOutput)
}

// Name of an existing DLP sensor.
func (o FirewallPolicyOutput) DlpSensor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.DlpSensor }).(pulumi.StringPtrOutput)
}

// Name of an existing DNS filter profile.
func (o FirewallPolicyOutput) DnsfilterProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.DnsfilterProfile }).(pulumi.StringPtrOutput)
}

// Enable DSRI to ignore HTTP server responses. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Dsri() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Dsri }).(pulumi.StringOutput)
}

// When enabled dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Dstaddr6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Dstaddr6Negate }).(pulumi.StringOutput)
}

// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
func (o FirewallPolicyOutput) Dstaddr6s() FirewallPolicyDstaddr6ArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyDstaddr6ArrayOutput { return v.Dstaddr6s }).(FirewallPolicyDstaddr6ArrayOutput)
}

// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) DstaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.DstaddrNegate }).(pulumi.StringOutput)
}

// Destination address and address group names. The structure of `dstaddr` block is documented below.
func (o FirewallPolicyOutput) Dstaddrs() FirewallPolicyDstaddrArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyDstaddrArrayOutput { return v.Dstaddrs }).(FirewallPolicyDstaddrArrayOutput)
}

// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
func (o FirewallPolicyOutput) Dstintfs() FirewallPolicyDstintfArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyDstintfArrayOutput { return v.Dstintfs }).(FirewallPolicyDstintfArrayOutput)
}

// Enable/disable dynamic RADIUS defined traffic shaping. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) DynamicShaping() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.DynamicShaping }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o FirewallPolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable email collection. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) EmailCollect() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.EmailCollect }).(pulumi.StringOutput)
}

// Name of an existing email filter profile.
func (o FirewallPolicyOutput) EmailfilterProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.EmailfilterProfile }).(pulumi.StringPtrOutput)
}

// Enable/disable Forward Error Correction on traffic matching this policy on a FEC device. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Fec() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Fec }).(pulumi.StringOutput)
}

// Name of an existing file-filter profile.
func (o FirewallPolicyOutput) FileFilterProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.FileFilterProfile }).(pulumi.StringPtrOutput)
}

// How to handle sessions if the configuration of this firewall policy changes. Valid values: `check-all`, `check-new`.
func (o FirewallPolicyOutput) FirewallSessionDirty() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.FirewallSessionDirty }).(pulumi.StringOutput)
}

// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Fixedport() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Fixedport }).(pulumi.StringOutput)
}

// Enable/disable Fortinet Single Sign-On. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Fsso() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.Fsso }).(pulumi.StringPtrOutput)
}

// FSSO agent to use for NTLM authentication.
func (o FirewallPolicyOutput) FssoAgentForNtlm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.FssoAgentForNtlm }).(pulumi.StringPtrOutput)
}

// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
func (o FirewallPolicyOutput) FssoGroups() FirewallPolicyFssoGroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyFssoGroupArrayOutput { return v.FssoGroups }).(FirewallPolicyFssoGroupArrayOutput)
}

// Enable/disable recognition of anycast IP addresses using the geography IP database. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) GeoipAnycast() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.GeoipAnycast }).(pulumi.StringOutput)
}

// Match geography address based either on its physical location or registered location. Valid values: `physical-location`, `registered-location`.
func (o FirewallPolicyOutput) GeoipMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.GeoipMatch }).(pulumi.StringOutput)
}

// Label for the policy that appears when the GUI is in Global View mode.
func (o FirewallPolicyOutput) GlobalLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.GlobalLabel }).(pulumi.StringPtrOutput)
}

// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
func (o FirewallPolicyOutput) Groups() FirewallPolicyGroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyGroupArrayOutput { return v.Groups }).(FirewallPolicyGroupArrayOutput)
}

// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) HttpPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.HttpPolicyRedirect }).(pulumi.StringOutput)
}

// Name of an existing ICAP profile.
func (o FirewallPolicyOutput) IcapProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.IcapProfile }).(pulumi.StringPtrOutput)
}

// Name of identity-based routing rule.
func (o FirewallPolicyOutput) IdentityBasedRoute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.IdentityBasedRoute }).(pulumi.StringPtrOutput)
}

// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Inbound() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Inbound }).(pulumi.StringOutput)
}

// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
func (o FirewallPolicyOutput) InspectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.InspectionMode }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) InternetService() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.InternetService }).(pulumi.StringOutput)
}

// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) InternetService6() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.InternetService6 }).(pulumi.StringOutput)
}

// Custom Internet Service6 group name. The structure of `internetService6CustomGroup` block is documented below.
func (o FirewallPolicyOutput) InternetService6CustomGroups() FirewallPolicyInternetService6CustomGroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetService6CustomGroupArrayOutput {
		return v.InternetService6CustomGroups
	}).(FirewallPolicyInternetService6CustomGroupArrayOutput)
}

// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
func (o FirewallPolicyOutput) InternetService6Customs() FirewallPolicyInternetService6CustomArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetService6CustomArrayOutput {
		return v.InternetService6Customs
	}).(FirewallPolicyInternetService6CustomArrayOutput)
}

// Internet Service group name. The structure of `internetService6Group` block is documented below.
func (o FirewallPolicyOutput) InternetService6Groups() FirewallPolicyInternetService6GroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetService6GroupArrayOutput {
		return v.InternetService6Groups
	}).(FirewallPolicyInternetService6GroupArrayOutput)
}

// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
func (o FirewallPolicyOutput) InternetService6Names() FirewallPolicyInternetService6NameArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetService6NameArrayOutput { return v.InternetService6Names }).(FirewallPolicyInternetService6NameArrayOutput)
}

// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) InternetService6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.InternetService6Negate }).(pulumi.StringOutput)
}

// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) InternetService6Src() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.InternetService6Src }).(pulumi.StringOutput)
}

// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
func (o FirewallPolicyOutput) InternetService6SrcCustomGroups() FirewallPolicyInternetService6SrcCustomGroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetService6SrcCustomGroupArrayOutput {
		return v.InternetService6SrcCustomGroups
	}).(FirewallPolicyInternetService6SrcCustomGroupArrayOutput)
}

// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
func (o FirewallPolicyOutput) InternetService6SrcCustoms() FirewallPolicyInternetService6SrcCustomArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetService6SrcCustomArrayOutput {
		return v.InternetService6SrcCustoms
	}).(FirewallPolicyInternetService6SrcCustomArrayOutput)
}

// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
func (o FirewallPolicyOutput) InternetService6SrcGroups() FirewallPolicyInternetService6SrcGroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetService6SrcGroupArrayOutput {
		return v.InternetService6SrcGroups
	}).(FirewallPolicyInternetService6SrcGroupArrayOutput)
}

// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
func (o FirewallPolicyOutput) InternetService6SrcNames() FirewallPolicyInternetService6SrcNameArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetService6SrcNameArrayOutput {
		return v.InternetService6SrcNames
	}).(FirewallPolicyInternetService6SrcNameArrayOutput)
}

// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) InternetService6SrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.InternetService6SrcNegate }).(pulumi.StringOutput)
}

// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
func (o FirewallPolicyOutput) InternetServiceCustomGroups() FirewallPolicyInternetServiceCustomGroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetServiceCustomGroupArrayOutput {
		return v.InternetServiceCustomGroups
	}).(FirewallPolicyInternetServiceCustomGroupArrayOutput)
}

// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
func (o FirewallPolicyOutput) InternetServiceCustoms() FirewallPolicyInternetServiceCustomArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetServiceCustomArrayOutput {
		return v.InternetServiceCustoms
	}).(FirewallPolicyInternetServiceCustomArrayOutput)
}

// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
func (o FirewallPolicyOutput) InternetServiceGroups() FirewallPolicyInternetServiceGroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetServiceGroupArrayOutput { return v.InternetServiceGroups }).(FirewallPolicyInternetServiceGroupArrayOutput)
}

// Internet Service ID. The structure of `internetServiceId` block is documented below.
func (o FirewallPolicyOutput) InternetServiceIds() FirewallPolicyInternetServiceIdArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetServiceIdArrayOutput { return v.InternetServiceIds }).(FirewallPolicyInternetServiceIdArrayOutput)
}

// Internet Service name. The structure of `internetServiceName` block is documented below.
func (o FirewallPolicyOutput) InternetServiceNames() FirewallPolicyInternetServiceNameArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetServiceNameArrayOutput { return v.InternetServiceNames }).(FirewallPolicyInternetServiceNameArrayOutput)
}

// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) InternetServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.InternetServiceNegate }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) InternetServiceSrc() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.InternetServiceSrc }).(pulumi.StringOutput)
}

// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
func (o FirewallPolicyOutput) InternetServiceSrcCustomGroups() FirewallPolicyInternetServiceSrcCustomGroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetServiceSrcCustomGroupArrayOutput {
		return v.InternetServiceSrcCustomGroups
	}).(FirewallPolicyInternetServiceSrcCustomGroupArrayOutput)
}

// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
func (o FirewallPolicyOutput) InternetServiceSrcCustoms() FirewallPolicyInternetServiceSrcCustomArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetServiceSrcCustomArrayOutput {
		return v.InternetServiceSrcCustoms
	}).(FirewallPolicyInternetServiceSrcCustomArrayOutput)
}

// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
func (o FirewallPolicyOutput) InternetServiceSrcGroups() FirewallPolicyInternetServiceSrcGroupArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetServiceSrcGroupArrayOutput {
		return v.InternetServiceSrcGroups
	}).(FirewallPolicyInternetServiceSrcGroupArrayOutput)
}

// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
func (o FirewallPolicyOutput) InternetServiceSrcIds() FirewallPolicyInternetServiceSrcIdArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetServiceSrcIdArrayOutput { return v.InternetServiceSrcIds }).(FirewallPolicyInternetServiceSrcIdArrayOutput)
}

// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
func (o FirewallPolicyOutput) InternetServiceSrcNames() FirewallPolicyInternetServiceSrcNameArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyInternetServiceSrcNameArrayOutput {
		return v.InternetServiceSrcNames
	}).(FirewallPolicyInternetServiceSrcNameArrayOutput)
}

// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) InternetServiceSrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.InternetServiceSrcNegate }).(pulumi.StringOutput)
}

// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Ippool() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Ippool }).(pulumi.StringOutput)
}

// Name of an existing IPS sensor.
func (o FirewallPolicyOutput) IpsSensor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.IpsSensor }).(pulumi.StringPtrOutput)
}

// Label for the policy that appears when the GUI is in Section View mode.
func (o FirewallPolicyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) LearningMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.LearningMode }).(pulumi.StringPtrOutput)
}

// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
func (o FirewallPolicyOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Record logs when a session starts. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) LogtrafficStart() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.LogtrafficStart }).(pulumi.StringOutput)
}

// Enable to match packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) MatchVip() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.MatchVip }).(pulumi.StringOutput)
}

// Enable/disable matching of only those packets that have had their destination addresses changed by a VIP. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) MatchVipOnly() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.MatchVipOnly }).(pulumi.StringOutput)
}

// Policy name.
func (o FirewallPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable source NAT. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Nat() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Nat }).(pulumi.StringOutput)
}

// Enable/disable NAT46. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Nat46() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Nat46 }).(pulumi.StringOutput)
}

// Enable/disable NAT64. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Nat64() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Nat64 }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: apply destination NAT to inbound traffic. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Natinbound() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Natinbound }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
func (o FirewallPolicyOutput) Natip() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Natip }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: apply source NAT to outbound traffic. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Natoutbound() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Natoutbound }).(pulumi.StringOutput)
}

// Dynamic Network Service name. The structure of `networkServiceDynamic` block is documented below.
func (o FirewallPolicyOutput) NetworkServiceDynamics() FirewallPolicyNetworkServiceDynamicArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyNetworkServiceDynamicArrayOutput {
		return v.NetworkServiceDynamics
	}).(FirewallPolicyNetworkServiceDynamicArrayOutput)
}

// Dynamic Network Service source name. The structure of `networkServiceSrcDynamic` block is documented below.
func (o FirewallPolicyOutput) NetworkServiceSrcDynamics() FirewallPolicyNetworkServiceSrcDynamicArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyNetworkServiceSrcDynamicArrayOutput {
		return v.NetworkServiceSrcDynamics
	}).(FirewallPolicyNetworkServiceSrcDynamicArrayOutput)
}

// Enable/disable UTM Network Processor acceleration. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) NpAcceleration() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.NpAcceleration }).(pulumi.StringOutput)
}

// Enable/disable NTLM authentication. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Ntlm() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Ntlm }).(pulumi.StringOutput)
}

// HTTP-User-Agent value of supported browsers. The structure of `ntlmEnabledBrowsers` block is documented below.
func (o FirewallPolicyOutput) NtlmEnabledBrowsers() FirewallPolicyNtlmEnabledBrowserArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyNtlmEnabledBrowserArrayOutput { return v.NtlmEnabledBrowsers }).(FirewallPolicyNtlmEnabledBrowserArrayOutput)
}

// Enable/disable NTLM guest user access. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) NtlmGuest() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.NtlmGuest }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Outbound() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Outbound }).(pulumi.StringOutput)
}

// Enable/disable passive WAN health measurement. When enabled, auto-asic-offload is disabled. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) PassiveWanHealthMeasurement() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.PassiveWanHealthMeasurement }).(pulumi.StringOutput)
}

// Per-IP traffic shaper.
func (o FirewallPolicyOutput) PerIpShaper() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.PerIpShaper }).(pulumi.StringPtrOutput)
}

// Accept UDP packets from any host. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) PermitAnyHost() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.PermitAnyHost }).(pulumi.StringOutput)
}

// Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) PermitStunHost() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.PermitStunHost }).(pulumi.StringOutput)
}

// Enable/disable policy expiry. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) PolicyExpiry() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.PolicyExpiry }).(pulumi.StringOutput)
}

// Policy expiry date (YYYY-MM-DD HH:MM:SS).
func (o FirewallPolicyOutput) PolicyExpiryDate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.PolicyExpiryDate }).(pulumi.StringOutput)
}

// Policy ID.
func (o FirewallPolicyOutput) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// IPv6 pool names. The structure of `poolname6` block is documented below.
func (o FirewallPolicyOutput) Poolname6s() FirewallPolicyPoolname6ArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyPoolname6ArrayOutput { return v.Poolname6s }).(FirewallPolicyPoolname6ArrayOutput)
}

// IP Pool names. The structure of `poolname` block is documented below.
func (o FirewallPolicyOutput) Poolnames() FirewallPolicyPoolnameArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyPoolnameArrayOutput { return v.Poolnames }).(FirewallPolicyPoolnameArrayOutput)
}

// Name of profile group.
func (o FirewallPolicyOutput) ProfileGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.ProfileGroup }).(pulumi.StringPtrOutput)
}

// Name of an existing Protocol options profile.
func (o FirewallPolicyOutput) ProfileProtocolOptions() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.ProfileProtocolOptions }).(pulumi.StringOutput)
}

// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
func (o FirewallPolicyOutput) ProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.ProfileType }).(pulumi.StringOutput)
}

// Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) RadiusMacAuthBypass() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.RadiusMacAuthBypass }).(pulumi.StringOutput)
}

// URL users are directed to after seeing and accepting the disclaimer or authenticating.
func (o FirewallPolicyOutput) RedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.RedirectUrl }).(pulumi.StringPtrOutput)
}

// Override the default replacement message group for this policy.
func (o FirewallPolicyOutput) ReplacemsgOverrideGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.ReplacemsgOverrideGroup }).(pulumi.StringPtrOutput)
}

// Direction of the initial traffic for reputation to take effect. Valid values: `source`, `destination`.
func (o FirewallPolicyOutput) ReputationDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.ReputationDirection }).(pulumi.StringOutput)
}

// Direction of the initial traffic for IPv6 reputation to take effect. Valid values: `source`, `destination`.
func (o FirewallPolicyOutput) ReputationDirection6() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.ReputationDirection6 }).(pulumi.StringOutput)
}

// Minimum Reputation to take action.
func (o FirewallPolicyOutput) ReputationMinimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.IntPtrOutput { return v.ReputationMinimum }).(pulumi.IntPtrOutput)
}

// IPv6 Minimum Reputation to take action.
func (o FirewallPolicyOutput) ReputationMinimum6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.IntPtrOutput { return v.ReputationMinimum6 }).(pulumi.IntPtrOutput)
}

// Enable/disable RADIUS single sign-on (RSSO). Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Rsso() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.Rsso }).(pulumi.StringPtrOutput)
}

// Address names if this is an RTP NAT policy. The structure of `rtpAddr` block is documented below.
func (o FirewallPolicyOutput) RtpAddrs() FirewallPolicyRtpAddrArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyRtpAddrArrayOutput { return v.RtpAddrs }).(FirewallPolicyRtpAddrArrayOutput)
}

// Enable Real Time Protocol (RTP) NAT. Valid values: `disable`, `enable`.
func (o FirewallPolicyOutput) RtpNat() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.RtpNat }).(pulumi.StringOutput)
}

// Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
func (o FirewallPolicyOutput) ScanBotnetConnections() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.ScanBotnetConnections }).(pulumi.StringPtrOutput)
}

// Schedule name.(Default is `always`)
func (o FirewallPolicyOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.Schedule }).(pulumi.StringPtrOutput)
}

// Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) ScheduleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.ScheduleTimeout }).(pulumi.StringOutput)
}

// Name of an existing SCTP filter profile.
func (o FirewallPolicyOutput) SctpFilterProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.SctpFilterProfile }).(pulumi.StringPtrOutput)
}

// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
func (o FirewallPolicyOutput) SendDenyPacket() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.SendDenyPacket }).(pulumi.StringOutput)
}

// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) ServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.ServiceNegate }).(pulumi.StringOutput)
}

// Service and service group names. The structure of `service` block is documented below.
func (o FirewallPolicyOutput) Services() FirewallPolicyServiceArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyServiceArrayOutput { return v.Services }).(FirewallPolicyServiceArrayOutput)
}

// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
func (o FirewallPolicyOutput) SessionTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.IntPtrOutput { return v.SessionTtl }).(pulumi.IntPtrOutput)
}

// Enable/disable security group tags (SGT) check. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) SgtCheck() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.SgtCheck }).(pulumi.StringOutput)
}

// Security group tags. The structure of `sgt` block is documented below.
func (o FirewallPolicyOutput) Sgts() FirewallPolicySgtArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicySgtArrayOutput { return v.Sgts }).(FirewallPolicySgtArrayOutput)
}

// Name of an existing Spam filter profile.
func (o FirewallPolicyOutput) SpamfilterProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.SpamfilterProfile }).(pulumi.StringPtrOutput)
}

// Vendor MAC source ID. The structure of `srcVendorMac` block is documented below.
func (o FirewallPolicyOutput) SrcVendorMacs() FirewallPolicySrcVendorMacArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicySrcVendorMacArrayOutput { return v.SrcVendorMacs }).(FirewallPolicySrcVendorMacArrayOutput)
}

// When enabled srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Srcaddr6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Srcaddr6Negate }).(pulumi.StringOutput)
}

// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
func (o FirewallPolicyOutput) Srcaddr6s() FirewallPolicySrcaddr6ArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicySrcaddr6ArrayOutput { return v.Srcaddr6s }).(FirewallPolicySrcaddr6ArrayOutput)
}

// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) SrcaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.SrcaddrNegate }).(pulumi.StringOutput)
}

// Source address and address group names. The structure of `srcaddr` block is documented below.
func (o FirewallPolicyOutput) Srcaddrs() FirewallPolicySrcaddrArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicySrcaddrArrayOutput { return v.Srcaddrs }).(FirewallPolicySrcaddrArrayOutput)
}

// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
func (o FirewallPolicyOutput) Srcintfs() FirewallPolicySrcintfArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicySrcintfArrayOutput { return v.Srcintfs }).(FirewallPolicySrcintfArrayOutput)
}

// Name of an existing SSH filter profile.
func (o FirewallPolicyOutput) SshFilterProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.SshFilterProfile }).(pulumi.StringPtrOutput)
}

// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) SshPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.SshPolicyRedirect }).(pulumi.StringOutput)
}

// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring). Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) SslMirror() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.SslMirror }).(pulumi.StringPtrOutput)
}

// SSL mirror interface name. The structure of `sslMirrorIntf` block is documented below.
func (o FirewallPolicyOutput) SslMirrorIntfs() FirewallPolicySslMirrorIntfArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicySslMirrorIntfArrayOutput { return v.SslMirrorIntfs }).(FirewallPolicySslMirrorIntfArrayOutput)
}

// Name of an existing SSL SSH profile.
func (o FirewallPolicyOutput) SslSshProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.SslSshProfile }).(pulumi.StringOutput)
}

// Enable or disable this policy. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Receiver TCP maximum segment size (MSS).
func (o FirewallPolicyOutput) TcpMssReceiver() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.IntPtrOutput { return v.TcpMssReceiver }).(pulumi.IntPtrOutput)
}

// Sender TCP maximum segment size (MSS).
func (o FirewallPolicyOutput) TcpMssSender() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.IntPtrOutput { return v.TcpMssSender }).(pulumi.IntPtrOutput)
}

// Enable/disable creation of TCP session without SYN flag. Valid values: `all`, `data-only`, `disable`.
func (o FirewallPolicyOutput) TcpSessionWithoutSyn() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.TcpSessionWithoutSyn }).(pulumi.StringOutput)
}

// Enable/disable sending RST packets when TCP sessions expire. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) TimeoutSendRst() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.TimeoutSendRst }).(pulumi.StringOutput)
}

// ToS (Type of Service) value used for comparison.
func (o FirewallPolicyOutput) Tos() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Tos }).(pulumi.StringOutput)
}

// Non-zero bit positions are used for comparison while zero bit positions are ignored.
func (o FirewallPolicyOutput) TosMask() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.TosMask }).(pulumi.StringOutput)
}

// Enable negated TOS match. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) TosNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.TosNegate }).(pulumi.StringOutput)
}

// Traffic shaper.
func (o FirewallPolicyOutput) TrafficShaper() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.TrafficShaper }).(pulumi.StringPtrOutput)
}

// Reverse traffic shaper.
func (o FirewallPolicyOutput) TrafficShaperReverse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.TrafficShaperReverse }).(pulumi.StringPtrOutput)
}

// URL category ID list. The structure of `urlCategory` block is documented below.
func (o FirewallPolicyOutput) UrlCategories() FirewallPolicyUrlCategoryArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyUrlCategoryArrayOutput { return v.UrlCategories }).(FirewallPolicyUrlCategoryArrayOutput)
}

// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
func (o FirewallPolicyOutput) Users() FirewallPolicyUserArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyUserArrayOutput { return v.Users }).(FirewallPolicyUserArrayOutput)
}

// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) UtmStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.UtmStatus }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o FirewallPolicyOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FirewallPolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Name of an existing VideoFilter profile.
func (o FirewallPolicyOutput) VideofilterProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.VideofilterProfile }).(pulumi.StringPtrOutput)
}

// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
func (o FirewallPolicyOutput) VlanCosFwd() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.IntOutput { return v.VlanCosFwd }).(pulumi.IntOutput)
}

// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest.
func (o FirewallPolicyOutput) VlanCosRev() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.IntOutput { return v.VlanCosRev }).(pulumi.IntOutput)
}

// Set VLAN filters.
func (o FirewallPolicyOutput) VlanFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.VlanFilter }).(pulumi.StringPtrOutput)
}

// Name of an existing VoIP profile.
func (o FirewallPolicyOutput) VoipProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.VoipProfile }).(pulumi.StringPtrOutput)
}

// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
func (o FirewallPolicyOutput) Vpntunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.Vpntunnel }).(pulumi.StringPtrOutput)
}

// Name of an existing Web application firewall profile.
func (o FirewallPolicyOutput) WafProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.WafProfile }).(pulumi.StringPtrOutput)
}

// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Wanopt() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Wanopt }).(pulumi.StringOutput)
}

// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
func (o FirewallPolicyOutput) WanoptDetection() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.WanoptDetection }).(pulumi.StringOutput)
}

// WAN optimization passive mode options. This option decides what IP address will be used to connect server. Valid values: `default`, `transparent`, `non-transparent`.
func (o FirewallPolicyOutput) WanoptPassiveOpt() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.WanoptPassiveOpt }).(pulumi.StringOutput)
}

// WAN optimization peer.
func (o FirewallPolicyOutput) WanoptPeer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.WanoptPeer }).(pulumi.StringPtrOutput)
}

// WAN optimization profile.
func (o FirewallPolicyOutput) WanoptProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.WanoptProfile }).(pulumi.StringPtrOutput)
}

// Enable/disable forwarding traffic matching this policy to a configured WCCP server. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Wccp() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Wccp }).(pulumi.StringOutput)
}

// Enable/disable web cache. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Webcache() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.Webcache }).(pulumi.StringOutput)
}

// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
func (o FirewallPolicyOutput) WebcacheHttps() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.WebcacheHttps }).(pulumi.StringOutput)
}

// Name of an existing Web filter profile.
func (o FirewallPolicyOutput) WebfilterProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.WebfilterProfile }).(pulumi.StringPtrOutput)
}

// Web proxy forward server name.
func (o FirewallPolicyOutput) WebproxyForwardServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.WebproxyForwardServer }).(pulumi.StringPtrOutput)
}

// Webproxy profile name.
func (o FirewallPolicyOutput) WebproxyProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.WebproxyProfile }).(pulumi.StringPtrOutput)
}

// Enable/disable WiFi Single Sign On (WSSO). Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) Wsso() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringPtrOutput { return v.Wsso }).(pulumi.StringPtrOutput)
}

// Source ztna-ems-tag names. The structure of `ztnaEmsTag` block is documented below.
func (o FirewallPolicyOutput) ZtnaEmsTags() FirewallPolicyZtnaEmsTagArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyZtnaEmsTagArrayOutput { return v.ZtnaEmsTags }).(FirewallPolicyZtnaEmsTagArrayOutput)
}

// Source ztna-geo-tag names. The structure of `ztnaGeoTag` block is documented below.
func (o FirewallPolicyOutput) ZtnaGeoTags() FirewallPolicyZtnaGeoTagArrayOutput {
	return o.ApplyT(func(v *FirewallPolicy) FirewallPolicyZtnaGeoTagArrayOutput { return v.ZtnaGeoTags }).(FirewallPolicyZtnaGeoTagArrayOutput)
}

// Enable/disable zero trust access. Valid values: `enable`, `disable`.
func (o FirewallPolicyOutput) ZtnaStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallPolicy) pulumi.StringOutput { return v.ZtnaStatus }).(pulumi.StringOutput)
}

type FirewallPolicyArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallPolicy)(nil)).Elem()
}

func (o FirewallPolicyArrayOutput) ToFirewallPolicyArrayOutput() FirewallPolicyArrayOutput {
	return o
}

func (o FirewallPolicyArrayOutput) ToFirewallPolicyArrayOutputWithContext(ctx context.Context) FirewallPolicyArrayOutput {
	return o
}

func (o FirewallPolicyArrayOutput) Index(i pulumi.IntInput) FirewallPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallPolicy {
		return vs[0].([]*FirewallPolicy)[vs[1].(int)]
	}).(FirewallPolicyOutput)
}

type FirewallPolicyMapOutput struct{ *pulumi.OutputState }

func (FirewallPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallPolicy)(nil)).Elem()
}

func (o FirewallPolicyMapOutput) ToFirewallPolicyMapOutput() FirewallPolicyMapOutput {
	return o
}

func (o FirewallPolicyMapOutput) ToFirewallPolicyMapOutputWithContext(ctx context.Context) FirewallPolicyMapOutput {
	return o
}

func (o FirewallPolicyMapOutput) MapIndex(k pulumi.StringInput) FirewallPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallPolicy {
		return vs[0].(map[string]*FirewallPolicy)[vs[1].(string)]
	}).(FirewallPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyInput)(nil)).Elem(), &FirewallPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyArrayInput)(nil)).Elem(), FirewallPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyMapInput)(nil)).Elem(), FirewallPolicyMap{})
	pulumi.RegisterOutputType(FirewallPolicyOutput{})
	pulumi.RegisterOutputType(FirewallPolicyArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyMapOutput{})
}
