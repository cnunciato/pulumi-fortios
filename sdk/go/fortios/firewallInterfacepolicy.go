// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPv4 interface policies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFirewallInterfacepolicy(ctx, "trname", &fortios.FirewallInterfacepolicyArgs{
//				AddressType:           pulumi.String("ipv4"),
//				ApplicationListStatus: pulumi.String("disable"),
//				AvProfileStatus:       pulumi.String("disable"),
//				DlpSensorStatus:       pulumi.String("disable"),
//				Dsri:                  pulumi.String("disable"),
//				Dstaddrs: fortios.FirewallInterfacepolicyDstaddrArray{
//					&fortios.FirewallInterfacepolicyDstaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Interface:             pulumi.String("port4"),
//				IpsSensorStatus:       pulumi.String("disable"),
//				Logtraffic:            pulumi.String("all"),
//				Policyid:              pulumi.Int(1),
//				ScanBotnetConnections: pulumi.String("block"),
//				Services: fortios.FirewallInterfacepolicyServiceArray{
//					&fortios.FirewallInterfacepolicyServiceArgs{
//						Name: pulumi.String("ALL"),
//					},
//				},
//				SpamfilterProfileStatus: pulumi.String("disable"),
//				Srcaddrs: fortios.FirewallInterfacepolicySrcaddrArray{
//					&fortios.FirewallInterfacepolicySrcaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Status:                 pulumi.String("enable"),
//				WebfilterProfileStatus: pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Firewall InterfacePolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/firewallInterfacepolicy:FirewallInterfacepolicy labelname {{policyid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/firewallInterfacepolicy:FirewallInterfacepolicy labelname {{policyid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FirewallInterfacepolicy struct {
	pulumi.CustomResourceState

	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringOutput `pulumi:"addressType"`
	// Application list name.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringOutput `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringOutput `pulumi:"avProfileStatus"`
	// Comments.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// DLP profile name.
	DlpProfile pulumi.StringOutput `pulumi:"dlpProfile"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringOutput `pulumi:"dlpProfileStatus"`
	// DLP sensor name.
	DlpSensor pulumi.StringOutput `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringOutput `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringOutput `pulumi:"dsri"`
	// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallInterfacepolicyDstaddrArrayOutput `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile pulumi.StringOutput `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringOutput `pulumi:"emailfilterProfileStatus"`
	// Monitored interface name from available interfaces.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringOutput `pulumi:"ipsSensorStatus"`
	// Label.
	Label pulumi.StringOutput `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringOutput `pulumi:"scanBotnetConnections"`
	// Service object from available options. The structure of `service` block is documented below.
	Services FirewallInterfacepolicyServiceArrayOutput `pulumi:"services"`
	// Antispam profile.
	SpamfilterProfile pulumi.StringOutput `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringOutput `pulumi:"spamfilterProfileStatus"`
	// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallInterfacepolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringOutput `pulumi:"webfilterProfileStatus"`
}

// NewFirewallInterfacepolicy registers a new resource with the given unique name, arguments, and options.
func NewFirewallInterfacepolicy(ctx *pulumi.Context,
	name string, args *FirewallInterfacepolicyArgs, opts ...pulumi.ResourceOption) (*FirewallInterfacepolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Interface == nil {
		return nil, errors.New("invalid value for required argument 'Interface'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallInterfacepolicy
	err := ctx.RegisterResource("fortios:index/firewallInterfacepolicy:FirewallInterfacepolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallInterfacepolicy gets an existing FirewallInterfacepolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallInterfacepolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallInterfacepolicyState, opts ...pulumi.ResourceOption) (*FirewallInterfacepolicy, error) {
	var resource FirewallInterfacepolicy
	err := ctx.ReadResource("fortios:index/firewallInterfacepolicy:FirewallInterfacepolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallInterfacepolicy resources.
type firewallInterfacepolicyState struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType *string `pulumi:"addressType"`
	// Application list name.
	ApplicationList *string `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus *string `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus *string `pulumi:"avProfileStatus"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// DLP profile name.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus *string `pulumi:"dlpProfileStatus"`
	// DLP sensor name.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus *string `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
	Dstaddrs []FirewallInterfacepolicyDstaddr `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus *string `pulumi:"emailfilterProfileStatus"`
	// Monitored interface name from available interfaces.
	Interface *string `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus *string `pulumi:"ipsSensorStatus"`
	// Label.
	Label *string `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Service object from available options. The structure of `service` block is documented below.
	Services []FirewallInterfacepolicyService `pulumi:"services"`
	// Antispam profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus *string `pulumi:"spamfilterProfileStatus"`
	// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallInterfacepolicySrcaddr `pulumi:"srcaddrs"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus *string `pulumi:"webfilterProfileStatus"`
}

type FirewallInterfacepolicyState struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringPtrInput
	// Application list name.
	ApplicationList pulumi.StringPtrInput
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringPtrInput
	// Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// DLP profile name.
	DlpProfile pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringPtrInput
	// DLP sensor name.
	DlpSensor pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringPtrInput
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallInterfacepolicyDstaddrArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringPtrInput
	// Monitored interface name from available interfaces.
	Interface pulumi.StringPtrInput
	// IPS sensor name.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringPtrInput
	// Label.
	Label pulumi.StringPtrInput
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Service object from available options. The structure of `service` block is documented below.
	Services FirewallInterfacepolicyServiceArrayInput
	// Antispam profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringPtrInput
	// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallInterfacepolicySrcaddrArrayInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringPtrInput
}

func (FirewallInterfacepolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallInterfacepolicyState)(nil)).Elem()
}

type firewallInterfacepolicyArgs struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType *string `pulumi:"addressType"`
	// Application list name.
	ApplicationList *string `pulumi:"applicationList"`
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus *string `pulumi:"applicationListStatus"`
	// Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus *string `pulumi:"avProfileStatus"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// DLP profile name.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus *string `pulumi:"dlpProfileStatus"`
	// DLP sensor name.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus *string `pulumi:"dlpSensorStatus"`
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri *string `pulumi:"dsri"`
	// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
	Dstaddrs []FirewallInterfacepolicyDstaddr `pulumi:"dstaddrs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus *string `pulumi:"emailfilterProfileStatus"`
	// Monitored interface name from available interfaces.
	Interface string `pulumi:"interface"`
	// IPS sensor name.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus *string `pulumi:"ipsSensorStatus"`
	// Label.
	Label *string `pulumi:"label"`
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections *string `pulumi:"scanBotnetConnections"`
	// Service object from available options. The structure of `service` block is documented below.
	Services []FirewallInterfacepolicyService `pulumi:"services"`
	// Antispam profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus *string `pulumi:"spamfilterProfileStatus"`
	// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallInterfacepolicySrcaddr `pulumi:"srcaddrs"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus *string `pulumi:"webfilterProfileStatus"`
}

// The set of arguments for constructing a FirewallInterfacepolicy resource.
type FirewallInterfacepolicyArgs struct {
	// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddressType pulumi.StringPtrInput
	// Application list name.
	ApplicationList pulumi.StringPtrInput
	// Enable/disable application control. Valid values: `enable`, `disable`.
	ApplicationListStatus pulumi.StringPtrInput
	// Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable/disable antivirus. Valid values: `enable`, `disable`.
	AvProfileStatus pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// DLP profile name.
	DlpProfile pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpProfileStatus pulumi.StringPtrInput
	// DLP sensor name.
	DlpSensor pulumi.StringPtrInput
	// Enable/disable DLP. Valid values: `enable`, `disable`.
	DlpSensorStatus pulumi.StringPtrInput
	// Enable/disable DSRI. Valid values: `enable`, `disable`.
	Dsri pulumi.StringPtrInput
	// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallInterfacepolicyDstaddrArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable email filter. Valid values: `enable`, `disable`.
	EmailfilterProfileStatus pulumi.StringPtrInput
	// Monitored interface name from available interfaces.
	Interface pulumi.StringInput
	// IPS sensor name.
	IpsSensor pulumi.StringPtrInput
	// Enable/disable IPS. Valid values: `enable`, `disable`.
	IpsSensorStatus pulumi.StringPtrInput
	// Label.
	Label pulumi.StringPtrInput
	// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
	ScanBotnetConnections pulumi.StringPtrInput
	// Service object from available options. The structure of `service` block is documented below.
	Services FirewallInterfacepolicyServiceArrayInput
	// Antispam profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Enable/disable antispam. Valid values: `enable`, `disable`.
	SpamfilterProfileStatus pulumi.StringPtrInput
	// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallInterfacepolicySrcaddrArrayInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Enable/disable web filtering. Valid values: `enable`, `disable`.
	WebfilterProfileStatus pulumi.StringPtrInput
}

func (FirewallInterfacepolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallInterfacepolicyArgs)(nil)).Elem()
}

type FirewallInterfacepolicyInput interface {
	pulumi.Input

	ToFirewallInterfacepolicyOutput() FirewallInterfacepolicyOutput
	ToFirewallInterfacepolicyOutputWithContext(ctx context.Context) FirewallInterfacepolicyOutput
}

func (*FirewallInterfacepolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallInterfacepolicy)(nil)).Elem()
}

func (i *FirewallInterfacepolicy) ToFirewallInterfacepolicyOutput() FirewallInterfacepolicyOutput {
	return i.ToFirewallInterfacepolicyOutputWithContext(context.Background())
}

func (i *FirewallInterfacepolicy) ToFirewallInterfacepolicyOutputWithContext(ctx context.Context) FirewallInterfacepolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInterfacepolicyOutput)
}

// FirewallInterfacepolicyArrayInput is an input type that accepts FirewallInterfacepolicyArray and FirewallInterfacepolicyArrayOutput values.
// You can construct a concrete instance of `FirewallInterfacepolicyArrayInput` via:
//
//	FirewallInterfacepolicyArray{ FirewallInterfacepolicyArgs{...} }
type FirewallInterfacepolicyArrayInput interface {
	pulumi.Input

	ToFirewallInterfacepolicyArrayOutput() FirewallInterfacepolicyArrayOutput
	ToFirewallInterfacepolicyArrayOutputWithContext(context.Context) FirewallInterfacepolicyArrayOutput
}

type FirewallInterfacepolicyArray []FirewallInterfacepolicyInput

func (FirewallInterfacepolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallInterfacepolicy)(nil)).Elem()
}

func (i FirewallInterfacepolicyArray) ToFirewallInterfacepolicyArrayOutput() FirewallInterfacepolicyArrayOutput {
	return i.ToFirewallInterfacepolicyArrayOutputWithContext(context.Background())
}

func (i FirewallInterfacepolicyArray) ToFirewallInterfacepolicyArrayOutputWithContext(ctx context.Context) FirewallInterfacepolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInterfacepolicyArrayOutput)
}

// FirewallInterfacepolicyMapInput is an input type that accepts FirewallInterfacepolicyMap and FirewallInterfacepolicyMapOutput values.
// You can construct a concrete instance of `FirewallInterfacepolicyMapInput` via:
//
//	FirewallInterfacepolicyMap{ "key": FirewallInterfacepolicyArgs{...} }
type FirewallInterfacepolicyMapInput interface {
	pulumi.Input

	ToFirewallInterfacepolicyMapOutput() FirewallInterfacepolicyMapOutput
	ToFirewallInterfacepolicyMapOutputWithContext(context.Context) FirewallInterfacepolicyMapOutput
}

type FirewallInterfacepolicyMap map[string]FirewallInterfacepolicyInput

func (FirewallInterfacepolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallInterfacepolicy)(nil)).Elem()
}

func (i FirewallInterfacepolicyMap) ToFirewallInterfacepolicyMapOutput() FirewallInterfacepolicyMapOutput {
	return i.ToFirewallInterfacepolicyMapOutputWithContext(context.Background())
}

func (i FirewallInterfacepolicyMap) ToFirewallInterfacepolicyMapOutputWithContext(ctx context.Context) FirewallInterfacepolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallInterfacepolicyMapOutput)
}

type FirewallInterfacepolicyOutput struct{ *pulumi.OutputState }

func (FirewallInterfacepolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallInterfacepolicy)(nil)).Elem()
}

func (o FirewallInterfacepolicyOutput) ToFirewallInterfacepolicyOutput() FirewallInterfacepolicyOutput {
	return o
}

func (o FirewallInterfacepolicyOutput) ToFirewallInterfacepolicyOutputWithContext(ctx context.Context) FirewallInterfacepolicyOutput {
	return o
}

// Policy address type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
func (o FirewallInterfacepolicyOutput) AddressType() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.AddressType }).(pulumi.StringOutput)
}

// Application list name.
func (o FirewallInterfacepolicyOutput) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.ApplicationList }).(pulumi.StringOutput)
}

// Enable/disable application control. Valid values: `enable`, `disable`.
func (o FirewallInterfacepolicyOutput) ApplicationListStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.ApplicationListStatus }).(pulumi.StringOutput)
}

// Antivirus profile.
func (o FirewallInterfacepolicyOutput) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.AvProfile }).(pulumi.StringOutput)
}

// Enable/disable antivirus. Valid values: `enable`, `disable`.
func (o FirewallInterfacepolicyOutput) AvProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.AvProfileStatus }).(pulumi.StringOutput)
}

// Comments.
func (o FirewallInterfacepolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// DLP profile name.
func (o FirewallInterfacepolicyOutput) DlpProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.DlpProfile }).(pulumi.StringOutput)
}

// Enable/disable DLP. Valid values: `enable`, `disable`.
func (o FirewallInterfacepolicyOutput) DlpProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.DlpProfileStatus }).(pulumi.StringOutput)
}

// DLP sensor name.
func (o FirewallInterfacepolicyOutput) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.DlpSensor }).(pulumi.StringOutput)
}

// Enable/disable DLP. Valid values: `enable`, `disable`.
func (o FirewallInterfacepolicyOutput) DlpSensorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.DlpSensorStatus }).(pulumi.StringOutput)
}

// Enable/disable DSRI. Valid values: `enable`, `disable`.
func (o FirewallInterfacepolicyOutput) Dsri() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.Dsri }).(pulumi.StringOutput)
}

// Address object to limit traffic monitoring to network traffic sent to the specified address or range. The structure of `dstaddr` block is documented below.
func (o FirewallInterfacepolicyOutput) Dstaddrs() FirewallInterfacepolicyDstaddrArrayOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) FirewallInterfacepolicyDstaddrArrayOutput { return v.Dstaddrs }).(FirewallInterfacepolicyDstaddrArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o FirewallInterfacepolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Email filter profile.
func (o FirewallInterfacepolicyOutput) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable email filter. Valid values: `enable`, `disable`.
func (o FirewallInterfacepolicyOutput) EmailfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.EmailfilterProfileStatus }).(pulumi.StringOutput)
}

// Monitored interface name from available interfaces.
func (o FirewallInterfacepolicyOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// IPS sensor name.
func (o FirewallInterfacepolicyOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.IpsSensor }).(pulumi.StringOutput)
}

// Enable/disable IPS. Valid values: `enable`, `disable`.
func (o FirewallInterfacepolicyOutput) IpsSensorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.IpsSensorStatus }).(pulumi.StringOutput)
}

// Label.
func (o FirewallInterfacepolicyOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// Logging type to be used in this policy (Options: all | utm | disable, Default: utm). Valid values: `all`, `utm`, `disable`.
func (o FirewallInterfacepolicyOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Policy ID.
func (o FirewallInterfacepolicyOutput) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// Enable/disable scanning for connections to Botnet servers. Valid values: `disable`, `block`, `monitor`.
func (o FirewallInterfacepolicyOutput) ScanBotnetConnections() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.ScanBotnetConnections }).(pulumi.StringOutput)
}

// Service object from available options. The structure of `service` block is documented below.
func (o FirewallInterfacepolicyOutput) Services() FirewallInterfacepolicyServiceArrayOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) FirewallInterfacepolicyServiceArrayOutput { return v.Services }).(FirewallInterfacepolicyServiceArrayOutput)
}

// Antispam profile.
func (o FirewallInterfacepolicyOutput) SpamfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.SpamfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable antispam. Valid values: `enable`, `disable`.
func (o FirewallInterfacepolicyOutput) SpamfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.SpamfilterProfileStatus }).(pulumi.StringOutput)
}

// Address object to limit traffic monitoring to network traffic sent from the specified address or range. The structure of `srcaddr` block is documented below.
func (o FirewallInterfacepolicyOutput) Srcaddrs() FirewallInterfacepolicySrcaddrArrayOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) FirewallInterfacepolicySrcaddrArrayOutput { return v.Srcaddrs }).(FirewallInterfacepolicySrcaddrArrayOutput)
}

// Enable/disable this policy. Valid values: `enable`, `disable`.
func (o FirewallInterfacepolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FirewallInterfacepolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Web filter profile.
func (o FirewallInterfacepolicyOutput) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.WebfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable web filtering. Valid values: `enable`, `disable`.
func (o FirewallInterfacepolicyOutput) WebfilterProfileStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallInterfacepolicy) pulumi.StringOutput { return v.WebfilterProfileStatus }).(pulumi.StringOutput)
}

type FirewallInterfacepolicyArrayOutput struct{ *pulumi.OutputState }

func (FirewallInterfacepolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallInterfacepolicy)(nil)).Elem()
}

func (o FirewallInterfacepolicyArrayOutput) ToFirewallInterfacepolicyArrayOutput() FirewallInterfacepolicyArrayOutput {
	return o
}

func (o FirewallInterfacepolicyArrayOutput) ToFirewallInterfacepolicyArrayOutputWithContext(ctx context.Context) FirewallInterfacepolicyArrayOutput {
	return o
}

func (o FirewallInterfacepolicyArrayOutput) Index(i pulumi.IntInput) FirewallInterfacepolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallInterfacepolicy {
		return vs[0].([]*FirewallInterfacepolicy)[vs[1].(int)]
	}).(FirewallInterfacepolicyOutput)
}

type FirewallInterfacepolicyMapOutput struct{ *pulumi.OutputState }

func (FirewallInterfacepolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallInterfacepolicy)(nil)).Elem()
}

func (o FirewallInterfacepolicyMapOutput) ToFirewallInterfacepolicyMapOutput() FirewallInterfacepolicyMapOutput {
	return o
}

func (o FirewallInterfacepolicyMapOutput) ToFirewallInterfacepolicyMapOutputWithContext(ctx context.Context) FirewallInterfacepolicyMapOutput {
	return o
}

func (o FirewallInterfacepolicyMapOutput) MapIndex(k pulumi.StringInput) FirewallInterfacepolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallInterfacepolicy {
		return vs[0].(map[string]*FirewallInterfacepolicy)[vs[1].(string)]
	}).(FirewallInterfacepolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInterfacepolicyInput)(nil)).Elem(), &FirewallInterfacepolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInterfacepolicyArrayInput)(nil)).Elem(), FirewallInterfacepolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallInterfacepolicyMapInput)(nil)).Elem(), FirewallInterfacepolicyMap{})
	pulumi.RegisterOutputType(FirewallInterfacepolicyOutput{})
	pulumi.RegisterOutputType(FirewallInterfacepolicyArrayOutput{})
	pulumi.RegisterOutputType(FirewallInterfacepolicyMapOutput{})
}
