// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure NGFW IPv4/IPv6 application policies. Applies to FortiOS Version `>= 6.2.4`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFirewallSecuritypolicy(ctx, "trname", &fortios.FirewallSecuritypolicyArgs{
//				Action: pulumi.String("accept"),
//				Dstaddrs: fortios.FirewallSecuritypolicyDstaddrArray{
//					&fortios.FirewallSecuritypolicyDstaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Dstintfs: fortios.FirewallSecuritypolicyDstintfArray{
//					&fortios.FirewallSecuritypolicyDstintfArgs{
//						Name: pulumi.String("port4"),
//					},
//				},
//				Logtraffic:             pulumi.String("utm"),
//				Policyid:               pulumi.Int(1),
//				ProfileProtocolOptions: pulumi.String("default"),
//				ProfileType:            pulumi.String("single"),
//				Schedule:               pulumi.String("always"),
//				Srcaddrs: fortios.FirewallSecuritypolicySrcaddrArray{
//					&fortios.FirewallSecuritypolicySrcaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Srcintfs: fortios.FirewallSecuritypolicySrcintfArray{
//					&fortios.FirewallSecuritypolicySrcintfArgs{
//						Name: pulumi.String("port2"),
//					},
//				},
//				Status: pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Firewall SecurityPolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/firewallSecuritypolicy:FirewallSecuritypolicy labelname {{policyid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/firewallSecuritypolicy:FirewallSecuritypolicy labelname {{policyid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FirewallSecuritypolicy struct {
	pulumi.CustomResourceState

	// Policy action (accept/deny). Valid values: `accept`, `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories FirewallSecuritypolicyAppCategoryArrayOutput `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups FirewallSecuritypolicyAppGroupArrayOutput `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications FirewallSecuritypolicyApplicationArrayOutput `pulumi:"applications"`
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringOutput `pulumi:"cifsProfile"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringOutput `pulumi:"dlpProfile"`
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringOutput `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringOutput `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s FirewallSecuritypolicyDstaddr4ArrayOutput `pulumi:"dstaddr4s"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallSecuritypolicyDstaddr6ArrayOutput `pulumi:"dstaddr6s"`
	// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringOutput `pulumi:"dstaddrNegate"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallSecuritypolicyDstaddrArrayOutput `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs FirewallSecuritypolicyDstintfArrayOutput `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringOutput `pulumi:"emailfilterProfile"`
	// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
	EnforceDefaultAppPort pulumi.StringOutput `pulumi:"enforceDefaultAppPort"`
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringOutput `pulumi:"fileFilterProfile"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups FirewallSecuritypolicyFssoGroupArrayOutput `pulumi:"fssoGroups"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups FirewallSecuritypolicyGroupArrayOutput `pulumi:"groups"`
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringOutput `pulumi:"icapProfile"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService pulumi.StringOutput `pulumi:"internetService"`
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
	InternetService6 pulumi.StringOutput `pulumi:"internetService6"`
	// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups FirewallSecuritypolicyInternetService6CustomGroupArrayOutput `pulumi:"internetService6CustomGroups"`
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs FirewallSecuritypolicyInternetService6CustomArrayOutput `pulumi:"internetService6Customs"`
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups FirewallSecuritypolicyInternetService6GroupArrayOutput `pulumi:"internetService6Groups"`
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names FirewallSecuritypolicyInternetService6NameArrayOutput `pulumi:"internetService6Names"`
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate pulumi.StringOutput `pulumi:"internetService6Negate"`
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src pulumi.StringOutput `pulumi:"internetService6Src"`
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups FirewallSecuritypolicyInternetService6SrcCustomGroupArrayOutput `pulumi:"internetService6SrcCustomGroups"`
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms FirewallSecuritypolicyInternetService6SrcCustomArrayOutput `pulumi:"internetService6SrcCustoms"`
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups FirewallSecuritypolicyInternetService6SrcGroupArrayOutput `pulumi:"internetService6SrcGroups"`
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames FirewallSecuritypolicyInternetService6SrcNameArrayOutput `pulumi:"internetService6SrcNames"`
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate pulumi.StringOutput `pulumi:"internetService6SrcNegate"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups FirewallSecuritypolicyInternetServiceCustomGroupArrayOutput `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms FirewallSecuritypolicyInternetServiceCustomArrayOutput `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups FirewallSecuritypolicyInternetServiceGroupArrayOutput `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds FirewallSecuritypolicyInternetServiceIdArrayOutput `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames FirewallSecuritypolicyInternetServiceNameArrayOutput `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringOutput `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringOutput `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups FirewallSecuritypolicyInternetServiceSrcCustomGroupArrayOutput `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms FirewallSecuritypolicyInternetServiceSrcCustomArrayOutput `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups FirewallSecuritypolicyInternetServiceSrcGroupArrayOutput `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds FirewallSecuritypolicyInternetServiceSrcIdArrayOutput `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames FirewallSecuritypolicyInternetServiceSrcNameArrayOutput `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringOutput `pulumi:"internetServiceSrcNegate"`
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode pulumi.StringOutput `pulumi:"learningMode"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringOutput `pulumi:"logtrafficStart"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 pulumi.StringOutput `pulumi:"nat46"`
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 pulumi.StringOutput `pulumi:"nat64"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// Name of profile group.
	ProfileGroup pulumi.StringOutput `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringOutput `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringOutput `pulumi:"profileType"`
	// Schedule name.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringOutput `pulumi:"sctpFilterProfile"`
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket pulumi.StringOutput `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringOutput `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services FirewallSecuritypolicyServiceArrayOutput `pulumi:"services"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s FirewallSecuritypolicySrcaddr4ArrayOutput `pulumi:"srcaddr4s"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallSecuritypolicySrcaddr6ArrayOutput `pulumi:"srcaddr6s"`
	// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringOutput `pulumi:"srcaddrNegate"`
	// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallSecuritypolicySrcaddrArrayOutput `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs FirewallSecuritypolicySrcintfArrayOutput `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringOutput `pulumi:"sshFilterProfile"`
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringOutput `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories FirewallSecuritypolicyUrlCategoryArrayOutput `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users FirewallSecuritypolicyUserArrayOutput `pulumi:"users"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringOutput `pulumi:"videofilterProfile"`
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringOutput `pulumi:"voipProfile"`
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
}

// NewFirewallSecuritypolicy registers a new resource with the given unique name, arguments, and options.
func NewFirewallSecuritypolicy(ctx *pulumi.Context,
	name string, args *FirewallSecuritypolicyArgs, opts ...pulumi.ResourceOption) (*FirewallSecuritypolicy, error) {
	if args == nil {
		args = &FirewallSecuritypolicyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallSecuritypolicy
	err := ctx.RegisterResource("fortios:index/firewallSecuritypolicy:FirewallSecuritypolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallSecuritypolicy gets an existing FirewallSecuritypolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallSecuritypolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallSecuritypolicyState, opts ...pulumi.ResourceOption) (*FirewallSecuritypolicy, error) {
	var resource FirewallSecuritypolicy
	err := ctx.ReadResource("fortios:index/firewallSecuritypolicy:FirewallSecuritypolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallSecuritypolicy resources.
type firewallSecuritypolicyState struct {
	// Policy action (accept/deny). Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []FirewallSecuritypolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []FirewallSecuritypolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []FirewallSecuritypolicyApplication `pulumi:"applications"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Name of an existing DLP profile.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s []FirewallSecuritypolicyDstaddr4 `pulumi:"dstaddr4s"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []FirewallSecuritypolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate *string `pulumi:"dstaddrNegate"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs []FirewallSecuritypolicyDstaddr `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []FirewallSecuritypolicyDstintf `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
	EnforceDefaultAppPort *string `pulumi:"enforceDefaultAppPort"`
	// Name of an existing file-filter profile.
	FileFilterProfile *string `pulumi:"fileFilterProfile"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []FirewallSecuritypolicyFssoGroup `pulumi:"fssoGroups"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []FirewallSecuritypolicyGroup `pulumi:"groups"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService *string `pulumi:"internetService"`
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
	InternetService6 *string `pulumi:"internetService6"`
	// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups []FirewallSecuritypolicyInternetService6CustomGroup `pulumi:"internetService6CustomGroups"`
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs []FirewallSecuritypolicyInternetService6Custom `pulumi:"internetService6Customs"`
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups []FirewallSecuritypolicyInternetService6Group `pulumi:"internetService6Groups"`
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names []FirewallSecuritypolicyInternetService6Name `pulumi:"internetService6Names"`
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate *string `pulumi:"internetService6Negate"`
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src *string `pulumi:"internetService6Src"`
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups []FirewallSecuritypolicyInternetService6SrcCustomGroup `pulumi:"internetService6SrcCustomGroups"`
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms []FirewallSecuritypolicyInternetService6SrcCustom `pulumi:"internetService6SrcCustoms"`
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups []FirewallSecuritypolicyInternetService6SrcGroup `pulumi:"internetService6SrcGroups"`
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames []FirewallSecuritypolicyInternetService6SrcName `pulumi:"internetService6SrcNames"`
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate *string `pulumi:"internetService6SrcNegate"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []FirewallSecuritypolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []FirewallSecuritypolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []FirewallSecuritypolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []FirewallSecuritypolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []FirewallSecuritypolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate *string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []FirewallSecuritypolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []FirewallSecuritypolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []FirewallSecuritypolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []FirewallSecuritypolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []FirewallSecuritypolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate *string `pulumi:"internetServiceSrcNegate"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode *string `pulumi:"learningMode"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 *string `pulumi:"nat46"`
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 *string `pulumi:"nat64"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Name of profile group.
	ProfileGroup *string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType *string `pulumi:"profileType"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile *string `pulumi:"sctpFilterProfile"`
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket *string `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate *string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []FirewallSecuritypolicyService `pulumi:"services"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s []FirewallSecuritypolicySrcaddr4 `pulumi:"srcaddr4s"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []FirewallSecuritypolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate *string `pulumi:"srcaddrNegate"`
	// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallSecuritypolicySrcaddr `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []FirewallSecuritypolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []FirewallSecuritypolicyUrlCategory `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []FirewallSecuritypolicyUser `pulumi:"users"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile *string `pulumi:"videofilterProfile"`
	// Name of an existing VoIP profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
}

type FirewallSecuritypolicyState struct {
	// Policy action (accept/deny). Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories FirewallSecuritypolicyAppCategoryArrayInput
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups FirewallSecuritypolicyAppGroupArrayInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Application ID list. The structure of `application` block is documented below.
	Applications FirewallSecuritypolicyApplicationArrayInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s FirewallSecuritypolicyDstaddr4ArrayInput
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallSecuritypolicyDstaddr6ArrayInput
	// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallSecuritypolicyDstaddrArrayInput
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs FirewallSecuritypolicyDstintfArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
	EnforceDefaultAppPort pulumi.StringPtrInput
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrInput
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups FirewallSecuritypolicyFssoGroupArrayInput
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups FirewallSecuritypolicyGroupArrayInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
	InternetService6 pulumi.StringPtrInput
	// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups FirewallSecuritypolicyInternetService6CustomGroupArrayInput
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs FirewallSecuritypolicyInternetService6CustomArrayInput
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups FirewallSecuritypolicyInternetService6GroupArrayInput
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names FirewallSecuritypolicyInternetService6NameArrayInput
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src pulumi.StringPtrInput
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups FirewallSecuritypolicyInternetService6SrcCustomGroupArrayInput
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms FirewallSecuritypolicyInternetService6SrcCustomArrayInput
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups FirewallSecuritypolicyInternetService6SrcGroupArrayInput
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames FirewallSecuritypolicyInternetService6SrcNameArrayInput
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate pulumi.StringPtrInput
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups FirewallSecuritypolicyInternetServiceCustomGroupArrayInput
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms FirewallSecuritypolicyInternetServiceCustomArrayInput
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups FirewallSecuritypolicyInternetServiceGroupArrayInput
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds FirewallSecuritypolicyInternetServiceIdArrayInput
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames FirewallSecuritypolicyInternetServiceNameArrayInput
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringPtrInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringPtrInput
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups FirewallSecuritypolicyInternetServiceSrcCustomGroupArrayInput
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms FirewallSecuritypolicyInternetServiceSrcCustomArrayInput
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups FirewallSecuritypolicyInternetServiceSrcGroupArrayInput
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds FirewallSecuritypolicyInternetServiceSrcIdArrayInput
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames FirewallSecuritypolicyInternetServiceSrcNameArrayInput
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 pulumi.StringPtrInput
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Name of profile group.
	ProfileGroup pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringPtrInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringPtrInput
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket pulumi.StringPtrInput
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringPtrInput
	// Service and service group names. The structure of `service` block is documented below.
	Services FirewallSecuritypolicyServiceArrayInput
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s FirewallSecuritypolicySrcaddr4ArrayInput
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallSecuritypolicySrcaddr6ArrayInput
	// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringPtrInput
	// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallSecuritypolicySrcaddrArrayInput
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs FirewallSecuritypolicySrcintfArrayInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories FirewallSecuritypolicyUrlCategoryArrayInput
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users FirewallSecuritypolicyUserArrayInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringPtrInput
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
}

func (FirewallSecuritypolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSecuritypolicyState)(nil)).Elem()
}

type firewallSecuritypolicyArgs struct {
	// Policy action (accept/deny). Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []FirewallSecuritypolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []FirewallSecuritypolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []FirewallSecuritypolicyApplication `pulumi:"applications"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Name of an existing DLP profile.
	DlpProfile *string `pulumi:"dlpProfile"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s []FirewallSecuritypolicyDstaddr4 `pulumi:"dstaddr4s"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []FirewallSecuritypolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate *string `pulumi:"dstaddrNegate"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs []FirewallSecuritypolicyDstaddr `pulumi:"dstaddrs"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []FirewallSecuritypolicyDstintf `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
	EnforceDefaultAppPort *string `pulumi:"enforceDefaultAppPort"`
	// Name of an existing file-filter profile.
	FileFilterProfile *string `pulumi:"fileFilterProfile"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []FirewallSecuritypolicyFssoGroup `pulumi:"fssoGroups"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []FirewallSecuritypolicyGroup `pulumi:"groups"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService *string `pulumi:"internetService"`
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
	InternetService6 *string `pulumi:"internetService6"`
	// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups []FirewallSecuritypolicyInternetService6CustomGroup `pulumi:"internetService6CustomGroups"`
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs []FirewallSecuritypolicyInternetService6Custom `pulumi:"internetService6Customs"`
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups []FirewallSecuritypolicyInternetService6Group `pulumi:"internetService6Groups"`
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names []FirewallSecuritypolicyInternetService6Name `pulumi:"internetService6Names"`
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate *string `pulumi:"internetService6Negate"`
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src *string `pulumi:"internetService6Src"`
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups []FirewallSecuritypolicyInternetService6SrcCustomGroup `pulumi:"internetService6SrcCustomGroups"`
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms []FirewallSecuritypolicyInternetService6SrcCustom `pulumi:"internetService6SrcCustoms"`
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups []FirewallSecuritypolicyInternetService6SrcGroup `pulumi:"internetService6SrcGroups"`
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames []FirewallSecuritypolicyInternetService6SrcName `pulumi:"internetService6SrcNames"`
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate *string `pulumi:"internetService6SrcNegate"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []FirewallSecuritypolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []FirewallSecuritypolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []FirewallSecuritypolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []FirewallSecuritypolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []FirewallSecuritypolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate *string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []FirewallSecuritypolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []FirewallSecuritypolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []FirewallSecuritypolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []FirewallSecuritypolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []FirewallSecuritypolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate *string `pulumi:"internetServiceSrcNegate"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode *string `pulumi:"learningMode"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 *string `pulumi:"nat46"`
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 *string `pulumi:"nat64"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// Name of profile group.
	ProfileGroup *string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType *string `pulumi:"profileType"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// Name of an existing SCTP filter profile.
	SctpFilterProfile *string `pulumi:"sctpFilterProfile"`
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket *string `pulumi:"sendDenyPacket"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate *string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []FirewallSecuritypolicyService `pulumi:"services"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s []FirewallSecuritypolicySrcaddr4 `pulumi:"srcaddr4s"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []FirewallSecuritypolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate *string `pulumi:"srcaddrNegate"`
	// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallSecuritypolicySrcaddr `pulumi:"srcaddrs"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []FirewallSecuritypolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []FirewallSecuritypolicyUrlCategory `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []FirewallSecuritypolicyUser `pulumi:"users"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VideoFilter profile.
	VideofilterProfile *string `pulumi:"videofilterProfile"`
	// Name of an existing VoIP profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
}

// The set of arguments for constructing a FirewallSecuritypolicy resource.
type FirewallSecuritypolicyArgs struct {
	// Policy action (accept/deny). Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories FirewallSecuritypolicyAppCategoryArrayInput
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups FirewallSecuritypolicyAppGroupArrayInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Application ID list. The structure of `application` block is documented below.
	Applications FirewallSecuritypolicyApplicationArrayInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Name of an existing DLP profile.
	DlpProfile pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s FirewallSecuritypolicyDstaddr4ArrayInput
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallSecuritypolicyDstaddr6ArrayInput
	// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallSecuritypolicyDstaddrArrayInput
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs FirewallSecuritypolicyDstintfArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
	EnforceDefaultAppPort pulumi.StringPtrInput
	// Name of an existing file-filter profile.
	FileFilterProfile pulumi.StringPtrInput
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups FirewallSecuritypolicyFssoGroupArrayInput
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups FirewallSecuritypolicyGroupArrayInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
	InternetService pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
	InternetService6 pulumi.StringPtrInput
	// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
	InternetService6CustomGroups FirewallSecuritypolicyInternetService6CustomGroupArrayInput
	// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
	InternetService6Customs FirewallSecuritypolicyInternetService6CustomArrayInput
	// Internet Service group name. The structure of `internetService6Group` block is documented below.
	InternetService6Groups FirewallSecuritypolicyInternetService6GroupArrayInput
	// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
	InternetService6Names FirewallSecuritypolicyInternetService6NameArrayInput
	// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6Negate pulumi.StringPtrInput
	// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetService6Src pulumi.StringPtrInput
	// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
	InternetService6SrcCustomGroups FirewallSecuritypolicyInternetService6SrcCustomGroupArrayInput
	// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
	InternetService6SrcCustoms FirewallSecuritypolicyInternetService6SrcCustomArrayInput
	// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
	InternetService6SrcGroups FirewallSecuritypolicyInternetService6SrcGroupArrayInput
	// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
	InternetService6SrcNames FirewallSecuritypolicyInternetService6SrcNameArrayInput
	// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetService6SrcNegate pulumi.StringPtrInput
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups FirewallSecuritypolicyInternetServiceCustomGroupArrayInput
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms FirewallSecuritypolicyInternetServiceCustomArrayInput
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups FirewallSecuritypolicyInternetServiceGroupArrayInput
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds FirewallSecuritypolicyInternetServiceIdArrayInput
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames FirewallSecuritypolicyInternetServiceNameArrayInput
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringPtrInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringPtrInput
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups FirewallSecuritypolicyInternetServiceSrcCustomGroupArrayInput
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms FirewallSecuritypolicyInternetServiceSrcCustomArrayInput
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups FirewallSecuritypolicyInternetServiceSrcGroupArrayInput
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds FirewallSecuritypolicyInternetServiceSrcIdArrayInput
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames FirewallSecuritypolicyInternetServiceSrcNameArrayInput
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
	LearningMode pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable NAT46. Valid values: `enable`, `disable`.
	Nat46 pulumi.StringPtrInput
	// Enable/disable NAT64. Valid values: `enable`, `disable`.
	Nat64 pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// Name of profile group.
	ProfileGroup pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringPtrInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// Name of an existing SCTP filter profile.
	SctpFilterProfile pulumi.StringPtrInput
	// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
	SendDenyPacket pulumi.StringPtrInput
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringPtrInput
	// Service and service group names. The structure of `service` block is documented below.
	Services FirewallSecuritypolicyServiceArrayInput
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s FirewallSecuritypolicySrcaddr4ArrayInput
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallSecuritypolicySrcaddr6ArrayInput
	// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringPtrInput
	// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallSecuritypolicySrcaddrArrayInput
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs FirewallSecuritypolicySrcintfArrayInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories FirewallSecuritypolicyUrlCategoryArrayInput
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users FirewallSecuritypolicyUserArrayInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VideoFilter profile.
	VideofilterProfile pulumi.StringPtrInput
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
}

func (FirewallSecuritypolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSecuritypolicyArgs)(nil)).Elem()
}

type FirewallSecuritypolicyInput interface {
	pulumi.Input

	ToFirewallSecuritypolicyOutput() FirewallSecuritypolicyOutput
	ToFirewallSecuritypolicyOutputWithContext(ctx context.Context) FirewallSecuritypolicyOutput
}

func (*FirewallSecuritypolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSecuritypolicy)(nil)).Elem()
}

func (i *FirewallSecuritypolicy) ToFirewallSecuritypolicyOutput() FirewallSecuritypolicyOutput {
	return i.ToFirewallSecuritypolicyOutputWithContext(context.Background())
}

func (i *FirewallSecuritypolicy) ToFirewallSecuritypolicyOutputWithContext(ctx context.Context) FirewallSecuritypolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecuritypolicyOutput)
}

// FirewallSecuritypolicyArrayInput is an input type that accepts FirewallSecuritypolicyArray and FirewallSecuritypolicyArrayOutput values.
// You can construct a concrete instance of `FirewallSecuritypolicyArrayInput` via:
//
//	FirewallSecuritypolicyArray{ FirewallSecuritypolicyArgs{...} }
type FirewallSecuritypolicyArrayInput interface {
	pulumi.Input

	ToFirewallSecuritypolicyArrayOutput() FirewallSecuritypolicyArrayOutput
	ToFirewallSecuritypolicyArrayOutputWithContext(context.Context) FirewallSecuritypolicyArrayOutput
}

type FirewallSecuritypolicyArray []FirewallSecuritypolicyInput

func (FirewallSecuritypolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSecuritypolicy)(nil)).Elem()
}

func (i FirewallSecuritypolicyArray) ToFirewallSecuritypolicyArrayOutput() FirewallSecuritypolicyArrayOutput {
	return i.ToFirewallSecuritypolicyArrayOutputWithContext(context.Background())
}

func (i FirewallSecuritypolicyArray) ToFirewallSecuritypolicyArrayOutputWithContext(ctx context.Context) FirewallSecuritypolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecuritypolicyArrayOutput)
}

// FirewallSecuritypolicyMapInput is an input type that accepts FirewallSecuritypolicyMap and FirewallSecuritypolicyMapOutput values.
// You can construct a concrete instance of `FirewallSecuritypolicyMapInput` via:
//
//	FirewallSecuritypolicyMap{ "key": FirewallSecuritypolicyArgs{...} }
type FirewallSecuritypolicyMapInput interface {
	pulumi.Input

	ToFirewallSecuritypolicyMapOutput() FirewallSecuritypolicyMapOutput
	ToFirewallSecuritypolicyMapOutputWithContext(context.Context) FirewallSecuritypolicyMapOutput
}

type FirewallSecuritypolicyMap map[string]FirewallSecuritypolicyInput

func (FirewallSecuritypolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSecuritypolicy)(nil)).Elem()
}

func (i FirewallSecuritypolicyMap) ToFirewallSecuritypolicyMapOutput() FirewallSecuritypolicyMapOutput {
	return i.ToFirewallSecuritypolicyMapOutputWithContext(context.Background())
}

func (i FirewallSecuritypolicyMap) ToFirewallSecuritypolicyMapOutputWithContext(ctx context.Context) FirewallSecuritypolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecuritypolicyMapOutput)
}

type FirewallSecuritypolicyOutput struct{ *pulumi.OutputState }

func (FirewallSecuritypolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSecuritypolicy)(nil)).Elem()
}

func (o FirewallSecuritypolicyOutput) ToFirewallSecuritypolicyOutput() FirewallSecuritypolicyOutput {
	return o
}

func (o FirewallSecuritypolicyOutput) ToFirewallSecuritypolicyOutputWithContext(ctx context.Context) FirewallSecuritypolicyOutput {
	return o
}

// Policy action (accept/deny). Valid values: `accept`, `deny`.
func (o FirewallSecuritypolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Application category ID list. The structure of `appCategory` block is documented below.
func (o FirewallSecuritypolicyOutput) AppCategories() FirewallSecuritypolicyAppCategoryArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyAppCategoryArrayOutput { return v.AppCategories }).(FirewallSecuritypolicyAppCategoryArrayOutput)
}

// Application group names. The structure of `appGroup` block is documented below.
func (o FirewallSecuritypolicyOutput) AppGroups() FirewallSecuritypolicyAppGroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyAppGroupArrayOutput { return v.AppGroups }).(FirewallSecuritypolicyAppGroupArrayOutput)
}

// Name of an existing Application list.
func (o FirewallSecuritypolicyOutput) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.ApplicationList }).(pulumi.StringOutput)
}

// Application ID list. The structure of `application` block is documented below.
func (o FirewallSecuritypolicyOutput) Applications() FirewallSecuritypolicyApplicationArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyApplicationArrayOutput { return v.Applications }).(FirewallSecuritypolicyApplicationArrayOutput)
}

// Name of an existing Antivirus profile.
func (o FirewallSecuritypolicyOutput) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.AvProfile }).(pulumi.StringOutput)
}

// Name of an existing CIFS profile.
func (o FirewallSecuritypolicyOutput) CifsProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.CifsProfile }).(pulumi.StringOutput)
}

// Comment.
func (o FirewallSecuritypolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Name of an existing DLP profile.
func (o FirewallSecuritypolicyOutput) DlpProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.DlpProfile }).(pulumi.StringOutput)
}

// Name of an existing DLP sensor.
func (o FirewallSecuritypolicyOutput) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.DlpSensor }).(pulumi.StringOutput)
}

// Name of an existing DNS filter profile.
func (o FirewallSecuritypolicyOutput) DnsfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.DnsfilterProfile }).(pulumi.StringOutput)
}

// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
func (o FirewallSecuritypolicyOutput) Dstaddr4s() FirewallSecuritypolicyDstaddr4ArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyDstaddr4ArrayOutput { return v.Dstaddr4s }).(FirewallSecuritypolicyDstaddr4ArrayOutput)
}

// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
func (o FirewallSecuritypolicyOutput) Dstaddr6s() FirewallSecuritypolicyDstaddr6ArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyDstaddr6ArrayOutput { return v.Dstaddr6s }).(FirewallSecuritypolicyDstaddr6ArrayOutput)
}

// When enabled dstaddr/dstaddr6 specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) DstaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.DstaddrNegate }).(pulumi.StringOutput)
}

// Destination IPv4 address name and address group names. The structure of `dstaddr` block is documented below.
func (o FirewallSecuritypolicyOutput) Dstaddrs() FirewallSecuritypolicyDstaddrArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyDstaddrArrayOutput { return v.Dstaddrs }).(FirewallSecuritypolicyDstaddrArrayOutput)
}

// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
func (o FirewallSecuritypolicyOutput) Dstintfs() FirewallSecuritypolicyDstintfArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyDstintfArrayOutput { return v.Dstintfs }).(FirewallSecuritypolicyDstintfArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o FirewallSecuritypolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Name of an existing email filter profile.
func (o FirewallSecuritypolicyOutput) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

// Enable/disable default application port enforcement for allowed applications. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) EnforceDefaultAppPort() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.EnforceDefaultAppPort }).(pulumi.StringOutput)
}

// Name of an existing file-filter profile.
func (o FirewallSecuritypolicyOutput) FileFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.FileFilterProfile }).(pulumi.StringOutput)
}

// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
func (o FirewallSecuritypolicyOutput) FssoGroups() FirewallSecuritypolicyFssoGroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyFssoGroupArrayOutput { return v.FssoGroups }).(FirewallSecuritypolicyFssoGroupArrayOutput)
}

// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
func (o FirewallSecuritypolicyOutput) Groups() FirewallSecuritypolicyGroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyGroupArrayOutput { return v.Groups }).(FirewallSecuritypolicyGroupArrayOutput)
}

// Name of an existing ICAP profile.
func (o FirewallSecuritypolicyOutput) IcapProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.IcapProfile }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) InternetService() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.InternetService }).(pulumi.StringOutput)
}

// Enable/disable use of IPv6 Internet Services for this policy. If enabled, destination address, service and default application port enforcement are not used. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) InternetService6() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.InternetService6 }).(pulumi.StringOutput)
}

// Custom IPv6 Internet Service group name. The structure of `internetService6CustomGroup` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetService6CustomGroups() FirewallSecuritypolicyInternetService6CustomGroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetService6CustomGroupArrayOutput {
		return v.InternetService6CustomGroups
	}).(FirewallSecuritypolicyInternetService6CustomGroupArrayOutput)
}

// Custom IPv6 Internet Service name. The structure of `internetService6Custom` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetService6Customs() FirewallSecuritypolicyInternetService6CustomArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetService6CustomArrayOutput {
		return v.InternetService6Customs
	}).(FirewallSecuritypolicyInternetService6CustomArrayOutput)
}

// Internet Service group name. The structure of `internetService6Group` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetService6Groups() FirewallSecuritypolicyInternetService6GroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetService6GroupArrayOutput {
		return v.InternetService6Groups
	}).(FirewallSecuritypolicyInternetService6GroupArrayOutput)
}

// IPv6 Internet Service name. The structure of `internetService6Name` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetService6Names() FirewallSecuritypolicyInternetService6NameArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetService6NameArrayOutput {
		return v.InternetService6Names
	}).(FirewallSecuritypolicyInternetService6NameArrayOutput)
}

// When enabled internet-service6 specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) InternetService6Negate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.InternetService6Negate }).(pulumi.StringOutput)
}

// Enable/disable use of IPv6 Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) InternetService6Src() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.InternetService6Src }).(pulumi.StringOutput)
}

// Custom Internet Service6 source group name. The structure of `internetService6SrcCustomGroup` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetService6SrcCustomGroups() FirewallSecuritypolicyInternetService6SrcCustomGroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetService6SrcCustomGroupArrayOutput {
		return v.InternetService6SrcCustomGroups
	}).(FirewallSecuritypolicyInternetService6SrcCustomGroupArrayOutput)
}

// Custom IPv6 Internet Service source name. The structure of `internetService6SrcCustom` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetService6SrcCustoms() FirewallSecuritypolicyInternetService6SrcCustomArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetService6SrcCustomArrayOutput {
		return v.InternetService6SrcCustoms
	}).(FirewallSecuritypolicyInternetService6SrcCustomArrayOutput)
}

// Internet Service6 source group name. The structure of `internetService6SrcGroup` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetService6SrcGroups() FirewallSecuritypolicyInternetService6SrcGroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetService6SrcGroupArrayOutput {
		return v.InternetService6SrcGroups
	}).(FirewallSecuritypolicyInternetService6SrcGroupArrayOutput)
}

// IPv6 Internet Service source name. The structure of `internetService6SrcName` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetService6SrcNames() FirewallSecuritypolicyInternetService6SrcNameArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetService6SrcNameArrayOutput {
		return v.InternetService6SrcNames
	}).(FirewallSecuritypolicyInternetService6SrcNameArrayOutput)
}

// When enabled internet-service6-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) InternetService6SrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.InternetService6SrcNegate }).(pulumi.StringOutput)
}

// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetServiceCustomGroups() FirewallSecuritypolicyInternetServiceCustomGroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetServiceCustomGroupArrayOutput {
		return v.InternetServiceCustomGroups
	}).(FirewallSecuritypolicyInternetServiceCustomGroupArrayOutput)
}

// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetServiceCustoms() FirewallSecuritypolicyInternetServiceCustomArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetServiceCustomArrayOutput {
		return v.InternetServiceCustoms
	}).(FirewallSecuritypolicyInternetServiceCustomArrayOutput)
}

// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetServiceGroups() FirewallSecuritypolicyInternetServiceGroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetServiceGroupArrayOutput {
		return v.InternetServiceGroups
	}).(FirewallSecuritypolicyInternetServiceGroupArrayOutput)
}

// Internet Service ID. The structure of `internetServiceId` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetServiceIds() FirewallSecuritypolicyInternetServiceIdArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetServiceIdArrayOutput {
		return v.InternetServiceIds
	}).(FirewallSecuritypolicyInternetServiceIdArrayOutput)
}

// Internet Service name. The structure of `internetServiceName` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetServiceNames() FirewallSecuritypolicyInternetServiceNameArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetServiceNameArrayOutput {
		return v.InternetServiceNames
	}).(FirewallSecuritypolicyInternetServiceNameArrayOutput)
}

// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) InternetServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.InternetServiceNegate }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) InternetServiceSrc() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.InternetServiceSrc }).(pulumi.StringOutput)
}

// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetServiceSrcCustomGroups() FirewallSecuritypolicyInternetServiceSrcCustomGroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetServiceSrcCustomGroupArrayOutput {
		return v.InternetServiceSrcCustomGroups
	}).(FirewallSecuritypolicyInternetServiceSrcCustomGroupArrayOutput)
}

// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetServiceSrcCustoms() FirewallSecuritypolicyInternetServiceSrcCustomArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetServiceSrcCustomArrayOutput {
		return v.InternetServiceSrcCustoms
	}).(FirewallSecuritypolicyInternetServiceSrcCustomArrayOutput)
}

// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetServiceSrcGroups() FirewallSecuritypolicyInternetServiceSrcGroupArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetServiceSrcGroupArrayOutput {
		return v.InternetServiceSrcGroups
	}).(FirewallSecuritypolicyInternetServiceSrcGroupArrayOutput)
}

// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetServiceSrcIds() FirewallSecuritypolicyInternetServiceSrcIdArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetServiceSrcIdArrayOutput {
		return v.InternetServiceSrcIds
	}).(FirewallSecuritypolicyInternetServiceSrcIdArrayOutput)
}

// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
func (o FirewallSecuritypolicyOutput) InternetServiceSrcNames() FirewallSecuritypolicyInternetServiceSrcNameArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyInternetServiceSrcNameArrayOutput {
		return v.InternetServiceSrcNames
	}).(FirewallSecuritypolicyInternetServiceSrcNameArrayOutput)
}

// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) InternetServiceSrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.InternetServiceSrcNegate }).(pulumi.StringOutput)
}

// Name of an existing IPS sensor.
func (o FirewallSecuritypolicyOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.IpsSensor }).(pulumi.StringOutput)
}

// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) LearningMode() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.LearningMode }).(pulumi.StringOutput)
}

// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
func (o FirewallSecuritypolicyOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Record logs when a session starts. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) LogtrafficStart() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.LogtrafficStart }).(pulumi.StringOutput)
}

// Policy name.
func (o FirewallSecuritypolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable NAT46. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) Nat46() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.Nat46 }).(pulumi.StringOutput)
}

// Enable/disable NAT64. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) Nat64() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.Nat64 }).(pulumi.StringOutput)
}

// Policy ID.
func (o FirewallSecuritypolicyOutput) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// Name of profile group.
func (o FirewallSecuritypolicyOutput) ProfileGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.ProfileGroup }).(pulumi.StringOutput)
}

// Name of an existing Protocol options profile.
func (o FirewallSecuritypolicyOutput) ProfileProtocolOptions() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.ProfileProtocolOptions }).(pulumi.StringOutput)
}

// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
func (o FirewallSecuritypolicyOutput) ProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.ProfileType }).(pulumi.StringOutput)
}

// Schedule name.
func (o FirewallSecuritypolicyOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// Name of an existing SCTP filter profile.
func (o FirewallSecuritypolicyOutput) SctpFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.SctpFilterProfile }).(pulumi.StringOutput)
}

// Enable to send a reply when a session is denied or blocked by a firewall policy. Valid values: `disable`, `enable`.
func (o FirewallSecuritypolicyOutput) SendDenyPacket() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.SendDenyPacket }).(pulumi.StringOutput)
}

// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) ServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.ServiceNegate }).(pulumi.StringOutput)
}

// Service and service group names. The structure of `service` block is documented below.
func (o FirewallSecuritypolicyOutput) Services() FirewallSecuritypolicyServiceArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyServiceArrayOutput { return v.Services }).(FirewallSecuritypolicyServiceArrayOutput)
}

// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
func (o FirewallSecuritypolicyOutput) Srcaddr4s() FirewallSecuritypolicySrcaddr4ArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicySrcaddr4ArrayOutput { return v.Srcaddr4s }).(FirewallSecuritypolicySrcaddr4ArrayOutput)
}

// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
func (o FirewallSecuritypolicyOutput) Srcaddr6s() FirewallSecuritypolicySrcaddr6ArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicySrcaddr6ArrayOutput { return v.Srcaddr6s }).(FirewallSecuritypolicySrcaddr6ArrayOutput)
}

// When enabled srcaddr/srcaddr6 specifies what the source address must NOT be. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) SrcaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.SrcaddrNegate }).(pulumi.StringOutput)
}

// Source IPv4 address name and address group names. The structure of `srcaddr` block is documented below.
func (o FirewallSecuritypolicyOutput) Srcaddrs() FirewallSecuritypolicySrcaddrArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicySrcaddrArrayOutput { return v.Srcaddrs }).(FirewallSecuritypolicySrcaddrArrayOutput)
}

// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
func (o FirewallSecuritypolicyOutput) Srcintfs() FirewallSecuritypolicySrcintfArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicySrcintfArrayOutput { return v.Srcintfs }).(FirewallSecuritypolicySrcintfArrayOutput)
}

// Name of an existing SSH filter profile.
func (o FirewallSecuritypolicyOutput) SshFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.SshFilterProfile }).(pulumi.StringOutput)
}

// Name of an existing SSL SSH profile.
func (o FirewallSecuritypolicyOutput) SslSshProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.SslSshProfile }).(pulumi.StringOutput)
}

// Enable or disable this policy. Valid values: `enable`, `disable`.
func (o FirewallSecuritypolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// URL category ID list. The structure of `urlCategory` block is documented below.
func (o FirewallSecuritypolicyOutput) UrlCategories() FirewallSecuritypolicyUrlCategoryArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyUrlCategoryArrayOutput { return v.UrlCategories }).(FirewallSecuritypolicyUrlCategoryArrayOutput)
}

// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
func (o FirewallSecuritypolicyOutput) Users() FirewallSecuritypolicyUserArrayOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) FirewallSecuritypolicyUserArrayOutput { return v.Users }).(FirewallSecuritypolicyUserArrayOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o FirewallSecuritypolicyOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FirewallSecuritypolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Name of an existing VideoFilter profile.
func (o FirewallSecuritypolicyOutput) VideofilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.VideofilterProfile }).(pulumi.StringOutput)
}

// Name of an existing VoIP profile.
func (o FirewallSecuritypolicyOutput) VoipProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.VoipProfile }).(pulumi.StringOutput)
}

// Name of an existing Web filter profile.
func (o FirewallSecuritypolicyOutput) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecuritypolicy) pulumi.StringOutput { return v.WebfilterProfile }).(pulumi.StringOutput)
}

type FirewallSecuritypolicyArrayOutput struct{ *pulumi.OutputState }

func (FirewallSecuritypolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSecuritypolicy)(nil)).Elem()
}

func (o FirewallSecuritypolicyArrayOutput) ToFirewallSecuritypolicyArrayOutput() FirewallSecuritypolicyArrayOutput {
	return o
}

func (o FirewallSecuritypolicyArrayOutput) ToFirewallSecuritypolicyArrayOutputWithContext(ctx context.Context) FirewallSecuritypolicyArrayOutput {
	return o
}

func (o FirewallSecuritypolicyArrayOutput) Index(i pulumi.IntInput) FirewallSecuritypolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallSecuritypolicy {
		return vs[0].([]*FirewallSecuritypolicy)[vs[1].(int)]
	}).(FirewallSecuritypolicyOutput)
}

type FirewallSecuritypolicyMapOutput struct{ *pulumi.OutputState }

func (FirewallSecuritypolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSecuritypolicy)(nil)).Elem()
}

func (o FirewallSecuritypolicyMapOutput) ToFirewallSecuritypolicyMapOutput() FirewallSecuritypolicyMapOutput {
	return o
}

func (o FirewallSecuritypolicyMapOutput) ToFirewallSecuritypolicyMapOutputWithContext(ctx context.Context) FirewallSecuritypolicyMapOutput {
	return o
}

func (o FirewallSecuritypolicyMapOutput) MapIndex(k pulumi.StringInput) FirewallSecuritypolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallSecuritypolicy {
		return vs[0].(map[string]*FirewallSecuritypolicy)[vs[1].(string)]
	}).(FirewallSecuritypolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecuritypolicyInput)(nil)).Elem(), &FirewallSecuritypolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecuritypolicyArrayInput)(nil)).Elem(), FirewallSecuritypolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecuritypolicyMapInput)(nil)).Elem(), FirewallSecuritypolicyMap{})
	pulumi.RegisterOutputType(FirewallSecuritypolicyOutput{})
	pulumi.RegisterOutputType(FirewallSecuritypolicyArrayOutput{})
	pulumi.RegisterOutputType(FirewallSecuritypolicyMapOutput{})
}
