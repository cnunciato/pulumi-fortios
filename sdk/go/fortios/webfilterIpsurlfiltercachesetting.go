// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPS URL filter cache settings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewWebfilterIpsurlfiltercachesetting(ctx, "trname", &fortios.WebfilterIpsurlfiltercachesettingArgs{
//				DnsRetryInterval: pulumi.Int(0),
//				ExtendedTtl:      pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Webfilter IpsUrlfilterCacheSetting can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/webfilterIpsurlfiltercachesetting:WebfilterIpsurlfiltercachesetting labelname WebfilterIpsUrlfilterCacheSetting
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/webfilterIpsurlfiltercachesetting:WebfilterIpsurlfiltercachesetting labelname WebfilterIpsUrlfilterCacheSetting
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WebfilterIpsurlfiltercachesetting struct {
	pulumi.CustomResourceState

	// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
	DnsRetryInterval pulumi.IntOutput `pulumi:"dnsRetryInterval"`
	// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
	ExtendedTtl pulumi.IntOutput `pulumi:"extendedTtl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWebfilterIpsurlfiltercachesetting registers a new resource with the given unique name, arguments, and options.
func NewWebfilterIpsurlfiltercachesetting(ctx *pulumi.Context,
	name string, args *WebfilterIpsurlfiltercachesettingArgs, opts ...pulumi.ResourceOption) (*WebfilterIpsurlfiltercachesetting, error) {
	if args == nil {
		args = &WebfilterIpsurlfiltercachesettingArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WebfilterIpsurlfiltercachesetting
	err := ctx.RegisterResource("fortios:index/webfilterIpsurlfiltercachesetting:WebfilterIpsurlfiltercachesetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebfilterIpsurlfiltercachesetting gets an existing WebfilterIpsurlfiltercachesetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebfilterIpsurlfiltercachesetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebfilterIpsurlfiltercachesettingState, opts ...pulumi.ResourceOption) (*WebfilterIpsurlfiltercachesetting, error) {
	var resource WebfilterIpsurlfiltercachesetting
	err := ctx.ReadResource("fortios:index/webfilterIpsurlfiltercachesetting:WebfilterIpsurlfiltercachesetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebfilterIpsurlfiltercachesetting resources.
type webfilterIpsurlfiltercachesettingState struct {
	// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
	DnsRetryInterval *int `pulumi:"dnsRetryInterval"`
	// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
	ExtendedTtl *int `pulumi:"extendedTtl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WebfilterIpsurlfiltercachesettingState struct {
	// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
	DnsRetryInterval pulumi.IntPtrInput
	// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
	ExtendedTtl pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebfilterIpsurlfiltercachesettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterIpsurlfiltercachesettingState)(nil)).Elem()
}

type webfilterIpsurlfiltercachesettingArgs struct {
	// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
	DnsRetryInterval *int `pulumi:"dnsRetryInterval"`
	// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
	ExtendedTtl *int `pulumi:"extendedTtl"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebfilterIpsurlfiltercachesetting resource.
type WebfilterIpsurlfiltercachesettingArgs struct {
	// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
	DnsRetryInterval pulumi.IntPtrInput
	// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
	ExtendedTtl pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebfilterIpsurlfiltercachesettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterIpsurlfiltercachesettingArgs)(nil)).Elem()
}

type WebfilterIpsurlfiltercachesettingInput interface {
	pulumi.Input

	ToWebfilterIpsurlfiltercachesettingOutput() WebfilterIpsurlfiltercachesettingOutput
	ToWebfilterIpsurlfiltercachesettingOutputWithContext(ctx context.Context) WebfilterIpsurlfiltercachesettingOutput
}

func (*WebfilterIpsurlfiltercachesetting) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterIpsurlfiltercachesetting)(nil)).Elem()
}

func (i *WebfilterIpsurlfiltercachesetting) ToWebfilterIpsurlfiltercachesettingOutput() WebfilterIpsurlfiltercachesettingOutput {
	return i.ToWebfilterIpsurlfiltercachesettingOutputWithContext(context.Background())
}

func (i *WebfilterIpsurlfiltercachesetting) ToWebfilterIpsurlfiltercachesettingOutputWithContext(ctx context.Context) WebfilterIpsurlfiltercachesettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterIpsurlfiltercachesettingOutput)
}

// WebfilterIpsurlfiltercachesettingArrayInput is an input type that accepts WebfilterIpsurlfiltercachesettingArray and WebfilterIpsurlfiltercachesettingArrayOutput values.
// You can construct a concrete instance of `WebfilterIpsurlfiltercachesettingArrayInput` via:
//
//	WebfilterIpsurlfiltercachesettingArray{ WebfilterIpsurlfiltercachesettingArgs{...} }
type WebfilterIpsurlfiltercachesettingArrayInput interface {
	pulumi.Input

	ToWebfilterIpsurlfiltercachesettingArrayOutput() WebfilterIpsurlfiltercachesettingArrayOutput
	ToWebfilterIpsurlfiltercachesettingArrayOutputWithContext(context.Context) WebfilterIpsurlfiltercachesettingArrayOutput
}

type WebfilterIpsurlfiltercachesettingArray []WebfilterIpsurlfiltercachesettingInput

func (WebfilterIpsurlfiltercachesettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterIpsurlfiltercachesetting)(nil)).Elem()
}

func (i WebfilterIpsurlfiltercachesettingArray) ToWebfilterIpsurlfiltercachesettingArrayOutput() WebfilterIpsurlfiltercachesettingArrayOutput {
	return i.ToWebfilterIpsurlfiltercachesettingArrayOutputWithContext(context.Background())
}

func (i WebfilterIpsurlfiltercachesettingArray) ToWebfilterIpsurlfiltercachesettingArrayOutputWithContext(ctx context.Context) WebfilterIpsurlfiltercachesettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterIpsurlfiltercachesettingArrayOutput)
}

// WebfilterIpsurlfiltercachesettingMapInput is an input type that accepts WebfilterIpsurlfiltercachesettingMap and WebfilterIpsurlfiltercachesettingMapOutput values.
// You can construct a concrete instance of `WebfilterIpsurlfiltercachesettingMapInput` via:
//
//	WebfilterIpsurlfiltercachesettingMap{ "key": WebfilterIpsurlfiltercachesettingArgs{...} }
type WebfilterIpsurlfiltercachesettingMapInput interface {
	pulumi.Input

	ToWebfilterIpsurlfiltercachesettingMapOutput() WebfilterIpsurlfiltercachesettingMapOutput
	ToWebfilterIpsurlfiltercachesettingMapOutputWithContext(context.Context) WebfilterIpsurlfiltercachesettingMapOutput
}

type WebfilterIpsurlfiltercachesettingMap map[string]WebfilterIpsurlfiltercachesettingInput

func (WebfilterIpsurlfiltercachesettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterIpsurlfiltercachesetting)(nil)).Elem()
}

func (i WebfilterIpsurlfiltercachesettingMap) ToWebfilterIpsurlfiltercachesettingMapOutput() WebfilterIpsurlfiltercachesettingMapOutput {
	return i.ToWebfilterIpsurlfiltercachesettingMapOutputWithContext(context.Background())
}

func (i WebfilterIpsurlfiltercachesettingMap) ToWebfilterIpsurlfiltercachesettingMapOutputWithContext(ctx context.Context) WebfilterIpsurlfiltercachesettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterIpsurlfiltercachesettingMapOutput)
}

type WebfilterIpsurlfiltercachesettingOutput struct{ *pulumi.OutputState }

func (WebfilterIpsurlfiltercachesettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterIpsurlfiltercachesetting)(nil)).Elem()
}

func (o WebfilterIpsurlfiltercachesettingOutput) ToWebfilterIpsurlfiltercachesettingOutput() WebfilterIpsurlfiltercachesettingOutput {
	return o
}

func (o WebfilterIpsurlfiltercachesettingOutput) ToWebfilterIpsurlfiltercachesettingOutputWithContext(ctx context.Context) WebfilterIpsurlfiltercachesettingOutput {
	return o
}

// Retry interval. Refresh DNS faster than TTL to capture multiple IPs for hosts. 0 means use DNS server's TTL only.
func (o WebfilterIpsurlfiltercachesettingOutput) DnsRetryInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *WebfilterIpsurlfiltercachesetting) pulumi.IntOutput { return v.DnsRetryInterval }).(pulumi.IntOutput)
}

// Extend time to live beyond reported by DNS. 0 means use DNS server's TTL
func (o WebfilterIpsurlfiltercachesettingOutput) ExtendedTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *WebfilterIpsurlfiltercachesetting) pulumi.IntOutput { return v.ExtendedTtl }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WebfilterIpsurlfiltercachesettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebfilterIpsurlfiltercachesetting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WebfilterIpsurlfiltercachesettingArrayOutput struct{ *pulumi.OutputState }

func (WebfilterIpsurlfiltercachesettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterIpsurlfiltercachesetting)(nil)).Elem()
}

func (o WebfilterIpsurlfiltercachesettingArrayOutput) ToWebfilterIpsurlfiltercachesettingArrayOutput() WebfilterIpsurlfiltercachesettingArrayOutput {
	return o
}

func (o WebfilterIpsurlfiltercachesettingArrayOutput) ToWebfilterIpsurlfiltercachesettingArrayOutputWithContext(ctx context.Context) WebfilterIpsurlfiltercachesettingArrayOutput {
	return o
}

func (o WebfilterIpsurlfiltercachesettingArrayOutput) Index(i pulumi.IntInput) WebfilterIpsurlfiltercachesettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebfilterIpsurlfiltercachesetting {
		return vs[0].([]*WebfilterIpsurlfiltercachesetting)[vs[1].(int)]
	}).(WebfilterIpsurlfiltercachesettingOutput)
}

type WebfilterIpsurlfiltercachesettingMapOutput struct{ *pulumi.OutputState }

func (WebfilterIpsurlfiltercachesettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterIpsurlfiltercachesetting)(nil)).Elem()
}

func (o WebfilterIpsurlfiltercachesettingMapOutput) ToWebfilterIpsurlfiltercachesettingMapOutput() WebfilterIpsurlfiltercachesettingMapOutput {
	return o
}

func (o WebfilterIpsurlfiltercachesettingMapOutput) ToWebfilterIpsurlfiltercachesettingMapOutputWithContext(ctx context.Context) WebfilterIpsurlfiltercachesettingMapOutput {
	return o
}

func (o WebfilterIpsurlfiltercachesettingMapOutput) MapIndex(k pulumi.StringInput) WebfilterIpsurlfiltercachesettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebfilterIpsurlfiltercachesetting {
		return vs[0].(map[string]*WebfilterIpsurlfiltercachesetting)[vs[1].(string)]
	}).(WebfilterIpsurlfiltercachesettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterIpsurlfiltercachesettingInput)(nil)).Elem(), &WebfilterIpsurlfiltercachesetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterIpsurlfiltercachesettingArrayInput)(nil)).Elem(), WebfilterIpsurlfiltercachesettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterIpsurlfiltercachesettingMapInput)(nil)).Elem(), WebfilterIpsurlfiltercachesettingMap{})
	pulumi.RegisterOutputType(WebfilterIpsurlfiltercachesettingOutput{})
	pulumi.RegisterOutputType(WebfilterIpsurlfiltercachesettingArrayOutput{})
	pulumi.RegisterOutputType(WebfilterIpsurlfiltercachesettingMapOutput{})
}
