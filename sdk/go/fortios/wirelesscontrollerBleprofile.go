// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure Bluetooth Low Energy profile.
//
// ## Import
//
// # WirelessController BleProfile can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerBleprofile:WirelesscontrollerBleprofile labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerBleprofile:WirelesscontrollerBleprofile labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WirelesscontrollerBleprofile struct {
	pulumi.CustomResourceState

	// Advertising type. Valid values: `ibeacon`, `eddystone-uid`, `eddystone-url`.
	Advertising pulumi.StringOutput `pulumi:"advertising"`
	// Beacon interval (default = 100 msec).
	BeaconInterval pulumi.IntOutput `pulumi:"beaconInterval"`
	// Enable/disable Bluetooth Low Energy (BLE) scanning. Valid values: `enable`, `disable`.
	BleScanning pulumi.StringOutput `pulumi:"bleScanning"`
	// Comment.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// Eddystone instance ID.
	EddystoneInstance pulumi.StringOutput `pulumi:"eddystoneInstance"`
	// Eddystone namespace ID.
	EddystoneNamespace pulumi.StringOutput `pulumi:"eddystoneNamespace"`
	// Eddystone URL.
	EddystoneUrl pulumi.StringOutput `pulumi:"eddystoneUrl"`
	// Eddystone encoded URL hexadecimal string
	EddystoneUrlEncodeHex pulumi.StringOutput `pulumi:"eddystoneUrlEncodeHex"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	IbeaconUuid pulumi.StringOutput `pulumi:"ibeaconUuid"`
	// Major ID.
	MajorId pulumi.IntOutput `pulumi:"majorId"`
	// Minor ID.
	MinorId pulumi.IntOutput `pulumi:"minorId"`
	// Bluetooth Low Energy profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Transmit power level (default = 0). Valid values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`.
	Txpower pulumi.StringOutput `pulumi:"txpower"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelesscontrollerBleprofile registers a new resource with the given unique name, arguments, and options.
func NewWirelesscontrollerBleprofile(ctx *pulumi.Context,
	name string, args *WirelesscontrollerBleprofileArgs, opts ...pulumi.ResourceOption) (*WirelesscontrollerBleprofile, error) {
	if args == nil {
		args = &WirelesscontrollerBleprofileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelesscontrollerBleprofile
	err := ctx.RegisterResource("fortios:index/wirelesscontrollerBleprofile:WirelesscontrollerBleprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelesscontrollerBleprofile gets an existing WirelesscontrollerBleprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelesscontrollerBleprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelesscontrollerBleprofileState, opts ...pulumi.ResourceOption) (*WirelesscontrollerBleprofile, error) {
	var resource WirelesscontrollerBleprofile
	err := ctx.ReadResource("fortios:index/wirelesscontrollerBleprofile:WirelesscontrollerBleprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelesscontrollerBleprofile resources.
type wirelesscontrollerBleprofileState struct {
	// Advertising type. Valid values: `ibeacon`, `eddystone-uid`, `eddystone-url`.
	Advertising *string `pulumi:"advertising"`
	// Beacon interval (default = 100 msec).
	BeaconInterval *int `pulumi:"beaconInterval"`
	// Enable/disable Bluetooth Low Energy (BLE) scanning. Valid values: `enable`, `disable`.
	BleScanning *string `pulumi:"bleScanning"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Eddystone instance ID.
	EddystoneInstance *string `pulumi:"eddystoneInstance"`
	// Eddystone namespace ID.
	EddystoneNamespace *string `pulumi:"eddystoneNamespace"`
	// Eddystone URL.
	EddystoneUrl *string `pulumi:"eddystoneUrl"`
	// Eddystone encoded URL hexadecimal string
	EddystoneUrlEncodeHex *string `pulumi:"eddystoneUrlEncodeHex"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	IbeaconUuid *string `pulumi:"ibeaconUuid"`
	// Major ID.
	MajorId *int `pulumi:"majorId"`
	// Minor ID.
	MinorId *int `pulumi:"minorId"`
	// Bluetooth Low Energy profile name.
	Name *string `pulumi:"name"`
	// Transmit power level (default = 0). Valid values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`.
	Txpower *string `pulumi:"txpower"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WirelesscontrollerBleprofileState struct {
	// Advertising type. Valid values: `ibeacon`, `eddystone-uid`, `eddystone-url`.
	Advertising pulumi.StringPtrInput
	// Beacon interval (default = 100 msec).
	BeaconInterval pulumi.IntPtrInput
	// Enable/disable Bluetooth Low Energy (BLE) scanning. Valid values: `enable`, `disable`.
	BleScanning pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Eddystone instance ID.
	EddystoneInstance pulumi.StringPtrInput
	// Eddystone namespace ID.
	EddystoneNamespace pulumi.StringPtrInput
	// Eddystone URL.
	EddystoneUrl pulumi.StringPtrInput
	// Eddystone encoded URL hexadecimal string
	EddystoneUrlEncodeHex pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	IbeaconUuid pulumi.StringPtrInput
	// Major ID.
	MajorId pulumi.IntPtrInput
	// Minor ID.
	MinorId pulumi.IntPtrInput
	// Bluetooth Low Energy profile name.
	Name pulumi.StringPtrInput
	// Transmit power level (default = 0). Valid values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`.
	Txpower pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelesscontrollerBleprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerBleprofileState)(nil)).Elem()
}

type wirelesscontrollerBleprofileArgs struct {
	// Advertising type. Valid values: `ibeacon`, `eddystone-uid`, `eddystone-url`.
	Advertising *string `pulumi:"advertising"`
	// Beacon interval (default = 100 msec).
	BeaconInterval *int `pulumi:"beaconInterval"`
	// Enable/disable Bluetooth Low Energy (BLE) scanning. Valid values: `enable`, `disable`.
	BleScanning *string `pulumi:"bleScanning"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Eddystone instance ID.
	EddystoneInstance *string `pulumi:"eddystoneInstance"`
	// Eddystone namespace ID.
	EddystoneNamespace *string `pulumi:"eddystoneNamespace"`
	// Eddystone URL.
	EddystoneUrl *string `pulumi:"eddystoneUrl"`
	// Eddystone encoded URL hexadecimal string
	EddystoneUrlEncodeHex *string `pulumi:"eddystoneUrlEncodeHex"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	IbeaconUuid *string `pulumi:"ibeaconUuid"`
	// Major ID.
	MajorId *int `pulumi:"majorId"`
	// Minor ID.
	MinorId *int `pulumi:"minorId"`
	// Bluetooth Low Energy profile name.
	Name *string `pulumi:"name"`
	// Transmit power level (default = 0). Valid values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`.
	Txpower *string `pulumi:"txpower"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelesscontrollerBleprofile resource.
type WirelesscontrollerBleprofileArgs struct {
	// Advertising type. Valid values: `ibeacon`, `eddystone-uid`, `eddystone-url`.
	Advertising pulumi.StringPtrInput
	// Beacon interval (default = 100 msec).
	BeaconInterval pulumi.IntPtrInput
	// Enable/disable Bluetooth Low Energy (BLE) scanning. Valid values: `enable`, `disable`.
	BleScanning pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Eddystone instance ID.
	EddystoneInstance pulumi.StringPtrInput
	// Eddystone namespace ID.
	EddystoneNamespace pulumi.StringPtrInput
	// Eddystone URL.
	EddystoneUrl pulumi.StringPtrInput
	// Eddystone encoded URL hexadecimal string
	EddystoneUrlEncodeHex pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	IbeaconUuid pulumi.StringPtrInput
	// Major ID.
	MajorId pulumi.IntPtrInput
	// Minor ID.
	MinorId pulumi.IntPtrInput
	// Bluetooth Low Energy profile name.
	Name pulumi.StringPtrInput
	// Transmit power level (default = 0). Valid values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`.
	Txpower pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelesscontrollerBleprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerBleprofileArgs)(nil)).Elem()
}

type WirelesscontrollerBleprofileInput interface {
	pulumi.Input

	ToWirelesscontrollerBleprofileOutput() WirelesscontrollerBleprofileOutput
	ToWirelesscontrollerBleprofileOutputWithContext(ctx context.Context) WirelesscontrollerBleprofileOutput
}

func (*WirelesscontrollerBleprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerBleprofile)(nil)).Elem()
}

func (i *WirelesscontrollerBleprofile) ToWirelesscontrollerBleprofileOutput() WirelesscontrollerBleprofileOutput {
	return i.ToWirelesscontrollerBleprofileOutputWithContext(context.Background())
}

func (i *WirelesscontrollerBleprofile) ToWirelesscontrollerBleprofileOutputWithContext(ctx context.Context) WirelesscontrollerBleprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerBleprofileOutput)
}

// WirelesscontrollerBleprofileArrayInput is an input type that accepts WirelesscontrollerBleprofileArray and WirelesscontrollerBleprofileArrayOutput values.
// You can construct a concrete instance of `WirelesscontrollerBleprofileArrayInput` via:
//
//	WirelesscontrollerBleprofileArray{ WirelesscontrollerBleprofileArgs{...} }
type WirelesscontrollerBleprofileArrayInput interface {
	pulumi.Input

	ToWirelesscontrollerBleprofileArrayOutput() WirelesscontrollerBleprofileArrayOutput
	ToWirelesscontrollerBleprofileArrayOutputWithContext(context.Context) WirelesscontrollerBleprofileArrayOutput
}

type WirelesscontrollerBleprofileArray []WirelesscontrollerBleprofileInput

func (WirelesscontrollerBleprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerBleprofile)(nil)).Elem()
}

func (i WirelesscontrollerBleprofileArray) ToWirelesscontrollerBleprofileArrayOutput() WirelesscontrollerBleprofileArrayOutput {
	return i.ToWirelesscontrollerBleprofileArrayOutputWithContext(context.Background())
}

func (i WirelesscontrollerBleprofileArray) ToWirelesscontrollerBleprofileArrayOutputWithContext(ctx context.Context) WirelesscontrollerBleprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerBleprofileArrayOutput)
}

// WirelesscontrollerBleprofileMapInput is an input type that accepts WirelesscontrollerBleprofileMap and WirelesscontrollerBleprofileMapOutput values.
// You can construct a concrete instance of `WirelesscontrollerBleprofileMapInput` via:
//
//	WirelesscontrollerBleprofileMap{ "key": WirelesscontrollerBleprofileArgs{...} }
type WirelesscontrollerBleprofileMapInput interface {
	pulumi.Input

	ToWirelesscontrollerBleprofileMapOutput() WirelesscontrollerBleprofileMapOutput
	ToWirelesscontrollerBleprofileMapOutputWithContext(context.Context) WirelesscontrollerBleprofileMapOutput
}

type WirelesscontrollerBleprofileMap map[string]WirelesscontrollerBleprofileInput

func (WirelesscontrollerBleprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerBleprofile)(nil)).Elem()
}

func (i WirelesscontrollerBleprofileMap) ToWirelesscontrollerBleprofileMapOutput() WirelesscontrollerBleprofileMapOutput {
	return i.ToWirelesscontrollerBleprofileMapOutputWithContext(context.Background())
}

func (i WirelesscontrollerBleprofileMap) ToWirelesscontrollerBleprofileMapOutputWithContext(ctx context.Context) WirelesscontrollerBleprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerBleprofileMapOutput)
}

type WirelesscontrollerBleprofileOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerBleprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerBleprofile)(nil)).Elem()
}

func (o WirelesscontrollerBleprofileOutput) ToWirelesscontrollerBleprofileOutput() WirelesscontrollerBleprofileOutput {
	return o
}

func (o WirelesscontrollerBleprofileOutput) ToWirelesscontrollerBleprofileOutputWithContext(ctx context.Context) WirelesscontrollerBleprofileOutput {
	return o
}

// Advertising type. Valid values: `ibeacon`, `eddystone-uid`, `eddystone-url`.
func (o WirelesscontrollerBleprofileOutput) Advertising() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringOutput { return v.Advertising }).(pulumi.StringOutput)
}

// Beacon interval (default = 100 msec).
func (o WirelesscontrollerBleprofileOutput) BeaconInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.IntOutput { return v.BeaconInterval }).(pulumi.IntOutput)
}

// Enable/disable Bluetooth Low Energy (BLE) scanning. Valid values: `enable`, `disable`.
func (o WirelesscontrollerBleprofileOutput) BleScanning() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringOutput { return v.BleScanning }).(pulumi.StringOutput)
}

// Comment.
func (o WirelesscontrollerBleprofileOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// Eddystone instance ID.
func (o WirelesscontrollerBleprofileOutput) EddystoneInstance() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringOutput { return v.EddystoneInstance }).(pulumi.StringOutput)
}

// Eddystone namespace ID.
func (o WirelesscontrollerBleprofileOutput) EddystoneNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringOutput { return v.EddystoneNamespace }).(pulumi.StringOutput)
}

// Eddystone URL.
func (o WirelesscontrollerBleprofileOutput) EddystoneUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringOutput { return v.EddystoneUrl }).(pulumi.StringOutput)
}

// Eddystone encoded URL hexadecimal string
func (o WirelesscontrollerBleprofileOutput) EddystoneUrlEncodeHex() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringOutput { return v.EddystoneUrlEncodeHex }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o WirelesscontrollerBleprofileOutput) IbeaconUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringOutput { return v.IbeaconUuid }).(pulumi.StringOutput)
}

// Major ID.
func (o WirelesscontrollerBleprofileOutput) MajorId() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.IntOutput { return v.MajorId }).(pulumi.IntOutput)
}

// Minor ID.
func (o WirelesscontrollerBleprofileOutput) MinorId() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.IntOutput { return v.MinorId }).(pulumi.IntOutput)
}

// Bluetooth Low Energy profile name.
func (o WirelesscontrollerBleprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Transmit power level (default = 0). Valid values: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`.
func (o WirelesscontrollerBleprofileOutput) Txpower() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringOutput { return v.Txpower }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WirelesscontrollerBleprofileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerBleprofile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WirelesscontrollerBleprofileArrayOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerBleprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerBleprofile)(nil)).Elem()
}

func (o WirelesscontrollerBleprofileArrayOutput) ToWirelesscontrollerBleprofileArrayOutput() WirelesscontrollerBleprofileArrayOutput {
	return o
}

func (o WirelesscontrollerBleprofileArrayOutput) ToWirelesscontrollerBleprofileArrayOutputWithContext(ctx context.Context) WirelesscontrollerBleprofileArrayOutput {
	return o
}

func (o WirelesscontrollerBleprofileArrayOutput) Index(i pulumi.IntInput) WirelesscontrollerBleprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelesscontrollerBleprofile {
		return vs[0].([]*WirelesscontrollerBleprofile)[vs[1].(int)]
	}).(WirelesscontrollerBleprofileOutput)
}

type WirelesscontrollerBleprofileMapOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerBleprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerBleprofile)(nil)).Elem()
}

func (o WirelesscontrollerBleprofileMapOutput) ToWirelesscontrollerBleprofileMapOutput() WirelesscontrollerBleprofileMapOutput {
	return o
}

func (o WirelesscontrollerBleprofileMapOutput) ToWirelesscontrollerBleprofileMapOutputWithContext(ctx context.Context) WirelesscontrollerBleprofileMapOutput {
	return o
}

func (o WirelesscontrollerBleprofileMapOutput) MapIndex(k pulumi.StringInput) WirelesscontrollerBleprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelesscontrollerBleprofile {
		return vs[0].(map[string]*WirelesscontrollerBleprofile)[vs[1].(string)]
	}).(WirelesscontrollerBleprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerBleprofileInput)(nil)).Elem(), &WirelesscontrollerBleprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerBleprofileArrayInput)(nil)).Elem(), WirelesscontrollerBleprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerBleprofileMapInput)(nil)).Elem(), WirelesscontrollerBleprofileMap{})
	pulumi.RegisterOutputType(WirelesscontrollerBleprofileOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerBleprofileArrayOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerBleprofileMapOutput{})
}
