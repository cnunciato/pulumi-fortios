// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure Link Health Monitor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemLinkmonitor(ctx, "trname", &fortios.SystemLinkmonitorArgs{
//				AddrMode:     pulumi.String("ipv4"),
//				Failtime:     pulumi.Int(5),
//				GatewayIp:    pulumi.String("2.2.2.2"),
//				GatewayIp6:   pulumi.String("::"),
//				HaPriority:   pulumi.Int(1),
//				HttpAgent:    pulumi.String("Chrome/ Safari/"),
//				HttpGet:      pulumi.String("/"),
//				Interval:     pulumi.Int(1),
//				PacketSize:   pulumi.Int(64),
//				Port:         pulumi.Int(80),
//				Protocol:     pulumi.String("ping"),
//				Recoverytime: pulumi.Int(5),
//				SecurityMode: pulumi.String("none"),
//				Servers: fortios.SystemLinkmonitorServerArray{
//					&fortios.SystemLinkmonitorServerArgs{
//						Address: pulumi.String("3.3.3.3"),
//					},
//				},
//				SourceIp:               pulumi.String("0.0.0.0"),
//				SourceIp6:              pulumi.String("::"),
//				Srcintf:                pulumi.String("port4"),
//				Status:                 pulumi.String("enable"),
//				UpdateCascadeInterface: pulumi.String("enable"),
//				UpdateStaticRoute:      pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # System LinkMonitor can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemLinkmonitor:SystemLinkmonitor labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemLinkmonitor:SystemLinkmonitor labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemLinkmonitor struct {
	pulumi.CustomResourceState

	// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddrMode pulumi.StringOutput `pulumi:"addrMode"`
	// Traffic class ID.
	ClassId pulumi.IntOutput `pulumi:"classId"`
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode pulumi.StringOutput `pulumi:"diffservcode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Threshold weight to trigger link failure alert.
	FailWeight pulumi.IntOutput `pulumi:"failWeight"`
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime pulumi.IntOutput `pulumi:"failtime"`
	// Gateway IP address used to probe the server.
	GatewayIp pulumi.StringOutput `pulumi:"gatewayIp"`
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 pulumi.StringOutput `pulumi:"gatewayIp6"`
	// HA election priority (1 - 50).
	HaPriority pulumi.IntOutput `pulumi:"haPriority"`
	// String in the http-agent field in the HTTP header.
	HttpAgent pulumi.StringOutput `pulumi:"httpAgent"`
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet pulumi.StringOutput `pulumi:"httpGet"`
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch pulumi.StringOutput `pulumi:"httpMatch"`
	// Detection interval (1 - 3600 sec, default = 5).
	Interval pulumi.IntOutput `pulumi:"interval"`
	// Link monitor name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Packet size of a twamp test session,
	PacketSize pulumi.IntOutput `pulumi:"packetSize"`
	// Twamp controller password in authentication mode
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Port number of the traffic to be used to monitor the server.
	Port pulumi.IntOutput `pulumi:"port"`
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount pulumi.IntOutput `pulumi:"probeCount"`
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout pulumi.IntOutput `pulumi:"probeTimeout"`
	// Protocols used to monitor the server.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime pulumi.IntOutput `pulumi:"recoverytime"`
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes SystemLinkmonitorRouteArrayOutput `pulumi:"routes"`
	// Twamp controller security mode. Valid values: `none`, `authentication`.
	SecurityMode pulumi.StringOutput `pulumi:"securityMode"`
	// Mode of server configuration. Valid values: `default`, `individual`.
	ServerConfig pulumi.StringOutput `pulumi:"serverConfig"`
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists SystemLinkmonitorServerListArrayOutput `pulumi:"serverLists"`
	// Server type (static or dynamic). Valid values: `static`, `dynamic`.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers SystemLinkmonitorServerArrayOutput `pulumi:"servers"`
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
	ServiceDetection pulumi.StringOutput `pulumi:"serviceDetection"`
	// Source IP address used in packet to the server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Source IPv6 address used in packet to the server.
	SourceIp6 pulumi.StringOutput `pulumi:"sourceIp6"`
	// Interface that receives the traffic to be monitored.
	Srcintf pulumi.StringOutput `pulumi:"srcintf"`
	// Enable/disable this link monitor. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
	UpdateCascadeInterface pulumi.StringOutput `pulumi:"updateCascadeInterface"`
	// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
	UpdatePolicyRoute pulumi.StringOutput `pulumi:"updatePolicyRoute"`
	// Enable/disable updating the static route. Valid values: `enable`, `disable`.
	UpdateStaticRoute pulumi.StringOutput `pulumi:"updateStaticRoute"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemLinkmonitor registers a new resource with the given unique name, arguments, and options.
func NewSystemLinkmonitor(ctx *pulumi.Context,
	name string, args *SystemLinkmonitorArgs, opts ...pulumi.ResourceOption) (*SystemLinkmonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Servers == nil {
		return nil, errors.New("invalid value for required argument 'Servers'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemLinkmonitor
	err := ctx.RegisterResource("fortios:index/systemLinkmonitor:SystemLinkmonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemLinkmonitor gets an existing SystemLinkmonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemLinkmonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemLinkmonitorState, opts ...pulumi.ResourceOption) (*SystemLinkmonitor, error) {
	var resource SystemLinkmonitor
	err := ctx.ReadResource("fortios:index/systemLinkmonitor:SystemLinkmonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemLinkmonitor resources.
type systemLinkmonitorState struct {
	// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddrMode *string `pulumi:"addrMode"`
	// Traffic class ID.
	ClassId *int `pulumi:"classId"`
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode *string `pulumi:"diffservcode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Threshold weight to trigger link failure alert.
	FailWeight *int `pulumi:"failWeight"`
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime *int `pulumi:"failtime"`
	// Gateway IP address used to probe the server.
	GatewayIp *string `pulumi:"gatewayIp"`
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 *string `pulumi:"gatewayIp6"`
	// HA election priority (1 - 50).
	HaPriority *int `pulumi:"haPriority"`
	// String in the http-agent field in the HTTP header.
	HttpAgent *string `pulumi:"httpAgent"`
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet *string `pulumi:"httpGet"`
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch *string `pulumi:"httpMatch"`
	// Detection interval (1 - 3600 sec, default = 5).
	Interval *int `pulumi:"interval"`
	// Link monitor name.
	Name *string `pulumi:"name"`
	// Packet size of a twamp test session,
	PacketSize *int `pulumi:"packetSize"`
	// Twamp controller password in authentication mode
	Password *string `pulumi:"password"`
	// Port number of the traffic to be used to monitor the server.
	Port *int `pulumi:"port"`
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount *int `pulumi:"probeCount"`
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout *int `pulumi:"probeTimeout"`
	// Protocols used to monitor the server.
	Protocol *string `pulumi:"protocol"`
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime *int `pulumi:"recoverytime"`
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes []SystemLinkmonitorRoute `pulumi:"routes"`
	// Twamp controller security mode. Valid values: `none`, `authentication`.
	SecurityMode *string `pulumi:"securityMode"`
	// Mode of server configuration. Valid values: `default`, `individual`.
	ServerConfig *string `pulumi:"serverConfig"`
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists []SystemLinkmonitorServerList `pulumi:"serverLists"`
	// Server type (static or dynamic). Valid values: `static`, `dynamic`.
	ServerType *string `pulumi:"serverType"`
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers []SystemLinkmonitorServer `pulumi:"servers"`
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
	ServiceDetection *string `pulumi:"serviceDetection"`
	// Source IP address used in packet to the server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address used in packet to the server.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Interface that receives the traffic to be monitored.
	Srcintf *string `pulumi:"srcintf"`
	// Enable/disable this link monitor. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
	UpdateCascadeInterface *string `pulumi:"updateCascadeInterface"`
	// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
	UpdatePolicyRoute *string `pulumi:"updatePolicyRoute"`
	// Enable/disable updating the static route. Valid values: `enable`, `disable`.
	UpdateStaticRoute *string `pulumi:"updateStaticRoute"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemLinkmonitorState struct {
	// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddrMode pulumi.StringPtrInput
	// Traffic class ID.
	ClassId pulumi.IntPtrInput
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Threshold weight to trigger link failure alert.
	FailWeight pulumi.IntPtrInput
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime pulumi.IntPtrInput
	// Gateway IP address used to probe the server.
	GatewayIp pulumi.StringPtrInput
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 pulumi.StringPtrInput
	// HA election priority (1 - 50).
	HaPriority pulumi.IntPtrInput
	// String in the http-agent field in the HTTP header.
	HttpAgent pulumi.StringPtrInput
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet pulumi.StringPtrInput
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch pulumi.StringPtrInput
	// Detection interval (1 - 3600 sec, default = 5).
	Interval pulumi.IntPtrInput
	// Link monitor name.
	Name pulumi.StringPtrInput
	// Packet size of a twamp test session,
	PacketSize pulumi.IntPtrInput
	// Twamp controller password in authentication mode
	Password pulumi.StringPtrInput
	// Port number of the traffic to be used to monitor the server.
	Port pulumi.IntPtrInput
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount pulumi.IntPtrInput
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout pulumi.IntPtrInput
	// Protocols used to monitor the server.
	Protocol pulumi.StringPtrInput
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime pulumi.IntPtrInput
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes SystemLinkmonitorRouteArrayInput
	// Twamp controller security mode. Valid values: `none`, `authentication`.
	SecurityMode pulumi.StringPtrInput
	// Mode of server configuration. Valid values: `default`, `individual`.
	ServerConfig pulumi.StringPtrInput
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists SystemLinkmonitorServerListArrayInput
	// Server type (static or dynamic). Valid values: `static`, `dynamic`.
	ServerType pulumi.StringPtrInput
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers SystemLinkmonitorServerArrayInput
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
	ServiceDetection pulumi.StringPtrInput
	// Source IP address used in packet to the server.
	SourceIp pulumi.StringPtrInput
	// Source IPv6 address used in packet to the server.
	SourceIp6 pulumi.StringPtrInput
	// Interface that receives the traffic to be monitored.
	Srcintf pulumi.StringPtrInput
	// Enable/disable this link monitor. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
	UpdateCascadeInterface pulumi.StringPtrInput
	// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
	UpdatePolicyRoute pulumi.StringPtrInput
	// Enable/disable updating the static route. Valid values: `enable`, `disable`.
	UpdateStaticRoute pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemLinkmonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLinkmonitorState)(nil)).Elem()
}

type systemLinkmonitorArgs struct {
	// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddrMode *string `pulumi:"addrMode"`
	// Traffic class ID.
	ClassId *int `pulumi:"classId"`
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode *string `pulumi:"diffservcode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Threshold weight to trigger link failure alert.
	FailWeight *int `pulumi:"failWeight"`
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime *int `pulumi:"failtime"`
	// Gateway IP address used to probe the server.
	GatewayIp *string `pulumi:"gatewayIp"`
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 *string `pulumi:"gatewayIp6"`
	// HA election priority (1 - 50).
	HaPriority *int `pulumi:"haPriority"`
	// String in the http-agent field in the HTTP header.
	HttpAgent *string `pulumi:"httpAgent"`
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet *string `pulumi:"httpGet"`
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch *string `pulumi:"httpMatch"`
	// Detection interval (1 - 3600 sec, default = 5).
	Interval *int `pulumi:"interval"`
	// Link monitor name.
	Name *string `pulumi:"name"`
	// Packet size of a twamp test session,
	PacketSize *int `pulumi:"packetSize"`
	// Twamp controller password in authentication mode
	Password *string `pulumi:"password"`
	// Port number of the traffic to be used to monitor the server.
	Port *int `pulumi:"port"`
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount *int `pulumi:"probeCount"`
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout *int `pulumi:"probeTimeout"`
	// Protocols used to monitor the server.
	Protocol *string `pulumi:"protocol"`
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime *int `pulumi:"recoverytime"`
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes []SystemLinkmonitorRoute `pulumi:"routes"`
	// Twamp controller security mode. Valid values: `none`, `authentication`.
	SecurityMode *string `pulumi:"securityMode"`
	// Mode of server configuration. Valid values: `default`, `individual`.
	ServerConfig *string `pulumi:"serverConfig"`
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists []SystemLinkmonitorServerList `pulumi:"serverLists"`
	// Server type (static or dynamic). Valid values: `static`, `dynamic`.
	ServerType *string `pulumi:"serverType"`
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers []SystemLinkmonitorServer `pulumi:"servers"`
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
	ServiceDetection *string `pulumi:"serviceDetection"`
	// Source IP address used in packet to the server.
	SourceIp *string `pulumi:"sourceIp"`
	// Source IPv6 address used in packet to the server.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Interface that receives the traffic to be monitored.
	Srcintf *string `pulumi:"srcintf"`
	// Enable/disable this link monitor. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
	UpdateCascadeInterface *string `pulumi:"updateCascadeInterface"`
	// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
	UpdatePolicyRoute *string `pulumi:"updatePolicyRoute"`
	// Enable/disable updating the static route. Valid values: `enable`, `disable`.
	UpdateStaticRoute *string `pulumi:"updateStaticRoute"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemLinkmonitor resource.
type SystemLinkmonitorArgs struct {
	// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
	AddrMode pulumi.StringPtrInput
	// Traffic class ID.
	ClassId pulumi.IntPtrInput
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Threshold weight to trigger link failure alert.
	FailWeight pulumi.IntPtrInput
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime pulumi.IntPtrInput
	// Gateway IP address used to probe the server.
	GatewayIp pulumi.StringPtrInput
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 pulumi.StringPtrInput
	// HA election priority (1 - 50).
	HaPriority pulumi.IntPtrInput
	// String in the http-agent field in the HTTP header.
	HttpAgent pulumi.StringPtrInput
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet pulumi.StringPtrInput
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch pulumi.StringPtrInput
	// Detection interval (1 - 3600 sec, default = 5).
	Interval pulumi.IntPtrInput
	// Link monitor name.
	Name pulumi.StringPtrInput
	// Packet size of a twamp test session,
	PacketSize pulumi.IntPtrInput
	// Twamp controller password in authentication mode
	Password pulumi.StringPtrInput
	// Port number of the traffic to be used to monitor the server.
	Port pulumi.IntPtrInput
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount pulumi.IntPtrInput
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout pulumi.IntPtrInput
	// Protocols used to monitor the server.
	Protocol pulumi.StringPtrInput
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime pulumi.IntPtrInput
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes SystemLinkmonitorRouteArrayInput
	// Twamp controller security mode. Valid values: `none`, `authentication`.
	SecurityMode pulumi.StringPtrInput
	// Mode of server configuration. Valid values: `default`, `individual`.
	ServerConfig pulumi.StringPtrInput
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists SystemLinkmonitorServerListArrayInput
	// Server type (static or dynamic). Valid values: `static`, `dynamic`.
	ServerType pulumi.StringPtrInput
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers SystemLinkmonitorServerArrayInput
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
	ServiceDetection pulumi.StringPtrInput
	// Source IP address used in packet to the server.
	SourceIp pulumi.StringPtrInput
	// Source IPv6 address used in packet to the server.
	SourceIp6 pulumi.StringPtrInput
	// Interface that receives the traffic to be monitored.
	Srcintf pulumi.StringPtrInput
	// Enable/disable this link monitor. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
	UpdateCascadeInterface pulumi.StringPtrInput
	// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
	UpdatePolicyRoute pulumi.StringPtrInput
	// Enable/disable updating the static route. Valid values: `enable`, `disable`.
	UpdateStaticRoute pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemLinkmonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLinkmonitorArgs)(nil)).Elem()
}

type SystemLinkmonitorInput interface {
	pulumi.Input

	ToSystemLinkmonitorOutput() SystemLinkmonitorOutput
	ToSystemLinkmonitorOutputWithContext(ctx context.Context) SystemLinkmonitorOutput
}

func (*SystemLinkmonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLinkmonitor)(nil)).Elem()
}

func (i *SystemLinkmonitor) ToSystemLinkmonitorOutput() SystemLinkmonitorOutput {
	return i.ToSystemLinkmonitorOutputWithContext(context.Background())
}

func (i *SystemLinkmonitor) ToSystemLinkmonitorOutputWithContext(ctx context.Context) SystemLinkmonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLinkmonitorOutput)
}

// SystemLinkmonitorArrayInput is an input type that accepts SystemLinkmonitorArray and SystemLinkmonitorArrayOutput values.
// You can construct a concrete instance of `SystemLinkmonitorArrayInput` via:
//
//	SystemLinkmonitorArray{ SystemLinkmonitorArgs{...} }
type SystemLinkmonitorArrayInput interface {
	pulumi.Input

	ToSystemLinkmonitorArrayOutput() SystemLinkmonitorArrayOutput
	ToSystemLinkmonitorArrayOutputWithContext(context.Context) SystemLinkmonitorArrayOutput
}

type SystemLinkmonitorArray []SystemLinkmonitorInput

func (SystemLinkmonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLinkmonitor)(nil)).Elem()
}

func (i SystemLinkmonitorArray) ToSystemLinkmonitorArrayOutput() SystemLinkmonitorArrayOutput {
	return i.ToSystemLinkmonitorArrayOutputWithContext(context.Background())
}

func (i SystemLinkmonitorArray) ToSystemLinkmonitorArrayOutputWithContext(ctx context.Context) SystemLinkmonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLinkmonitorArrayOutput)
}

// SystemLinkmonitorMapInput is an input type that accepts SystemLinkmonitorMap and SystemLinkmonitorMapOutput values.
// You can construct a concrete instance of `SystemLinkmonitorMapInput` via:
//
//	SystemLinkmonitorMap{ "key": SystemLinkmonitorArgs{...} }
type SystemLinkmonitorMapInput interface {
	pulumi.Input

	ToSystemLinkmonitorMapOutput() SystemLinkmonitorMapOutput
	ToSystemLinkmonitorMapOutputWithContext(context.Context) SystemLinkmonitorMapOutput
}

type SystemLinkmonitorMap map[string]SystemLinkmonitorInput

func (SystemLinkmonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLinkmonitor)(nil)).Elem()
}

func (i SystemLinkmonitorMap) ToSystemLinkmonitorMapOutput() SystemLinkmonitorMapOutput {
	return i.ToSystemLinkmonitorMapOutputWithContext(context.Background())
}

func (i SystemLinkmonitorMap) ToSystemLinkmonitorMapOutputWithContext(ctx context.Context) SystemLinkmonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLinkmonitorMapOutput)
}

type SystemLinkmonitorOutput struct{ *pulumi.OutputState }

func (SystemLinkmonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLinkmonitor)(nil)).Elem()
}

func (o SystemLinkmonitorOutput) ToSystemLinkmonitorOutput() SystemLinkmonitorOutput {
	return o
}

func (o SystemLinkmonitorOutput) ToSystemLinkmonitorOutputWithContext(ctx context.Context) SystemLinkmonitorOutput {
	return o
}

// Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
func (o SystemLinkmonitorOutput) AddrMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.AddrMode }).(pulumi.StringOutput)
}

// Traffic class ID.
func (o SystemLinkmonitorOutput) ClassId() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.IntOutput { return v.ClassId }).(pulumi.IntOutput)
}

// Differentiated services code point (DSCP) in the IP header of the probe packet.
func (o SystemLinkmonitorOutput) Diffservcode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.Diffservcode }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SystemLinkmonitorOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Threshold weight to trigger link failure alert.
func (o SystemLinkmonitorOutput) FailWeight() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.IntOutput { return v.FailWeight }).(pulumi.IntOutput)
}

// Number of retry attempts before the server is considered down (1 - 10, default = 5)
func (o SystemLinkmonitorOutput) Failtime() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.IntOutput { return v.Failtime }).(pulumi.IntOutput)
}

// Gateway IP address used to probe the server.
func (o SystemLinkmonitorOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

// Gateway IPv6 address used to probe the server.
func (o SystemLinkmonitorOutput) GatewayIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.GatewayIp6 }).(pulumi.StringOutput)
}

// HA election priority (1 - 50).
func (o SystemLinkmonitorOutput) HaPriority() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.IntOutput { return v.HaPriority }).(pulumi.IntOutput)
}

// String in the http-agent field in the HTTP header.
func (o SystemLinkmonitorOutput) HttpAgent() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.HttpAgent }).(pulumi.StringOutput)
}

// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
func (o SystemLinkmonitorOutput) HttpGet() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.HttpGet }).(pulumi.StringOutput)
}

// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
func (o SystemLinkmonitorOutput) HttpMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.HttpMatch }).(pulumi.StringOutput)
}

// Detection interval (1 - 3600 sec, default = 5).
func (o SystemLinkmonitorOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

// Link monitor name.
func (o SystemLinkmonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Packet size of a twamp test session,
func (o SystemLinkmonitorOutput) PacketSize() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.IntOutput { return v.PacketSize }).(pulumi.IntOutput)
}

// Twamp controller password in authentication mode
func (o SystemLinkmonitorOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Port number of the traffic to be used to monitor the server.
func (o SystemLinkmonitorOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
func (o SystemLinkmonitorOutput) ProbeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.IntOutput { return v.ProbeCount }).(pulumi.IntOutput)
}

// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
func (o SystemLinkmonitorOutput) ProbeTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.IntOutput { return v.ProbeTimeout }).(pulumi.IntOutput)
}

// Protocols used to monitor the server.
func (o SystemLinkmonitorOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
func (o SystemLinkmonitorOutput) Recoverytime() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.IntOutput { return v.Recoverytime }).(pulumi.IntOutput)
}

// Subnet to monitor. The structure of `route` block is documented below.
func (o SystemLinkmonitorOutput) Routes() SystemLinkmonitorRouteArrayOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) SystemLinkmonitorRouteArrayOutput { return v.Routes }).(SystemLinkmonitorRouteArrayOutput)
}

// Twamp controller security mode. Valid values: `none`, `authentication`.
func (o SystemLinkmonitorOutput) SecurityMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.SecurityMode }).(pulumi.StringOutput)
}

// Mode of server configuration. Valid values: `default`, `individual`.
func (o SystemLinkmonitorOutput) ServerConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.ServerConfig }).(pulumi.StringOutput)
}

// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
func (o SystemLinkmonitorOutput) ServerLists() SystemLinkmonitorServerListArrayOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) SystemLinkmonitorServerListArrayOutput { return v.ServerLists }).(SystemLinkmonitorServerListArrayOutput)
}

// Server type (static or dynamic). Valid values: `static`, `dynamic`.
func (o SystemLinkmonitorOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
func (o SystemLinkmonitorOutput) Servers() SystemLinkmonitorServerArrayOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) SystemLinkmonitorServerArrayOutput { return v.Servers }).(SystemLinkmonitorServerArrayOutput)
}

// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated. Valid values: `enable`, `disable`.
func (o SystemLinkmonitorOutput) ServiceDetection() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.ServiceDetection }).(pulumi.StringOutput)
}

// Source IP address used in packet to the server.
func (o SystemLinkmonitorOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Source IPv6 address used in packet to the server.
func (o SystemLinkmonitorOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.SourceIp6 }).(pulumi.StringOutput)
}

// Interface that receives the traffic to be monitored.
func (o SystemLinkmonitorOutput) Srcintf() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.Srcintf }).(pulumi.StringOutput)
}

// Enable/disable this link monitor. Valid values: `enable`, `disable`.
func (o SystemLinkmonitorOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Enable/disable update cascade interface. Valid values: `enable`, `disable`.
func (o SystemLinkmonitorOutput) UpdateCascadeInterface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.UpdateCascadeInterface }).(pulumi.StringOutput)
}

// Enable/disable updating the policy route. Valid values: `enable`, `disable`.
func (o SystemLinkmonitorOutput) UpdatePolicyRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.UpdatePolicyRoute }).(pulumi.StringOutput)
}

// Enable/disable updating the static route. Valid values: `enable`, `disable`.
func (o SystemLinkmonitorOutput) UpdateStaticRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringOutput { return v.UpdateStaticRoute }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemLinkmonitorOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLinkmonitor) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemLinkmonitorArrayOutput struct{ *pulumi.OutputState }

func (SystemLinkmonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLinkmonitor)(nil)).Elem()
}

func (o SystemLinkmonitorArrayOutput) ToSystemLinkmonitorArrayOutput() SystemLinkmonitorArrayOutput {
	return o
}

func (o SystemLinkmonitorArrayOutput) ToSystemLinkmonitorArrayOutputWithContext(ctx context.Context) SystemLinkmonitorArrayOutput {
	return o
}

func (o SystemLinkmonitorArrayOutput) Index(i pulumi.IntInput) SystemLinkmonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemLinkmonitor {
		return vs[0].([]*SystemLinkmonitor)[vs[1].(int)]
	}).(SystemLinkmonitorOutput)
}

type SystemLinkmonitorMapOutput struct{ *pulumi.OutputState }

func (SystemLinkmonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLinkmonitor)(nil)).Elem()
}

func (o SystemLinkmonitorMapOutput) ToSystemLinkmonitorMapOutput() SystemLinkmonitorMapOutput {
	return o
}

func (o SystemLinkmonitorMapOutput) ToSystemLinkmonitorMapOutputWithContext(ctx context.Context) SystemLinkmonitorMapOutput {
	return o
}

func (o SystemLinkmonitorMapOutput) MapIndex(k pulumi.StringInput) SystemLinkmonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemLinkmonitor {
		return vs[0].(map[string]*SystemLinkmonitor)[vs[1].(string)]
	}).(SystemLinkmonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLinkmonitorInput)(nil)).Elem(), &SystemLinkmonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLinkmonitorArrayInput)(nil)).Elem(), SystemLinkmonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLinkmonitorMapInput)(nil)).Elem(), SystemLinkmonitorMap{})
	pulumi.RegisterOutputType(SystemLinkmonitorOutput{})
	pulumi.RegisterOutputType(SystemLinkmonitorArrayOutput{})
	pulumi.RegisterOutputType(SystemLinkmonitorMapOutput{})
}
