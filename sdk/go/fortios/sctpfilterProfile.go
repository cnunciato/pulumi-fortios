// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure SCTP filter profiles. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// # SctpFilter Profile can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/sctpfilterProfile:SctpfilterProfile labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/sctpfilterProfile:SctpfilterProfile labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SctpfilterProfile struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// PPID filters list. The structure of `ppidFilters` block is documented below.
	PpidFilters SctpfilterProfilePpidFilterArrayOutput `pulumi:"ppidFilters"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSctpfilterProfile registers a new resource with the given unique name, arguments, and options.
func NewSctpfilterProfile(ctx *pulumi.Context,
	name string, args *SctpfilterProfileArgs, opts ...pulumi.ResourceOption) (*SctpfilterProfile, error) {
	if args == nil {
		args = &SctpfilterProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SctpfilterProfile
	err := ctx.RegisterResource("fortios:index/sctpfilterProfile:SctpfilterProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSctpfilterProfile gets an existing SctpfilterProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSctpfilterProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SctpfilterProfileState, opts ...pulumi.ResourceOption) (*SctpfilterProfile, error) {
	var resource SctpfilterProfile
	err := ctx.ReadResource("fortios:index/sctpfilterProfile:SctpfilterProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SctpfilterProfile resources.
type sctpfilterProfileState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Profile name.
	Name *string `pulumi:"name"`
	// PPID filters list. The structure of `ppidFilters` block is documented below.
	PpidFilters []SctpfilterProfilePpidFilter `pulumi:"ppidFilters"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SctpfilterProfileState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// PPID filters list. The structure of `ppidFilters` block is documented below.
	PpidFilters SctpfilterProfilePpidFilterArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SctpfilterProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*sctpfilterProfileState)(nil)).Elem()
}

type sctpfilterProfileArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Profile name.
	Name *string `pulumi:"name"`
	// PPID filters list. The structure of `ppidFilters` block is documented below.
	PpidFilters []SctpfilterProfilePpidFilter `pulumi:"ppidFilters"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SctpfilterProfile resource.
type SctpfilterProfileArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// PPID filters list. The structure of `ppidFilters` block is documented below.
	PpidFilters SctpfilterProfilePpidFilterArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SctpfilterProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sctpfilterProfileArgs)(nil)).Elem()
}

type SctpfilterProfileInput interface {
	pulumi.Input

	ToSctpfilterProfileOutput() SctpfilterProfileOutput
	ToSctpfilterProfileOutputWithContext(ctx context.Context) SctpfilterProfileOutput
}

func (*SctpfilterProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**SctpfilterProfile)(nil)).Elem()
}

func (i *SctpfilterProfile) ToSctpfilterProfileOutput() SctpfilterProfileOutput {
	return i.ToSctpfilterProfileOutputWithContext(context.Background())
}

func (i *SctpfilterProfile) ToSctpfilterProfileOutputWithContext(ctx context.Context) SctpfilterProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SctpfilterProfileOutput)
}

// SctpfilterProfileArrayInput is an input type that accepts SctpfilterProfileArray and SctpfilterProfileArrayOutput values.
// You can construct a concrete instance of `SctpfilterProfileArrayInput` via:
//
//	SctpfilterProfileArray{ SctpfilterProfileArgs{...} }
type SctpfilterProfileArrayInput interface {
	pulumi.Input

	ToSctpfilterProfileArrayOutput() SctpfilterProfileArrayOutput
	ToSctpfilterProfileArrayOutputWithContext(context.Context) SctpfilterProfileArrayOutput
}

type SctpfilterProfileArray []SctpfilterProfileInput

func (SctpfilterProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SctpfilterProfile)(nil)).Elem()
}

func (i SctpfilterProfileArray) ToSctpfilterProfileArrayOutput() SctpfilterProfileArrayOutput {
	return i.ToSctpfilterProfileArrayOutputWithContext(context.Background())
}

func (i SctpfilterProfileArray) ToSctpfilterProfileArrayOutputWithContext(ctx context.Context) SctpfilterProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SctpfilterProfileArrayOutput)
}

// SctpfilterProfileMapInput is an input type that accepts SctpfilterProfileMap and SctpfilterProfileMapOutput values.
// You can construct a concrete instance of `SctpfilterProfileMapInput` via:
//
//	SctpfilterProfileMap{ "key": SctpfilterProfileArgs{...} }
type SctpfilterProfileMapInput interface {
	pulumi.Input

	ToSctpfilterProfileMapOutput() SctpfilterProfileMapOutput
	ToSctpfilterProfileMapOutputWithContext(context.Context) SctpfilterProfileMapOutput
}

type SctpfilterProfileMap map[string]SctpfilterProfileInput

func (SctpfilterProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SctpfilterProfile)(nil)).Elem()
}

func (i SctpfilterProfileMap) ToSctpfilterProfileMapOutput() SctpfilterProfileMapOutput {
	return i.ToSctpfilterProfileMapOutputWithContext(context.Background())
}

func (i SctpfilterProfileMap) ToSctpfilterProfileMapOutputWithContext(ctx context.Context) SctpfilterProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SctpfilterProfileMapOutput)
}

type SctpfilterProfileOutput struct{ *pulumi.OutputState }

func (SctpfilterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SctpfilterProfile)(nil)).Elem()
}

func (o SctpfilterProfileOutput) ToSctpfilterProfileOutput() SctpfilterProfileOutput {
	return o
}

func (o SctpfilterProfileOutput) ToSctpfilterProfileOutputWithContext(ctx context.Context) SctpfilterProfileOutput {
	return o
}

// Comment.
func (o SctpfilterProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SctpfilterProfile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SctpfilterProfileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SctpfilterProfile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Profile name.
func (o SctpfilterProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SctpfilterProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// PPID filters list. The structure of `ppidFilters` block is documented below.
func (o SctpfilterProfileOutput) PpidFilters() SctpfilterProfilePpidFilterArrayOutput {
	return o.ApplyT(func(v *SctpfilterProfile) SctpfilterProfilePpidFilterArrayOutput { return v.PpidFilters }).(SctpfilterProfilePpidFilterArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SctpfilterProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SctpfilterProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SctpfilterProfileArrayOutput struct{ *pulumi.OutputState }

func (SctpfilterProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SctpfilterProfile)(nil)).Elem()
}

func (o SctpfilterProfileArrayOutput) ToSctpfilterProfileArrayOutput() SctpfilterProfileArrayOutput {
	return o
}

func (o SctpfilterProfileArrayOutput) ToSctpfilterProfileArrayOutputWithContext(ctx context.Context) SctpfilterProfileArrayOutput {
	return o
}

func (o SctpfilterProfileArrayOutput) Index(i pulumi.IntInput) SctpfilterProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SctpfilterProfile {
		return vs[0].([]*SctpfilterProfile)[vs[1].(int)]
	}).(SctpfilterProfileOutput)
}

type SctpfilterProfileMapOutput struct{ *pulumi.OutputState }

func (SctpfilterProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SctpfilterProfile)(nil)).Elem()
}

func (o SctpfilterProfileMapOutput) ToSctpfilterProfileMapOutput() SctpfilterProfileMapOutput {
	return o
}

func (o SctpfilterProfileMapOutput) ToSctpfilterProfileMapOutputWithContext(ctx context.Context) SctpfilterProfileMapOutput {
	return o
}

func (o SctpfilterProfileMapOutput) MapIndex(k pulumi.StringInput) SctpfilterProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SctpfilterProfile {
		return vs[0].(map[string]*SctpfilterProfile)[vs[1].(string)]
	}).(SctpfilterProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SctpfilterProfileInput)(nil)).Elem(), &SctpfilterProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*SctpfilterProfileArrayInput)(nil)).Elem(), SctpfilterProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SctpfilterProfileMapInput)(nil)).Elem(), SctpfilterProfileMap{})
	pulumi.RegisterOutputType(SctpfilterProfileOutput{})
	pulumi.RegisterOutputType(SctpfilterProfileArrayOutput{})
	pulumi.RegisterOutputType(SctpfilterProfileMapOutput{})
}
