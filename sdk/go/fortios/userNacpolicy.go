// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure NAC policy matching pattern to identify matching NAC devices. Applies to FortiOS Version `>= 6.4.0`.
//
// ## Import
//
// # User NacPolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/userNacpolicy:UserNacpolicy labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/userNacpolicy:UserNacpolicy labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type UserNacpolicy struct {
	pulumi.CustomResourceState

	// Category of NAC policy.
	Category pulumi.StringOutput `pulumi:"category"`
	// Description for the NAC policy matching pattern.
	Description pulumi.StringOutput `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// NAC policy matching EMS tag.
	EmsTag pulumi.StringOutput `pulumi:"emsTag"`
	// NAC policy matching family.
	Family pulumi.StringOutput `pulumi:"family"`
	// Dynamic firewall address to associate MAC which match this policy.
	FirewallAddress pulumi.StringOutput `pulumi:"firewallAddress"`
	// NAC policy matching host.
	Host pulumi.StringOutput `pulumi:"host"`
	// NAC policy matching hardware vendor.
	HwVendor pulumi.StringOutput `pulumi:"hwVendor"`
	// NAC policy matching hardware version.
	HwVersion pulumi.StringOutput `pulumi:"hwVersion"`
	// NAC policy matching MAC address.
	Mac pulumi.StringOutput `pulumi:"mac"`
	// NAC policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// NAC policy matching operating system.
	Os pulumi.StringOutput `pulumi:"os"`
	// NAC policy matching source.
	Src pulumi.StringOutput `pulumi:"src"`
	// SSID policy to be applied on the matched NAC policy.
	SsidPolicy pulumi.StringOutput `pulumi:"ssidPolicy"`
	// Enable/disable NAC policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// NAC policy matching software version.
	SwVersion pulumi.StringOutput `pulumi:"swVersion"`
	// NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
	SwitchAutoAuth pulumi.StringOutput `pulumi:"switchAutoAuth"`
	// FortiLink interface for which this NAC policy belongs to.
	SwitchFortilink pulumi.StringOutput `pulumi:"switchFortilink"`
	// List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switchGroup` block is documented below.
	SwitchGroups UserNacpolicySwitchGroupArrayOutput `pulumi:"switchGroups"`
	// switch-mac-policy to be applied on the matched NAC policy.
	SwitchMacPolicy pulumi.StringOutput `pulumi:"switchMacPolicy"`
	// switch-port-policy to be applied on the matched NAC policy.
	SwitchPortPolicy pulumi.StringOutput `pulumi:"switchPortPolicy"`
	// List of managed FortiSwitches on which NAC policy can be applied. The structure of `switchScope` block is documented below.
	SwitchScopes UserNacpolicySwitchScopeArrayOutput `pulumi:"switchScopes"`
	// NAC policy matching type.
	Type pulumi.StringOutput `pulumi:"type"`
	// NAC policy matching user.
	User pulumi.StringOutput `pulumi:"user"`
	// NAC policy matching user group.
	UserGroup pulumi.StringOutput `pulumi:"userGroup"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserNacpolicy registers a new resource with the given unique name, arguments, and options.
func NewUserNacpolicy(ctx *pulumi.Context,
	name string, args *UserNacpolicyArgs, opts ...pulumi.ResourceOption) (*UserNacpolicy, error) {
	if args == nil {
		args = &UserNacpolicyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserNacpolicy
	err := ctx.RegisterResource("fortios:index/userNacpolicy:UserNacpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserNacpolicy gets an existing UserNacpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserNacpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserNacpolicyState, opts ...pulumi.ResourceOption) (*UserNacpolicy, error) {
	var resource UserNacpolicy
	err := ctx.ReadResource("fortios:index/userNacpolicy:UserNacpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserNacpolicy resources.
type userNacpolicyState struct {
	// Category of NAC policy.
	Category *string `pulumi:"category"`
	// Description for the NAC policy matching pattern.
	Description *string `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// NAC policy matching EMS tag.
	EmsTag *string `pulumi:"emsTag"`
	// NAC policy matching family.
	Family *string `pulumi:"family"`
	// Dynamic firewall address to associate MAC which match this policy.
	FirewallAddress *string `pulumi:"firewallAddress"`
	// NAC policy matching host.
	Host *string `pulumi:"host"`
	// NAC policy matching hardware vendor.
	HwVendor *string `pulumi:"hwVendor"`
	// NAC policy matching hardware version.
	HwVersion *string `pulumi:"hwVersion"`
	// NAC policy matching MAC address.
	Mac *string `pulumi:"mac"`
	// NAC policy name.
	Name *string `pulumi:"name"`
	// NAC policy matching operating system.
	Os *string `pulumi:"os"`
	// NAC policy matching source.
	Src *string `pulumi:"src"`
	// SSID policy to be applied on the matched NAC policy.
	SsidPolicy *string `pulumi:"ssidPolicy"`
	// Enable/disable NAC policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// NAC policy matching software version.
	SwVersion *string `pulumi:"swVersion"`
	// NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
	SwitchAutoAuth *string `pulumi:"switchAutoAuth"`
	// FortiLink interface for which this NAC policy belongs to.
	SwitchFortilink *string `pulumi:"switchFortilink"`
	// List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switchGroup` block is documented below.
	SwitchGroups []UserNacpolicySwitchGroup `pulumi:"switchGroups"`
	// switch-mac-policy to be applied on the matched NAC policy.
	SwitchMacPolicy *string `pulumi:"switchMacPolicy"`
	// switch-port-policy to be applied on the matched NAC policy.
	SwitchPortPolicy *string `pulumi:"switchPortPolicy"`
	// List of managed FortiSwitches on which NAC policy can be applied. The structure of `switchScope` block is documented below.
	SwitchScopes []UserNacpolicySwitchScope `pulumi:"switchScopes"`
	// NAC policy matching type.
	Type *string `pulumi:"type"`
	// NAC policy matching user.
	User *string `pulumi:"user"`
	// NAC policy matching user group.
	UserGroup *string `pulumi:"userGroup"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserNacpolicyState struct {
	// Category of NAC policy.
	Category pulumi.StringPtrInput
	// Description for the NAC policy matching pattern.
	Description pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// NAC policy matching EMS tag.
	EmsTag pulumi.StringPtrInput
	// NAC policy matching family.
	Family pulumi.StringPtrInput
	// Dynamic firewall address to associate MAC which match this policy.
	FirewallAddress pulumi.StringPtrInput
	// NAC policy matching host.
	Host pulumi.StringPtrInput
	// NAC policy matching hardware vendor.
	HwVendor pulumi.StringPtrInput
	// NAC policy matching hardware version.
	HwVersion pulumi.StringPtrInput
	// NAC policy matching MAC address.
	Mac pulumi.StringPtrInput
	// NAC policy name.
	Name pulumi.StringPtrInput
	// NAC policy matching operating system.
	Os pulumi.StringPtrInput
	// NAC policy matching source.
	Src pulumi.StringPtrInput
	// SSID policy to be applied on the matched NAC policy.
	SsidPolicy pulumi.StringPtrInput
	// Enable/disable NAC policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// NAC policy matching software version.
	SwVersion pulumi.StringPtrInput
	// NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
	SwitchAutoAuth pulumi.StringPtrInput
	// FortiLink interface for which this NAC policy belongs to.
	SwitchFortilink pulumi.StringPtrInput
	// List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switchGroup` block is documented below.
	SwitchGroups UserNacpolicySwitchGroupArrayInput
	// switch-mac-policy to be applied on the matched NAC policy.
	SwitchMacPolicy pulumi.StringPtrInput
	// switch-port-policy to be applied on the matched NAC policy.
	SwitchPortPolicy pulumi.StringPtrInput
	// List of managed FortiSwitches on which NAC policy can be applied. The structure of `switchScope` block is documented below.
	SwitchScopes UserNacpolicySwitchScopeArrayInput
	// NAC policy matching type.
	Type pulumi.StringPtrInput
	// NAC policy matching user.
	User pulumi.StringPtrInput
	// NAC policy matching user group.
	UserGroup pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserNacpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*userNacpolicyState)(nil)).Elem()
}

type userNacpolicyArgs struct {
	// Category of NAC policy.
	Category *string `pulumi:"category"`
	// Description for the NAC policy matching pattern.
	Description *string `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// NAC policy matching EMS tag.
	EmsTag *string `pulumi:"emsTag"`
	// NAC policy matching family.
	Family *string `pulumi:"family"`
	// Dynamic firewall address to associate MAC which match this policy.
	FirewallAddress *string `pulumi:"firewallAddress"`
	// NAC policy matching host.
	Host *string `pulumi:"host"`
	// NAC policy matching hardware vendor.
	HwVendor *string `pulumi:"hwVendor"`
	// NAC policy matching hardware version.
	HwVersion *string `pulumi:"hwVersion"`
	// NAC policy matching MAC address.
	Mac *string `pulumi:"mac"`
	// NAC policy name.
	Name *string `pulumi:"name"`
	// NAC policy matching operating system.
	Os *string `pulumi:"os"`
	// NAC policy matching source.
	Src *string `pulumi:"src"`
	// SSID policy to be applied on the matched NAC policy.
	SsidPolicy *string `pulumi:"ssidPolicy"`
	// Enable/disable NAC policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// NAC policy matching software version.
	SwVersion *string `pulumi:"swVersion"`
	// NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
	SwitchAutoAuth *string `pulumi:"switchAutoAuth"`
	// FortiLink interface for which this NAC policy belongs to.
	SwitchFortilink *string `pulumi:"switchFortilink"`
	// List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switchGroup` block is documented below.
	SwitchGroups []UserNacpolicySwitchGroup `pulumi:"switchGroups"`
	// switch-mac-policy to be applied on the matched NAC policy.
	SwitchMacPolicy *string `pulumi:"switchMacPolicy"`
	// switch-port-policy to be applied on the matched NAC policy.
	SwitchPortPolicy *string `pulumi:"switchPortPolicy"`
	// List of managed FortiSwitches on which NAC policy can be applied. The structure of `switchScope` block is documented below.
	SwitchScopes []UserNacpolicySwitchScope `pulumi:"switchScopes"`
	// NAC policy matching type.
	Type *string `pulumi:"type"`
	// NAC policy matching user.
	User *string `pulumi:"user"`
	// NAC policy matching user group.
	UserGroup *string `pulumi:"userGroup"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserNacpolicy resource.
type UserNacpolicyArgs struct {
	// Category of NAC policy.
	Category pulumi.StringPtrInput
	// Description for the NAC policy matching pattern.
	Description pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// NAC policy matching EMS tag.
	EmsTag pulumi.StringPtrInput
	// NAC policy matching family.
	Family pulumi.StringPtrInput
	// Dynamic firewall address to associate MAC which match this policy.
	FirewallAddress pulumi.StringPtrInput
	// NAC policy matching host.
	Host pulumi.StringPtrInput
	// NAC policy matching hardware vendor.
	HwVendor pulumi.StringPtrInput
	// NAC policy matching hardware version.
	HwVersion pulumi.StringPtrInput
	// NAC policy matching MAC address.
	Mac pulumi.StringPtrInput
	// NAC policy name.
	Name pulumi.StringPtrInput
	// NAC policy matching operating system.
	Os pulumi.StringPtrInput
	// NAC policy matching source.
	Src pulumi.StringPtrInput
	// SSID policy to be applied on the matched NAC policy.
	SsidPolicy pulumi.StringPtrInput
	// Enable/disable NAC policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// NAC policy matching software version.
	SwVersion pulumi.StringPtrInput
	// NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
	SwitchAutoAuth pulumi.StringPtrInput
	// FortiLink interface for which this NAC policy belongs to.
	SwitchFortilink pulumi.StringPtrInput
	// List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switchGroup` block is documented below.
	SwitchGroups UserNacpolicySwitchGroupArrayInput
	// switch-mac-policy to be applied on the matched NAC policy.
	SwitchMacPolicy pulumi.StringPtrInput
	// switch-port-policy to be applied on the matched NAC policy.
	SwitchPortPolicy pulumi.StringPtrInput
	// List of managed FortiSwitches on which NAC policy can be applied. The structure of `switchScope` block is documented below.
	SwitchScopes UserNacpolicySwitchScopeArrayInput
	// NAC policy matching type.
	Type pulumi.StringPtrInput
	// NAC policy matching user.
	User pulumi.StringPtrInput
	// NAC policy matching user group.
	UserGroup pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserNacpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userNacpolicyArgs)(nil)).Elem()
}

type UserNacpolicyInput interface {
	pulumi.Input

	ToUserNacpolicyOutput() UserNacpolicyOutput
	ToUserNacpolicyOutputWithContext(ctx context.Context) UserNacpolicyOutput
}

func (*UserNacpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**UserNacpolicy)(nil)).Elem()
}

func (i *UserNacpolicy) ToUserNacpolicyOutput() UserNacpolicyOutput {
	return i.ToUserNacpolicyOutputWithContext(context.Background())
}

func (i *UserNacpolicy) ToUserNacpolicyOutputWithContext(ctx context.Context) UserNacpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserNacpolicyOutput)
}

// UserNacpolicyArrayInput is an input type that accepts UserNacpolicyArray and UserNacpolicyArrayOutput values.
// You can construct a concrete instance of `UserNacpolicyArrayInput` via:
//
//	UserNacpolicyArray{ UserNacpolicyArgs{...} }
type UserNacpolicyArrayInput interface {
	pulumi.Input

	ToUserNacpolicyArrayOutput() UserNacpolicyArrayOutput
	ToUserNacpolicyArrayOutputWithContext(context.Context) UserNacpolicyArrayOutput
}

type UserNacpolicyArray []UserNacpolicyInput

func (UserNacpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserNacpolicy)(nil)).Elem()
}

func (i UserNacpolicyArray) ToUserNacpolicyArrayOutput() UserNacpolicyArrayOutput {
	return i.ToUserNacpolicyArrayOutputWithContext(context.Background())
}

func (i UserNacpolicyArray) ToUserNacpolicyArrayOutputWithContext(ctx context.Context) UserNacpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserNacpolicyArrayOutput)
}

// UserNacpolicyMapInput is an input type that accepts UserNacpolicyMap and UserNacpolicyMapOutput values.
// You can construct a concrete instance of `UserNacpolicyMapInput` via:
//
//	UserNacpolicyMap{ "key": UserNacpolicyArgs{...} }
type UserNacpolicyMapInput interface {
	pulumi.Input

	ToUserNacpolicyMapOutput() UserNacpolicyMapOutput
	ToUserNacpolicyMapOutputWithContext(context.Context) UserNacpolicyMapOutput
}

type UserNacpolicyMap map[string]UserNacpolicyInput

func (UserNacpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserNacpolicy)(nil)).Elem()
}

func (i UserNacpolicyMap) ToUserNacpolicyMapOutput() UserNacpolicyMapOutput {
	return i.ToUserNacpolicyMapOutputWithContext(context.Background())
}

func (i UserNacpolicyMap) ToUserNacpolicyMapOutputWithContext(ctx context.Context) UserNacpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserNacpolicyMapOutput)
}

type UserNacpolicyOutput struct{ *pulumi.OutputState }

func (UserNacpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserNacpolicy)(nil)).Elem()
}

func (o UserNacpolicyOutput) ToUserNacpolicyOutput() UserNacpolicyOutput {
	return o
}

func (o UserNacpolicyOutput) ToUserNacpolicyOutputWithContext(ctx context.Context) UserNacpolicyOutput {
	return o
}

// Category of NAC policy.
func (o UserNacpolicyOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Description for the NAC policy matching pattern.
func (o UserNacpolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o UserNacpolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// NAC policy matching EMS tag.
func (o UserNacpolicyOutput) EmsTag() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.EmsTag }).(pulumi.StringOutput)
}

// NAC policy matching family.
func (o UserNacpolicyOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.Family }).(pulumi.StringOutput)
}

// Dynamic firewall address to associate MAC which match this policy.
func (o UserNacpolicyOutput) FirewallAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.FirewallAddress }).(pulumi.StringOutput)
}

// NAC policy matching host.
func (o UserNacpolicyOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// NAC policy matching hardware vendor.
func (o UserNacpolicyOutput) HwVendor() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.HwVendor }).(pulumi.StringOutput)
}

// NAC policy matching hardware version.
func (o UserNacpolicyOutput) HwVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.HwVersion }).(pulumi.StringOutput)
}

// NAC policy matching MAC address.
func (o UserNacpolicyOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

// NAC policy name.
func (o UserNacpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// NAC policy matching operating system.
func (o UserNacpolicyOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

// NAC policy matching source.
func (o UserNacpolicyOutput) Src() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.Src }).(pulumi.StringOutput)
}

// SSID policy to be applied on the matched NAC policy.
func (o UserNacpolicyOutput) SsidPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.SsidPolicy }).(pulumi.StringOutput)
}

// Enable/disable NAC policy. Valid values: `enable`, `disable`.
func (o UserNacpolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// NAC policy matching software version.
func (o UserNacpolicyOutput) SwVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.SwVersion }).(pulumi.StringOutput)
}

// NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
func (o UserNacpolicyOutput) SwitchAutoAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.SwitchAutoAuth }).(pulumi.StringOutput)
}

// FortiLink interface for which this NAC policy belongs to.
func (o UserNacpolicyOutput) SwitchFortilink() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.SwitchFortilink }).(pulumi.StringOutput)
}

// List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switchGroup` block is documented below.
func (o UserNacpolicyOutput) SwitchGroups() UserNacpolicySwitchGroupArrayOutput {
	return o.ApplyT(func(v *UserNacpolicy) UserNacpolicySwitchGroupArrayOutput { return v.SwitchGroups }).(UserNacpolicySwitchGroupArrayOutput)
}

// switch-mac-policy to be applied on the matched NAC policy.
func (o UserNacpolicyOutput) SwitchMacPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.SwitchMacPolicy }).(pulumi.StringOutput)
}

// switch-port-policy to be applied on the matched NAC policy.
func (o UserNacpolicyOutput) SwitchPortPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.SwitchPortPolicy }).(pulumi.StringOutput)
}

// List of managed FortiSwitches on which NAC policy can be applied. The structure of `switchScope` block is documented below.
func (o UserNacpolicyOutput) SwitchScopes() UserNacpolicySwitchScopeArrayOutput {
	return o.ApplyT(func(v *UserNacpolicy) UserNacpolicySwitchScopeArrayOutput { return v.SwitchScopes }).(UserNacpolicySwitchScopeArrayOutput)
}

// NAC policy matching type.
func (o UserNacpolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// NAC policy matching user.
func (o UserNacpolicyOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

// NAC policy matching user group.
func (o UserNacpolicyOutput) UserGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringOutput { return v.UserGroup }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o UserNacpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserNacpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserNacpolicyArrayOutput struct{ *pulumi.OutputState }

func (UserNacpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserNacpolicy)(nil)).Elem()
}

func (o UserNacpolicyArrayOutput) ToUserNacpolicyArrayOutput() UserNacpolicyArrayOutput {
	return o
}

func (o UserNacpolicyArrayOutput) ToUserNacpolicyArrayOutputWithContext(ctx context.Context) UserNacpolicyArrayOutput {
	return o
}

func (o UserNacpolicyArrayOutput) Index(i pulumi.IntInput) UserNacpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserNacpolicy {
		return vs[0].([]*UserNacpolicy)[vs[1].(int)]
	}).(UserNacpolicyOutput)
}

type UserNacpolicyMapOutput struct{ *pulumi.OutputState }

func (UserNacpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserNacpolicy)(nil)).Elem()
}

func (o UserNacpolicyMapOutput) ToUserNacpolicyMapOutput() UserNacpolicyMapOutput {
	return o
}

func (o UserNacpolicyMapOutput) ToUserNacpolicyMapOutputWithContext(ctx context.Context) UserNacpolicyMapOutput {
	return o
}

func (o UserNacpolicyMapOutput) MapIndex(k pulumi.StringInput) UserNacpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserNacpolicy {
		return vs[0].(map[string]*UserNacpolicy)[vs[1].(string)]
	}).(UserNacpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserNacpolicyInput)(nil)).Elem(), &UserNacpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserNacpolicyArrayInput)(nil)).Elem(), UserNacpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserNacpolicyMapInput)(nil)).Elem(), UserNacpolicyMap{})
	pulumi.RegisterOutputType(UserNacpolicyOutput{})
	pulumi.RegisterOutputType(UserNacpolicyArrayOutput{})
	pulumi.RegisterOutputType(UserNacpolicyMapOutput{})
}
