// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallSecurityPolicyseq struct {
	pulumi.CustomResourceState

	// The alter position: should only be "before" or "after"
	AlterPosition pulumi.StringOutput `pulumi:"alterPosition"`
	// Comment
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Enable status detection for policySrcId and policy_dst_id
	EnableStateChecking pulumi.BoolPtrOutput `pulumi:"enableStateChecking"`
	// The dest policy id which you want to alter
	PolicyDstId pulumi.IntOutput `pulumi:"policyDstId"`
	// The policy id which you want to alter
	PolicySrcId          pulumi.IntOutput                                    `pulumi:"policySrcId"`
	StatePolicyLists     FirewallSecurityPolicyseqStatePolicyListArrayOutput `pulumi:"statePolicyLists"`
	StatePolicySrcdstPos pulumi.StringPtrOutput                              `pulumi:"statePolicySrcdstPos"`
	Vdomparam            pulumi.StringPtrOutput                              `pulumi:"vdomparam"`
}

// NewFirewallSecurityPolicyseq registers a new resource with the given unique name, arguments, and options.
func NewFirewallSecurityPolicyseq(ctx *pulumi.Context,
	name string, args *FirewallSecurityPolicyseqArgs, opts ...pulumi.ResourceOption) (*FirewallSecurityPolicyseq, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlterPosition == nil {
		return nil, errors.New("invalid value for required argument 'AlterPosition'")
	}
	if args.PolicyDstId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDstId'")
	}
	if args.PolicySrcId == nil {
		return nil, errors.New("invalid value for required argument 'PolicySrcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallSecurityPolicyseq
	err := ctx.RegisterResource("fortios:index/firewallSecurityPolicyseq:FirewallSecurityPolicyseq", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallSecurityPolicyseq gets an existing FirewallSecurityPolicyseq resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallSecurityPolicyseq(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallSecurityPolicyseqState, opts ...pulumi.ResourceOption) (*FirewallSecurityPolicyseq, error) {
	var resource FirewallSecurityPolicyseq
	err := ctx.ReadResource("fortios:index/firewallSecurityPolicyseq:FirewallSecurityPolicyseq", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallSecurityPolicyseq resources.
type firewallSecurityPolicyseqState struct {
	// The alter position: should only be "before" or "after"
	AlterPosition *string `pulumi:"alterPosition"`
	// Comment
	Comment *string `pulumi:"comment"`
	// Enable status detection for policySrcId and policy_dst_id
	EnableStateChecking *bool `pulumi:"enableStateChecking"`
	// The dest policy id which you want to alter
	PolicyDstId *int `pulumi:"policyDstId"`
	// The policy id which you want to alter
	PolicySrcId          *int                                       `pulumi:"policySrcId"`
	StatePolicyLists     []FirewallSecurityPolicyseqStatePolicyList `pulumi:"statePolicyLists"`
	StatePolicySrcdstPos *string                                    `pulumi:"statePolicySrcdstPos"`
	Vdomparam            *string                                    `pulumi:"vdomparam"`
}

type FirewallSecurityPolicyseqState struct {
	// The alter position: should only be "before" or "after"
	AlterPosition pulumi.StringPtrInput
	// Comment
	Comment pulumi.StringPtrInput
	// Enable status detection for policySrcId and policy_dst_id
	EnableStateChecking pulumi.BoolPtrInput
	// The dest policy id which you want to alter
	PolicyDstId pulumi.IntPtrInput
	// The policy id which you want to alter
	PolicySrcId          pulumi.IntPtrInput
	StatePolicyLists     FirewallSecurityPolicyseqStatePolicyListArrayInput
	StatePolicySrcdstPos pulumi.StringPtrInput
	Vdomparam            pulumi.StringPtrInput
}

func (FirewallSecurityPolicyseqState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSecurityPolicyseqState)(nil)).Elem()
}

type firewallSecurityPolicyseqArgs struct {
	// The alter position: should only be "before" or "after"
	AlterPosition string `pulumi:"alterPosition"`
	// Comment
	Comment *string `pulumi:"comment"`
	// Enable status detection for policySrcId and policy_dst_id
	EnableStateChecking *bool `pulumi:"enableStateChecking"`
	// The dest policy id which you want to alter
	PolicyDstId int `pulumi:"policyDstId"`
	// The policy id which you want to alter
	PolicySrcId          int     `pulumi:"policySrcId"`
	StatePolicySrcdstPos *string `pulumi:"statePolicySrcdstPos"`
	Vdomparam            *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallSecurityPolicyseq resource.
type FirewallSecurityPolicyseqArgs struct {
	// The alter position: should only be "before" or "after"
	AlterPosition pulumi.StringInput
	// Comment
	Comment pulumi.StringPtrInput
	// Enable status detection for policySrcId and policy_dst_id
	EnableStateChecking pulumi.BoolPtrInput
	// The dest policy id which you want to alter
	PolicyDstId pulumi.IntInput
	// The policy id which you want to alter
	PolicySrcId          pulumi.IntInput
	StatePolicySrcdstPos pulumi.StringPtrInput
	Vdomparam            pulumi.StringPtrInput
}

func (FirewallSecurityPolicyseqArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallSecurityPolicyseqArgs)(nil)).Elem()
}

type FirewallSecurityPolicyseqInput interface {
	pulumi.Input

	ToFirewallSecurityPolicyseqOutput() FirewallSecurityPolicyseqOutput
	ToFirewallSecurityPolicyseqOutputWithContext(ctx context.Context) FirewallSecurityPolicyseqOutput
}

func (*FirewallSecurityPolicyseq) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSecurityPolicyseq)(nil)).Elem()
}

func (i *FirewallSecurityPolicyseq) ToFirewallSecurityPolicyseqOutput() FirewallSecurityPolicyseqOutput {
	return i.ToFirewallSecurityPolicyseqOutputWithContext(context.Background())
}

func (i *FirewallSecurityPolicyseq) ToFirewallSecurityPolicyseqOutputWithContext(ctx context.Context) FirewallSecurityPolicyseqOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecurityPolicyseqOutput)
}

// FirewallSecurityPolicyseqArrayInput is an input type that accepts FirewallSecurityPolicyseqArray and FirewallSecurityPolicyseqArrayOutput values.
// You can construct a concrete instance of `FirewallSecurityPolicyseqArrayInput` via:
//
//	FirewallSecurityPolicyseqArray{ FirewallSecurityPolicyseqArgs{...} }
type FirewallSecurityPolicyseqArrayInput interface {
	pulumi.Input

	ToFirewallSecurityPolicyseqArrayOutput() FirewallSecurityPolicyseqArrayOutput
	ToFirewallSecurityPolicyseqArrayOutputWithContext(context.Context) FirewallSecurityPolicyseqArrayOutput
}

type FirewallSecurityPolicyseqArray []FirewallSecurityPolicyseqInput

func (FirewallSecurityPolicyseqArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSecurityPolicyseq)(nil)).Elem()
}

func (i FirewallSecurityPolicyseqArray) ToFirewallSecurityPolicyseqArrayOutput() FirewallSecurityPolicyseqArrayOutput {
	return i.ToFirewallSecurityPolicyseqArrayOutputWithContext(context.Background())
}

func (i FirewallSecurityPolicyseqArray) ToFirewallSecurityPolicyseqArrayOutputWithContext(ctx context.Context) FirewallSecurityPolicyseqArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecurityPolicyseqArrayOutput)
}

// FirewallSecurityPolicyseqMapInput is an input type that accepts FirewallSecurityPolicyseqMap and FirewallSecurityPolicyseqMapOutput values.
// You can construct a concrete instance of `FirewallSecurityPolicyseqMapInput` via:
//
//	FirewallSecurityPolicyseqMap{ "key": FirewallSecurityPolicyseqArgs{...} }
type FirewallSecurityPolicyseqMapInput interface {
	pulumi.Input

	ToFirewallSecurityPolicyseqMapOutput() FirewallSecurityPolicyseqMapOutput
	ToFirewallSecurityPolicyseqMapOutputWithContext(context.Context) FirewallSecurityPolicyseqMapOutput
}

type FirewallSecurityPolicyseqMap map[string]FirewallSecurityPolicyseqInput

func (FirewallSecurityPolicyseqMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSecurityPolicyseq)(nil)).Elem()
}

func (i FirewallSecurityPolicyseqMap) ToFirewallSecurityPolicyseqMapOutput() FirewallSecurityPolicyseqMapOutput {
	return i.ToFirewallSecurityPolicyseqMapOutputWithContext(context.Background())
}

func (i FirewallSecurityPolicyseqMap) ToFirewallSecurityPolicyseqMapOutputWithContext(ctx context.Context) FirewallSecurityPolicyseqMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallSecurityPolicyseqMapOutput)
}

type FirewallSecurityPolicyseqOutput struct{ *pulumi.OutputState }

func (FirewallSecurityPolicyseqOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSecurityPolicyseq)(nil)).Elem()
}

func (o FirewallSecurityPolicyseqOutput) ToFirewallSecurityPolicyseqOutput() FirewallSecurityPolicyseqOutput {
	return o
}

func (o FirewallSecurityPolicyseqOutput) ToFirewallSecurityPolicyseqOutputWithContext(ctx context.Context) FirewallSecurityPolicyseqOutput {
	return o
}

// The alter position: should only be "before" or "after"
func (o FirewallSecurityPolicyseqOutput) AlterPosition() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallSecurityPolicyseq) pulumi.StringOutput { return v.AlterPosition }).(pulumi.StringOutput)
}

// Comment
func (o FirewallSecurityPolicyseqOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallSecurityPolicyseq) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Enable status detection for policySrcId and policy_dst_id
func (o FirewallSecurityPolicyseqOutput) EnableStateChecking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallSecurityPolicyseq) pulumi.BoolPtrOutput { return v.EnableStateChecking }).(pulumi.BoolPtrOutput)
}

// The dest policy id which you want to alter
func (o FirewallSecurityPolicyseqOutput) PolicyDstId() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallSecurityPolicyseq) pulumi.IntOutput { return v.PolicyDstId }).(pulumi.IntOutput)
}

// The policy id which you want to alter
func (o FirewallSecurityPolicyseqOutput) PolicySrcId() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallSecurityPolicyseq) pulumi.IntOutput { return v.PolicySrcId }).(pulumi.IntOutput)
}

func (o FirewallSecurityPolicyseqOutput) StatePolicyLists() FirewallSecurityPolicyseqStatePolicyListArrayOutput {
	return o.ApplyT(func(v *FirewallSecurityPolicyseq) FirewallSecurityPolicyseqStatePolicyListArrayOutput {
		return v.StatePolicyLists
	}).(FirewallSecurityPolicyseqStatePolicyListArrayOutput)
}

func (o FirewallSecurityPolicyseqOutput) StatePolicySrcdstPos() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallSecurityPolicyseq) pulumi.StringPtrOutput { return v.StatePolicySrcdstPos }).(pulumi.StringPtrOutput)
}

func (o FirewallSecurityPolicyseqOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallSecurityPolicyseq) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallSecurityPolicyseqArrayOutput struct{ *pulumi.OutputState }

func (FirewallSecurityPolicyseqArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallSecurityPolicyseq)(nil)).Elem()
}

func (o FirewallSecurityPolicyseqArrayOutput) ToFirewallSecurityPolicyseqArrayOutput() FirewallSecurityPolicyseqArrayOutput {
	return o
}

func (o FirewallSecurityPolicyseqArrayOutput) ToFirewallSecurityPolicyseqArrayOutputWithContext(ctx context.Context) FirewallSecurityPolicyseqArrayOutput {
	return o
}

func (o FirewallSecurityPolicyseqArrayOutput) Index(i pulumi.IntInput) FirewallSecurityPolicyseqOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallSecurityPolicyseq {
		return vs[0].([]*FirewallSecurityPolicyseq)[vs[1].(int)]
	}).(FirewallSecurityPolicyseqOutput)
}

type FirewallSecurityPolicyseqMapOutput struct{ *pulumi.OutputState }

func (FirewallSecurityPolicyseqMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallSecurityPolicyseq)(nil)).Elem()
}

func (o FirewallSecurityPolicyseqMapOutput) ToFirewallSecurityPolicyseqMapOutput() FirewallSecurityPolicyseqMapOutput {
	return o
}

func (o FirewallSecurityPolicyseqMapOutput) ToFirewallSecurityPolicyseqMapOutputWithContext(ctx context.Context) FirewallSecurityPolicyseqMapOutput {
	return o
}

func (o FirewallSecurityPolicyseqMapOutput) MapIndex(k pulumi.StringInput) FirewallSecurityPolicyseqOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallSecurityPolicyseq {
		return vs[0].(map[string]*FirewallSecurityPolicyseq)[vs[1].(string)]
	}).(FirewallSecurityPolicyseqOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecurityPolicyseqInput)(nil)).Elem(), &FirewallSecurityPolicyseq{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecurityPolicyseqArrayInput)(nil)).Elem(), FirewallSecurityPolicyseqArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallSecurityPolicyseqMapInput)(nil)).Elem(), FirewallSecurityPolicyseqMap{})
	pulumi.RegisterOutputType(FirewallSecurityPolicyseqOutput{})
	pulumi.RegisterOutputType(FirewallSecurityPolicyseqArrayOutput{})
	pulumi.RegisterOutputType(FirewallSecurityPolicyseqMapOutput{})
}
