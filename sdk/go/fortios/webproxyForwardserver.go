// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure forward-server addresses.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewWebproxyForwardserver(ctx, "trname", &fortios.WebproxyForwardserverArgs{
//				AddrType:         pulumi.String("fqdn"),
//				Healthcheck:      pulumi.String("disable"),
//				Ip:               pulumi.String("0.0.0.0"),
//				Monitor:          pulumi.String("http://www.google.com"),
//				Port:             pulumi.Int(3128),
//				ServerDownOption: pulumi.String("block"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # WebProxy ForwardServer can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/webproxyForwardserver:WebproxyForwardserver labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/webproxyForwardserver:WebproxyForwardserver labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WebproxyForwardserver struct {
	pulumi.CustomResourceState

	// Address type of the forwarding proxy server: IP or FQDN. Valid values: `ip`, `fqdn`.
	AddrType pulumi.StringOutput `pulumi:"addrType"`
	// Comment.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// Forward server Fully Qualified Domain Name (FQDN).
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck pulumi.StringOutput `pulumi:"healthcheck"`
	// Forward proxy server IP address.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// URL for forward server health check monitoring (default = http://www.google.com).
	Monitor pulumi.StringOutput `pulumi:"monitor"`
	// Server name.
	Name pulumi.StringOutput `pulumi:"name"`
	// HTTP authentication password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
	Port pulumi.IntOutput `pulumi:"port"`
	// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
	ServerDownOption pulumi.StringOutput `pulumi:"serverDownOption"`
	// HTTP authentication user name.
	Username pulumi.StringOutput `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWebproxyForwardserver registers a new resource with the given unique name, arguments, and options.
func NewWebproxyForwardserver(ctx *pulumi.Context,
	name string, args *WebproxyForwardserverArgs, opts ...pulumi.ResourceOption) (*WebproxyForwardserver, error) {
	if args == nil {
		args = &WebproxyForwardserverArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource WebproxyForwardserver
	err := ctx.RegisterResource("fortios:index/webproxyForwardserver:WebproxyForwardserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebproxyForwardserver gets an existing WebproxyForwardserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebproxyForwardserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebproxyForwardserverState, opts ...pulumi.ResourceOption) (*WebproxyForwardserver, error) {
	var resource WebproxyForwardserver
	err := ctx.ReadResource("fortios:index/webproxyForwardserver:WebproxyForwardserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebproxyForwardserver resources.
type webproxyForwardserverState struct {
	// Address type of the forwarding proxy server: IP or FQDN. Valid values: `ip`, `fqdn`.
	AddrType *string `pulumi:"addrType"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Forward server Fully Qualified Domain Name (FQDN).
	Fqdn *string `pulumi:"fqdn"`
	// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck *string `pulumi:"healthcheck"`
	// Forward proxy server IP address.
	Ip *string `pulumi:"ip"`
	// URL for forward server health check monitoring (default = http://www.google.com).
	Monitor *string `pulumi:"monitor"`
	// Server name.
	Name *string `pulumi:"name"`
	// HTTP authentication password.
	Password *string `pulumi:"password"`
	// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
	Port *int `pulumi:"port"`
	// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
	ServerDownOption *string `pulumi:"serverDownOption"`
	// HTTP authentication user name.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WebproxyForwardserverState struct {
	// Address type of the forwarding proxy server: IP or FQDN. Valid values: `ip`, `fqdn`.
	AddrType pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Forward server Fully Qualified Domain Name (FQDN).
	Fqdn pulumi.StringPtrInput
	// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck pulumi.StringPtrInput
	// Forward proxy server IP address.
	Ip pulumi.StringPtrInput
	// URL for forward server health check monitoring (default = http://www.google.com).
	Monitor pulumi.StringPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// HTTP authentication password.
	Password pulumi.StringPtrInput
	// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
	Port pulumi.IntPtrInput
	// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
	ServerDownOption pulumi.StringPtrInput
	// HTTP authentication user name.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebproxyForwardserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*webproxyForwardserverState)(nil)).Elem()
}

type webproxyForwardserverArgs struct {
	// Address type of the forwarding proxy server: IP or FQDN. Valid values: `ip`, `fqdn`.
	AddrType *string `pulumi:"addrType"`
	// Comment.
	Comment *string `pulumi:"comment"`
	// Forward server Fully Qualified Domain Name (FQDN).
	Fqdn *string `pulumi:"fqdn"`
	// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck *string `pulumi:"healthcheck"`
	// Forward proxy server IP address.
	Ip *string `pulumi:"ip"`
	// URL for forward server health check monitoring (default = http://www.google.com).
	Monitor *string `pulumi:"monitor"`
	// Server name.
	Name *string `pulumi:"name"`
	// HTTP authentication password.
	Password *string `pulumi:"password"`
	// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
	Port *int `pulumi:"port"`
	// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
	ServerDownOption *string `pulumi:"serverDownOption"`
	// HTTP authentication user name.
	Username *string `pulumi:"username"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebproxyForwardserver resource.
type WebproxyForwardserverArgs struct {
	// Address type of the forwarding proxy server: IP or FQDN. Valid values: `ip`, `fqdn`.
	AddrType pulumi.StringPtrInput
	// Comment.
	Comment pulumi.StringPtrInput
	// Forward server Fully Qualified Domain Name (FQDN).
	Fqdn pulumi.StringPtrInput
	// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
	Healthcheck pulumi.StringPtrInput
	// Forward proxy server IP address.
	Ip pulumi.StringPtrInput
	// URL for forward server health check monitoring (default = http://www.google.com).
	Monitor pulumi.StringPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// HTTP authentication password.
	Password pulumi.StringPtrInput
	// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
	Port pulumi.IntPtrInput
	// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
	ServerDownOption pulumi.StringPtrInput
	// HTTP authentication user name.
	Username pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebproxyForwardserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webproxyForwardserverArgs)(nil)).Elem()
}

type WebproxyForwardserverInput interface {
	pulumi.Input

	ToWebproxyForwardserverOutput() WebproxyForwardserverOutput
	ToWebproxyForwardserverOutputWithContext(ctx context.Context) WebproxyForwardserverOutput
}

func (*WebproxyForwardserver) ElementType() reflect.Type {
	return reflect.TypeOf((**WebproxyForwardserver)(nil)).Elem()
}

func (i *WebproxyForwardserver) ToWebproxyForwardserverOutput() WebproxyForwardserverOutput {
	return i.ToWebproxyForwardserverOutputWithContext(context.Background())
}

func (i *WebproxyForwardserver) ToWebproxyForwardserverOutputWithContext(ctx context.Context) WebproxyForwardserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebproxyForwardserverOutput)
}

// WebproxyForwardserverArrayInput is an input type that accepts WebproxyForwardserverArray and WebproxyForwardserverArrayOutput values.
// You can construct a concrete instance of `WebproxyForwardserverArrayInput` via:
//
//	WebproxyForwardserverArray{ WebproxyForwardserverArgs{...} }
type WebproxyForwardserverArrayInput interface {
	pulumi.Input

	ToWebproxyForwardserverArrayOutput() WebproxyForwardserverArrayOutput
	ToWebproxyForwardserverArrayOutputWithContext(context.Context) WebproxyForwardserverArrayOutput
}

type WebproxyForwardserverArray []WebproxyForwardserverInput

func (WebproxyForwardserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebproxyForwardserver)(nil)).Elem()
}

func (i WebproxyForwardserverArray) ToWebproxyForwardserverArrayOutput() WebproxyForwardserverArrayOutput {
	return i.ToWebproxyForwardserverArrayOutputWithContext(context.Background())
}

func (i WebproxyForwardserverArray) ToWebproxyForwardserverArrayOutputWithContext(ctx context.Context) WebproxyForwardserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebproxyForwardserverArrayOutput)
}

// WebproxyForwardserverMapInput is an input type that accepts WebproxyForwardserverMap and WebproxyForwardserverMapOutput values.
// You can construct a concrete instance of `WebproxyForwardserverMapInput` via:
//
//	WebproxyForwardserverMap{ "key": WebproxyForwardserverArgs{...} }
type WebproxyForwardserverMapInput interface {
	pulumi.Input

	ToWebproxyForwardserverMapOutput() WebproxyForwardserverMapOutput
	ToWebproxyForwardserverMapOutputWithContext(context.Context) WebproxyForwardserverMapOutput
}

type WebproxyForwardserverMap map[string]WebproxyForwardserverInput

func (WebproxyForwardserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebproxyForwardserver)(nil)).Elem()
}

func (i WebproxyForwardserverMap) ToWebproxyForwardserverMapOutput() WebproxyForwardserverMapOutput {
	return i.ToWebproxyForwardserverMapOutputWithContext(context.Background())
}

func (i WebproxyForwardserverMap) ToWebproxyForwardserverMapOutputWithContext(ctx context.Context) WebproxyForwardserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebproxyForwardserverMapOutput)
}

type WebproxyForwardserverOutput struct{ *pulumi.OutputState }

func (WebproxyForwardserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebproxyForwardserver)(nil)).Elem()
}

func (o WebproxyForwardserverOutput) ToWebproxyForwardserverOutput() WebproxyForwardserverOutput {
	return o
}

func (o WebproxyForwardserverOutput) ToWebproxyForwardserverOutputWithContext(ctx context.Context) WebproxyForwardserverOutput {
	return o
}

// Address type of the forwarding proxy server: IP or FQDN. Valid values: `ip`, `fqdn`.
func (o WebproxyForwardserverOutput) AddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringOutput { return v.AddrType }).(pulumi.StringOutput)
}

// Comment.
func (o WebproxyForwardserverOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// Forward server Fully Qualified Domain Name (FQDN).
func (o WebproxyForwardserverOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// Enable/disable forward server health checking. Attempts to connect through the remote forwarding server to a destination to verify that the forwarding server is operating normally. Valid values: `disable`, `enable`.
func (o WebproxyForwardserverOutput) Healthcheck() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringOutput { return v.Healthcheck }).(pulumi.StringOutput)
}

// Forward proxy server IP address.
func (o WebproxyForwardserverOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// URL for forward server health check monitoring (default = http://www.google.com).
func (o WebproxyForwardserverOutput) Monitor() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringOutput { return v.Monitor }).(pulumi.StringOutput)
}

// Server name.
func (o WebproxyForwardserverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// HTTP authentication password.
func (o WebproxyForwardserverOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Port number that the forwarding server expects to receive HTTP sessions on (1 - 65535, default = 3128).
func (o WebproxyForwardserverOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Action to take when the forward server is found to be down: block sessions until the server is back up or pass sessions to their destination. Valid values: `block`, `pass`.
func (o WebproxyForwardserverOutput) ServerDownOption() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringOutput { return v.ServerDownOption }).(pulumi.StringOutput)
}

// HTTP authentication user name.
func (o WebproxyForwardserverOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WebproxyForwardserverOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebproxyForwardserver) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WebproxyForwardserverArrayOutput struct{ *pulumi.OutputState }

func (WebproxyForwardserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebproxyForwardserver)(nil)).Elem()
}

func (o WebproxyForwardserverArrayOutput) ToWebproxyForwardserverArrayOutput() WebproxyForwardserverArrayOutput {
	return o
}

func (o WebproxyForwardserverArrayOutput) ToWebproxyForwardserverArrayOutputWithContext(ctx context.Context) WebproxyForwardserverArrayOutput {
	return o
}

func (o WebproxyForwardserverArrayOutput) Index(i pulumi.IntInput) WebproxyForwardserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebproxyForwardserver {
		return vs[0].([]*WebproxyForwardserver)[vs[1].(int)]
	}).(WebproxyForwardserverOutput)
}

type WebproxyForwardserverMapOutput struct{ *pulumi.OutputState }

func (WebproxyForwardserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebproxyForwardserver)(nil)).Elem()
}

func (o WebproxyForwardserverMapOutput) ToWebproxyForwardserverMapOutput() WebproxyForwardserverMapOutput {
	return o
}

func (o WebproxyForwardserverMapOutput) ToWebproxyForwardserverMapOutputWithContext(ctx context.Context) WebproxyForwardserverMapOutput {
	return o
}

func (o WebproxyForwardserverMapOutput) MapIndex(k pulumi.StringInput) WebproxyForwardserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebproxyForwardserver {
		return vs[0].(map[string]*WebproxyForwardserver)[vs[1].(string)]
	}).(WebproxyForwardserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebproxyForwardserverInput)(nil)).Elem(), &WebproxyForwardserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebproxyForwardserverArrayInput)(nil)).Elem(), WebproxyForwardserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebproxyForwardserverMapInput)(nil)).Elem(), WebproxyForwardserverMap{})
	pulumi.RegisterOutputType(WebproxyForwardserverOutput{})
	pulumi.RegisterOutputType(WebproxyForwardserverArrayOutput{})
	pulumi.RegisterOutputType(WebproxyForwardserverMapOutput{})
}
