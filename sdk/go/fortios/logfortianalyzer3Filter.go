// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Filters for FortiAnalyzer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewLogfortianalyzer3Filter(ctx, "trname", &fortios.Logfortianalyzer3FilterArgs{
//				Anomaly:          pulumi.String("enable"),
//				DlpArchive:       pulumi.String("enable"),
//				Dns:              pulumi.String("enable"),
//				FilterType:       pulumi.String("include"),
//				ForwardTraffic:   pulumi.String("enable"),
//				Gtp:              pulumi.String("enable"),
//				LocalTraffic:     pulumi.String("enable"),
//				MulticastTraffic: pulumi.String("enable"),
//				Severity:         pulumi.String("information"),
//				SnifferTraffic:   pulumi.String("enable"),
//				Ssh:              pulumi.String("enable"),
//				Voip:             pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # LogFortianalyzer3 Filter can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/logfortianalyzer3Filter:Logfortianalyzer3Filter labelname LogFortianalyzer3Filter
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/logfortianalyzer3Filter:Logfortianalyzer3Filter labelname LogFortianalyzer3Filter
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type Logfortianalyzer3Filter struct {
	pulumi.CustomResourceState

	// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
	Anomaly pulumi.StringOutput `pulumi:"anomaly"`
	// Enable/disable DLP archive logging. Valid values: `enable`, `disable`.
	DlpArchive pulumi.StringOutput `pulumi:"dlpArchive"`
	// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
	Dns pulumi.StringOutput `pulumi:"dns"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// FortiAnalyzer 3 log filter.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
	FilterType pulumi.StringOutput `pulumi:"filterType"`
	// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
	ForwardTraffic pulumi.StringOutput `pulumi:"forwardTraffic"`
	// Free Style Filters The structure of `freeStyle` block is documented below.
	FreeStyles Logfortianalyzer3FilterFreeStyleArrayOutput `pulumi:"freeStyles"`
	// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
	Gtp pulumi.StringOutput `pulumi:"gtp"`
	// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
	LocalTraffic pulumi.StringOutput `pulumi:"localTraffic"`
	// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
	MulticastTraffic pulumi.StringOutput `pulumi:"multicastTraffic"`
	// Enable/disable netscan discovery event logging.
	NetscanDiscovery pulumi.StringOutput `pulumi:"netscanDiscovery"`
	// Enable/disable netscan vulnerability event logging.
	NetscanVulnerability pulumi.StringOutput `pulumi:"netscanVulnerability"`
	// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
	SnifferTraffic pulumi.StringOutput `pulumi:"snifferTraffic"`
	// Enable/disable SSH logging. Valid values: `enable`, `disable`.
	Ssh pulumi.StringOutput `pulumi:"ssh"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
	Voip pulumi.StringOutput `pulumi:"voip"`
	// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
	ZtnaTraffic pulumi.StringOutput `pulumi:"ztnaTraffic"`
}

// NewLogfortianalyzer3Filter registers a new resource with the given unique name, arguments, and options.
func NewLogfortianalyzer3Filter(ctx *pulumi.Context,
	name string, args *Logfortianalyzer3FilterArgs, opts ...pulumi.ResourceOption) (*Logfortianalyzer3Filter, error) {
	if args == nil {
		args = &Logfortianalyzer3FilterArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Logfortianalyzer3Filter
	err := ctx.RegisterResource("fortios:index/logfortianalyzer3Filter:Logfortianalyzer3Filter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogfortianalyzer3Filter gets an existing Logfortianalyzer3Filter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogfortianalyzer3Filter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Logfortianalyzer3FilterState, opts ...pulumi.ResourceOption) (*Logfortianalyzer3Filter, error) {
	var resource Logfortianalyzer3Filter
	err := ctx.ReadResource("fortios:index/logfortianalyzer3Filter:Logfortianalyzer3Filter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logfortianalyzer3Filter resources.
type logfortianalyzer3FilterState struct {
	// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
	Anomaly *string `pulumi:"anomaly"`
	// Enable/disable DLP archive logging. Valid values: `enable`, `disable`.
	DlpArchive *string `pulumi:"dlpArchive"`
	// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
	Dns *string `pulumi:"dns"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FortiAnalyzer 3 log filter.
	Filter *string `pulumi:"filter"`
	// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
	FilterType *string `pulumi:"filterType"`
	// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
	ForwardTraffic *string `pulumi:"forwardTraffic"`
	// Free Style Filters The structure of `freeStyle` block is documented below.
	FreeStyles []Logfortianalyzer3FilterFreeStyle `pulumi:"freeStyles"`
	// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
	Gtp *string `pulumi:"gtp"`
	// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
	LocalTraffic *string `pulumi:"localTraffic"`
	// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
	MulticastTraffic *string `pulumi:"multicastTraffic"`
	// Enable/disable netscan discovery event logging.
	NetscanDiscovery *string `pulumi:"netscanDiscovery"`
	// Enable/disable netscan vulnerability event logging.
	NetscanVulnerability *string `pulumi:"netscanVulnerability"`
	// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
	SnifferTraffic *string `pulumi:"snifferTraffic"`
	// Enable/disable SSH logging. Valid values: `enable`, `disable`.
	Ssh *string `pulumi:"ssh"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
	Voip *string `pulumi:"voip"`
	// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
	ZtnaTraffic *string `pulumi:"ztnaTraffic"`
}

type Logfortianalyzer3FilterState struct {
	// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
	Anomaly pulumi.StringPtrInput
	// Enable/disable DLP archive logging. Valid values: `enable`, `disable`.
	DlpArchive pulumi.StringPtrInput
	// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
	Dns pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// FortiAnalyzer 3 log filter.
	Filter pulumi.StringPtrInput
	// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
	FilterType pulumi.StringPtrInput
	// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
	ForwardTraffic pulumi.StringPtrInput
	// Free Style Filters The structure of `freeStyle` block is documented below.
	FreeStyles Logfortianalyzer3FilterFreeStyleArrayInput
	// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
	Gtp pulumi.StringPtrInput
	// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
	LocalTraffic pulumi.StringPtrInput
	// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
	MulticastTraffic pulumi.StringPtrInput
	// Enable/disable netscan discovery event logging.
	NetscanDiscovery pulumi.StringPtrInput
	// Enable/disable netscan vulnerability event logging.
	NetscanVulnerability pulumi.StringPtrInput
	// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput
	// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
	SnifferTraffic pulumi.StringPtrInput
	// Enable/disable SSH logging. Valid values: `enable`, `disable`.
	Ssh pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
	Voip pulumi.StringPtrInput
	// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
	ZtnaTraffic pulumi.StringPtrInput
}

func (Logfortianalyzer3FilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logfortianalyzer3FilterState)(nil)).Elem()
}

type logfortianalyzer3FilterArgs struct {
	// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
	Anomaly *string `pulumi:"anomaly"`
	// Enable/disable DLP archive logging. Valid values: `enable`, `disable`.
	DlpArchive *string `pulumi:"dlpArchive"`
	// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
	Dns *string `pulumi:"dns"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FortiAnalyzer 3 log filter.
	Filter *string `pulumi:"filter"`
	// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
	FilterType *string `pulumi:"filterType"`
	// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
	ForwardTraffic *string `pulumi:"forwardTraffic"`
	// Free Style Filters The structure of `freeStyle` block is documented below.
	FreeStyles []Logfortianalyzer3FilterFreeStyle `pulumi:"freeStyles"`
	// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
	Gtp *string `pulumi:"gtp"`
	// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
	LocalTraffic *string `pulumi:"localTraffic"`
	// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
	MulticastTraffic *string `pulumi:"multicastTraffic"`
	// Enable/disable netscan discovery event logging.
	NetscanDiscovery *string `pulumi:"netscanDiscovery"`
	// Enable/disable netscan vulnerability event logging.
	NetscanVulnerability *string `pulumi:"netscanVulnerability"`
	// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity *string `pulumi:"severity"`
	// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
	SnifferTraffic *string `pulumi:"snifferTraffic"`
	// Enable/disable SSH logging. Valid values: `enable`, `disable`.
	Ssh *string `pulumi:"ssh"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
	Voip *string `pulumi:"voip"`
	// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
	ZtnaTraffic *string `pulumi:"ztnaTraffic"`
}

// The set of arguments for constructing a Logfortianalyzer3Filter resource.
type Logfortianalyzer3FilterArgs struct {
	// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
	Anomaly pulumi.StringPtrInput
	// Enable/disable DLP archive logging. Valid values: `enable`, `disable`.
	DlpArchive pulumi.StringPtrInput
	// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
	Dns pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// FortiAnalyzer 3 log filter.
	Filter pulumi.StringPtrInput
	// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
	FilterType pulumi.StringPtrInput
	// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
	ForwardTraffic pulumi.StringPtrInput
	// Free Style Filters The structure of `freeStyle` block is documented below.
	FreeStyles Logfortianalyzer3FilterFreeStyleArrayInput
	// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
	Gtp pulumi.StringPtrInput
	// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
	LocalTraffic pulumi.StringPtrInput
	// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
	MulticastTraffic pulumi.StringPtrInput
	// Enable/disable netscan discovery event logging.
	NetscanDiscovery pulumi.StringPtrInput
	// Enable/disable netscan vulnerability event logging.
	NetscanVulnerability pulumi.StringPtrInput
	// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
	Severity pulumi.StringPtrInput
	// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
	SnifferTraffic pulumi.StringPtrInput
	// Enable/disable SSH logging. Valid values: `enable`, `disable`.
	Ssh pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
	Voip pulumi.StringPtrInput
	// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
	ZtnaTraffic pulumi.StringPtrInput
}

func (Logfortianalyzer3FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logfortianalyzer3FilterArgs)(nil)).Elem()
}

type Logfortianalyzer3FilterInput interface {
	pulumi.Input

	ToLogfortianalyzer3FilterOutput() Logfortianalyzer3FilterOutput
	ToLogfortianalyzer3FilterOutputWithContext(ctx context.Context) Logfortianalyzer3FilterOutput
}

func (*Logfortianalyzer3Filter) ElementType() reflect.Type {
	return reflect.TypeOf((**Logfortianalyzer3Filter)(nil)).Elem()
}

func (i *Logfortianalyzer3Filter) ToLogfortianalyzer3FilterOutput() Logfortianalyzer3FilterOutput {
	return i.ToLogfortianalyzer3FilterOutputWithContext(context.Background())
}

func (i *Logfortianalyzer3Filter) ToLogfortianalyzer3FilterOutputWithContext(ctx context.Context) Logfortianalyzer3FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logfortianalyzer3FilterOutput)
}

// Logfortianalyzer3FilterArrayInput is an input type that accepts Logfortianalyzer3FilterArray and Logfortianalyzer3FilterArrayOutput values.
// You can construct a concrete instance of `Logfortianalyzer3FilterArrayInput` via:
//
//	Logfortianalyzer3FilterArray{ Logfortianalyzer3FilterArgs{...} }
type Logfortianalyzer3FilterArrayInput interface {
	pulumi.Input

	ToLogfortianalyzer3FilterArrayOutput() Logfortianalyzer3FilterArrayOutput
	ToLogfortianalyzer3FilterArrayOutputWithContext(context.Context) Logfortianalyzer3FilterArrayOutput
}

type Logfortianalyzer3FilterArray []Logfortianalyzer3FilterInput

func (Logfortianalyzer3FilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logfortianalyzer3Filter)(nil)).Elem()
}

func (i Logfortianalyzer3FilterArray) ToLogfortianalyzer3FilterArrayOutput() Logfortianalyzer3FilterArrayOutput {
	return i.ToLogfortianalyzer3FilterArrayOutputWithContext(context.Background())
}

func (i Logfortianalyzer3FilterArray) ToLogfortianalyzer3FilterArrayOutputWithContext(ctx context.Context) Logfortianalyzer3FilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logfortianalyzer3FilterArrayOutput)
}

// Logfortianalyzer3FilterMapInput is an input type that accepts Logfortianalyzer3FilterMap and Logfortianalyzer3FilterMapOutput values.
// You can construct a concrete instance of `Logfortianalyzer3FilterMapInput` via:
//
//	Logfortianalyzer3FilterMap{ "key": Logfortianalyzer3FilterArgs{...} }
type Logfortianalyzer3FilterMapInput interface {
	pulumi.Input

	ToLogfortianalyzer3FilterMapOutput() Logfortianalyzer3FilterMapOutput
	ToLogfortianalyzer3FilterMapOutputWithContext(context.Context) Logfortianalyzer3FilterMapOutput
}

type Logfortianalyzer3FilterMap map[string]Logfortianalyzer3FilterInput

func (Logfortianalyzer3FilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logfortianalyzer3Filter)(nil)).Elem()
}

func (i Logfortianalyzer3FilterMap) ToLogfortianalyzer3FilterMapOutput() Logfortianalyzer3FilterMapOutput {
	return i.ToLogfortianalyzer3FilterMapOutputWithContext(context.Background())
}

func (i Logfortianalyzer3FilterMap) ToLogfortianalyzer3FilterMapOutputWithContext(ctx context.Context) Logfortianalyzer3FilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logfortianalyzer3FilterMapOutput)
}

type Logfortianalyzer3FilterOutput struct{ *pulumi.OutputState }

func (Logfortianalyzer3FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logfortianalyzer3Filter)(nil)).Elem()
}

func (o Logfortianalyzer3FilterOutput) ToLogfortianalyzer3FilterOutput() Logfortianalyzer3FilterOutput {
	return o
}

func (o Logfortianalyzer3FilterOutput) ToLogfortianalyzer3FilterOutputWithContext(ctx context.Context) Logfortianalyzer3FilterOutput {
	return o
}

// Enable/disable anomaly logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) Anomaly() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.Anomaly }).(pulumi.StringOutput)
}

// Enable/disable DLP archive logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) DlpArchive() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.DlpArchive }).(pulumi.StringOutput)
}

// Enable/disable detailed DNS event logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) Dns() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.Dns }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Logfortianalyzer3FilterOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// FortiAnalyzer 3 log filter.
func (o Logfortianalyzer3FilterOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
func (o Logfortianalyzer3FilterOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.FilterType }).(pulumi.StringOutput)
}

// Enable/disable forward traffic logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) ForwardTraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.ForwardTraffic }).(pulumi.StringOutput)
}

// Free Style Filters The structure of `freeStyle` block is documented below.
func (o Logfortianalyzer3FilterOutput) FreeStyles() Logfortianalyzer3FilterFreeStyleArrayOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) Logfortianalyzer3FilterFreeStyleArrayOutput { return v.FreeStyles }).(Logfortianalyzer3FilterFreeStyleArrayOutput)
}

// Enable/disable GTP messages logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) Gtp() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.Gtp }).(pulumi.StringOutput)
}

// Enable/disable local in or out traffic logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) LocalTraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.LocalTraffic }).(pulumi.StringOutput)
}

// Enable/disable multicast traffic logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) MulticastTraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.MulticastTraffic }).(pulumi.StringOutput)
}

// Enable/disable netscan discovery event logging.
func (o Logfortianalyzer3FilterOutput) NetscanDiscovery() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.NetscanDiscovery }).(pulumi.StringOutput)
}

// Enable/disable netscan vulnerability event logging.
func (o Logfortianalyzer3FilterOutput) NetscanVulnerability() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.NetscanVulnerability }).(pulumi.StringOutput)
}

// Lowest severity level to log. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
func (o Logfortianalyzer3FilterOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// Enable/disable sniffer traffic logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) SnifferTraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.SnifferTraffic }).(pulumi.StringOutput)
}

// Enable/disable SSH logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) Ssh() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.Ssh }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Logfortianalyzer3FilterOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Enable/disable VoIP logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) Voip() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.Voip }).(pulumi.StringOutput)
}

// Enable/disable ztna traffic logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer3FilterOutput) ZtnaTraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer3Filter) pulumi.StringOutput { return v.ZtnaTraffic }).(pulumi.StringOutput)
}

type Logfortianalyzer3FilterArrayOutput struct{ *pulumi.OutputState }

func (Logfortianalyzer3FilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logfortianalyzer3Filter)(nil)).Elem()
}

func (o Logfortianalyzer3FilterArrayOutput) ToLogfortianalyzer3FilterArrayOutput() Logfortianalyzer3FilterArrayOutput {
	return o
}

func (o Logfortianalyzer3FilterArrayOutput) ToLogfortianalyzer3FilterArrayOutputWithContext(ctx context.Context) Logfortianalyzer3FilterArrayOutput {
	return o
}

func (o Logfortianalyzer3FilterArrayOutput) Index(i pulumi.IntInput) Logfortianalyzer3FilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logfortianalyzer3Filter {
		return vs[0].([]*Logfortianalyzer3Filter)[vs[1].(int)]
	}).(Logfortianalyzer3FilterOutput)
}

type Logfortianalyzer3FilterMapOutput struct{ *pulumi.OutputState }

func (Logfortianalyzer3FilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logfortianalyzer3Filter)(nil)).Elem()
}

func (o Logfortianalyzer3FilterMapOutput) ToLogfortianalyzer3FilterMapOutput() Logfortianalyzer3FilterMapOutput {
	return o
}

func (o Logfortianalyzer3FilterMapOutput) ToLogfortianalyzer3FilterMapOutputWithContext(ctx context.Context) Logfortianalyzer3FilterMapOutput {
	return o
}

func (o Logfortianalyzer3FilterMapOutput) MapIndex(k pulumi.StringInput) Logfortianalyzer3FilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logfortianalyzer3Filter {
		return vs[0].(map[string]*Logfortianalyzer3Filter)[vs[1].(string)]
	}).(Logfortianalyzer3FilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Logfortianalyzer3FilterInput)(nil)).Elem(), &Logfortianalyzer3Filter{})
	pulumi.RegisterInputType(reflect.TypeOf((*Logfortianalyzer3FilterArrayInput)(nil)).Elem(), Logfortianalyzer3FilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Logfortianalyzer3FilterMapInput)(nil)).Elem(), Logfortianalyzer3FilterMap{})
	pulumi.RegisterOutputType(Logfortianalyzer3FilterOutput{})
	pulumi.RegisterOutputType(Logfortianalyzer3FilterArrayOutput{})
	pulumi.RegisterOutputType(Logfortianalyzer3FilterMapOutput{})
}
