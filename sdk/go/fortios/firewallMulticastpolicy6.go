// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPv6 multicast NAT policies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFirewallMulticastpolicy6(ctx, "trname", &fortios.FirewallMulticastpolicy6Args{
//				Action: pulumi.String("accept"),
//				Dstaddrs: fortios.FirewallMulticastpolicy6DstaddrArray{
//					&fortios.FirewallMulticastpolicy6DstaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Dstintf:    pulumi.String("port4"),
//				EndPort:    pulumi.Int(65535),
//				Fosid:      pulumi.Int(1),
//				Logtraffic: pulumi.String("disable"),
//				Protocol:   pulumi.Int(0),
//				Srcaddrs: fortios.FirewallMulticastpolicy6SrcaddrArray{
//					&fortios.FirewallMulticastpolicy6SrcaddrArgs{
//						Name: pulumi.String("all"),
//					},
//				},
//				Srcintf:   pulumi.String("port3"),
//				StartPort: pulumi.Int(1),
//				Status:    pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Firewall MulticastPolicy6 can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/firewallMulticastpolicy6:FirewallMulticastpolicy6 labelname {{fosid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/firewallMulticastpolicy6:FirewallMulticastpolicy6 labelname {{fosid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FirewallMulticastpolicy6 struct {
	pulumi.CustomResourceState

	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// IPv6 destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallMulticastpolicy6DstaddrArrayOutput `pulumi:"dstaddrs"`
	// IPv6 destination interface name.
	Dstintf pulumi.StringOutput `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 65535).
	EndPort pulumi.IntOutput `pulumi:"endPort"`
	// Policy ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol pulumi.IntOutput `pulumi:"protocol"`
	// IPv6 source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallMulticastpolicy6SrcaddrArrayOutput `pulumi:"srcaddrs"`
	// IPv6 source interface name.
	Srcintf pulumi.StringOutput `pulumi:"srcintf"`
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort pulumi.IntOutput `pulumi:"startPort"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallMulticastpolicy6 registers a new resource with the given unique name, arguments, and options.
func NewFirewallMulticastpolicy6(ctx *pulumi.Context,
	name string, args *FirewallMulticastpolicy6Args, opts ...pulumi.ResourceOption) (*FirewallMulticastpolicy6, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Dstintf == nil {
		return nil, errors.New("invalid value for required argument 'Dstintf'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	if args.Srcintf == nil {
		return nil, errors.New("invalid value for required argument 'Srcintf'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallMulticastpolicy6
	err := ctx.RegisterResource("fortios:index/firewallMulticastpolicy6:FirewallMulticastpolicy6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallMulticastpolicy6 gets an existing FirewallMulticastpolicy6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallMulticastpolicy6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallMulticastpolicy6State, opts ...pulumi.ResourceOption) (*FirewallMulticastpolicy6, error) {
	var resource FirewallMulticastpolicy6
	err := ctx.ReadResource("fortios:index/firewallMulticastpolicy6:FirewallMulticastpolicy6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallMulticastpolicy6 resources.
type firewallMulticastpolicy6State struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// IPv6 destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs []FirewallMulticastpolicy6Dstaddr `pulumi:"dstaddrs"`
	// IPv6 destination interface name.
	Dstintf *string `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 65535).
	EndPort *int `pulumi:"endPort"`
	// Policy ID.
	Fosid *int `pulumi:"fosid"`
	// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol *int `pulumi:"protocol"`
	// IPv6 source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallMulticastpolicy6Srcaddr `pulumi:"srcaddrs"`
	// IPv6 source interface name.
	Srcintf *string `pulumi:"srcintf"`
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort *int `pulumi:"startPort"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallMulticastpolicy6State struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// IPv6 destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallMulticastpolicy6DstaddrArrayInput
	// IPv6 destination interface name.
	Dstintf pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 65535).
	EndPort pulumi.IntPtrInput
	// Policy ID.
	Fosid pulumi.IntPtrInput
	// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol pulumi.IntPtrInput
	// IPv6 source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallMulticastpolicy6SrcaddrArrayInput
	// IPv6 source interface name.
	Srcintf pulumi.StringPtrInput
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort pulumi.IntPtrInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallMulticastpolicy6State) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallMulticastpolicy6State)(nil)).Elem()
}

type firewallMulticastpolicy6Args struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action *string `pulumi:"action"`
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// IPv6 destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs []FirewallMulticastpolicy6Dstaddr `pulumi:"dstaddrs"`
	// IPv6 destination interface name.
	Dstintf string `pulumi:"dstintf"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 65535).
	EndPort *int `pulumi:"endPort"`
	// Policy ID.
	Fosid *int `pulumi:"fosid"`
	// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol *int `pulumi:"protocol"`
	// IPv6 source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs []FirewallMulticastpolicy6Srcaddr `pulumi:"srcaddrs"`
	// IPv6 source interface name.
	Srcintf string `pulumi:"srcintf"`
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort *int `pulumi:"startPort"`
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallMulticastpolicy6 resource.
type FirewallMulticastpolicy6Args struct {
	// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
	Action pulumi.StringPtrInput
	// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// IPv6 destination address name. The structure of `dstaddr` block is documented below.
	Dstaddrs FirewallMulticastpolicy6DstaddrArrayInput
	// IPv6 destination interface name.
	Dstintf pulumi.StringInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 65535).
	EndPort pulumi.IntPtrInput
	// Policy ID.
	Fosid pulumi.IntPtrInput
	// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
	Protocol pulumi.IntPtrInput
	// IPv6 source address name. The structure of `srcaddr` block is documented below.
	Srcaddrs FirewallMulticastpolicy6SrcaddrArrayInput
	// IPv6 source interface name.
	Srcintf pulumi.StringInput
	// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
	StartPort pulumi.IntPtrInput
	// Enable/disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallMulticastpolicy6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallMulticastpolicy6Args)(nil)).Elem()
}

type FirewallMulticastpolicy6Input interface {
	pulumi.Input

	ToFirewallMulticastpolicy6Output() FirewallMulticastpolicy6Output
	ToFirewallMulticastpolicy6OutputWithContext(ctx context.Context) FirewallMulticastpolicy6Output
}

func (*FirewallMulticastpolicy6) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallMulticastpolicy6)(nil)).Elem()
}

func (i *FirewallMulticastpolicy6) ToFirewallMulticastpolicy6Output() FirewallMulticastpolicy6Output {
	return i.ToFirewallMulticastpolicy6OutputWithContext(context.Background())
}

func (i *FirewallMulticastpolicy6) ToFirewallMulticastpolicy6OutputWithContext(ctx context.Context) FirewallMulticastpolicy6Output {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallMulticastpolicy6Output)
}

// FirewallMulticastpolicy6ArrayInput is an input type that accepts FirewallMulticastpolicy6Array and FirewallMulticastpolicy6ArrayOutput values.
// You can construct a concrete instance of `FirewallMulticastpolicy6ArrayInput` via:
//
//	FirewallMulticastpolicy6Array{ FirewallMulticastpolicy6Args{...} }
type FirewallMulticastpolicy6ArrayInput interface {
	pulumi.Input

	ToFirewallMulticastpolicy6ArrayOutput() FirewallMulticastpolicy6ArrayOutput
	ToFirewallMulticastpolicy6ArrayOutputWithContext(context.Context) FirewallMulticastpolicy6ArrayOutput
}

type FirewallMulticastpolicy6Array []FirewallMulticastpolicy6Input

func (FirewallMulticastpolicy6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallMulticastpolicy6)(nil)).Elem()
}

func (i FirewallMulticastpolicy6Array) ToFirewallMulticastpolicy6ArrayOutput() FirewallMulticastpolicy6ArrayOutput {
	return i.ToFirewallMulticastpolicy6ArrayOutputWithContext(context.Background())
}

func (i FirewallMulticastpolicy6Array) ToFirewallMulticastpolicy6ArrayOutputWithContext(ctx context.Context) FirewallMulticastpolicy6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallMulticastpolicy6ArrayOutput)
}

// FirewallMulticastpolicy6MapInput is an input type that accepts FirewallMulticastpolicy6Map and FirewallMulticastpolicy6MapOutput values.
// You can construct a concrete instance of `FirewallMulticastpolicy6MapInput` via:
//
//	FirewallMulticastpolicy6Map{ "key": FirewallMulticastpolicy6Args{...} }
type FirewallMulticastpolicy6MapInput interface {
	pulumi.Input

	ToFirewallMulticastpolicy6MapOutput() FirewallMulticastpolicy6MapOutput
	ToFirewallMulticastpolicy6MapOutputWithContext(context.Context) FirewallMulticastpolicy6MapOutput
}

type FirewallMulticastpolicy6Map map[string]FirewallMulticastpolicy6Input

func (FirewallMulticastpolicy6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallMulticastpolicy6)(nil)).Elem()
}

func (i FirewallMulticastpolicy6Map) ToFirewallMulticastpolicy6MapOutput() FirewallMulticastpolicy6MapOutput {
	return i.ToFirewallMulticastpolicy6MapOutputWithContext(context.Background())
}

func (i FirewallMulticastpolicy6Map) ToFirewallMulticastpolicy6MapOutputWithContext(ctx context.Context) FirewallMulticastpolicy6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallMulticastpolicy6MapOutput)
}

type FirewallMulticastpolicy6Output struct{ *pulumi.OutputState }

func (FirewallMulticastpolicy6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallMulticastpolicy6)(nil)).Elem()
}

func (o FirewallMulticastpolicy6Output) ToFirewallMulticastpolicy6Output() FirewallMulticastpolicy6Output {
	return o
}

func (o FirewallMulticastpolicy6Output) ToFirewallMulticastpolicy6OutputWithContext(ctx context.Context) FirewallMulticastpolicy6Output {
	return o
}

// Accept or deny traffic matching the policy. Valid values: `accept`, `deny`.
func (o FirewallMulticastpolicy6Output) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Enable/disable offloading policy traffic for hardware acceleration. Valid values: `enable`, `disable`.
func (o FirewallMulticastpolicy6Output) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Comment.
func (o FirewallMulticastpolicy6Output) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// IPv6 destination address name. The structure of `dstaddr` block is documented below.
func (o FirewallMulticastpolicy6Output) Dstaddrs() FirewallMulticastpolicy6DstaddrArrayOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) FirewallMulticastpolicy6DstaddrArrayOutput { return v.Dstaddrs }).(FirewallMulticastpolicy6DstaddrArrayOutput)
}

// IPv6 destination interface name.
func (o FirewallMulticastpolicy6Output) Dstintf() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringOutput { return v.Dstintf }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o FirewallMulticastpolicy6Output) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Integer value for ending TCP/UDP/SCTP destination port in range (1 - 65535, default = 65535).
func (o FirewallMulticastpolicy6Output) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.IntOutput { return v.EndPort }).(pulumi.IntOutput)
}

// Policy ID.
func (o FirewallMulticastpolicy6Output) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Enable/disable logging traffic accepted by this policy. Valid values: `enable`, `disable`.
func (o FirewallMulticastpolicy6Output) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Policy name.
func (o FirewallMulticastpolicy6Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Integer value for the protocol type as defined by IANA (0 - 255, default = 0).
func (o FirewallMulticastpolicy6Output) Protocol() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.IntOutput { return v.Protocol }).(pulumi.IntOutput)
}

// IPv6 source address name. The structure of `srcaddr` block is documented below.
func (o FirewallMulticastpolicy6Output) Srcaddrs() FirewallMulticastpolicy6SrcaddrArrayOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) FirewallMulticastpolicy6SrcaddrArrayOutput { return v.Srcaddrs }).(FirewallMulticastpolicy6SrcaddrArrayOutput)
}

// IPv6 source interface name.
func (o FirewallMulticastpolicy6Output) Srcintf() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringOutput { return v.Srcintf }).(pulumi.StringOutput)
}

// Integer value for starting TCP/UDP/SCTP destination port in range (1 - 65535, default = 1).
func (o FirewallMulticastpolicy6Output) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.IntOutput { return v.StartPort }).(pulumi.IntOutput)
}

// Enable/disable this policy. Valid values: `enable`, `disable`.
func (o FirewallMulticastpolicy6Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o FirewallMulticastpolicy6Output) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FirewallMulticastpolicy6Output) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallMulticastpolicy6) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallMulticastpolicy6ArrayOutput struct{ *pulumi.OutputState }

func (FirewallMulticastpolicy6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallMulticastpolicy6)(nil)).Elem()
}

func (o FirewallMulticastpolicy6ArrayOutput) ToFirewallMulticastpolicy6ArrayOutput() FirewallMulticastpolicy6ArrayOutput {
	return o
}

func (o FirewallMulticastpolicy6ArrayOutput) ToFirewallMulticastpolicy6ArrayOutputWithContext(ctx context.Context) FirewallMulticastpolicy6ArrayOutput {
	return o
}

func (o FirewallMulticastpolicy6ArrayOutput) Index(i pulumi.IntInput) FirewallMulticastpolicy6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallMulticastpolicy6 {
		return vs[0].([]*FirewallMulticastpolicy6)[vs[1].(int)]
	}).(FirewallMulticastpolicy6Output)
}

type FirewallMulticastpolicy6MapOutput struct{ *pulumi.OutputState }

func (FirewallMulticastpolicy6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallMulticastpolicy6)(nil)).Elem()
}

func (o FirewallMulticastpolicy6MapOutput) ToFirewallMulticastpolicy6MapOutput() FirewallMulticastpolicy6MapOutput {
	return o
}

func (o FirewallMulticastpolicy6MapOutput) ToFirewallMulticastpolicy6MapOutputWithContext(ctx context.Context) FirewallMulticastpolicy6MapOutput {
	return o
}

func (o FirewallMulticastpolicy6MapOutput) MapIndex(k pulumi.StringInput) FirewallMulticastpolicy6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallMulticastpolicy6 {
		return vs[0].(map[string]*FirewallMulticastpolicy6)[vs[1].(string)]
	}).(FirewallMulticastpolicy6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallMulticastpolicy6Input)(nil)).Elem(), &FirewallMulticastpolicy6{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallMulticastpolicy6ArrayInput)(nil)).Elem(), FirewallMulticastpolicy6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallMulticastpolicy6MapInput)(nil)).Elem(), FirewallMulticastpolicy6Map{})
	pulumi.RegisterOutputType(FirewallMulticastpolicy6Output{})
	pulumi.RegisterOutputType(FirewallMulticastpolicy6ArrayOutput{})
	pulumi.RegisterOutputType(FirewallMulticastpolicy6MapOutput{})
}
