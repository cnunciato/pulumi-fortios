// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// configure ips view-map Applies to FortiOS Version `>= 6.2.4`.
//
// ## Import
//
// # Ips ViewMap can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/ipsViewmap:IpsViewmap labelname {{fosid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/ipsViewmap:IpsViewmap labelname {{fosid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type IpsViewmap struct {
	pulumi.CustomResourceState

	// View ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// ID-based policy ID.
	IdPolicyId pulumi.IntOutput `pulumi:"idPolicyId"`
	// Policy ID.
	PolicyId pulumi.IntOutput `pulumi:"policyId"`
	// VDOM ID.
	VdomId pulumi.IntOutput `pulumi:"vdomId"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Policy.
	Which pulumi.StringOutput `pulumi:"which"`
}

// NewIpsViewmap registers a new resource with the given unique name, arguments, and options.
func NewIpsViewmap(ctx *pulumi.Context,
	name string, args *IpsViewmapArgs, opts ...pulumi.ResourceOption) (*IpsViewmap, error) {
	if args == nil {
		args = &IpsViewmapArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource IpsViewmap
	err := ctx.RegisterResource("fortios:index/ipsViewmap:IpsViewmap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsViewmap gets an existing IpsViewmap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsViewmap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsViewmapState, opts ...pulumi.ResourceOption) (*IpsViewmap, error) {
	var resource IpsViewmap
	err := ctx.ReadResource("fortios:index/ipsViewmap:IpsViewmap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsViewmap resources.
type ipsViewmapState struct {
	// View ID.
	Fosid *int `pulumi:"fosid"`
	// ID-based policy ID.
	IdPolicyId *int `pulumi:"idPolicyId"`
	// Policy ID.
	PolicyId *int `pulumi:"policyId"`
	// VDOM ID.
	VdomId *int `pulumi:"vdomId"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Policy.
	Which *string `pulumi:"which"`
}

type IpsViewmapState struct {
	// View ID.
	Fosid pulumi.IntPtrInput
	// ID-based policy ID.
	IdPolicyId pulumi.IntPtrInput
	// Policy ID.
	PolicyId pulumi.IntPtrInput
	// VDOM ID.
	VdomId pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Policy.
	Which pulumi.StringPtrInput
}

func (IpsViewmapState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsViewmapState)(nil)).Elem()
}

type ipsViewmapArgs struct {
	// View ID.
	Fosid *int `pulumi:"fosid"`
	// ID-based policy ID.
	IdPolicyId *int `pulumi:"idPolicyId"`
	// Policy ID.
	PolicyId *int `pulumi:"policyId"`
	// VDOM ID.
	VdomId *int `pulumi:"vdomId"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Policy.
	Which *string `pulumi:"which"`
}

// The set of arguments for constructing a IpsViewmap resource.
type IpsViewmapArgs struct {
	// View ID.
	Fosid pulumi.IntPtrInput
	// ID-based policy ID.
	IdPolicyId pulumi.IntPtrInput
	// Policy ID.
	PolicyId pulumi.IntPtrInput
	// VDOM ID.
	VdomId pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Policy.
	Which pulumi.StringPtrInput
}

func (IpsViewmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsViewmapArgs)(nil)).Elem()
}

type IpsViewmapInput interface {
	pulumi.Input

	ToIpsViewmapOutput() IpsViewmapOutput
	ToIpsViewmapOutputWithContext(ctx context.Context) IpsViewmapOutput
}

func (*IpsViewmap) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsViewmap)(nil)).Elem()
}

func (i *IpsViewmap) ToIpsViewmapOutput() IpsViewmapOutput {
	return i.ToIpsViewmapOutputWithContext(context.Background())
}

func (i *IpsViewmap) ToIpsViewmapOutputWithContext(ctx context.Context) IpsViewmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsViewmapOutput)
}

// IpsViewmapArrayInput is an input type that accepts IpsViewmapArray and IpsViewmapArrayOutput values.
// You can construct a concrete instance of `IpsViewmapArrayInput` via:
//
//	IpsViewmapArray{ IpsViewmapArgs{...} }
type IpsViewmapArrayInput interface {
	pulumi.Input

	ToIpsViewmapArrayOutput() IpsViewmapArrayOutput
	ToIpsViewmapArrayOutputWithContext(context.Context) IpsViewmapArrayOutput
}

type IpsViewmapArray []IpsViewmapInput

func (IpsViewmapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsViewmap)(nil)).Elem()
}

func (i IpsViewmapArray) ToIpsViewmapArrayOutput() IpsViewmapArrayOutput {
	return i.ToIpsViewmapArrayOutputWithContext(context.Background())
}

func (i IpsViewmapArray) ToIpsViewmapArrayOutputWithContext(ctx context.Context) IpsViewmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsViewmapArrayOutput)
}

// IpsViewmapMapInput is an input type that accepts IpsViewmapMap and IpsViewmapMapOutput values.
// You can construct a concrete instance of `IpsViewmapMapInput` via:
//
//	IpsViewmapMap{ "key": IpsViewmapArgs{...} }
type IpsViewmapMapInput interface {
	pulumi.Input

	ToIpsViewmapMapOutput() IpsViewmapMapOutput
	ToIpsViewmapMapOutputWithContext(context.Context) IpsViewmapMapOutput
}

type IpsViewmapMap map[string]IpsViewmapInput

func (IpsViewmapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsViewmap)(nil)).Elem()
}

func (i IpsViewmapMap) ToIpsViewmapMapOutput() IpsViewmapMapOutput {
	return i.ToIpsViewmapMapOutputWithContext(context.Background())
}

func (i IpsViewmapMap) ToIpsViewmapMapOutputWithContext(ctx context.Context) IpsViewmapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsViewmapMapOutput)
}

type IpsViewmapOutput struct{ *pulumi.OutputState }

func (IpsViewmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsViewmap)(nil)).Elem()
}

func (o IpsViewmapOutput) ToIpsViewmapOutput() IpsViewmapOutput {
	return o
}

func (o IpsViewmapOutput) ToIpsViewmapOutputWithContext(ctx context.Context) IpsViewmapOutput {
	return o
}

// View ID.
func (o IpsViewmapOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *IpsViewmap) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// ID-based policy ID.
func (o IpsViewmapOutput) IdPolicyId() pulumi.IntOutput {
	return o.ApplyT(func(v *IpsViewmap) pulumi.IntOutput { return v.IdPolicyId }).(pulumi.IntOutput)
}

// Policy ID.
func (o IpsViewmapOutput) PolicyId() pulumi.IntOutput {
	return o.ApplyT(func(v *IpsViewmap) pulumi.IntOutput { return v.PolicyId }).(pulumi.IntOutput)
}

// VDOM ID.
func (o IpsViewmapOutput) VdomId() pulumi.IntOutput {
	return o.ApplyT(func(v *IpsViewmap) pulumi.IntOutput { return v.VdomId }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o IpsViewmapOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsViewmap) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Policy.
func (o IpsViewmapOutput) Which() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsViewmap) pulumi.StringOutput { return v.Which }).(pulumi.StringOutput)
}

type IpsViewmapArrayOutput struct{ *pulumi.OutputState }

func (IpsViewmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsViewmap)(nil)).Elem()
}

func (o IpsViewmapArrayOutput) ToIpsViewmapArrayOutput() IpsViewmapArrayOutput {
	return o
}

func (o IpsViewmapArrayOutput) ToIpsViewmapArrayOutputWithContext(ctx context.Context) IpsViewmapArrayOutput {
	return o
}

func (o IpsViewmapArrayOutput) Index(i pulumi.IntInput) IpsViewmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsViewmap {
		return vs[0].([]*IpsViewmap)[vs[1].(int)]
	}).(IpsViewmapOutput)
}

type IpsViewmapMapOutput struct{ *pulumi.OutputState }

func (IpsViewmapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsViewmap)(nil)).Elem()
}

func (o IpsViewmapMapOutput) ToIpsViewmapMapOutput() IpsViewmapMapOutput {
	return o
}

func (o IpsViewmapMapOutput) ToIpsViewmapMapOutputWithContext(ctx context.Context) IpsViewmapMapOutput {
	return o
}

func (o IpsViewmapMapOutput) MapIndex(k pulumi.StringInput) IpsViewmapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsViewmap {
		return vs[0].(map[string]*IpsViewmap)[vs[1].(string)]
	}).(IpsViewmapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsViewmapInput)(nil)).Elem(), &IpsViewmap{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsViewmapArrayInput)(nil)).Elem(), IpsViewmapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsViewmapMapInput)(nil)).Elem(), IpsViewmapMap{})
	pulumi.RegisterOutputType(IpsViewmapOutput{})
	pulumi.RegisterOutputType(IpsViewmapArrayOutput{})
	pulumi.RegisterOutputType(IpsViewmapMapOutput{})
}
