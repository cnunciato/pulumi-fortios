// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an fortios system sittunnel
func LookupSystemSittunnel(ctx *pulumi.Context, args *LookupSystemSittunnelArgs, opts ...pulumi.InvokeOption) (*LookupSystemSittunnelResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupSystemSittunnelResult
	err := ctx.Invoke("fortios:index/getSystemSittunnel:getSystemSittunnel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSystemSittunnel.
type LookupSystemSittunnelArgs struct {
	// Specify the name of the desired system sittunnel.
	Name string `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getSystemSittunnel.
type LookupSystemSittunnelResult struct {
	// Enable/disable tunnel ASIC offloading.
	AutoAsicOffload string `pulumi:"autoAsicOffload"`
	// Destination IP address of the tunnel.
	Destination string `pulumi:"destination"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Interface name.
	Interface string `pulumi:"interface"`
	// IPv6 address of the tunnel.
	Ip6 string `pulumi:"ip6"`
	// Tunnel name.
	Name string `pulumi:"name"`
	// Source IP address of the tunnel.
	Source string `pulumi:"source"`
	// Enable/disable use of SD-WAN to reach remote gateway.
	UseSdwan  string  `pulumi:"useSdwan"`
	Vdomparam *string `pulumi:"vdomparam"`
}

func LookupSystemSittunnelOutput(ctx *pulumi.Context, args LookupSystemSittunnelOutputArgs, opts ...pulumi.InvokeOption) LookupSystemSittunnelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSystemSittunnelResult, error) {
			args := v.(LookupSystemSittunnelArgs)
			r, err := LookupSystemSittunnel(ctx, &args, opts...)
			var s LookupSystemSittunnelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSystemSittunnelResultOutput)
}

// A collection of arguments for invoking getSystemSittunnel.
type LookupSystemSittunnelOutputArgs struct {
	// Specify the name of the desired system sittunnel.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupSystemSittunnelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSystemSittunnelArgs)(nil)).Elem()
}

// A collection of values returned by getSystemSittunnel.
type LookupSystemSittunnelResultOutput struct{ *pulumi.OutputState }

func (LookupSystemSittunnelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSystemSittunnelResult)(nil)).Elem()
}

func (o LookupSystemSittunnelResultOutput) ToLookupSystemSittunnelResultOutput() LookupSystemSittunnelResultOutput {
	return o
}

func (o LookupSystemSittunnelResultOutput) ToLookupSystemSittunnelResultOutputWithContext(ctx context.Context) LookupSystemSittunnelResultOutput {
	return o
}

// Enable/disable tunnel ASIC offloading.
func (o LookupSystemSittunnelResultOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemSittunnelResult) string { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Destination IP address of the tunnel.
func (o LookupSystemSittunnelResultOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemSittunnelResult) string { return v.Destination }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSystemSittunnelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemSittunnelResult) string { return v.Id }).(pulumi.StringOutput)
}

// Interface name.
func (o LookupSystemSittunnelResultOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemSittunnelResult) string { return v.Interface }).(pulumi.StringOutput)
}

// IPv6 address of the tunnel.
func (o LookupSystemSittunnelResultOutput) Ip6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemSittunnelResult) string { return v.Ip6 }).(pulumi.StringOutput)
}

// Tunnel name.
func (o LookupSystemSittunnelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemSittunnelResult) string { return v.Name }).(pulumi.StringOutput)
}

// Source IP address of the tunnel.
func (o LookupSystemSittunnelResultOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemSittunnelResult) string { return v.Source }).(pulumi.StringOutput)
}

// Enable/disable use of SD-WAN to reach remote gateway.
func (o LookupSystemSittunnelResultOutput) UseSdwan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemSittunnelResult) string { return v.UseSdwan }).(pulumi.StringOutput)
}

func (o LookupSystemSittunnelResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSystemSittunnelResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSystemSittunnelResultOutput{})
}
