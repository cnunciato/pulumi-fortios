// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure security exemption list.
//
// ## Import
//
// # User SecurityExemptList can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/userSecurityexemptlist:UserSecurityexemptlist labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/userSecurityexemptlist:UserSecurityexemptlist labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type UserSecurityexemptlist struct {
	pulumi.CustomResourceState

	// Description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Name of the exempt list.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure rules for exempting users from captive portal authentication. The structure of `rule` block is documented below.
	Rules UserSecurityexemptlistRuleArrayOutput `pulumi:"rules"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserSecurityexemptlist registers a new resource with the given unique name, arguments, and options.
func NewUserSecurityexemptlist(ctx *pulumi.Context,
	name string, args *UserSecurityexemptlistArgs, opts ...pulumi.ResourceOption) (*UserSecurityexemptlist, error) {
	if args == nil {
		args = &UserSecurityexemptlistArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserSecurityexemptlist
	err := ctx.RegisterResource("fortios:index/userSecurityexemptlist:UserSecurityexemptlist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserSecurityexemptlist gets an existing UserSecurityexemptlist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserSecurityexemptlist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserSecurityexemptlistState, opts ...pulumi.ResourceOption) (*UserSecurityexemptlist, error) {
	var resource UserSecurityexemptlist
	err := ctx.ReadResource("fortios:index/userSecurityexemptlist:UserSecurityexemptlist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserSecurityexemptlist resources.
type userSecurityexemptlistState struct {
	// Description.
	Description *string `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of the exempt list.
	Name *string `pulumi:"name"`
	// Configure rules for exempting users from captive portal authentication. The structure of `rule` block is documented below.
	Rules []UserSecurityexemptlistRule `pulumi:"rules"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserSecurityexemptlistState struct {
	// Description.
	Description pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of the exempt list.
	Name pulumi.StringPtrInput
	// Configure rules for exempting users from captive portal authentication. The structure of `rule` block is documented below.
	Rules UserSecurityexemptlistRuleArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserSecurityexemptlistState) ElementType() reflect.Type {
	return reflect.TypeOf((*userSecurityexemptlistState)(nil)).Elem()
}

type userSecurityexemptlistArgs struct {
	// Description.
	Description *string `pulumi:"description"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of the exempt list.
	Name *string `pulumi:"name"`
	// Configure rules for exempting users from captive portal authentication. The structure of `rule` block is documented below.
	Rules []UserSecurityexemptlistRule `pulumi:"rules"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserSecurityexemptlist resource.
type UserSecurityexemptlistArgs struct {
	// Description.
	Description pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of the exempt list.
	Name pulumi.StringPtrInput
	// Configure rules for exempting users from captive portal authentication. The structure of `rule` block is documented below.
	Rules UserSecurityexemptlistRuleArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserSecurityexemptlistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userSecurityexemptlistArgs)(nil)).Elem()
}

type UserSecurityexemptlistInput interface {
	pulumi.Input

	ToUserSecurityexemptlistOutput() UserSecurityexemptlistOutput
	ToUserSecurityexemptlistOutputWithContext(ctx context.Context) UserSecurityexemptlistOutput
}

func (*UserSecurityexemptlist) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSecurityexemptlist)(nil)).Elem()
}

func (i *UserSecurityexemptlist) ToUserSecurityexemptlistOutput() UserSecurityexemptlistOutput {
	return i.ToUserSecurityexemptlistOutputWithContext(context.Background())
}

func (i *UserSecurityexemptlist) ToUserSecurityexemptlistOutputWithContext(ctx context.Context) UserSecurityexemptlistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSecurityexemptlistOutput)
}

// UserSecurityexemptlistArrayInput is an input type that accepts UserSecurityexemptlistArray and UserSecurityexemptlistArrayOutput values.
// You can construct a concrete instance of `UserSecurityexemptlistArrayInput` via:
//
//	UserSecurityexemptlistArray{ UserSecurityexemptlistArgs{...} }
type UserSecurityexemptlistArrayInput interface {
	pulumi.Input

	ToUserSecurityexemptlistArrayOutput() UserSecurityexemptlistArrayOutput
	ToUserSecurityexemptlistArrayOutputWithContext(context.Context) UserSecurityexemptlistArrayOutput
}

type UserSecurityexemptlistArray []UserSecurityexemptlistInput

func (UserSecurityexemptlistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSecurityexemptlist)(nil)).Elem()
}

func (i UserSecurityexemptlistArray) ToUserSecurityexemptlistArrayOutput() UserSecurityexemptlistArrayOutput {
	return i.ToUserSecurityexemptlistArrayOutputWithContext(context.Background())
}

func (i UserSecurityexemptlistArray) ToUserSecurityexemptlistArrayOutputWithContext(ctx context.Context) UserSecurityexemptlistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSecurityexemptlistArrayOutput)
}

// UserSecurityexemptlistMapInput is an input type that accepts UserSecurityexemptlistMap and UserSecurityexemptlistMapOutput values.
// You can construct a concrete instance of `UserSecurityexemptlistMapInput` via:
//
//	UserSecurityexemptlistMap{ "key": UserSecurityexemptlistArgs{...} }
type UserSecurityexemptlistMapInput interface {
	pulumi.Input

	ToUserSecurityexemptlistMapOutput() UserSecurityexemptlistMapOutput
	ToUserSecurityexemptlistMapOutputWithContext(context.Context) UserSecurityexemptlistMapOutput
}

type UserSecurityexemptlistMap map[string]UserSecurityexemptlistInput

func (UserSecurityexemptlistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSecurityexemptlist)(nil)).Elem()
}

func (i UserSecurityexemptlistMap) ToUserSecurityexemptlistMapOutput() UserSecurityexemptlistMapOutput {
	return i.ToUserSecurityexemptlistMapOutputWithContext(context.Background())
}

func (i UserSecurityexemptlistMap) ToUserSecurityexemptlistMapOutputWithContext(ctx context.Context) UserSecurityexemptlistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSecurityexemptlistMapOutput)
}

type UserSecurityexemptlistOutput struct{ *pulumi.OutputState }

func (UserSecurityexemptlistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSecurityexemptlist)(nil)).Elem()
}

func (o UserSecurityexemptlistOutput) ToUserSecurityexemptlistOutput() UserSecurityexemptlistOutput {
	return o
}

func (o UserSecurityexemptlistOutput) ToUserSecurityexemptlistOutputWithContext(ctx context.Context) UserSecurityexemptlistOutput {
	return o
}

// Description.
func (o UserSecurityexemptlistOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSecurityexemptlist) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o UserSecurityexemptlistOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSecurityexemptlist) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Name of the exempt list.
func (o UserSecurityexemptlistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserSecurityexemptlist) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configure rules for exempting users from captive portal authentication. The structure of `rule` block is documented below.
func (o UserSecurityexemptlistOutput) Rules() UserSecurityexemptlistRuleArrayOutput {
	return o.ApplyT(func(v *UserSecurityexemptlist) UserSecurityexemptlistRuleArrayOutput { return v.Rules }).(UserSecurityexemptlistRuleArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o UserSecurityexemptlistOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSecurityexemptlist) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserSecurityexemptlistArrayOutput struct{ *pulumi.OutputState }

func (UserSecurityexemptlistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserSecurityexemptlist)(nil)).Elem()
}

func (o UserSecurityexemptlistArrayOutput) ToUserSecurityexemptlistArrayOutput() UserSecurityexemptlistArrayOutput {
	return o
}

func (o UserSecurityexemptlistArrayOutput) ToUserSecurityexemptlistArrayOutputWithContext(ctx context.Context) UserSecurityexemptlistArrayOutput {
	return o
}

func (o UserSecurityexemptlistArrayOutput) Index(i pulumi.IntInput) UserSecurityexemptlistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserSecurityexemptlist {
		return vs[0].([]*UserSecurityexemptlist)[vs[1].(int)]
	}).(UserSecurityexemptlistOutput)
}

type UserSecurityexemptlistMapOutput struct{ *pulumi.OutputState }

func (UserSecurityexemptlistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserSecurityexemptlist)(nil)).Elem()
}

func (o UserSecurityexemptlistMapOutput) ToUserSecurityexemptlistMapOutput() UserSecurityexemptlistMapOutput {
	return o
}

func (o UserSecurityexemptlistMapOutput) ToUserSecurityexemptlistMapOutputWithContext(ctx context.Context) UserSecurityexemptlistMapOutput {
	return o
}

func (o UserSecurityexemptlistMapOutput) MapIndex(k pulumi.StringInput) UserSecurityexemptlistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserSecurityexemptlist {
		return vs[0].(map[string]*UserSecurityexemptlist)[vs[1].(string)]
	}).(UserSecurityexemptlistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserSecurityexemptlistInput)(nil)).Elem(), &UserSecurityexemptlist{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSecurityexemptlistArrayInput)(nil)).Elem(), UserSecurityexemptlistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSecurityexemptlistMapInput)(nil)).Elem(), UserSecurityexemptlistMap{})
	pulumi.RegisterOutputType(UserSecurityexemptlistOutput{})
	pulumi.RegisterOutputType(UserSecurityexemptlistArrayOutput{})
	pulumi.RegisterOutputType(UserSecurityexemptlistMapOutput{})
}
