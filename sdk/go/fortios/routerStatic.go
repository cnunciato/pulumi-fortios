// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure IPv4 static routing tables.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewRouterStatic(ctx, "trname", &fortios.RouterStaticArgs{
//				Bfd:               pulumi.String("disable"),
//				Blackhole:         pulumi.String("disable"),
//				Device:            pulumi.String("port4"),
//				Distance:          pulumi.Int(10),
//				Dst:               pulumi.String("1.0.0.0 255.240.0.0"),
//				DynamicGateway:    pulumi.String("disable"),
//				Gateway:           pulumi.String("0.0.0.0"),
//				InternetService:   pulumi.Int(0),
//				LinkMonitorExempt: pulumi.String("disable"),
//				Priority:          pulumi.Int(22),
//				SeqNum:            pulumi.Int(1),
//				Src:               pulumi.String("0.0.0.0 0.0.0.0"),
//				Status:            pulumi.String("enable"),
//				VirtualWanLink:    pulumi.String("disable"),
//				Vrf:               pulumi.Int(0),
//				Weight:            pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Router Static can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/routerStatic:RouterStatic labelname {{seq_num}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/routerStatic:RouterStatic labelname {{seq_num}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type RouterStatic struct {
	pulumi.CustomResourceState

	// Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
	Bfd pulumi.StringOutput `pulumi:"bfd"`
	// Enable/disable black hole. Valid values: `enable`, `disable`.
	Blackhole pulumi.StringOutput `pulumi:"blackhole"`
	// Optional comments.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Gateway out interface or tunnel.
	Device pulumi.StringOutput `pulumi:"device"`
	// Administrative distance (1 - 255).
	Distance pulumi.IntOutput `pulumi:"distance"`
	// Destination IP and mask for this route.
	Dst pulumi.StringOutput `pulumi:"dst"`
	// Name of firewall address or address group.
	Dstaddr pulumi.StringOutput `pulumi:"dstaddr"`
	// Enable use of dynamic gateway retrieved from a DHCP or PPP server. Valid values: `enable`, `disable`.
	DynamicGateway pulumi.StringOutput `pulumi:"dynamicGateway"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Gateway IP for this route.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Application ID in the Internet service database.
	InternetService pulumi.IntOutput `pulumi:"internetService"`
	// Application name in the Internet service custom database.
	InternetServiceCustom pulumi.StringOutput `pulumi:"internetServiceCustom"`
	// Enable/disable withdrawing this route when link monitor or health check is down. Valid values: `enable`, `disable`.
	LinkMonitorExempt pulumi.StringOutput `pulumi:"linkMonitorExempt"`
	// Administrative priority (0 - 4294967295).
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Enable/disable egress through SD-WAN. Valid values: `enable`, `disable`.
	Sdwan pulumi.StringOutput `pulumi:"sdwan"`
	// Choose SD-WAN Zone. The structure of `sdwanZone` block is documented below.
	SdwanZones RouterStaticSdwanZoneArrayOutput `pulumi:"sdwanZones"`
	// Sequence number.
	SeqNum pulumi.IntOutput `pulumi:"seqNum"`
	// Source prefix for this route.
	Src pulumi.StringOutput `pulumi:"src"`
	// Enable/disable this static route. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
	VirtualWanLink pulumi.StringOutput `pulumi:"virtualWanLink"`
	// Virtual Routing Forwarding ID.
	Vrf pulumi.IntOutput `pulumi:"vrf"`
	// Administrative weight (0 - 255).
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewRouterStatic registers a new resource with the given unique name, arguments, and options.
func NewRouterStatic(ctx *pulumi.Context,
	name string, args *RouterStaticArgs, opts ...pulumi.ResourceOption) (*RouterStatic, error) {
	if args == nil {
		args = &RouterStaticArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource RouterStatic
	err := ctx.RegisterResource("fortios:index/routerStatic:RouterStatic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterStatic gets an existing RouterStatic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterStatic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterStaticState, opts ...pulumi.ResourceOption) (*RouterStatic, error) {
	var resource RouterStatic
	err := ctx.ReadResource("fortios:index/routerStatic:RouterStatic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterStatic resources.
type routerStaticState struct {
	// Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
	Bfd *string `pulumi:"bfd"`
	// Enable/disable black hole. Valid values: `enable`, `disable`.
	Blackhole *string `pulumi:"blackhole"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Gateway out interface or tunnel.
	Device *string `pulumi:"device"`
	// Administrative distance (1 - 255).
	Distance *int `pulumi:"distance"`
	// Destination IP and mask for this route.
	Dst *string `pulumi:"dst"`
	// Name of firewall address or address group.
	Dstaddr *string `pulumi:"dstaddr"`
	// Enable use of dynamic gateway retrieved from a DHCP or PPP server. Valid values: `enable`, `disable`.
	DynamicGateway *string `pulumi:"dynamicGateway"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Gateway IP for this route.
	Gateway *string `pulumi:"gateway"`
	// Application ID in the Internet service database.
	InternetService *int `pulumi:"internetService"`
	// Application name in the Internet service custom database.
	InternetServiceCustom *string `pulumi:"internetServiceCustom"`
	// Enable/disable withdrawing this route when link monitor or health check is down. Valid values: `enable`, `disable`.
	LinkMonitorExempt *string `pulumi:"linkMonitorExempt"`
	// Administrative priority (0 - 4294967295).
	Priority *int `pulumi:"priority"`
	// Enable/disable egress through SD-WAN. Valid values: `enable`, `disable`.
	Sdwan *string `pulumi:"sdwan"`
	// Choose SD-WAN Zone. The structure of `sdwanZone` block is documented below.
	SdwanZones []RouterStaticSdwanZone `pulumi:"sdwanZones"`
	// Sequence number.
	SeqNum *int `pulumi:"seqNum"`
	// Source prefix for this route.
	Src *string `pulumi:"src"`
	// Enable/disable this static route. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
	VirtualWanLink *string `pulumi:"virtualWanLink"`
	// Virtual Routing Forwarding ID.
	Vrf *int `pulumi:"vrf"`
	// Administrative weight (0 - 255).
	Weight *int `pulumi:"weight"`
}

type RouterStaticState struct {
	// Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
	Bfd pulumi.StringPtrInput
	// Enable/disable black hole. Valid values: `enable`, `disable`.
	Blackhole pulumi.StringPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Gateway out interface or tunnel.
	Device pulumi.StringPtrInput
	// Administrative distance (1 - 255).
	Distance pulumi.IntPtrInput
	// Destination IP and mask for this route.
	Dst pulumi.StringPtrInput
	// Name of firewall address or address group.
	Dstaddr pulumi.StringPtrInput
	// Enable use of dynamic gateway retrieved from a DHCP or PPP server. Valid values: `enable`, `disable`.
	DynamicGateway pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Gateway IP for this route.
	Gateway pulumi.StringPtrInput
	// Application ID in the Internet service database.
	InternetService pulumi.IntPtrInput
	// Application name in the Internet service custom database.
	InternetServiceCustom pulumi.StringPtrInput
	// Enable/disable withdrawing this route when link monitor or health check is down. Valid values: `enable`, `disable`.
	LinkMonitorExempt pulumi.StringPtrInput
	// Administrative priority (0 - 4294967295).
	Priority pulumi.IntPtrInput
	// Enable/disable egress through SD-WAN. Valid values: `enable`, `disable`.
	Sdwan pulumi.StringPtrInput
	// Choose SD-WAN Zone. The structure of `sdwanZone` block is documented below.
	SdwanZones RouterStaticSdwanZoneArrayInput
	// Sequence number.
	SeqNum pulumi.IntPtrInput
	// Source prefix for this route.
	Src pulumi.StringPtrInput
	// Enable/disable this static route. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
	VirtualWanLink pulumi.StringPtrInput
	// Virtual Routing Forwarding ID.
	Vrf pulumi.IntPtrInput
	// Administrative weight (0 - 255).
	Weight pulumi.IntPtrInput
}

func (RouterStaticState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerStaticState)(nil)).Elem()
}

type routerStaticArgs struct {
	// Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
	Bfd *string `pulumi:"bfd"`
	// Enable/disable black hole. Valid values: `enable`, `disable`.
	Blackhole *string `pulumi:"blackhole"`
	// Optional comments.
	Comment *string `pulumi:"comment"`
	// Gateway out interface or tunnel.
	Device *string `pulumi:"device"`
	// Administrative distance (1 - 255).
	Distance *int `pulumi:"distance"`
	// Destination IP and mask for this route.
	Dst *string `pulumi:"dst"`
	// Name of firewall address or address group.
	Dstaddr *string `pulumi:"dstaddr"`
	// Enable use of dynamic gateway retrieved from a DHCP or PPP server. Valid values: `enable`, `disable`.
	DynamicGateway *string `pulumi:"dynamicGateway"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Gateway IP for this route.
	Gateway *string `pulumi:"gateway"`
	// Application ID in the Internet service database.
	InternetService *int `pulumi:"internetService"`
	// Application name in the Internet service custom database.
	InternetServiceCustom *string `pulumi:"internetServiceCustom"`
	// Enable/disable withdrawing this route when link monitor or health check is down. Valid values: `enable`, `disable`.
	LinkMonitorExempt *string `pulumi:"linkMonitorExempt"`
	// Administrative priority (0 - 4294967295).
	Priority *int `pulumi:"priority"`
	// Enable/disable egress through SD-WAN. Valid values: `enable`, `disable`.
	Sdwan *string `pulumi:"sdwan"`
	// Choose SD-WAN Zone. The structure of `sdwanZone` block is documented below.
	SdwanZones []RouterStaticSdwanZone `pulumi:"sdwanZones"`
	// Sequence number.
	SeqNum *int `pulumi:"seqNum"`
	// Source prefix for this route.
	Src *string `pulumi:"src"`
	// Enable/disable this static route. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
	VirtualWanLink *string `pulumi:"virtualWanLink"`
	// Virtual Routing Forwarding ID.
	Vrf *int `pulumi:"vrf"`
	// Administrative weight (0 - 255).
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a RouterStatic resource.
type RouterStaticArgs struct {
	// Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
	Bfd pulumi.StringPtrInput
	// Enable/disable black hole. Valid values: `enable`, `disable`.
	Blackhole pulumi.StringPtrInput
	// Optional comments.
	Comment pulumi.StringPtrInput
	// Gateway out interface or tunnel.
	Device pulumi.StringPtrInput
	// Administrative distance (1 - 255).
	Distance pulumi.IntPtrInput
	// Destination IP and mask for this route.
	Dst pulumi.StringPtrInput
	// Name of firewall address or address group.
	Dstaddr pulumi.StringPtrInput
	// Enable use of dynamic gateway retrieved from a DHCP or PPP server. Valid values: `enable`, `disable`.
	DynamicGateway pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Gateway IP for this route.
	Gateway pulumi.StringPtrInput
	// Application ID in the Internet service database.
	InternetService pulumi.IntPtrInput
	// Application name in the Internet service custom database.
	InternetServiceCustom pulumi.StringPtrInput
	// Enable/disable withdrawing this route when link monitor or health check is down. Valid values: `enable`, `disable`.
	LinkMonitorExempt pulumi.StringPtrInput
	// Administrative priority (0 - 4294967295).
	Priority pulumi.IntPtrInput
	// Enable/disable egress through SD-WAN. Valid values: `enable`, `disable`.
	Sdwan pulumi.StringPtrInput
	// Choose SD-WAN Zone. The structure of `sdwanZone` block is documented below.
	SdwanZones RouterStaticSdwanZoneArrayInput
	// Sequence number.
	SeqNum pulumi.IntPtrInput
	// Source prefix for this route.
	Src pulumi.StringPtrInput
	// Enable/disable this static route. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
	VirtualWanLink pulumi.StringPtrInput
	// Virtual Routing Forwarding ID.
	Vrf pulumi.IntPtrInput
	// Administrative weight (0 - 255).
	Weight pulumi.IntPtrInput
}

func (RouterStaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerStaticArgs)(nil)).Elem()
}

type RouterStaticInput interface {
	pulumi.Input

	ToRouterStaticOutput() RouterStaticOutput
	ToRouterStaticOutputWithContext(ctx context.Context) RouterStaticOutput
}

func (*RouterStatic) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterStatic)(nil)).Elem()
}

func (i *RouterStatic) ToRouterStaticOutput() RouterStaticOutput {
	return i.ToRouterStaticOutputWithContext(context.Background())
}

func (i *RouterStatic) ToRouterStaticOutputWithContext(ctx context.Context) RouterStaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterStaticOutput)
}

// RouterStaticArrayInput is an input type that accepts RouterStaticArray and RouterStaticArrayOutput values.
// You can construct a concrete instance of `RouterStaticArrayInput` via:
//
//	RouterStaticArray{ RouterStaticArgs{...} }
type RouterStaticArrayInput interface {
	pulumi.Input

	ToRouterStaticArrayOutput() RouterStaticArrayOutput
	ToRouterStaticArrayOutputWithContext(context.Context) RouterStaticArrayOutput
}

type RouterStaticArray []RouterStaticInput

func (RouterStaticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterStatic)(nil)).Elem()
}

func (i RouterStaticArray) ToRouterStaticArrayOutput() RouterStaticArrayOutput {
	return i.ToRouterStaticArrayOutputWithContext(context.Background())
}

func (i RouterStaticArray) ToRouterStaticArrayOutputWithContext(ctx context.Context) RouterStaticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterStaticArrayOutput)
}

// RouterStaticMapInput is an input type that accepts RouterStaticMap and RouterStaticMapOutput values.
// You can construct a concrete instance of `RouterStaticMapInput` via:
//
//	RouterStaticMap{ "key": RouterStaticArgs{...} }
type RouterStaticMapInput interface {
	pulumi.Input

	ToRouterStaticMapOutput() RouterStaticMapOutput
	ToRouterStaticMapOutputWithContext(context.Context) RouterStaticMapOutput
}

type RouterStaticMap map[string]RouterStaticInput

func (RouterStaticMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterStatic)(nil)).Elem()
}

func (i RouterStaticMap) ToRouterStaticMapOutput() RouterStaticMapOutput {
	return i.ToRouterStaticMapOutputWithContext(context.Background())
}

func (i RouterStaticMap) ToRouterStaticMapOutputWithContext(ctx context.Context) RouterStaticMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterStaticMapOutput)
}

type RouterStaticOutput struct{ *pulumi.OutputState }

func (RouterStaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterStatic)(nil)).Elem()
}

func (o RouterStaticOutput) ToRouterStaticOutput() RouterStaticOutput {
	return o
}

func (o RouterStaticOutput) ToRouterStaticOutputWithContext(ctx context.Context) RouterStaticOutput {
	return o
}

// Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
func (o RouterStaticOutput) Bfd() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.Bfd }).(pulumi.StringOutput)
}

// Enable/disable black hole. Valid values: `enable`, `disable`.
func (o RouterStaticOutput) Blackhole() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.Blackhole }).(pulumi.StringOutput)
}

// Optional comments.
func (o RouterStaticOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Gateway out interface or tunnel.
func (o RouterStaticOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

// Administrative distance (1 - 255).
func (o RouterStaticOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.IntOutput { return v.Distance }).(pulumi.IntOutput)
}

// Destination IP and mask for this route.
func (o RouterStaticOutput) Dst() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.Dst }).(pulumi.StringOutput)
}

// Name of firewall address or address group.
func (o RouterStaticOutput) Dstaddr() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.Dstaddr }).(pulumi.StringOutput)
}

// Enable use of dynamic gateway retrieved from a DHCP or PPP server. Valid values: `enable`, `disable`.
func (o RouterStaticOutput) DynamicGateway() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.DynamicGateway }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o RouterStaticOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Gateway IP for this route.
func (o RouterStaticOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Application ID in the Internet service database.
func (o RouterStaticOutput) InternetService() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.IntOutput { return v.InternetService }).(pulumi.IntOutput)
}

// Application name in the Internet service custom database.
func (o RouterStaticOutput) InternetServiceCustom() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.InternetServiceCustom }).(pulumi.StringOutput)
}

// Enable/disable withdrawing this route when link monitor or health check is down. Valid values: `enable`, `disable`.
func (o RouterStaticOutput) LinkMonitorExempt() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.LinkMonitorExempt }).(pulumi.StringOutput)
}

// Administrative priority (0 - 4294967295).
func (o RouterStaticOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Enable/disable egress through SD-WAN. Valid values: `enable`, `disable`.
func (o RouterStaticOutput) Sdwan() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.Sdwan }).(pulumi.StringOutput)
}

// Choose SD-WAN Zone. The structure of `sdwanZone` block is documented below.
func (o RouterStaticOutput) SdwanZones() RouterStaticSdwanZoneArrayOutput {
	return o.ApplyT(func(v *RouterStatic) RouterStaticSdwanZoneArrayOutput { return v.SdwanZones }).(RouterStaticSdwanZoneArrayOutput)
}

// Sequence number.
func (o RouterStaticOutput) SeqNum() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.IntOutput { return v.SeqNum }).(pulumi.IntOutput)
}

// Source prefix for this route.
func (o RouterStaticOutput) Src() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.Src }).(pulumi.StringOutput)
}

// Enable/disable this static route. Valid values: `enable`, `disable`.
func (o RouterStaticOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o RouterStaticOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Enable/disable egress through the virtual-wan-link. Valid values: `enable`, `disable`.
func (o RouterStaticOutput) VirtualWanLink() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.StringOutput { return v.VirtualWanLink }).(pulumi.StringOutput)
}

// Virtual Routing Forwarding ID.
func (o RouterStaticOutput) Vrf() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.IntOutput { return v.Vrf }).(pulumi.IntOutput)
}

// Administrative weight (0 - 255).
func (o RouterStaticOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *RouterStatic) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type RouterStaticArrayOutput struct{ *pulumi.OutputState }

func (RouterStaticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterStatic)(nil)).Elem()
}

func (o RouterStaticArrayOutput) ToRouterStaticArrayOutput() RouterStaticArrayOutput {
	return o
}

func (o RouterStaticArrayOutput) ToRouterStaticArrayOutputWithContext(ctx context.Context) RouterStaticArrayOutput {
	return o
}

func (o RouterStaticArrayOutput) Index(i pulumi.IntInput) RouterStaticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterStatic {
		return vs[0].([]*RouterStatic)[vs[1].(int)]
	}).(RouterStaticOutput)
}

type RouterStaticMapOutput struct{ *pulumi.OutputState }

func (RouterStaticMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterStatic)(nil)).Elem()
}

func (o RouterStaticMapOutput) ToRouterStaticMapOutput() RouterStaticMapOutput {
	return o
}

func (o RouterStaticMapOutput) ToRouterStaticMapOutputWithContext(ctx context.Context) RouterStaticMapOutput {
	return o
}

func (o RouterStaticMapOutput) MapIndex(k pulumi.StringInput) RouterStaticOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterStatic {
		return vs[0].(map[string]*RouterStatic)[vs[1].(string)]
	}).(RouterStaticOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterStaticInput)(nil)).Elem(), &RouterStatic{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterStaticArrayInput)(nil)).Elem(), RouterStaticArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterStaticMapInput)(nil)).Elem(), RouterStaticMap{})
	pulumi.RegisterOutputType(RouterStaticOutput{})
	pulumi.RegisterOutputType(RouterStaticArrayOutput{})
	pulumi.RegisterOutputType(RouterStaticMapOutput{})
}
