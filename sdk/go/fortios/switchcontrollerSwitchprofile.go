// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch switch profile.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSwitchcontrollerSwitchprofile(ctx, "trname", &fortios.SwitchcontrollerSwitchprofileArgs{
//				LoginPasswdOverride: pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # SwitchController SwitchProfile can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerSwitchprofile:SwitchcontrollerSwitchprofile labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerSwitchprofile:SwitchcontrollerSwitchprofile labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerSwitchprofile struct {
	pulumi.CustomResourceState

	// Enable/disable FortiSwitch serial console. Valid values: `enable`, `disable`.
	Login pulumi.StringOutput `pulumi:"login"`
	// Login password of managed FortiSwitch.
	LoginPasswd pulumi.StringPtrOutput `pulumi:"loginPasswd"`
	// Enable/disable overriding the admin administrator password for a managed FortiSwitch with the FortiGate admin administrator account password. Valid values: `enable`, `disable`.
	LoginPasswdOverride pulumi.StringOutput `pulumi:"loginPasswdOverride"`
	// FortiSwitch Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable automatic revision backup upon logout from FortiSwitch. Valid values: `enable`, `disable`.
	RevisionBackupOnLogout pulumi.StringOutput `pulumi:"revisionBackupOnLogout"`
	// Enable/disable automatic revision backup upon FortiSwitch image upgrade. Valid values: `enable`, `disable`.
	RevisionBackupOnUpgrade pulumi.StringOutput `pulumi:"revisionBackupOnUpgrade"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchcontrollerSwitchprofile registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerSwitchprofile(ctx *pulumi.Context,
	name string, args *SwitchcontrollerSwitchprofileArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerSwitchprofile, error) {
	if args == nil {
		args = &SwitchcontrollerSwitchprofileArgs{}
	}

	if args.LoginPasswd != nil {
		args.LoginPasswd = pulumi.ToSecret(args.LoginPasswd).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"loginPasswd",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerSwitchprofile
	err := ctx.RegisterResource("fortios:index/switchcontrollerSwitchprofile:SwitchcontrollerSwitchprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerSwitchprofile gets an existing SwitchcontrollerSwitchprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerSwitchprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerSwitchprofileState, opts ...pulumi.ResourceOption) (*SwitchcontrollerSwitchprofile, error) {
	var resource SwitchcontrollerSwitchprofile
	err := ctx.ReadResource("fortios:index/switchcontrollerSwitchprofile:SwitchcontrollerSwitchprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerSwitchprofile resources.
type switchcontrollerSwitchprofileState struct {
	// Enable/disable FortiSwitch serial console. Valid values: `enable`, `disable`.
	Login *string `pulumi:"login"`
	// Login password of managed FortiSwitch.
	LoginPasswd *string `pulumi:"loginPasswd"`
	// Enable/disable overriding the admin administrator password for a managed FortiSwitch with the FortiGate admin administrator account password. Valid values: `enable`, `disable`.
	LoginPasswdOverride *string `pulumi:"loginPasswdOverride"`
	// FortiSwitch Profile name.
	Name *string `pulumi:"name"`
	// Enable/disable automatic revision backup upon logout from FortiSwitch. Valid values: `enable`, `disable`.
	RevisionBackupOnLogout *string `pulumi:"revisionBackupOnLogout"`
	// Enable/disable automatic revision backup upon FortiSwitch image upgrade. Valid values: `enable`, `disable`.
	RevisionBackupOnUpgrade *string `pulumi:"revisionBackupOnUpgrade"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchcontrollerSwitchprofileState struct {
	// Enable/disable FortiSwitch serial console. Valid values: `enable`, `disable`.
	Login pulumi.StringPtrInput
	// Login password of managed FortiSwitch.
	LoginPasswd pulumi.StringPtrInput
	// Enable/disable overriding the admin administrator password for a managed FortiSwitch with the FortiGate admin administrator account password. Valid values: `enable`, `disable`.
	LoginPasswdOverride pulumi.StringPtrInput
	// FortiSwitch Profile name.
	Name pulumi.StringPtrInput
	// Enable/disable automatic revision backup upon logout from FortiSwitch. Valid values: `enable`, `disable`.
	RevisionBackupOnLogout pulumi.StringPtrInput
	// Enable/disable automatic revision backup upon FortiSwitch image upgrade. Valid values: `enable`, `disable`.
	RevisionBackupOnUpgrade pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerSwitchprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerSwitchprofileState)(nil)).Elem()
}

type switchcontrollerSwitchprofileArgs struct {
	// Enable/disable FortiSwitch serial console. Valid values: `enable`, `disable`.
	Login *string `pulumi:"login"`
	// Login password of managed FortiSwitch.
	LoginPasswd *string `pulumi:"loginPasswd"`
	// Enable/disable overriding the admin administrator password for a managed FortiSwitch with the FortiGate admin administrator account password. Valid values: `enable`, `disable`.
	LoginPasswdOverride *string `pulumi:"loginPasswdOverride"`
	// FortiSwitch Profile name.
	Name *string `pulumi:"name"`
	// Enable/disable automatic revision backup upon logout from FortiSwitch. Valid values: `enable`, `disable`.
	RevisionBackupOnLogout *string `pulumi:"revisionBackupOnLogout"`
	// Enable/disable automatic revision backup upon FortiSwitch image upgrade. Valid values: `enable`, `disable`.
	RevisionBackupOnUpgrade *string `pulumi:"revisionBackupOnUpgrade"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchcontrollerSwitchprofile resource.
type SwitchcontrollerSwitchprofileArgs struct {
	// Enable/disable FortiSwitch serial console. Valid values: `enable`, `disable`.
	Login pulumi.StringPtrInput
	// Login password of managed FortiSwitch.
	LoginPasswd pulumi.StringPtrInput
	// Enable/disable overriding the admin administrator password for a managed FortiSwitch with the FortiGate admin administrator account password. Valid values: `enable`, `disable`.
	LoginPasswdOverride pulumi.StringPtrInput
	// FortiSwitch Profile name.
	Name pulumi.StringPtrInput
	// Enable/disable automatic revision backup upon logout from FortiSwitch. Valid values: `enable`, `disable`.
	RevisionBackupOnLogout pulumi.StringPtrInput
	// Enable/disable automatic revision backup upon FortiSwitch image upgrade. Valid values: `enable`, `disable`.
	RevisionBackupOnUpgrade pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerSwitchprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerSwitchprofileArgs)(nil)).Elem()
}

type SwitchcontrollerSwitchprofileInput interface {
	pulumi.Input

	ToSwitchcontrollerSwitchprofileOutput() SwitchcontrollerSwitchprofileOutput
	ToSwitchcontrollerSwitchprofileOutputWithContext(ctx context.Context) SwitchcontrollerSwitchprofileOutput
}

func (*SwitchcontrollerSwitchprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerSwitchprofile)(nil)).Elem()
}

func (i *SwitchcontrollerSwitchprofile) ToSwitchcontrollerSwitchprofileOutput() SwitchcontrollerSwitchprofileOutput {
	return i.ToSwitchcontrollerSwitchprofileOutputWithContext(context.Background())
}

func (i *SwitchcontrollerSwitchprofile) ToSwitchcontrollerSwitchprofileOutputWithContext(ctx context.Context) SwitchcontrollerSwitchprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerSwitchprofileOutput)
}

// SwitchcontrollerSwitchprofileArrayInput is an input type that accepts SwitchcontrollerSwitchprofileArray and SwitchcontrollerSwitchprofileArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerSwitchprofileArrayInput` via:
//
//	SwitchcontrollerSwitchprofileArray{ SwitchcontrollerSwitchprofileArgs{...} }
type SwitchcontrollerSwitchprofileArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerSwitchprofileArrayOutput() SwitchcontrollerSwitchprofileArrayOutput
	ToSwitchcontrollerSwitchprofileArrayOutputWithContext(context.Context) SwitchcontrollerSwitchprofileArrayOutput
}

type SwitchcontrollerSwitchprofileArray []SwitchcontrollerSwitchprofileInput

func (SwitchcontrollerSwitchprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerSwitchprofile)(nil)).Elem()
}

func (i SwitchcontrollerSwitchprofileArray) ToSwitchcontrollerSwitchprofileArrayOutput() SwitchcontrollerSwitchprofileArrayOutput {
	return i.ToSwitchcontrollerSwitchprofileArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerSwitchprofileArray) ToSwitchcontrollerSwitchprofileArrayOutputWithContext(ctx context.Context) SwitchcontrollerSwitchprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerSwitchprofileArrayOutput)
}

// SwitchcontrollerSwitchprofileMapInput is an input type that accepts SwitchcontrollerSwitchprofileMap and SwitchcontrollerSwitchprofileMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerSwitchprofileMapInput` via:
//
//	SwitchcontrollerSwitchprofileMap{ "key": SwitchcontrollerSwitchprofileArgs{...} }
type SwitchcontrollerSwitchprofileMapInput interface {
	pulumi.Input

	ToSwitchcontrollerSwitchprofileMapOutput() SwitchcontrollerSwitchprofileMapOutput
	ToSwitchcontrollerSwitchprofileMapOutputWithContext(context.Context) SwitchcontrollerSwitchprofileMapOutput
}

type SwitchcontrollerSwitchprofileMap map[string]SwitchcontrollerSwitchprofileInput

func (SwitchcontrollerSwitchprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerSwitchprofile)(nil)).Elem()
}

func (i SwitchcontrollerSwitchprofileMap) ToSwitchcontrollerSwitchprofileMapOutput() SwitchcontrollerSwitchprofileMapOutput {
	return i.ToSwitchcontrollerSwitchprofileMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerSwitchprofileMap) ToSwitchcontrollerSwitchprofileMapOutputWithContext(ctx context.Context) SwitchcontrollerSwitchprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerSwitchprofileMapOutput)
}

type SwitchcontrollerSwitchprofileOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerSwitchprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerSwitchprofile)(nil)).Elem()
}

func (o SwitchcontrollerSwitchprofileOutput) ToSwitchcontrollerSwitchprofileOutput() SwitchcontrollerSwitchprofileOutput {
	return o
}

func (o SwitchcontrollerSwitchprofileOutput) ToSwitchcontrollerSwitchprofileOutputWithContext(ctx context.Context) SwitchcontrollerSwitchprofileOutput {
	return o
}

// Enable/disable FortiSwitch serial console. Valid values: `enable`, `disable`.
func (o SwitchcontrollerSwitchprofileOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSwitchprofile) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// Login password of managed FortiSwitch.
func (o SwitchcontrollerSwitchprofileOutput) LoginPasswd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerSwitchprofile) pulumi.StringPtrOutput { return v.LoginPasswd }).(pulumi.StringPtrOutput)
}

// Enable/disable overriding the admin administrator password for a managed FortiSwitch with the FortiGate admin administrator account password. Valid values: `enable`, `disable`.
func (o SwitchcontrollerSwitchprofileOutput) LoginPasswdOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSwitchprofile) pulumi.StringOutput { return v.LoginPasswdOverride }).(pulumi.StringOutput)
}

// FortiSwitch Profile name.
func (o SwitchcontrollerSwitchprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSwitchprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable automatic revision backup upon logout from FortiSwitch. Valid values: `enable`, `disable`.
func (o SwitchcontrollerSwitchprofileOutput) RevisionBackupOnLogout() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSwitchprofile) pulumi.StringOutput { return v.RevisionBackupOnLogout }).(pulumi.StringOutput)
}

// Enable/disable automatic revision backup upon FortiSwitch image upgrade. Valid values: `enable`, `disable`.
func (o SwitchcontrollerSwitchprofileOutput) RevisionBackupOnUpgrade() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSwitchprofile) pulumi.StringOutput { return v.RevisionBackupOnUpgrade }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerSwitchprofileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerSwitchprofile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchcontrollerSwitchprofileArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerSwitchprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerSwitchprofile)(nil)).Elem()
}

func (o SwitchcontrollerSwitchprofileArrayOutput) ToSwitchcontrollerSwitchprofileArrayOutput() SwitchcontrollerSwitchprofileArrayOutput {
	return o
}

func (o SwitchcontrollerSwitchprofileArrayOutput) ToSwitchcontrollerSwitchprofileArrayOutputWithContext(ctx context.Context) SwitchcontrollerSwitchprofileArrayOutput {
	return o
}

func (o SwitchcontrollerSwitchprofileArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerSwitchprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerSwitchprofile {
		return vs[0].([]*SwitchcontrollerSwitchprofile)[vs[1].(int)]
	}).(SwitchcontrollerSwitchprofileOutput)
}

type SwitchcontrollerSwitchprofileMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerSwitchprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerSwitchprofile)(nil)).Elem()
}

func (o SwitchcontrollerSwitchprofileMapOutput) ToSwitchcontrollerSwitchprofileMapOutput() SwitchcontrollerSwitchprofileMapOutput {
	return o
}

func (o SwitchcontrollerSwitchprofileMapOutput) ToSwitchcontrollerSwitchprofileMapOutputWithContext(ctx context.Context) SwitchcontrollerSwitchprofileMapOutput {
	return o
}

func (o SwitchcontrollerSwitchprofileMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerSwitchprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerSwitchprofile {
		return vs[0].(map[string]*SwitchcontrollerSwitchprofile)[vs[1].(string)]
	}).(SwitchcontrollerSwitchprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerSwitchprofileInput)(nil)).Elem(), &SwitchcontrollerSwitchprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerSwitchprofileArrayInput)(nil)).Elem(), SwitchcontrollerSwitchprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerSwitchprofileMapInput)(nil)).Elem(), SwitchcontrollerSwitchprofileMap{})
	pulumi.RegisterOutputType(SwitchcontrollerSwitchprofileOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerSwitchprofileArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerSwitchprofileMapOutput{})
}
