// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure DNS servers for a non-management VDOM.
//
// ## Import
//
// # System VdomDns can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemVdomdns:SystemVdomdns labelname SystemVdomDns
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemVdomdns:SystemVdomdns labelname SystemVdomDns
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemVdomdns struct {
	pulumi.CustomResourceState

	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringOutput `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringOutput `pulumi:"altSecondary"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringOutput `pulumi:"dnsOverTls"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Primary IPv6 DNS server IP address for the VDOM.
	Ip6Primary pulumi.StringOutput `pulumi:"ip6Primary"`
	// Secondary IPv6 DNS server IP address for the VDOM.
	Ip6Secondary pulumi.StringOutput `pulumi:"ip6Secondary"`
	// Primary DNS server IP address for the VDOM.
	Primary pulumi.StringOutput `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Secondary DNS server IP address for the VDOM.
	Secondary pulumi.StringOutput `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames SystemVdomdnsServerHostnameArrayOutput `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringOutput `pulumi:"serverSelectMethod"`
	// Source IP for communications with the DNS server.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringOutput `pulumi:"sslCertificate"`
	// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
	VdomDns pulumi.StringOutput `pulumi:"vdomDns"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemVdomdns registers a new resource with the given unique name, arguments, and options.
func NewSystemVdomdns(ctx *pulumi.Context,
	name string, args *SystemVdomdnsArgs, opts ...pulumi.ResourceOption) (*SystemVdomdns, error) {
	if args == nil {
		args = &SystemVdomdnsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemVdomdns
	err := ctx.RegisterResource("fortios:index/systemVdomdns:SystemVdomdns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemVdomdns gets an existing SystemVdomdns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemVdomdns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemVdomdnsState, opts ...pulumi.ResourceOption) (*SystemVdomdns, error) {
	var resource SystemVdomdns
	err := ctx.ReadResource("fortios:index/systemVdomdns:SystemVdomdns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemVdomdns resources.
type systemVdomdnsState struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary *string `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary *string `pulumi:"altSecondary"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls *string `pulumi:"dnsOverTls"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Primary IPv6 DNS server IP address for the VDOM.
	Ip6Primary *string `pulumi:"ip6Primary"`
	// Secondary IPv6 DNS server IP address for the VDOM.
	Ip6Secondary *string `pulumi:"ip6Secondary"`
	// Primary DNS server IP address for the VDOM.
	Primary *string `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol *string `pulumi:"protocol"`
	// Secondary DNS server IP address for the VDOM.
	Secondary *string `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames []SystemVdomdnsServerHostname `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod *string `pulumi:"serverSelectMethod"`
	// Source IP for communications with the DNS server.
	SourceIp *string `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
	VdomDns *string `pulumi:"vdomDns"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemVdomdnsState struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringPtrInput
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringPtrInput
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Primary IPv6 DNS server IP address for the VDOM.
	Ip6Primary pulumi.StringPtrInput
	// Secondary IPv6 DNS server IP address for the VDOM.
	Ip6Secondary pulumi.StringPtrInput
	// Primary DNS server IP address for the VDOM.
	Primary pulumi.StringPtrInput
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringPtrInput
	// Secondary DNS server IP address for the VDOM.
	Secondary pulumi.StringPtrInput
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames SystemVdomdnsServerHostnameArrayInput
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringPtrInput
	// Source IP for communications with the DNS server.
	SourceIp pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
	VdomDns pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemVdomdnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVdomdnsState)(nil)).Elem()
}

type systemVdomdnsArgs struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary *string `pulumi:"altPrimary"`
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary *string `pulumi:"altSecondary"`
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls *string `pulumi:"dnsOverTls"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Primary IPv6 DNS server IP address for the VDOM.
	Ip6Primary *string `pulumi:"ip6Primary"`
	// Secondary IPv6 DNS server IP address for the VDOM.
	Ip6Secondary *string `pulumi:"ip6Secondary"`
	// Primary DNS server IP address for the VDOM.
	Primary *string `pulumi:"primary"`
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol *string `pulumi:"protocol"`
	// Secondary DNS server IP address for the VDOM.
	Secondary *string `pulumi:"secondary"`
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames []SystemVdomdnsServerHostname `pulumi:"serverHostnames"`
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod *string `pulumi:"serverSelectMethod"`
	// Source IP for communications with the DNS server.
	SourceIp *string `pulumi:"sourceIp"`
	// Name of local certificate for SSL connections.
	SslCertificate *string `pulumi:"sslCertificate"`
	// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
	VdomDns *string `pulumi:"vdomDns"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemVdomdns resource.
type SystemVdomdnsArgs struct {
	// Alternate primary DNS server. (This is not used as a failover DNS server.)
	AltPrimary pulumi.StringPtrInput
	// Alternate secondary DNS server. (This is not used as a failover DNS server.)
	AltSecondary pulumi.StringPtrInput
	// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
	DnsOverTls pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Primary IPv6 DNS server IP address for the VDOM.
	Ip6Primary pulumi.StringPtrInput
	// Secondary IPv6 DNS server IP address for the VDOM.
	Ip6Secondary pulumi.StringPtrInput
	// Primary DNS server IP address for the VDOM.
	Primary pulumi.StringPtrInput
	// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
	Protocol pulumi.StringPtrInput
	// Secondary DNS server IP address for the VDOM.
	Secondary pulumi.StringPtrInput
	// DNS server host name list. The structure of `serverHostname` block is documented below.
	ServerHostnames SystemVdomdnsServerHostnameArrayInput
	// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
	ServerSelectMethod pulumi.StringPtrInput
	// Source IP for communications with the DNS server.
	SourceIp pulumi.StringPtrInput
	// Name of local certificate for SSL connections.
	SslCertificate pulumi.StringPtrInput
	// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
	VdomDns pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemVdomdnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVdomdnsArgs)(nil)).Elem()
}

type SystemVdomdnsInput interface {
	pulumi.Input

	ToSystemVdomdnsOutput() SystemVdomdnsOutput
	ToSystemVdomdnsOutputWithContext(ctx context.Context) SystemVdomdnsOutput
}

func (*SystemVdomdns) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVdomdns)(nil)).Elem()
}

func (i *SystemVdomdns) ToSystemVdomdnsOutput() SystemVdomdnsOutput {
	return i.ToSystemVdomdnsOutputWithContext(context.Background())
}

func (i *SystemVdomdns) ToSystemVdomdnsOutputWithContext(ctx context.Context) SystemVdomdnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomdnsOutput)
}

// SystemVdomdnsArrayInput is an input type that accepts SystemVdomdnsArray and SystemVdomdnsArrayOutput values.
// You can construct a concrete instance of `SystemVdomdnsArrayInput` via:
//
//	SystemVdomdnsArray{ SystemVdomdnsArgs{...} }
type SystemVdomdnsArrayInput interface {
	pulumi.Input

	ToSystemVdomdnsArrayOutput() SystemVdomdnsArrayOutput
	ToSystemVdomdnsArrayOutputWithContext(context.Context) SystemVdomdnsArrayOutput
}

type SystemVdomdnsArray []SystemVdomdnsInput

func (SystemVdomdnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVdomdns)(nil)).Elem()
}

func (i SystemVdomdnsArray) ToSystemVdomdnsArrayOutput() SystemVdomdnsArrayOutput {
	return i.ToSystemVdomdnsArrayOutputWithContext(context.Background())
}

func (i SystemVdomdnsArray) ToSystemVdomdnsArrayOutputWithContext(ctx context.Context) SystemVdomdnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomdnsArrayOutput)
}

// SystemVdomdnsMapInput is an input type that accepts SystemVdomdnsMap and SystemVdomdnsMapOutput values.
// You can construct a concrete instance of `SystemVdomdnsMapInput` via:
//
//	SystemVdomdnsMap{ "key": SystemVdomdnsArgs{...} }
type SystemVdomdnsMapInput interface {
	pulumi.Input

	ToSystemVdomdnsMapOutput() SystemVdomdnsMapOutput
	ToSystemVdomdnsMapOutputWithContext(context.Context) SystemVdomdnsMapOutput
}

type SystemVdomdnsMap map[string]SystemVdomdnsInput

func (SystemVdomdnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVdomdns)(nil)).Elem()
}

func (i SystemVdomdnsMap) ToSystemVdomdnsMapOutput() SystemVdomdnsMapOutput {
	return i.ToSystemVdomdnsMapOutputWithContext(context.Background())
}

func (i SystemVdomdnsMap) ToSystemVdomdnsMapOutputWithContext(ctx context.Context) SystemVdomdnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomdnsMapOutput)
}

type SystemVdomdnsOutput struct{ *pulumi.OutputState }

func (SystemVdomdnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVdomdns)(nil)).Elem()
}

func (o SystemVdomdnsOutput) ToSystemVdomdnsOutput() SystemVdomdnsOutput {
	return o
}

func (o SystemVdomdnsOutput) ToSystemVdomdnsOutputWithContext(ctx context.Context) SystemVdomdnsOutput {
	return o
}

// Alternate primary DNS server. (This is not used as a failover DNS server.)
func (o SystemVdomdnsOutput) AltPrimary() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.AltPrimary }).(pulumi.StringOutput)
}

// Alternate secondary DNS server. (This is not used as a failover DNS server.)
func (o SystemVdomdnsOutput) AltSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.AltSecondary }).(pulumi.StringOutput)
}

// Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
func (o SystemVdomdnsOutput) DnsOverTls() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.DnsOverTls }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SystemVdomdnsOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Specify outgoing interface to reach server.
func (o SystemVdomdnsOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o SystemVdomdnsOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Primary IPv6 DNS server IP address for the VDOM.
func (o SystemVdomdnsOutput) Ip6Primary() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.Ip6Primary }).(pulumi.StringOutput)
}

// Secondary IPv6 DNS server IP address for the VDOM.
func (o SystemVdomdnsOutput) Ip6Secondary() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.Ip6Secondary }).(pulumi.StringOutput)
}

// Primary DNS server IP address for the VDOM.
func (o SystemVdomdnsOutput) Primary() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.Primary }).(pulumi.StringOutput)
}

// DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
func (o SystemVdomdnsOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Secondary DNS server IP address for the VDOM.
func (o SystemVdomdnsOutput) Secondary() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.Secondary }).(pulumi.StringOutput)
}

// DNS server host name list. The structure of `serverHostname` block is documented below.
func (o SystemVdomdnsOutput) ServerHostnames() SystemVdomdnsServerHostnameArrayOutput {
	return o.ApplyT(func(v *SystemVdomdns) SystemVdomdnsServerHostnameArrayOutput { return v.ServerHostnames }).(SystemVdomdnsServerHostnameArrayOutput)
}

// Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
func (o SystemVdomdnsOutput) ServerSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.ServerSelectMethod }).(pulumi.StringOutput)
}

// Source IP for communications with the DNS server.
func (o SystemVdomdnsOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Name of local certificate for SSL connections.
func (o SystemVdomdnsOutput) SslCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.SslCertificate }).(pulumi.StringOutput)
}

// Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
func (o SystemVdomdnsOutput) VdomDns() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringOutput { return v.VdomDns }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemVdomdnsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVdomdns) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemVdomdnsArrayOutput struct{ *pulumi.OutputState }

func (SystemVdomdnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVdomdns)(nil)).Elem()
}

func (o SystemVdomdnsArrayOutput) ToSystemVdomdnsArrayOutput() SystemVdomdnsArrayOutput {
	return o
}

func (o SystemVdomdnsArrayOutput) ToSystemVdomdnsArrayOutputWithContext(ctx context.Context) SystemVdomdnsArrayOutput {
	return o
}

func (o SystemVdomdnsArrayOutput) Index(i pulumi.IntInput) SystemVdomdnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemVdomdns {
		return vs[0].([]*SystemVdomdns)[vs[1].(int)]
	}).(SystemVdomdnsOutput)
}

type SystemVdomdnsMapOutput struct{ *pulumi.OutputState }

func (SystemVdomdnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVdomdns)(nil)).Elem()
}

func (o SystemVdomdnsMapOutput) ToSystemVdomdnsMapOutput() SystemVdomdnsMapOutput {
	return o
}

func (o SystemVdomdnsMapOutput) ToSystemVdomdnsMapOutputWithContext(ctx context.Context) SystemVdomdnsMapOutput {
	return o
}

func (o SystemVdomdnsMapOutput) MapIndex(k pulumi.StringInput) SystemVdomdnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemVdomdns {
		return vs[0].(map[string]*SystemVdomdns)[vs[1].(string)]
	}).(SystemVdomdnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomdnsInput)(nil)).Elem(), &SystemVdomdns{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomdnsArrayInput)(nil)).Elem(), SystemVdomdnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomdnsMapInput)(nil)).Elem(), SystemVdomdnsMap{})
	pulumi.RegisterOutputType(SystemVdomdnsOutput{})
	pulumi.RegisterOutputType(SystemVdomdnsArrayOutput{})
	pulumi.RegisterOutputType(SystemVdomdnsMapOutput{})
}
