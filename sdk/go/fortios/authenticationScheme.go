// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure Authentication Schemes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			trname3, err := fortios.NewUserFsso(ctx, "trname3", &fortios.UserFssoArgs{
//				Port:      pulumi.Int(8000),
//				Port2:     pulumi.Int(8000),
//				Port3:     pulumi.Int(8000),
//				Port4:     pulumi.Int(8000),
//				Port5:     pulumi.Int(8000),
//				Server:    pulumi.String("1.1.1.1"),
//				SourceIp:  pulumi.String("0.0.0.0"),
//				SourceIp6: pulumi.String("::"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fortios.NewAuthenticationScheme(ctx, "trname", &fortios.AuthenticationSchemeArgs{
//				FssoAgentForNtlm: trname3.Name,
//				FssoGuest:        pulumi.String("disable"),
//				Method:           pulumi.String("ntlm"),
//				NegotiateNtlm:    pulumi.String("enable"),
//				RequireTfa:       pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Authentication Scheme can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/authenticationScheme:AuthenticationScheme labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/authenticationScheme:AuthenticationScheme labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type AuthenticationScheme struct {
	pulumi.CustomResourceState

	// Domain controller setting.
	DomainController pulumi.StringOutput `pulumi:"domainController"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm pulumi.StringOutput `pulumi:"fssoAgentForNtlm"`
	// Enable/disable user fsso-guest authentication (default = disable). Valid values: `enable`, `disable`.
	FssoGuest pulumi.StringOutput `pulumi:"fssoGuest"`
	// Kerberos keytab setting.
	KerberosKeytab pulumi.StringOutput `pulumi:"kerberosKeytab"`
	// Authentication methods (default = basic).
	Method pulumi.StringOutput `pulumi:"method"`
	// Authentication scheme name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable negotiate authentication for NTLM (default = disable). Valid values: `enable`, `disable`.
	NegotiateNtlm pulumi.StringOutput `pulumi:"negotiateNtlm"`
	// Enable/disable two-factor authentication (default = disable). Valid values: `enable`, `disable`.
	RequireTfa pulumi.StringOutput `pulumi:"requireTfa"`
	// SAML configuration.
	SamlServer pulumi.StringOutput `pulumi:"samlServer"`
	// SAML authentication timeout in seconds.
	SamlTimeout pulumi.IntOutput `pulumi:"samlTimeout"`
	// SSH CA name.
	SshCa pulumi.StringOutput `pulumi:"sshCa"`
	// Enable/disable authentication with user certificate (default = disable). Valid values: `enable`, `disable`.
	UserCert pulumi.StringOutput `pulumi:"userCert"`
	// Authentication server to contain user information; "local" (default) or "123" (for LDAP). The structure of `userDatabase` block is documented below.
	UserDatabases AuthenticationSchemeUserDatabaseArrayOutput `pulumi:"userDatabases"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewAuthenticationScheme registers a new resource with the given unique name, arguments, and options.
func NewAuthenticationScheme(ctx *pulumi.Context,
	name string, args *AuthenticationSchemeArgs, opts ...pulumi.ResourceOption) (*AuthenticationScheme, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AuthenticationScheme
	err := ctx.RegisterResource("fortios:index/authenticationScheme:AuthenticationScheme", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthenticationScheme gets an existing AuthenticationScheme resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthenticationScheme(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthenticationSchemeState, opts ...pulumi.ResourceOption) (*AuthenticationScheme, error) {
	var resource AuthenticationScheme
	err := ctx.ReadResource("fortios:index/authenticationScheme:AuthenticationScheme", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthenticationScheme resources.
type authenticationSchemeState struct {
	// Domain controller setting.
	DomainController *string `pulumi:"domainController"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm *string `pulumi:"fssoAgentForNtlm"`
	// Enable/disable user fsso-guest authentication (default = disable). Valid values: `enable`, `disable`.
	FssoGuest *string `pulumi:"fssoGuest"`
	// Kerberos keytab setting.
	KerberosKeytab *string `pulumi:"kerberosKeytab"`
	// Authentication methods (default = basic).
	Method *string `pulumi:"method"`
	// Authentication scheme name.
	Name *string `pulumi:"name"`
	// Enable/disable negotiate authentication for NTLM (default = disable). Valid values: `enable`, `disable`.
	NegotiateNtlm *string `pulumi:"negotiateNtlm"`
	// Enable/disable two-factor authentication (default = disable). Valid values: `enable`, `disable`.
	RequireTfa *string `pulumi:"requireTfa"`
	// SAML configuration.
	SamlServer *string `pulumi:"samlServer"`
	// SAML authentication timeout in seconds.
	SamlTimeout *int `pulumi:"samlTimeout"`
	// SSH CA name.
	SshCa *string `pulumi:"sshCa"`
	// Enable/disable authentication with user certificate (default = disable). Valid values: `enable`, `disable`.
	UserCert *string `pulumi:"userCert"`
	// Authentication server to contain user information; "local" (default) or "123" (for LDAP). The structure of `userDatabase` block is documented below.
	UserDatabases []AuthenticationSchemeUserDatabase `pulumi:"userDatabases"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type AuthenticationSchemeState struct {
	// Domain controller setting.
	DomainController pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm pulumi.StringPtrInput
	// Enable/disable user fsso-guest authentication (default = disable). Valid values: `enable`, `disable`.
	FssoGuest pulumi.StringPtrInput
	// Kerberos keytab setting.
	KerberosKeytab pulumi.StringPtrInput
	// Authentication methods (default = basic).
	Method pulumi.StringPtrInput
	// Authentication scheme name.
	Name pulumi.StringPtrInput
	// Enable/disable negotiate authentication for NTLM (default = disable). Valid values: `enable`, `disable`.
	NegotiateNtlm pulumi.StringPtrInput
	// Enable/disable two-factor authentication (default = disable). Valid values: `enable`, `disable`.
	RequireTfa pulumi.StringPtrInput
	// SAML configuration.
	SamlServer pulumi.StringPtrInput
	// SAML authentication timeout in seconds.
	SamlTimeout pulumi.IntPtrInput
	// SSH CA name.
	SshCa pulumi.StringPtrInput
	// Enable/disable authentication with user certificate (default = disable). Valid values: `enable`, `disable`.
	UserCert pulumi.StringPtrInput
	// Authentication server to contain user information; "local" (default) or "123" (for LDAP). The structure of `userDatabase` block is documented below.
	UserDatabases AuthenticationSchemeUserDatabaseArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (AuthenticationSchemeState) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticationSchemeState)(nil)).Elem()
}

type authenticationSchemeArgs struct {
	// Domain controller setting.
	DomainController *string `pulumi:"domainController"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm *string `pulumi:"fssoAgentForNtlm"`
	// Enable/disable user fsso-guest authentication (default = disable). Valid values: `enable`, `disable`.
	FssoGuest *string `pulumi:"fssoGuest"`
	// Kerberos keytab setting.
	KerberosKeytab *string `pulumi:"kerberosKeytab"`
	// Authentication methods (default = basic).
	Method string `pulumi:"method"`
	// Authentication scheme name.
	Name *string `pulumi:"name"`
	// Enable/disable negotiate authentication for NTLM (default = disable). Valid values: `enable`, `disable`.
	NegotiateNtlm *string `pulumi:"negotiateNtlm"`
	// Enable/disable two-factor authentication (default = disable). Valid values: `enable`, `disable`.
	RequireTfa *string `pulumi:"requireTfa"`
	// SAML configuration.
	SamlServer *string `pulumi:"samlServer"`
	// SAML authentication timeout in seconds.
	SamlTimeout *int `pulumi:"samlTimeout"`
	// SSH CA name.
	SshCa *string `pulumi:"sshCa"`
	// Enable/disable authentication with user certificate (default = disable). Valid values: `enable`, `disable`.
	UserCert *string `pulumi:"userCert"`
	// Authentication server to contain user information; "local" (default) or "123" (for LDAP). The structure of `userDatabase` block is documented below.
	UserDatabases []AuthenticationSchemeUserDatabase `pulumi:"userDatabases"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a AuthenticationScheme resource.
type AuthenticationSchemeArgs struct {
	// Domain controller setting.
	DomainController pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm pulumi.StringPtrInput
	// Enable/disable user fsso-guest authentication (default = disable). Valid values: `enable`, `disable`.
	FssoGuest pulumi.StringPtrInput
	// Kerberos keytab setting.
	KerberosKeytab pulumi.StringPtrInput
	// Authentication methods (default = basic).
	Method pulumi.StringInput
	// Authentication scheme name.
	Name pulumi.StringPtrInput
	// Enable/disable negotiate authentication for NTLM (default = disable). Valid values: `enable`, `disable`.
	NegotiateNtlm pulumi.StringPtrInput
	// Enable/disable two-factor authentication (default = disable). Valid values: `enable`, `disable`.
	RequireTfa pulumi.StringPtrInput
	// SAML configuration.
	SamlServer pulumi.StringPtrInput
	// SAML authentication timeout in seconds.
	SamlTimeout pulumi.IntPtrInput
	// SSH CA name.
	SshCa pulumi.StringPtrInput
	// Enable/disable authentication with user certificate (default = disable). Valid values: `enable`, `disable`.
	UserCert pulumi.StringPtrInput
	// Authentication server to contain user information; "local" (default) or "123" (for LDAP). The structure of `userDatabase` block is documented below.
	UserDatabases AuthenticationSchemeUserDatabaseArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (AuthenticationSchemeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticationSchemeArgs)(nil)).Elem()
}

type AuthenticationSchemeInput interface {
	pulumi.Input

	ToAuthenticationSchemeOutput() AuthenticationSchemeOutput
	ToAuthenticationSchemeOutputWithContext(ctx context.Context) AuthenticationSchemeOutput
}

func (*AuthenticationScheme) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticationScheme)(nil)).Elem()
}

func (i *AuthenticationScheme) ToAuthenticationSchemeOutput() AuthenticationSchemeOutput {
	return i.ToAuthenticationSchemeOutputWithContext(context.Background())
}

func (i *AuthenticationScheme) ToAuthenticationSchemeOutputWithContext(ctx context.Context) AuthenticationSchemeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationSchemeOutput)
}

// AuthenticationSchemeArrayInput is an input type that accepts AuthenticationSchemeArray and AuthenticationSchemeArrayOutput values.
// You can construct a concrete instance of `AuthenticationSchemeArrayInput` via:
//
//	AuthenticationSchemeArray{ AuthenticationSchemeArgs{...} }
type AuthenticationSchemeArrayInput interface {
	pulumi.Input

	ToAuthenticationSchemeArrayOutput() AuthenticationSchemeArrayOutput
	ToAuthenticationSchemeArrayOutputWithContext(context.Context) AuthenticationSchemeArrayOutput
}

type AuthenticationSchemeArray []AuthenticationSchemeInput

func (AuthenticationSchemeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticationScheme)(nil)).Elem()
}

func (i AuthenticationSchemeArray) ToAuthenticationSchemeArrayOutput() AuthenticationSchemeArrayOutput {
	return i.ToAuthenticationSchemeArrayOutputWithContext(context.Background())
}

func (i AuthenticationSchemeArray) ToAuthenticationSchemeArrayOutputWithContext(ctx context.Context) AuthenticationSchemeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationSchemeArrayOutput)
}

// AuthenticationSchemeMapInput is an input type that accepts AuthenticationSchemeMap and AuthenticationSchemeMapOutput values.
// You can construct a concrete instance of `AuthenticationSchemeMapInput` via:
//
//	AuthenticationSchemeMap{ "key": AuthenticationSchemeArgs{...} }
type AuthenticationSchemeMapInput interface {
	pulumi.Input

	ToAuthenticationSchemeMapOutput() AuthenticationSchemeMapOutput
	ToAuthenticationSchemeMapOutputWithContext(context.Context) AuthenticationSchemeMapOutput
}

type AuthenticationSchemeMap map[string]AuthenticationSchemeInput

func (AuthenticationSchemeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticationScheme)(nil)).Elem()
}

func (i AuthenticationSchemeMap) ToAuthenticationSchemeMapOutput() AuthenticationSchemeMapOutput {
	return i.ToAuthenticationSchemeMapOutputWithContext(context.Background())
}

func (i AuthenticationSchemeMap) ToAuthenticationSchemeMapOutputWithContext(ctx context.Context) AuthenticationSchemeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationSchemeMapOutput)
}

type AuthenticationSchemeOutput struct{ *pulumi.OutputState }

func (AuthenticationSchemeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticationScheme)(nil)).Elem()
}

func (o AuthenticationSchemeOutput) ToAuthenticationSchemeOutput() AuthenticationSchemeOutput {
	return o
}

func (o AuthenticationSchemeOutput) ToAuthenticationSchemeOutputWithContext(ctx context.Context) AuthenticationSchemeOutput {
	return o
}

// Domain controller setting.
func (o AuthenticationSchemeOutput) DomainController() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.DomainController }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o AuthenticationSchemeOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// FSSO agent to use for NTLM authentication.
func (o AuthenticationSchemeOutput) FssoAgentForNtlm() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.FssoAgentForNtlm }).(pulumi.StringOutput)
}

// Enable/disable user fsso-guest authentication (default = disable). Valid values: `enable`, `disable`.
func (o AuthenticationSchemeOutput) FssoGuest() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.FssoGuest }).(pulumi.StringOutput)
}

// Kerberos keytab setting.
func (o AuthenticationSchemeOutput) KerberosKeytab() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.KerberosKeytab }).(pulumi.StringOutput)
}

// Authentication methods (default = basic).
func (o AuthenticationSchemeOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// Authentication scheme name.
func (o AuthenticationSchemeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable negotiate authentication for NTLM (default = disable). Valid values: `enable`, `disable`.
func (o AuthenticationSchemeOutput) NegotiateNtlm() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.NegotiateNtlm }).(pulumi.StringOutput)
}

// Enable/disable two-factor authentication (default = disable). Valid values: `enable`, `disable`.
func (o AuthenticationSchemeOutput) RequireTfa() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.RequireTfa }).(pulumi.StringOutput)
}

// SAML configuration.
func (o AuthenticationSchemeOutput) SamlServer() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.SamlServer }).(pulumi.StringOutput)
}

// SAML authentication timeout in seconds.
func (o AuthenticationSchemeOutput) SamlTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.IntOutput { return v.SamlTimeout }).(pulumi.IntOutput)
}

// SSH CA name.
func (o AuthenticationSchemeOutput) SshCa() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.SshCa }).(pulumi.StringOutput)
}

// Enable/disable authentication with user certificate (default = disable). Valid values: `enable`, `disable`.
func (o AuthenticationSchemeOutput) UserCert() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringOutput { return v.UserCert }).(pulumi.StringOutput)
}

// Authentication server to contain user information; "local" (default) or "123" (for LDAP). The structure of `userDatabase` block is documented below.
func (o AuthenticationSchemeOutput) UserDatabases() AuthenticationSchemeUserDatabaseArrayOutput {
	return o.ApplyT(func(v *AuthenticationScheme) AuthenticationSchemeUserDatabaseArrayOutput { return v.UserDatabases }).(AuthenticationSchemeUserDatabaseArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o AuthenticationSchemeOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticationScheme) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type AuthenticationSchemeArrayOutput struct{ *pulumi.OutputState }

func (AuthenticationSchemeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticationScheme)(nil)).Elem()
}

func (o AuthenticationSchemeArrayOutput) ToAuthenticationSchemeArrayOutput() AuthenticationSchemeArrayOutput {
	return o
}

func (o AuthenticationSchemeArrayOutput) ToAuthenticationSchemeArrayOutputWithContext(ctx context.Context) AuthenticationSchemeArrayOutput {
	return o
}

func (o AuthenticationSchemeArrayOutput) Index(i pulumi.IntInput) AuthenticationSchemeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthenticationScheme {
		return vs[0].([]*AuthenticationScheme)[vs[1].(int)]
	}).(AuthenticationSchemeOutput)
}

type AuthenticationSchemeMapOutput struct{ *pulumi.OutputState }

func (AuthenticationSchemeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticationScheme)(nil)).Elem()
}

func (o AuthenticationSchemeMapOutput) ToAuthenticationSchemeMapOutput() AuthenticationSchemeMapOutput {
	return o
}

func (o AuthenticationSchemeMapOutput) ToAuthenticationSchemeMapOutputWithContext(ctx context.Context) AuthenticationSchemeMapOutput {
	return o
}

func (o AuthenticationSchemeMapOutput) MapIndex(k pulumi.StringInput) AuthenticationSchemeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthenticationScheme {
		return vs[0].(map[string]*AuthenticationScheme)[vs[1].(string)]
	}).(AuthenticationSchemeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticationSchemeInput)(nil)).Elem(), &AuthenticationScheme{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticationSchemeArrayInput)(nil)).Elem(), AuthenticationSchemeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticationSchemeMapInput)(nil)).Elem(), AuthenticationSchemeMap{})
	pulumi.RegisterOutputType(AuthenticationSchemeOutput{})
	pulumi.RegisterOutputType(AuthenticationSchemeArrayOutput{})
	pulumi.RegisterOutputType(AuthenticationSchemeMapOutput{})
}
