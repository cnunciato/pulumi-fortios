// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch quarantine support.
//
// ## Import
//
// # SwitchController Quarantine can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerQuarantine:SwitchcontrollerQuarantine labelname SwitchControllerQuarantine
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerQuarantine:SwitchcontrollerQuarantine labelname SwitchControllerQuarantine
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerQuarantine struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable quarantine. Valid values: `enable`, `disable`.
	Quarantine pulumi.StringOutput `pulumi:"quarantine"`
	// Quarantine MACs. The structure of `targets` block is documented below.
	Targets SwitchcontrollerQuarantineTargetArrayOutput `pulumi:"targets"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchcontrollerQuarantine registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerQuarantine(ctx *pulumi.Context,
	name string, args *SwitchcontrollerQuarantineArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerQuarantine, error) {
	if args == nil {
		args = &SwitchcontrollerQuarantineArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerQuarantine
	err := ctx.RegisterResource("fortios:index/switchcontrollerQuarantine:SwitchcontrollerQuarantine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerQuarantine gets an existing SwitchcontrollerQuarantine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerQuarantine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerQuarantineState, opts ...pulumi.ResourceOption) (*SwitchcontrollerQuarantine, error) {
	var resource SwitchcontrollerQuarantine
	err := ctx.ReadResource("fortios:index/switchcontrollerQuarantine:SwitchcontrollerQuarantine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerQuarantine resources.
type switchcontrollerQuarantineState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable quarantine. Valid values: `enable`, `disable`.
	Quarantine *string `pulumi:"quarantine"`
	// Quarantine MACs. The structure of `targets` block is documented below.
	Targets []SwitchcontrollerQuarantineTarget `pulumi:"targets"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchcontrollerQuarantineState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable quarantine. Valid values: `enable`, `disable`.
	Quarantine pulumi.StringPtrInput
	// Quarantine MACs. The structure of `targets` block is documented below.
	Targets SwitchcontrollerQuarantineTargetArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerQuarantineState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerQuarantineState)(nil)).Elem()
}

type switchcontrollerQuarantineArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable quarantine. Valid values: `enable`, `disable`.
	Quarantine *string `pulumi:"quarantine"`
	// Quarantine MACs. The structure of `targets` block is documented below.
	Targets []SwitchcontrollerQuarantineTarget `pulumi:"targets"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchcontrollerQuarantine resource.
type SwitchcontrollerQuarantineArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable quarantine. Valid values: `enable`, `disable`.
	Quarantine pulumi.StringPtrInput
	// Quarantine MACs. The structure of `targets` block is documented below.
	Targets SwitchcontrollerQuarantineTargetArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerQuarantineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerQuarantineArgs)(nil)).Elem()
}

type SwitchcontrollerQuarantineInput interface {
	pulumi.Input

	ToSwitchcontrollerQuarantineOutput() SwitchcontrollerQuarantineOutput
	ToSwitchcontrollerQuarantineOutputWithContext(ctx context.Context) SwitchcontrollerQuarantineOutput
}

func (*SwitchcontrollerQuarantine) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerQuarantine)(nil)).Elem()
}

func (i *SwitchcontrollerQuarantine) ToSwitchcontrollerQuarantineOutput() SwitchcontrollerQuarantineOutput {
	return i.ToSwitchcontrollerQuarantineOutputWithContext(context.Background())
}

func (i *SwitchcontrollerQuarantine) ToSwitchcontrollerQuarantineOutputWithContext(ctx context.Context) SwitchcontrollerQuarantineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerQuarantineOutput)
}

// SwitchcontrollerQuarantineArrayInput is an input type that accepts SwitchcontrollerQuarantineArray and SwitchcontrollerQuarantineArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerQuarantineArrayInput` via:
//
//	SwitchcontrollerQuarantineArray{ SwitchcontrollerQuarantineArgs{...} }
type SwitchcontrollerQuarantineArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerQuarantineArrayOutput() SwitchcontrollerQuarantineArrayOutput
	ToSwitchcontrollerQuarantineArrayOutputWithContext(context.Context) SwitchcontrollerQuarantineArrayOutput
}

type SwitchcontrollerQuarantineArray []SwitchcontrollerQuarantineInput

func (SwitchcontrollerQuarantineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerQuarantine)(nil)).Elem()
}

func (i SwitchcontrollerQuarantineArray) ToSwitchcontrollerQuarantineArrayOutput() SwitchcontrollerQuarantineArrayOutput {
	return i.ToSwitchcontrollerQuarantineArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerQuarantineArray) ToSwitchcontrollerQuarantineArrayOutputWithContext(ctx context.Context) SwitchcontrollerQuarantineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerQuarantineArrayOutput)
}

// SwitchcontrollerQuarantineMapInput is an input type that accepts SwitchcontrollerQuarantineMap and SwitchcontrollerQuarantineMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerQuarantineMapInput` via:
//
//	SwitchcontrollerQuarantineMap{ "key": SwitchcontrollerQuarantineArgs{...} }
type SwitchcontrollerQuarantineMapInput interface {
	pulumi.Input

	ToSwitchcontrollerQuarantineMapOutput() SwitchcontrollerQuarantineMapOutput
	ToSwitchcontrollerQuarantineMapOutputWithContext(context.Context) SwitchcontrollerQuarantineMapOutput
}

type SwitchcontrollerQuarantineMap map[string]SwitchcontrollerQuarantineInput

func (SwitchcontrollerQuarantineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerQuarantine)(nil)).Elem()
}

func (i SwitchcontrollerQuarantineMap) ToSwitchcontrollerQuarantineMapOutput() SwitchcontrollerQuarantineMapOutput {
	return i.ToSwitchcontrollerQuarantineMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerQuarantineMap) ToSwitchcontrollerQuarantineMapOutputWithContext(ctx context.Context) SwitchcontrollerQuarantineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerQuarantineMapOutput)
}

type SwitchcontrollerQuarantineOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerQuarantineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerQuarantine)(nil)).Elem()
}

func (o SwitchcontrollerQuarantineOutput) ToSwitchcontrollerQuarantineOutput() SwitchcontrollerQuarantineOutput {
	return o
}

func (o SwitchcontrollerQuarantineOutput) ToSwitchcontrollerQuarantineOutputWithContext(ctx context.Context) SwitchcontrollerQuarantineOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SwitchcontrollerQuarantineOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerQuarantine) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable quarantine. Valid values: `enable`, `disable`.
func (o SwitchcontrollerQuarantineOutput) Quarantine() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerQuarantine) pulumi.StringOutput { return v.Quarantine }).(pulumi.StringOutput)
}

// Quarantine MACs. The structure of `targets` block is documented below.
func (o SwitchcontrollerQuarantineOutput) Targets() SwitchcontrollerQuarantineTargetArrayOutput {
	return o.ApplyT(func(v *SwitchcontrollerQuarantine) SwitchcontrollerQuarantineTargetArrayOutput { return v.Targets }).(SwitchcontrollerQuarantineTargetArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerQuarantineOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerQuarantine) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchcontrollerQuarantineArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerQuarantineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerQuarantine)(nil)).Elem()
}

func (o SwitchcontrollerQuarantineArrayOutput) ToSwitchcontrollerQuarantineArrayOutput() SwitchcontrollerQuarantineArrayOutput {
	return o
}

func (o SwitchcontrollerQuarantineArrayOutput) ToSwitchcontrollerQuarantineArrayOutputWithContext(ctx context.Context) SwitchcontrollerQuarantineArrayOutput {
	return o
}

func (o SwitchcontrollerQuarantineArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerQuarantineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerQuarantine {
		return vs[0].([]*SwitchcontrollerQuarantine)[vs[1].(int)]
	}).(SwitchcontrollerQuarantineOutput)
}

type SwitchcontrollerQuarantineMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerQuarantineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerQuarantine)(nil)).Elem()
}

func (o SwitchcontrollerQuarantineMapOutput) ToSwitchcontrollerQuarantineMapOutput() SwitchcontrollerQuarantineMapOutput {
	return o
}

func (o SwitchcontrollerQuarantineMapOutput) ToSwitchcontrollerQuarantineMapOutputWithContext(ctx context.Context) SwitchcontrollerQuarantineMapOutput {
	return o
}

func (o SwitchcontrollerQuarantineMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerQuarantineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerQuarantine {
		return vs[0].(map[string]*SwitchcontrollerQuarantine)[vs[1].(string)]
	}).(SwitchcontrollerQuarantineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerQuarantineInput)(nil)).Elem(), &SwitchcontrollerQuarantine{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerQuarantineArrayInput)(nil)).Elem(), SwitchcontrollerQuarantineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerQuarantineMapInput)(nil)).Elem(), SwitchcontrollerQuarantineMap{})
	pulumi.RegisterOutputType(SwitchcontrollerQuarantineOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerQuarantineArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerQuarantineMapOutput{})
}
