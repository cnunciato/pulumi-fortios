// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports updating system network route for FortiManager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFmgSystemNetworkRoute(ctx, "test1", &fortios.FmgSystemNetworkRouteArgs{
//				Destination: pulumi.String("192.168.2.0 255.255.255.0"),
//				Device:      pulumi.String("port4"),
//				Gateway:     pulumi.String("192.168.2.1"),
//				RouteId:     pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FmgSystemNetworkRoute struct {
	pulumi.CustomResourceState

	// Destination Ip/Mask.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Gateway out interface.
	Device pulumi.StringOutput `pulumi:"device"`
	// Gateway Ip.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Route id.
	RouteId pulumi.IntOutput `pulumi:"routeId"`
}

// NewFmgSystemNetworkRoute registers a new resource with the given unique name, arguments, and options.
func NewFmgSystemNetworkRoute(ctx *pulumi.Context,
	name string, args *FmgSystemNetworkRouteArgs, opts ...pulumi.ResourceOption) (*FmgSystemNetworkRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Device == nil {
		return nil, errors.New("invalid value for required argument 'Device'")
	}
	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FmgSystemNetworkRoute
	err := ctx.RegisterResource("fortios:index/fmgSystemNetworkRoute:FmgSystemNetworkRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFmgSystemNetworkRoute gets an existing FmgSystemNetworkRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFmgSystemNetworkRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FmgSystemNetworkRouteState, opts ...pulumi.ResourceOption) (*FmgSystemNetworkRoute, error) {
	var resource FmgSystemNetworkRoute
	err := ctx.ReadResource("fortios:index/fmgSystemNetworkRoute:FmgSystemNetworkRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FmgSystemNetworkRoute resources.
type fmgSystemNetworkRouteState struct {
	// Destination Ip/Mask.
	Destination *string `pulumi:"destination"`
	// Gateway out interface.
	Device *string `pulumi:"device"`
	// Gateway Ip.
	Gateway *string `pulumi:"gateway"`
	// Route id.
	RouteId *int `pulumi:"routeId"`
}

type FmgSystemNetworkRouteState struct {
	// Destination Ip/Mask.
	Destination pulumi.StringPtrInput
	// Gateway out interface.
	Device pulumi.StringPtrInput
	// Gateway Ip.
	Gateway pulumi.StringPtrInput
	// Route id.
	RouteId pulumi.IntPtrInput
}

func (FmgSystemNetworkRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgSystemNetworkRouteState)(nil)).Elem()
}

type fmgSystemNetworkRouteArgs struct {
	// Destination Ip/Mask.
	Destination string `pulumi:"destination"`
	// Gateway out interface.
	Device string `pulumi:"device"`
	// Gateway Ip.
	Gateway string `pulumi:"gateway"`
	// Route id.
	RouteId int `pulumi:"routeId"`
}

// The set of arguments for constructing a FmgSystemNetworkRoute resource.
type FmgSystemNetworkRouteArgs struct {
	// Destination Ip/Mask.
	Destination pulumi.StringInput
	// Gateway out interface.
	Device pulumi.StringInput
	// Gateway Ip.
	Gateway pulumi.StringInput
	// Route id.
	RouteId pulumi.IntInput
}

func (FmgSystemNetworkRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgSystemNetworkRouteArgs)(nil)).Elem()
}

type FmgSystemNetworkRouteInput interface {
	pulumi.Input

	ToFmgSystemNetworkRouteOutput() FmgSystemNetworkRouteOutput
	ToFmgSystemNetworkRouteOutputWithContext(ctx context.Context) FmgSystemNetworkRouteOutput
}

func (*FmgSystemNetworkRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgSystemNetworkRoute)(nil)).Elem()
}

func (i *FmgSystemNetworkRoute) ToFmgSystemNetworkRouteOutput() FmgSystemNetworkRouteOutput {
	return i.ToFmgSystemNetworkRouteOutputWithContext(context.Background())
}

func (i *FmgSystemNetworkRoute) ToFmgSystemNetworkRouteOutputWithContext(ctx context.Context) FmgSystemNetworkRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemNetworkRouteOutput)
}

// FmgSystemNetworkRouteArrayInput is an input type that accepts FmgSystemNetworkRouteArray and FmgSystemNetworkRouteArrayOutput values.
// You can construct a concrete instance of `FmgSystemNetworkRouteArrayInput` via:
//
//	FmgSystemNetworkRouteArray{ FmgSystemNetworkRouteArgs{...} }
type FmgSystemNetworkRouteArrayInput interface {
	pulumi.Input

	ToFmgSystemNetworkRouteArrayOutput() FmgSystemNetworkRouteArrayOutput
	ToFmgSystemNetworkRouteArrayOutputWithContext(context.Context) FmgSystemNetworkRouteArrayOutput
}

type FmgSystemNetworkRouteArray []FmgSystemNetworkRouteInput

func (FmgSystemNetworkRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgSystemNetworkRoute)(nil)).Elem()
}

func (i FmgSystemNetworkRouteArray) ToFmgSystemNetworkRouteArrayOutput() FmgSystemNetworkRouteArrayOutput {
	return i.ToFmgSystemNetworkRouteArrayOutputWithContext(context.Background())
}

func (i FmgSystemNetworkRouteArray) ToFmgSystemNetworkRouteArrayOutputWithContext(ctx context.Context) FmgSystemNetworkRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemNetworkRouteArrayOutput)
}

// FmgSystemNetworkRouteMapInput is an input type that accepts FmgSystemNetworkRouteMap and FmgSystemNetworkRouteMapOutput values.
// You can construct a concrete instance of `FmgSystemNetworkRouteMapInput` via:
//
//	FmgSystemNetworkRouteMap{ "key": FmgSystemNetworkRouteArgs{...} }
type FmgSystemNetworkRouteMapInput interface {
	pulumi.Input

	ToFmgSystemNetworkRouteMapOutput() FmgSystemNetworkRouteMapOutput
	ToFmgSystemNetworkRouteMapOutputWithContext(context.Context) FmgSystemNetworkRouteMapOutput
}

type FmgSystemNetworkRouteMap map[string]FmgSystemNetworkRouteInput

func (FmgSystemNetworkRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgSystemNetworkRoute)(nil)).Elem()
}

func (i FmgSystemNetworkRouteMap) ToFmgSystemNetworkRouteMapOutput() FmgSystemNetworkRouteMapOutput {
	return i.ToFmgSystemNetworkRouteMapOutputWithContext(context.Background())
}

func (i FmgSystemNetworkRouteMap) ToFmgSystemNetworkRouteMapOutputWithContext(ctx context.Context) FmgSystemNetworkRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemNetworkRouteMapOutput)
}

type FmgSystemNetworkRouteOutput struct{ *pulumi.OutputState }

func (FmgSystemNetworkRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgSystemNetworkRoute)(nil)).Elem()
}

func (o FmgSystemNetworkRouteOutput) ToFmgSystemNetworkRouteOutput() FmgSystemNetworkRouteOutput {
	return o
}

func (o FmgSystemNetworkRouteOutput) ToFmgSystemNetworkRouteOutputWithContext(ctx context.Context) FmgSystemNetworkRouteOutput {
	return o
}

// Destination Ip/Mask.
func (o FmgSystemNetworkRouteOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgSystemNetworkRoute) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Gateway out interface.
func (o FmgSystemNetworkRouteOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgSystemNetworkRoute) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

// Gateway Ip.
func (o FmgSystemNetworkRouteOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgSystemNetworkRoute) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Route id.
func (o FmgSystemNetworkRouteOutput) RouteId() pulumi.IntOutput {
	return o.ApplyT(func(v *FmgSystemNetworkRoute) pulumi.IntOutput { return v.RouteId }).(pulumi.IntOutput)
}

type FmgSystemNetworkRouteArrayOutput struct{ *pulumi.OutputState }

func (FmgSystemNetworkRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgSystemNetworkRoute)(nil)).Elem()
}

func (o FmgSystemNetworkRouteArrayOutput) ToFmgSystemNetworkRouteArrayOutput() FmgSystemNetworkRouteArrayOutput {
	return o
}

func (o FmgSystemNetworkRouteArrayOutput) ToFmgSystemNetworkRouteArrayOutputWithContext(ctx context.Context) FmgSystemNetworkRouteArrayOutput {
	return o
}

func (o FmgSystemNetworkRouteArrayOutput) Index(i pulumi.IntInput) FmgSystemNetworkRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FmgSystemNetworkRoute {
		return vs[0].([]*FmgSystemNetworkRoute)[vs[1].(int)]
	}).(FmgSystemNetworkRouteOutput)
}

type FmgSystemNetworkRouteMapOutput struct{ *pulumi.OutputState }

func (FmgSystemNetworkRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgSystemNetworkRoute)(nil)).Elem()
}

func (o FmgSystemNetworkRouteMapOutput) ToFmgSystemNetworkRouteMapOutput() FmgSystemNetworkRouteMapOutput {
	return o
}

func (o FmgSystemNetworkRouteMapOutput) ToFmgSystemNetworkRouteMapOutputWithContext(ctx context.Context) FmgSystemNetworkRouteMapOutput {
	return o
}

func (o FmgSystemNetworkRouteMapOutput) MapIndex(k pulumi.StringInput) FmgSystemNetworkRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FmgSystemNetworkRoute {
		return vs[0].(map[string]*FmgSystemNetworkRoute)[vs[1].(string)]
	}).(FmgSystemNetworkRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemNetworkRouteInput)(nil)).Elem(), &FmgSystemNetworkRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemNetworkRouteArrayInput)(nil)).Elem(), FmgSystemNetworkRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemNetworkRouteMapInput)(nil)).Elem(), FmgSystemNetworkRouteMap{})
	pulumi.RegisterOutputType(FmgSystemNetworkRouteOutput{})
	pulumi.RegisterOutputType(FmgSystemNetworkRouteArrayOutput{})
	pulumi.RegisterOutputType(FmgSystemNetworkRouteMapOutput{})
}
