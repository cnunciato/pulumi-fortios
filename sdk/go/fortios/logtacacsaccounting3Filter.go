// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Settings for TACACS+ accounting events filter. Applies to FortiOS Version `>= 7.0.2`.
//
// ## Import
//
// # LogTacacsAccounting3 Filter can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/logtacacsaccounting3Filter:Logtacacsaccounting3Filter labelname LogTacacsAccounting3Filter
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/logtacacsaccounting3Filter:Logtacacsaccounting3Filter labelname LogTacacsAccounting3Filter
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type Logtacacsaccounting3Filter struct {
	pulumi.CustomResourceState

	// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
	CliCmdAudit pulumi.StringOutput `pulumi:"cliCmdAudit"`
	// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
	ConfigChangeAudit pulumi.StringOutput `pulumi:"configChangeAudit"`
	// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
	LoginAudit pulumi.StringOutput `pulumi:"loginAudit"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLogtacacsaccounting3Filter registers a new resource with the given unique name, arguments, and options.
func NewLogtacacsaccounting3Filter(ctx *pulumi.Context,
	name string, args *Logtacacsaccounting3FilterArgs, opts ...pulumi.ResourceOption) (*Logtacacsaccounting3Filter, error) {
	if args == nil {
		args = &Logtacacsaccounting3FilterArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Logtacacsaccounting3Filter
	err := ctx.RegisterResource("fortios:index/logtacacsaccounting3Filter:Logtacacsaccounting3Filter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogtacacsaccounting3Filter gets an existing Logtacacsaccounting3Filter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogtacacsaccounting3Filter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Logtacacsaccounting3FilterState, opts ...pulumi.ResourceOption) (*Logtacacsaccounting3Filter, error) {
	var resource Logtacacsaccounting3Filter
	err := ctx.ReadResource("fortios:index/logtacacsaccounting3Filter:Logtacacsaccounting3Filter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logtacacsaccounting3Filter resources.
type logtacacsaccounting3FilterState struct {
	// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
	CliCmdAudit *string `pulumi:"cliCmdAudit"`
	// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
	ConfigChangeAudit *string `pulumi:"configChangeAudit"`
	// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
	LoginAudit *string `pulumi:"loginAudit"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Logtacacsaccounting3FilterState struct {
	// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
	CliCmdAudit pulumi.StringPtrInput
	// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
	ConfigChangeAudit pulumi.StringPtrInput
	// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
	LoginAudit pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Logtacacsaccounting3FilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logtacacsaccounting3FilterState)(nil)).Elem()
}

type logtacacsaccounting3FilterArgs struct {
	// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
	CliCmdAudit *string `pulumi:"cliCmdAudit"`
	// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
	ConfigChangeAudit *string `pulumi:"configChangeAudit"`
	// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
	LoginAudit *string `pulumi:"loginAudit"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Logtacacsaccounting3Filter resource.
type Logtacacsaccounting3FilterArgs struct {
	// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
	CliCmdAudit pulumi.StringPtrInput
	// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
	ConfigChangeAudit pulumi.StringPtrInput
	// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
	LoginAudit pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Logtacacsaccounting3FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logtacacsaccounting3FilterArgs)(nil)).Elem()
}

type Logtacacsaccounting3FilterInput interface {
	pulumi.Input

	ToLogtacacsaccounting3FilterOutput() Logtacacsaccounting3FilterOutput
	ToLogtacacsaccounting3FilterOutputWithContext(ctx context.Context) Logtacacsaccounting3FilterOutput
}

func (*Logtacacsaccounting3Filter) ElementType() reflect.Type {
	return reflect.TypeOf((**Logtacacsaccounting3Filter)(nil)).Elem()
}

func (i *Logtacacsaccounting3Filter) ToLogtacacsaccounting3FilterOutput() Logtacacsaccounting3FilterOutput {
	return i.ToLogtacacsaccounting3FilterOutputWithContext(context.Background())
}

func (i *Logtacacsaccounting3Filter) ToLogtacacsaccounting3FilterOutputWithContext(ctx context.Context) Logtacacsaccounting3FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logtacacsaccounting3FilterOutput)
}

// Logtacacsaccounting3FilterArrayInput is an input type that accepts Logtacacsaccounting3FilterArray and Logtacacsaccounting3FilterArrayOutput values.
// You can construct a concrete instance of `Logtacacsaccounting3FilterArrayInput` via:
//
//	Logtacacsaccounting3FilterArray{ Logtacacsaccounting3FilterArgs{...} }
type Logtacacsaccounting3FilterArrayInput interface {
	pulumi.Input

	ToLogtacacsaccounting3FilterArrayOutput() Logtacacsaccounting3FilterArrayOutput
	ToLogtacacsaccounting3FilterArrayOutputWithContext(context.Context) Logtacacsaccounting3FilterArrayOutput
}

type Logtacacsaccounting3FilterArray []Logtacacsaccounting3FilterInput

func (Logtacacsaccounting3FilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logtacacsaccounting3Filter)(nil)).Elem()
}

func (i Logtacacsaccounting3FilterArray) ToLogtacacsaccounting3FilterArrayOutput() Logtacacsaccounting3FilterArrayOutput {
	return i.ToLogtacacsaccounting3FilterArrayOutputWithContext(context.Background())
}

func (i Logtacacsaccounting3FilterArray) ToLogtacacsaccounting3FilterArrayOutputWithContext(ctx context.Context) Logtacacsaccounting3FilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logtacacsaccounting3FilterArrayOutput)
}

// Logtacacsaccounting3FilterMapInput is an input type that accepts Logtacacsaccounting3FilterMap and Logtacacsaccounting3FilterMapOutput values.
// You can construct a concrete instance of `Logtacacsaccounting3FilterMapInput` via:
//
//	Logtacacsaccounting3FilterMap{ "key": Logtacacsaccounting3FilterArgs{...} }
type Logtacacsaccounting3FilterMapInput interface {
	pulumi.Input

	ToLogtacacsaccounting3FilterMapOutput() Logtacacsaccounting3FilterMapOutput
	ToLogtacacsaccounting3FilterMapOutputWithContext(context.Context) Logtacacsaccounting3FilterMapOutput
}

type Logtacacsaccounting3FilterMap map[string]Logtacacsaccounting3FilterInput

func (Logtacacsaccounting3FilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logtacacsaccounting3Filter)(nil)).Elem()
}

func (i Logtacacsaccounting3FilterMap) ToLogtacacsaccounting3FilterMapOutput() Logtacacsaccounting3FilterMapOutput {
	return i.ToLogtacacsaccounting3FilterMapOutputWithContext(context.Background())
}

func (i Logtacacsaccounting3FilterMap) ToLogtacacsaccounting3FilterMapOutputWithContext(ctx context.Context) Logtacacsaccounting3FilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logtacacsaccounting3FilterMapOutput)
}

type Logtacacsaccounting3FilterOutput struct{ *pulumi.OutputState }

func (Logtacacsaccounting3FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logtacacsaccounting3Filter)(nil)).Elem()
}

func (o Logtacacsaccounting3FilterOutput) ToLogtacacsaccounting3FilterOutput() Logtacacsaccounting3FilterOutput {
	return o
}

func (o Logtacacsaccounting3FilterOutput) ToLogtacacsaccounting3FilterOutputWithContext(ctx context.Context) Logtacacsaccounting3FilterOutput {
	return o
}

// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
func (o Logtacacsaccounting3FilterOutput) CliCmdAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *Logtacacsaccounting3Filter) pulumi.StringOutput { return v.CliCmdAudit }).(pulumi.StringOutput)
}

// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
func (o Logtacacsaccounting3FilterOutput) ConfigChangeAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *Logtacacsaccounting3Filter) pulumi.StringOutput { return v.ConfigChangeAudit }).(pulumi.StringOutput)
}

// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
func (o Logtacacsaccounting3FilterOutput) LoginAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *Logtacacsaccounting3Filter) pulumi.StringOutput { return v.LoginAudit }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Logtacacsaccounting3FilterOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logtacacsaccounting3Filter) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Logtacacsaccounting3FilterArrayOutput struct{ *pulumi.OutputState }

func (Logtacacsaccounting3FilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logtacacsaccounting3Filter)(nil)).Elem()
}

func (o Logtacacsaccounting3FilterArrayOutput) ToLogtacacsaccounting3FilterArrayOutput() Logtacacsaccounting3FilterArrayOutput {
	return o
}

func (o Logtacacsaccounting3FilterArrayOutput) ToLogtacacsaccounting3FilterArrayOutputWithContext(ctx context.Context) Logtacacsaccounting3FilterArrayOutput {
	return o
}

func (o Logtacacsaccounting3FilterArrayOutput) Index(i pulumi.IntInput) Logtacacsaccounting3FilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logtacacsaccounting3Filter {
		return vs[0].([]*Logtacacsaccounting3Filter)[vs[1].(int)]
	}).(Logtacacsaccounting3FilterOutput)
}

type Logtacacsaccounting3FilterMapOutput struct{ *pulumi.OutputState }

func (Logtacacsaccounting3FilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logtacacsaccounting3Filter)(nil)).Elem()
}

func (o Logtacacsaccounting3FilterMapOutput) ToLogtacacsaccounting3FilterMapOutput() Logtacacsaccounting3FilterMapOutput {
	return o
}

func (o Logtacacsaccounting3FilterMapOutput) ToLogtacacsaccounting3FilterMapOutputWithContext(ctx context.Context) Logtacacsaccounting3FilterMapOutput {
	return o
}

func (o Logtacacsaccounting3FilterMapOutput) MapIndex(k pulumi.StringInput) Logtacacsaccounting3FilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logtacacsaccounting3Filter {
		return vs[0].(map[string]*Logtacacsaccounting3Filter)[vs[1].(string)]
	}).(Logtacacsaccounting3FilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Logtacacsaccounting3FilterInput)(nil)).Elem(), &Logtacacsaccounting3Filter{})
	pulumi.RegisterInputType(reflect.TypeOf((*Logtacacsaccounting3FilterArrayInput)(nil)).Elem(), Logtacacsaccounting3FilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Logtacacsaccounting3FilterMapInput)(nil)).Elem(), Logtacacsaccounting3FilterMap{})
	pulumi.RegisterOutputType(Logtacacsaccounting3FilterOutput{})
	pulumi.RegisterOutputType(Logtacacsaccounting3FilterArrayOutput{})
	pulumi.RegisterOutputType(Logtacacsaccounting3FilterMapOutput{})
}
