// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports Create/Read/Update/Delete firewall security policy on FortiManager which could be installed to the FortiGate later
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFmgFirewallSecurityPolicy(ctx, "test1", &fortios.FmgFirewallSecurityPolicyArgs{
//				Action: pulumi.String("accept"),
//				AvProfiles: pulumi.StringArray{
//					pulumi.String("g-default"),
//				},
//				CapturePacket: pulumi.String("enable"),
//				Comments:      pulumi.String("policy test"),
//				DnsfilterProfiles: pulumi.StringArray{
//					pulumi.String("default"),
//				},
//				Dstaddrs: pulumi.StringArray{
//					pulumi.String("all"),
//				},
//				Dstintfs: pulumi.StringArray{
//					pulumi.String("any"),
//				},
//				Fixedport: pulumi.String("enable"),
//				Groups: pulumi.StringArray{
//					pulumi.String("Guest-group"),
//				},
//				Ippool:          pulumi.String("disable"),
//				Logtraffic:      pulumi.String("all"),
//				LogtrafficStart: pulumi.String("enable"),
//				Nat:             pulumi.String("enable"),
//				PackageName:     pulumi.String("dvm-test"),
//				ProfileType:     pulumi.String("single"),
//				Schedules: pulumi.StringArray{
//					pulumi.String("always"),
//				},
//				Services: pulumi.StringArray{
//					pulumi.String("ALL"),
//				},
//				Srcaddrs: pulumi.StringArray{
//					pulumi.String("all"),
//				},
//				Srcintfs: pulumi.StringArray{
//					pulumi.String("any"),
//				},
//				TrafficShapers: pulumi.StringArray{
//					pulumi.String("high-priority"),
//				},
//				Users: pulumi.StringArray{
//					pulumi.String("guest"),
//				},
//				UtmStatus: pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FmgFirewallSecurityPolicy struct {
	pulumi.CustomResourceState

	// Policy action, default is deny. Enum: [allow, deny, ipsec].
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Name of an existing Application list.
	ApplicationLists pulumi.StringArrayOutput `pulumi:"applicationLists"`
	// Name of an existing Antivirus profile.
	AvProfiles pulumi.StringArrayOutput `pulumi:"avProfiles"`
	// Enable/disable capture packets.
	CapturePacket pulumi.StringPtrOutput `pulumi:"capturePacket"`
	// Comments.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Name of an existing DNS filter profile.
	DnsfilterProfiles pulumi.StringArrayOutput `pulumi:"dnsfilterProfiles"`
	// Destination address and adress group names.
	Dstaddrs pulumi.StringArrayOutput `pulumi:"dstaddrs"`
	// Outgoing interface.
	Dstintfs pulumi.StringArrayOutput `pulumi:"dstintfs"`
	// Enable/disable to prevent source NAT from changing a session's source port.
	Fixedport pulumi.StringPtrOutput `pulumi:"fixedport"`
	// Enable/disable Fortinet Single Sign-On.
	Fsso pulumi.StringPtrOutput `pulumi:"fsso"`
	// Names of user groups that can authenticate with this policy.
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
	Inbound pulumi.StringPtrOutput `pulumi:"inbound"`
	// Enable/disable use of Destination Internet Services for this policy.
	InternetService pulumi.StringOutput `pulumi:"internetService"`
	// Destination Internet Service ID.
	InternetServiceIds pulumi.StringArrayOutput `pulumi:"internetServiceIds"`
	// Destination Internet Service Name.
	InternetServiceNames pulumi.StringArrayOutput `pulumi:"internetServiceNames"`
	// Enable/disable use of Source Internet Services for this policy.
	InternetServiceSrc pulumi.StringOutput `pulumi:"internetServiceSrc"`
	// Source Internet Service ID.
	InternetServiceSrcIds pulumi.StringArrayOutput `pulumi:"internetServiceSrcIds"`
	// Source Internet Service Name.
	InternetServiceSrcNames pulumi.StringArrayOutput `pulumi:"internetServiceSrcNames"`
	// Enable/disable to use IP Pools for source NAT.
	Ippool pulumi.StringPtrOutput `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensors pulumi.StringArrayOutput `pulumi:"ipsSensors"`
	// Enable or disable logging. Enum: [disable, all, utm]
	Logtraffic pulumi.StringPtrOutput `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Enum: [disable, enable]
	LogtrafficStart pulumi.StringPtrOutput `pulumi:"logtrafficStart"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable source NAT.
	Nat pulumi.StringPtrOutput `pulumi:"nat"`
	// The package name which the policy will be added to.
	PackageName pulumi.StringPtrOutput `pulumi:"packageName"`
	// Per-IP traffic shaper.
	PerIpShapers pulumi.StringArrayOutput `pulumi:"perIpShapers"`
	// IP Pool names.
	Poolnames pulumi.StringArrayOutput `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroups pulumi.StringArrayOutput `pulumi:"profileGroups"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringArrayOutput `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
	ProfileType pulumi.StringPtrOutput `pulumi:"profileType"`
	// Enable/disable RADIUS Single Sign-On.
	Rsso pulumi.StringPtrOutput `pulumi:"rsso"`
	// Schedule name.
	Schedules pulumi.StringArrayOutput `pulumi:"schedules"`
	// Service and service group names.
	Services pulumi.StringArrayOutput `pulumi:"services"`
	// Source address and adress group names.
	Srcaddrs pulumi.StringArrayOutput `pulumi:"srcaddrs"`
	// Incoming interface.
	Srcintfs pulumi.StringArrayOutput `pulumi:"srcintfs"`
	// Reverse traffic shaper.
	TrafficShaperReverses pulumi.StringArrayOutput `pulumi:"trafficShaperReverses"`
	// Traffic shaper.
	TrafficShapers pulumi.StringArrayOutput `pulumi:"trafficShapers"`
	// Names of individual users that can authenticate with this policy.
	Users pulumi.StringArrayOutput `pulumi:"users"`
	// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus  pulumi.StringPtrOutput   `pulumi:"utmStatus"`
	VpnTunnels pulumi.StringArrayOutput `pulumi:"vpnTunnels"`
	// Name of an existing Web application firewall profile.
	WafProfiles pulumi.StringArrayOutput `pulumi:"wafProfiles"`
	// Name of an existing Web filter profile.
	WebfilterProfiles pulumi.StringArrayOutput `pulumi:"webfilterProfiles"`
}

// NewFmgFirewallSecurityPolicy registers a new resource with the given unique name, arguments, and options.
func NewFmgFirewallSecurityPolicy(ctx *pulumi.Context,
	name string, args *FmgFirewallSecurityPolicyArgs, opts ...pulumi.ResourceOption) (*FmgFirewallSecurityPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dstaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Dstaddrs'")
	}
	if args.Dstintfs == nil {
		return nil, errors.New("invalid value for required argument 'Dstintfs'")
	}
	if args.Schedules == nil {
		return nil, errors.New("invalid value for required argument 'Schedules'")
	}
	if args.Services == nil {
		return nil, errors.New("invalid value for required argument 'Services'")
	}
	if args.Srcaddrs == nil {
		return nil, errors.New("invalid value for required argument 'Srcaddrs'")
	}
	if args.Srcintfs == nil {
		return nil, errors.New("invalid value for required argument 'Srcintfs'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FmgFirewallSecurityPolicy
	err := ctx.RegisterResource("fortios:index/fmgFirewallSecurityPolicy:FmgFirewallSecurityPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFmgFirewallSecurityPolicy gets an existing FmgFirewallSecurityPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFmgFirewallSecurityPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FmgFirewallSecurityPolicyState, opts ...pulumi.ResourceOption) (*FmgFirewallSecurityPolicy, error) {
	var resource FmgFirewallSecurityPolicy
	err := ctx.ReadResource("fortios:index/fmgFirewallSecurityPolicy:FmgFirewallSecurityPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FmgFirewallSecurityPolicy resources.
type fmgFirewallSecurityPolicyState struct {
	// Policy action, default is deny. Enum: [allow, deny, ipsec].
	Action *string `pulumi:"action"`
	// ADOM name. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Name of an existing Application list.
	ApplicationLists []string `pulumi:"applicationLists"`
	// Name of an existing Antivirus profile.
	AvProfiles []string `pulumi:"avProfiles"`
	// Enable/disable capture packets.
	CapturePacket *string `pulumi:"capturePacket"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// Name of an existing DNS filter profile.
	DnsfilterProfiles []string `pulumi:"dnsfilterProfiles"`
	// Destination address and adress group names.
	Dstaddrs []string `pulumi:"dstaddrs"`
	// Outgoing interface.
	Dstintfs []string `pulumi:"dstintfs"`
	// Enable/disable to prevent source NAT from changing a session's source port.
	Fixedport *string `pulumi:"fixedport"`
	// Enable/disable Fortinet Single Sign-On.
	Fsso *string `pulumi:"fsso"`
	// Names of user groups that can authenticate with this policy.
	Groups []string `pulumi:"groups"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
	Inbound *string `pulumi:"inbound"`
	// Enable/disable use of Destination Internet Services for this policy.
	InternetService *string `pulumi:"internetService"`
	// Destination Internet Service ID.
	InternetServiceIds []string `pulumi:"internetServiceIds"`
	// Destination Internet Service Name.
	InternetServiceNames []string `pulumi:"internetServiceNames"`
	// Enable/disable use of Source Internet Services for this policy.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Source Internet Service ID.
	InternetServiceSrcIds []string `pulumi:"internetServiceSrcIds"`
	// Source Internet Service Name.
	InternetServiceSrcNames []string `pulumi:"internetServiceSrcNames"`
	// Enable/disable to use IP Pools for source NAT.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensors []string `pulumi:"ipsSensors"`
	// Enable or disable logging. Enum: [disable, all, utm]
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Enum: [disable, enable]
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT.
	Nat *string `pulumi:"nat"`
	// The package name which the policy will be added to.
	PackageName *string `pulumi:"packageName"`
	// Per-IP traffic shaper.
	PerIpShapers []string `pulumi:"perIpShapers"`
	// IP Pool names.
	Poolnames []string `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroups []string `pulumi:"profileGroups"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions []string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
	ProfileType *string `pulumi:"profileType"`
	// Enable/disable RADIUS Single Sign-On.
	Rsso *string `pulumi:"rsso"`
	// Schedule name.
	Schedules []string `pulumi:"schedules"`
	// Service and service group names.
	Services []string `pulumi:"services"`
	// Source address and adress group names.
	Srcaddrs []string `pulumi:"srcaddrs"`
	// Incoming interface.
	Srcintfs []string `pulumi:"srcintfs"`
	// Reverse traffic shaper.
	TrafficShaperReverses []string `pulumi:"trafficShaperReverses"`
	// Traffic shaper.
	TrafficShapers []string `pulumi:"trafficShapers"`
	// Names of individual users that can authenticate with this policy.
	Users []string `pulumi:"users"`
	// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus  *string  `pulumi:"utmStatus"`
	VpnTunnels []string `pulumi:"vpnTunnels"`
	// Name of an existing Web application firewall profile.
	WafProfiles []string `pulumi:"wafProfiles"`
	// Name of an existing Web filter profile.
	WebfilterProfiles []string `pulumi:"webfilterProfiles"`
}

type FmgFirewallSecurityPolicyState struct {
	// Policy action, default is deny. Enum: [allow, deny, ipsec].
	Action pulumi.StringPtrInput
	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrInput
	// Name of an existing Application list.
	ApplicationLists pulumi.StringArrayInput
	// Name of an existing Antivirus profile.
	AvProfiles pulumi.StringArrayInput
	// Enable/disable capture packets.
	CapturePacket pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfiles pulumi.StringArrayInput
	// Destination address and adress group names.
	Dstaddrs pulumi.StringArrayInput
	// Outgoing interface.
	Dstintfs pulumi.StringArrayInput
	// Enable/disable to prevent source NAT from changing a session's source port.
	Fixedport pulumi.StringPtrInput
	// Enable/disable Fortinet Single Sign-On.
	Fsso pulumi.StringPtrInput
	// Names of user groups that can authenticate with this policy.
	Groups pulumi.StringArrayInput
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
	Inbound pulumi.StringPtrInput
	// Enable/disable use of Destination Internet Services for this policy.
	InternetService pulumi.StringPtrInput
	// Destination Internet Service ID.
	InternetServiceIds pulumi.StringArrayInput
	// Destination Internet Service Name.
	InternetServiceNames pulumi.StringArrayInput
	// Enable/disable use of Source Internet Services for this policy.
	InternetServiceSrc pulumi.StringPtrInput
	// Source Internet Service ID.
	InternetServiceSrcIds pulumi.StringArrayInput
	// Source Internet Service Name.
	InternetServiceSrcNames pulumi.StringArrayInput
	// Enable/disable to use IP Pools for source NAT.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensors pulumi.StringArrayInput
	// Enable or disable logging. Enum: [disable, all, utm]
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts and ends. Enum: [disable, enable]
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT.
	Nat pulumi.StringPtrInput
	// The package name which the policy will be added to.
	PackageName pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShapers pulumi.StringArrayInput
	// IP Pool names.
	Poolnames pulumi.StringArrayInput
	// Name of profile group.
	ProfileGroups pulumi.StringArrayInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringArrayInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
	ProfileType pulumi.StringPtrInput
	// Enable/disable RADIUS Single Sign-On.
	Rsso pulumi.StringPtrInput
	// Schedule name.
	Schedules pulumi.StringArrayInput
	// Service and service group names.
	Services pulumi.StringArrayInput
	// Source address and adress group names.
	Srcaddrs pulumi.StringArrayInput
	// Incoming interface.
	Srcintfs pulumi.StringArrayInput
	// Reverse traffic shaper.
	TrafficShaperReverses pulumi.StringArrayInput
	// Traffic shaper.
	TrafficShapers pulumi.StringArrayInput
	// Names of individual users that can authenticate with this policy.
	Users pulumi.StringArrayInput
	// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus  pulumi.StringPtrInput
	VpnTunnels pulumi.StringArrayInput
	// Name of an existing Web application firewall profile.
	WafProfiles pulumi.StringArrayInput
	// Name of an existing Web filter profile.
	WebfilterProfiles pulumi.StringArrayInput
}

func (FmgFirewallSecurityPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgFirewallSecurityPolicyState)(nil)).Elem()
}

type fmgFirewallSecurityPolicyArgs struct {
	// Policy action, default is deny. Enum: [allow, deny, ipsec].
	Action *string `pulumi:"action"`
	// ADOM name. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Name of an existing Application list.
	ApplicationLists []string `pulumi:"applicationLists"`
	// Name of an existing Antivirus profile.
	AvProfiles []string `pulumi:"avProfiles"`
	// Enable/disable capture packets.
	CapturePacket *string `pulumi:"capturePacket"`
	// Comments.
	Comments *string `pulumi:"comments"`
	// Name of an existing DNS filter profile.
	DnsfilterProfiles []string `pulumi:"dnsfilterProfiles"`
	// Destination address and adress group names.
	Dstaddrs []string `pulumi:"dstaddrs"`
	// Outgoing interface.
	Dstintfs []string `pulumi:"dstintfs"`
	// Enable/disable to prevent source NAT from changing a session's source port.
	Fixedport *string `pulumi:"fixedport"`
	// Enable/disable Fortinet Single Sign-On.
	Fsso *string `pulumi:"fsso"`
	// Names of user groups that can authenticate with this policy.
	Groups []string `pulumi:"groups"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
	Inbound *string `pulumi:"inbound"`
	// Enable/disable use of Destination Internet Services for this policy.
	InternetService *string `pulumi:"internetService"`
	// Destination Internet Service ID.
	InternetServiceIds []string `pulumi:"internetServiceIds"`
	// Destination Internet Service Name.
	InternetServiceNames []string `pulumi:"internetServiceNames"`
	// Enable/disable use of Source Internet Services for this policy.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Source Internet Service ID.
	InternetServiceSrcIds []string `pulumi:"internetServiceSrcIds"`
	// Source Internet Service Name.
	InternetServiceSrcNames []string `pulumi:"internetServiceSrcNames"`
	// Enable/disable to use IP Pools for source NAT.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensors []string `pulumi:"ipsSensors"`
	// Enable or disable logging. Enum: [disable, all, utm]
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts and ends. Enum: [disable, enable]
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT.
	Nat *string `pulumi:"nat"`
	// The package name which the policy will be added to.
	PackageName *string `pulumi:"packageName"`
	// Per-IP traffic shaper.
	PerIpShapers []string `pulumi:"perIpShapers"`
	// IP Pool names.
	Poolnames []string `pulumi:"poolnames"`
	// Name of profile group.
	ProfileGroups []string `pulumi:"profileGroups"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions []string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
	ProfileType *string `pulumi:"profileType"`
	// Enable/disable RADIUS Single Sign-On.
	Rsso *string `pulumi:"rsso"`
	// Schedule name.
	Schedules []string `pulumi:"schedules"`
	// Service and service group names.
	Services []string `pulumi:"services"`
	// Source address and adress group names.
	Srcaddrs []string `pulumi:"srcaddrs"`
	// Incoming interface.
	Srcintfs []string `pulumi:"srcintfs"`
	// Reverse traffic shaper.
	TrafficShaperReverses []string `pulumi:"trafficShaperReverses"`
	// Traffic shaper.
	TrafficShapers []string `pulumi:"trafficShapers"`
	// Names of individual users that can authenticate with this policy.
	Users []string `pulumi:"users"`
	// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus  *string  `pulumi:"utmStatus"`
	VpnTunnels []string `pulumi:"vpnTunnels"`
	// Name of an existing Web application firewall profile.
	WafProfiles []string `pulumi:"wafProfiles"`
	// Name of an existing Web filter profile.
	WebfilterProfiles []string `pulumi:"webfilterProfiles"`
}

// The set of arguments for constructing a FmgFirewallSecurityPolicy resource.
type FmgFirewallSecurityPolicyArgs struct {
	// Policy action, default is deny. Enum: [allow, deny, ipsec].
	Action pulumi.StringPtrInput
	// ADOM name. default is 'root'.
	Adom pulumi.StringPtrInput
	// Name of an existing Application list.
	ApplicationLists pulumi.StringArrayInput
	// Name of an existing Antivirus profile.
	AvProfiles pulumi.StringArrayInput
	// Enable/disable capture packets.
	CapturePacket pulumi.StringPtrInput
	// Comments.
	Comments pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfiles pulumi.StringArrayInput
	// Destination address and adress group names.
	Dstaddrs pulumi.StringArrayInput
	// Outgoing interface.
	Dstintfs pulumi.StringArrayInput
	// Enable/disable to prevent source NAT from changing a session's source port.
	Fixedport pulumi.StringPtrInput
	// Enable/disable Fortinet Single Sign-On.
	Fsso pulumi.StringPtrInput
	// Names of user groups that can authenticate with this policy.
	Groups pulumi.StringArrayInput
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
	Inbound pulumi.StringPtrInput
	// Enable/disable use of Destination Internet Services for this policy.
	InternetService pulumi.StringPtrInput
	// Destination Internet Service ID.
	InternetServiceIds pulumi.StringArrayInput
	// Destination Internet Service Name.
	InternetServiceNames pulumi.StringArrayInput
	// Enable/disable use of Source Internet Services for this policy.
	InternetServiceSrc pulumi.StringPtrInput
	// Source Internet Service ID.
	InternetServiceSrcIds pulumi.StringArrayInput
	// Source Internet Service Name.
	InternetServiceSrcNames pulumi.StringArrayInput
	// Enable/disable to use IP Pools for source NAT.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensors pulumi.StringArrayInput
	// Enable or disable logging. Enum: [disable, all, utm]
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts and ends. Enum: [disable, enable]
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT.
	Nat pulumi.StringPtrInput
	// The package name which the policy will be added to.
	PackageName pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShapers pulumi.StringArrayInput
	// IP Pool names.
	Poolnames pulumi.StringArrayInput
	// Name of profile group.
	ProfileGroups pulumi.StringArrayInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringArrayInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
	ProfileType pulumi.StringPtrInput
	// Enable/disable RADIUS Single Sign-On.
	Rsso pulumi.StringPtrInput
	// Schedule name.
	Schedules pulumi.StringArrayInput
	// Service and service group names.
	Services pulumi.StringArrayInput
	// Source address and adress group names.
	Srcaddrs pulumi.StringArrayInput
	// Incoming interface.
	Srcintfs pulumi.StringArrayInput
	// Reverse traffic shaper.
	TrafficShaperReverses pulumi.StringArrayInput
	// Traffic shaper.
	TrafficShapers pulumi.StringArrayInput
	// Names of individual users that can authenticate with this policy.
	Users pulumi.StringArrayInput
	// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus  pulumi.StringPtrInput
	VpnTunnels pulumi.StringArrayInput
	// Name of an existing Web application firewall profile.
	WafProfiles pulumi.StringArrayInput
	// Name of an existing Web filter profile.
	WebfilterProfiles pulumi.StringArrayInput
}

func (FmgFirewallSecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgFirewallSecurityPolicyArgs)(nil)).Elem()
}

type FmgFirewallSecurityPolicyInput interface {
	pulumi.Input

	ToFmgFirewallSecurityPolicyOutput() FmgFirewallSecurityPolicyOutput
	ToFmgFirewallSecurityPolicyOutputWithContext(ctx context.Context) FmgFirewallSecurityPolicyOutput
}

func (*FmgFirewallSecurityPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgFirewallSecurityPolicy)(nil)).Elem()
}

func (i *FmgFirewallSecurityPolicy) ToFmgFirewallSecurityPolicyOutput() FmgFirewallSecurityPolicyOutput {
	return i.ToFmgFirewallSecurityPolicyOutputWithContext(context.Background())
}

func (i *FmgFirewallSecurityPolicy) ToFmgFirewallSecurityPolicyOutputWithContext(ctx context.Context) FmgFirewallSecurityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgFirewallSecurityPolicyOutput)
}

// FmgFirewallSecurityPolicyArrayInput is an input type that accepts FmgFirewallSecurityPolicyArray and FmgFirewallSecurityPolicyArrayOutput values.
// You can construct a concrete instance of `FmgFirewallSecurityPolicyArrayInput` via:
//
//	FmgFirewallSecurityPolicyArray{ FmgFirewallSecurityPolicyArgs{...} }
type FmgFirewallSecurityPolicyArrayInput interface {
	pulumi.Input

	ToFmgFirewallSecurityPolicyArrayOutput() FmgFirewallSecurityPolicyArrayOutput
	ToFmgFirewallSecurityPolicyArrayOutputWithContext(context.Context) FmgFirewallSecurityPolicyArrayOutput
}

type FmgFirewallSecurityPolicyArray []FmgFirewallSecurityPolicyInput

func (FmgFirewallSecurityPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgFirewallSecurityPolicy)(nil)).Elem()
}

func (i FmgFirewallSecurityPolicyArray) ToFmgFirewallSecurityPolicyArrayOutput() FmgFirewallSecurityPolicyArrayOutput {
	return i.ToFmgFirewallSecurityPolicyArrayOutputWithContext(context.Background())
}

func (i FmgFirewallSecurityPolicyArray) ToFmgFirewallSecurityPolicyArrayOutputWithContext(ctx context.Context) FmgFirewallSecurityPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgFirewallSecurityPolicyArrayOutput)
}

// FmgFirewallSecurityPolicyMapInput is an input type that accepts FmgFirewallSecurityPolicyMap and FmgFirewallSecurityPolicyMapOutput values.
// You can construct a concrete instance of `FmgFirewallSecurityPolicyMapInput` via:
//
//	FmgFirewallSecurityPolicyMap{ "key": FmgFirewallSecurityPolicyArgs{...} }
type FmgFirewallSecurityPolicyMapInput interface {
	pulumi.Input

	ToFmgFirewallSecurityPolicyMapOutput() FmgFirewallSecurityPolicyMapOutput
	ToFmgFirewallSecurityPolicyMapOutputWithContext(context.Context) FmgFirewallSecurityPolicyMapOutput
}

type FmgFirewallSecurityPolicyMap map[string]FmgFirewallSecurityPolicyInput

func (FmgFirewallSecurityPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgFirewallSecurityPolicy)(nil)).Elem()
}

func (i FmgFirewallSecurityPolicyMap) ToFmgFirewallSecurityPolicyMapOutput() FmgFirewallSecurityPolicyMapOutput {
	return i.ToFmgFirewallSecurityPolicyMapOutputWithContext(context.Background())
}

func (i FmgFirewallSecurityPolicyMap) ToFmgFirewallSecurityPolicyMapOutputWithContext(ctx context.Context) FmgFirewallSecurityPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgFirewallSecurityPolicyMapOutput)
}

type FmgFirewallSecurityPolicyOutput struct{ *pulumi.OutputState }

func (FmgFirewallSecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgFirewallSecurityPolicy)(nil)).Elem()
}

func (o FmgFirewallSecurityPolicyOutput) ToFmgFirewallSecurityPolicyOutput() FmgFirewallSecurityPolicyOutput {
	return o
}

func (o FmgFirewallSecurityPolicyOutput) ToFmgFirewallSecurityPolicyOutputWithContext(ctx context.Context) FmgFirewallSecurityPolicyOutput {
	return o
}

// Policy action, default is deny. Enum: [allow, deny, ipsec].
func (o FmgFirewallSecurityPolicyOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// ADOM name. default is 'root'.
func (o FmgFirewallSecurityPolicyOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// Name of an existing Application list.
func (o FmgFirewallSecurityPolicyOutput) ApplicationLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.ApplicationLists }).(pulumi.StringArrayOutput)
}

// Name of an existing Antivirus profile.
func (o FmgFirewallSecurityPolicyOutput) AvProfiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.AvProfiles }).(pulumi.StringArrayOutput)
}

// Enable/disable capture packets.
func (o FmgFirewallSecurityPolicyOutput) CapturePacket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.CapturePacket }).(pulumi.StringPtrOutput)
}

// Comments.
func (o FmgFirewallSecurityPolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Name of an existing DNS filter profile.
func (o FmgFirewallSecurityPolicyOutput) DnsfilterProfiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.DnsfilterProfiles }).(pulumi.StringArrayOutput)
}

// Destination address and adress group names.
func (o FmgFirewallSecurityPolicyOutput) Dstaddrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.Dstaddrs }).(pulumi.StringArrayOutput)
}

// Outgoing interface.
func (o FmgFirewallSecurityPolicyOutput) Dstintfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.Dstintfs }).(pulumi.StringArrayOutput)
}

// Enable/disable to prevent source NAT from changing a session's source port.
func (o FmgFirewallSecurityPolicyOutput) Fixedport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.Fixedport }).(pulumi.StringPtrOutput)
}

// Enable/disable Fortinet Single Sign-On.
func (o FmgFirewallSecurityPolicyOutput) Fsso() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.Fsso }).(pulumi.StringPtrOutput)
}

// Names of user groups that can authenticate with this policy.
func (o FmgFirewallSecurityPolicyOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.Groups }).(pulumi.StringArrayOutput)
}

// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Enum: [disable, enable]
func (o FmgFirewallSecurityPolicyOutput) Inbound() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.Inbound }).(pulumi.StringPtrOutput)
}

// Enable/disable use of Destination Internet Services for this policy.
func (o FmgFirewallSecurityPolicyOutput) InternetService() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringOutput { return v.InternetService }).(pulumi.StringOutput)
}

// Destination Internet Service ID.
func (o FmgFirewallSecurityPolicyOutput) InternetServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.InternetServiceIds }).(pulumi.StringArrayOutput)
}

// Destination Internet Service Name.
func (o FmgFirewallSecurityPolicyOutput) InternetServiceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.InternetServiceNames }).(pulumi.StringArrayOutput)
}

// Enable/disable use of Source Internet Services for this policy.
func (o FmgFirewallSecurityPolicyOutput) InternetServiceSrc() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringOutput { return v.InternetServiceSrc }).(pulumi.StringOutput)
}

// Source Internet Service ID.
func (o FmgFirewallSecurityPolicyOutput) InternetServiceSrcIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.InternetServiceSrcIds }).(pulumi.StringArrayOutput)
}

// Source Internet Service Name.
func (o FmgFirewallSecurityPolicyOutput) InternetServiceSrcNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.InternetServiceSrcNames }).(pulumi.StringArrayOutput)
}

// Enable/disable to use IP Pools for source NAT.
func (o FmgFirewallSecurityPolicyOutput) Ippool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.Ippool }).(pulumi.StringPtrOutput)
}

// Name of an existing IPS sensor.
func (o FmgFirewallSecurityPolicyOutput) IpsSensors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.IpsSensors }).(pulumi.StringArrayOutput)
}

// Enable or disable logging. Enum: [disable, all, utm]
func (o FmgFirewallSecurityPolicyOutput) Logtraffic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.Logtraffic }).(pulumi.StringPtrOutput)
}

// Record logs when a session starts and ends. Enum: [disable, enable]
func (o FmgFirewallSecurityPolicyOutput) LogtrafficStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.LogtrafficStart }).(pulumi.StringPtrOutput)
}

// Policy name.
func (o FmgFirewallSecurityPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable source NAT.
func (o FmgFirewallSecurityPolicyOutput) Nat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.Nat }).(pulumi.StringPtrOutput)
}

// The package name which the policy will be added to.
func (o FmgFirewallSecurityPolicyOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.PackageName }).(pulumi.StringPtrOutput)
}

// Per-IP traffic shaper.
func (o FmgFirewallSecurityPolicyOutput) PerIpShapers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.PerIpShapers }).(pulumi.StringArrayOutput)
}

// IP Pool names.
func (o FmgFirewallSecurityPolicyOutput) Poolnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.Poolnames }).(pulumi.StringArrayOutput)
}

// Name of profile group.
func (o FmgFirewallSecurityPolicyOutput) ProfileGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.ProfileGroups }).(pulumi.StringArrayOutput)
}

// Name of an existing Protocol options profile.
func (o FmgFirewallSecurityPolicyOutput) ProfileProtocolOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.ProfileProtocolOptions }).(pulumi.StringArrayOutput)
}

// Determine whether the firewall policy allows security profile groups or single profiles only. Enum: [single, group]
func (o FmgFirewallSecurityPolicyOutput) ProfileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.ProfileType }).(pulumi.StringPtrOutput)
}

// Enable/disable RADIUS Single Sign-On.
func (o FmgFirewallSecurityPolicyOutput) Rsso() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.Rsso }).(pulumi.StringPtrOutput)
}

// Schedule name.
func (o FmgFirewallSecurityPolicyOutput) Schedules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.Schedules }).(pulumi.StringArrayOutput)
}

// Service and service group names.
func (o FmgFirewallSecurityPolicyOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.Services }).(pulumi.StringArrayOutput)
}

// Source address and adress group names.
func (o FmgFirewallSecurityPolicyOutput) Srcaddrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.Srcaddrs }).(pulumi.StringArrayOutput)
}

// Incoming interface.
func (o FmgFirewallSecurityPolicyOutput) Srcintfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.Srcintfs }).(pulumi.StringArrayOutput)
}

// Reverse traffic shaper.
func (o FmgFirewallSecurityPolicyOutput) TrafficShaperReverses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.TrafficShaperReverses }).(pulumi.StringArrayOutput)
}

// Traffic shaper.
func (o FmgFirewallSecurityPolicyOutput) TrafficShapers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.TrafficShapers }).(pulumi.StringArrayOutput)
}

// Names of individual users that can authenticate with this policy.
func (o FmgFirewallSecurityPolicyOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.Users }).(pulumi.StringArrayOutput)
}

// Enable/disable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
func (o FmgFirewallSecurityPolicyOutput) UtmStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringPtrOutput { return v.UtmStatus }).(pulumi.StringPtrOutput)
}

func (o FmgFirewallSecurityPolicyOutput) VpnTunnels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.VpnTunnels }).(pulumi.StringArrayOutput)
}

// Name of an existing Web application firewall profile.
func (o FmgFirewallSecurityPolicyOutput) WafProfiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.WafProfiles }).(pulumi.StringArrayOutput)
}

// Name of an existing Web filter profile.
func (o FmgFirewallSecurityPolicyOutput) WebfilterProfiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FmgFirewallSecurityPolicy) pulumi.StringArrayOutput { return v.WebfilterProfiles }).(pulumi.StringArrayOutput)
}

type FmgFirewallSecurityPolicyArrayOutput struct{ *pulumi.OutputState }

func (FmgFirewallSecurityPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgFirewallSecurityPolicy)(nil)).Elem()
}

func (o FmgFirewallSecurityPolicyArrayOutput) ToFmgFirewallSecurityPolicyArrayOutput() FmgFirewallSecurityPolicyArrayOutput {
	return o
}

func (o FmgFirewallSecurityPolicyArrayOutput) ToFmgFirewallSecurityPolicyArrayOutputWithContext(ctx context.Context) FmgFirewallSecurityPolicyArrayOutput {
	return o
}

func (o FmgFirewallSecurityPolicyArrayOutput) Index(i pulumi.IntInput) FmgFirewallSecurityPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FmgFirewallSecurityPolicy {
		return vs[0].([]*FmgFirewallSecurityPolicy)[vs[1].(int)]
	}).(FmgFirewallSecurityPolicyOutput)
}

type FmgFirewallSecurityPolicyMapOutput struct{ *pulumi.OutputState }

func (FmgFirewallSecurityPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgFirewallSecurityPolicy)(nil)).Elem()
}

func (o FmgFirewallSecurityPolicyMapOutput) ToFmgFirewallSecurityPolicyMapOutput() FmgFirewallSecurityPolicyMapOutput {
	return o
}

func (o FmgFirewallSecurityPolicyMapOutput) ToFmgFirewallSecurityPolicyMapOutputWithContext(ctx context.Context) FmgFirewallSecurityPolicyMapOutput {
	return o
}

func (o FmgFirewallSecurityPolicyMapOutput) MapIndex(k pulumi.StringInput) FmgFirewallSecurityPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FmgFirewallSecurityPolicy {
		return vs[0].(map[string]*FmgFirewallSecurityPolicy)[vs[1].(string)]
	}).(FmgFirewallSecurityPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FmgFirewallSecurityPolicyInput)(nil)).Elem(), &FmgFirewallSecurityPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgFirewallSecurityPolicyArrayInput)(nil)).Elem(), FmgFirewallSecurityPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgFirewallSecurityPolicyMapInput)(nil)).Elem(), FmgFirewallSecurityPolicyMap{})
	pulumi.RegisterOutputType(FmgFirewallSecurityPolicyOutput{})
	pulumi.RegisterOutputType(FmgFirewallSecurityPolicyArrayOutput{})
	pulumi.RegisterOutputType(FmgFirewallSecurityPolicyMapOutput{})
}
