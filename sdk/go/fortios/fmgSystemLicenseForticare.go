// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports uploading FortiCare registration code to FortiGate through FortiManager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFmgSystemLicenseForticare(ctx, "test1", &fortios.FmgSystemLicenseForticareArgs{
//				RegistrationCode: pulumi.String("jn3t3Nw7qckQzt955Htkfj5hwQ6aaa"),
//				Target:           pulumi.String("fortigate-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FmgSystemLicenseForticare struct {
	pulumi.CustomResourceState

	// ADOM that the target device belongs to. default is 'root'.
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Registration code.
	RegistrationCode pulumi.StringOutput `pulumi:"registrationCode"`
	// Target name, which is managed by FortiManager.
	Target pulumi.StringOutput `pulumi:"target"`
}

// NewFmgSystemLicenseForticare registers a new resource with the given unique name, arguments, and options.
func NewFmgSystemLicenseForticare(ctx *pulumi.Context,
	name string, args *FmgSystemLicenseForticareArgs, opts ...pulumi.ResourceOption) (*FmgSystemLicenseForticare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistrationCode == nil {
		return nil, errors.New("invalid value for required argument 'RegistrationCode'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FmgSystemLicenseForticare
	err := ctx.RegisterResource("fortios:index/fmgSystemLicenseForticare:FmgSystemLicenseForticare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFmgSystemLicenseForticare gets an existing FmgSystemLicenseForticare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFmgSystemLicenseForticare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FmgSystemLicenseForticareState, opts ...pulumi.ResourceOption) (*FmgSystemLicenseForticare, error) {
	var resource FmgSystemLicenseForticare
	err := ctx.ReadResource("fortios:index/fmgSystemLicenseForticare:FmgSystemLicenseForticare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FmgSystemLicenseForticare resources.
type fmgSystemLicenseForticareState struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Registration code.
	RegistrationCode *string `pulumi:"registrationCode"`
	// Target name, which is managed by FortiManager.
	Target *string `pulumi:"target"`
}

type FmgSystemLicenseForticareState struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom pulumi.StringPtrInput
	// Registration code.
	RegistrationCode pulumi.StringPtrInput
	// Target name, which is managed by FortiManager.
	Target pulumi.StringPtrInput
}

func (FmgSystemLicenseForticareState) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgSystemLicenseForticareState)(nil)).Elem()
}

type fmgSystemLicenseForticareArgs struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom *string `pulumi:"adom"`
	// Registration code.
	RegistrationCode string `pulumi:"registrationCode"`
	// Target name, which is managed by FortiManager.
	Target string `pulumi:"target"`
}

// The set of arguments for constructing a FmgSystemLicenseForticare resource.
type FmgSystemLicenseForticareArgs struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom pulumi.StringPtrInput
	// Registration code.
	RegistrationCode pulumi.StringInput
	// Target name, which is managed by FortiManager.
	Target pulumi.StringInput
}

func (FmgSystemLicenseForticareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgSystemLicenseForticareArgs)(nil)).Elem()
}

type FmgSystemLicenseForticareInput interface {
	pulumi.Input

	ToFmgSystemLicenseForticareOutput() FmgSystemLicenseForticareOutput
	ToFmgSystemLicenseForticareOutputWithContext(ctx context.Context) FmgSystemLicenseForticareOutput
}

func (*FmgSystemLicenseForticare) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgSystemLicenseForticare)(nil)).Elem()
}

func (i *FmgSystemLicenseForticare) ToFmgSystemLicenseForticareOutput() FmgSystemLicenseForticareOutput {
	return i.ToFmgSystemLicenseForticareOutputWithContext(context.Background())
}

func (i *FmgSystemLicenseForticare) ToFmgSystemLicenseForticareOutputWithContext(ctx context.Context) FmgSystemLicenseForticareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemLicenseForticareOutput)
}

// FmgSystemLicenseForticareArrayInput is an input type that accepts FmgSystemLicenseForticareArray and FmgSystemLicenseForticareArrayOutput values.
// You can construct a concrete instance of `FmgSystemLicenseForticareArrayInput` via:
//
//	FmgSystemLicenseForticareArray{ FmgSystemLicenseForticareArgs{...} }
type FmgSystemLicenseForticareArrayInput interface {
	pulumi.Input

	ToFmgSystemLicenseForticareArrayOutput() FmgSystemLicenseForticareArrayOutput
	ToFmgSystemLicenseForticareArrayOutputWithContext(context.Context) FmgSystemLicenseForticareArrayOutput
}

type FmgSystemLicenseForticareArray []FmgSystemLicenseForticareInput

func (FmgSystemLicenseForticareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgSystemLicenseForticare)(nil)).Elem()
}

func (i FmgSystemLicenseForticareArray) ToFmgSystemLicenseForticareArrayOutput() FmgSystemLicenseForticareArrayOutput {
	return i.ToFmgSystemLicenseForticareArrayOutputWithContext(context.Background())
}

func (i FmgSystemLicenseForticareArray) ToFmgSystemLicenseForticareArrayOutputWithContext(ctx context.Context) FmgSystemLicenseForticareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemLicenseForticareArrayOutput)
}

// FmgSystemLicenseForticareMapInput is an input type that accepts FmgSystemLicenseForticareMap and FmgSystemLicenseForticareMapOutput values.
// You can construct a concrete instance of `FmgSystemLicenseForticareMapInput` via:
//
//	FmgSystemLicenseForticareMap{ "key": FmgSystemLicenseForticareArgs{...} }
type FmgSystemLicenseForticareMapInput interface {
	pulumi.Input

	ToFmgSystemLicenseForticareMapOutput() FmgSystemLicenseForticareMapOutput
	ToFmgSystemLicenseForticareMapOutputWithContext(context.Context) FmgSystemLicenseForticareMapOutput
}

type FmgSystemLicenseForticareMap map[string]FmgSystemLicenseForticareInput

func (FmgSystemLicenseForticareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgSystemLicenseForticare)(nil)).Elem()
}

func (i FmgSystemLicenseForticareMap) ToFmgSystemLicenseForticareMapOutput() FmgSystemLicenseForticareMapOutput {
	return i.ToFmgSystemLicenseForticareMapOutputWithContext(context.Background())
}

func (i FmgSystemLicenseForticareMap) ToFmgSystemLicenseForticareMapOutputWithContext(ctx context.Context) FmgSystemLicenseForticareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemLicenseForticareMapOutput)
}

type FmgSystemLicenseForticareOutput struct{ *pulumi.OutputState }

func (FmgSystemLicenseForticareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgSystemLicenseForticare)(nil)).Elem()
}

func (o FmgSystemLicenseForticareOutput) ToFmgSystemLicenseForticareOutput() FmgSystemLicenseForticareOutput {
	return o
}

func (o FmgSystemLicenseForticareOutput) ToFmgSystemLicenseForticareOutputWithContext(ctx context.Context) FmgSystemLicenseForticareOutput {
	return o
}

// ADOM that the target device belongs to. default is 'root'.
func (o FmgSystemLicenseForticareOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgSystemLicenseForticare) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// Registration code.
func (o FmgSystemLicenseForticareOutput) RegistrationCode() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgSystemLicenseForticare) pulumi.StringOutput { return v.RegistrationCode }).(pulumi.StringOutput)
}

// Target name, which is managed by FortiManager.
func (o FmgSystemLicenseForticareOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgSystemLicenseForticare) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

type FmgSystemLicenseForticareArrayOutput struct{ *pulumi.OutputState }

func (FmgSystemLicenseForticareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgSystemLicenseForticare)(nil)).Elem()
}

func (o FmgSystemLicenseForticareArrayOutput) ToFmgSystemLicenseForticareArrayOutput() FmgSystemLicenseForticareArrayOutput {
	return o
}

func (o FmgSystemLicenseForticareArrayOutput) ToFmgSystemLicenseForticareArrayOutputWithContext(ctx context.Context) FmgSystemLicenseForticareArrayOutput {
	return o
}

func (o FmgSystemLicenseForticareArrayOutput) Index(i pulumi.IntInput) FmgSystemLicenseForticareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FmgSystemLicenseForticare {
		return vs[0].([]*FmgSystemLicenseForticare)[vs[1].(int)]
	}).(FmgSystemLicenseForticareOutput)
}

type FmgSystemLicenseForticareMapOutput struct{ *pulumi.OutputState }

func (FmgSystemLicenseForticareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgSystemLicenseForticare)(nil)).Elem()
}

func (o FmgSystemLicenseForticareMapOutput) ToFmgSystemLicenseForticareMapOutput() FmgSystemLicenseForticareMapOutput {
	return o
}

func (o FmgSystemLicenseForticareMapOutput) ToFmgSystemLicenseForticareMapOutputWithContext(ctx context.Context) FmgSystemLicenseForticareMapOutput {
	return o
}

func (o FmgSystemLicenseForticareMapOutput) MapIndex(k pulumi.StringInput) FmgSystemLicenseForticareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FmgSystemLicenseForticare {
		return vs[0].(map[string]*FmgSystemLicenseForticare)[vs[1].(string)]
	}).(FmgSystemLicenseForticareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemLicenseForticareInput)(nil)).Elem(), &FmgSystemLicenseForticare{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemLicenseForticareArrayInput)(nil)).Elem(), FmgSystemLicenseForticareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemLicenseForticareMapInput)(nil)).Elem(), FmgSystemLicenseForticareMap{})
	pulumi.RegisterOutputType(FmgSystemLicenseForticareOutput{})
	pulumi.RegisterOutputType(FmgSystemLicenseForticareArrayOutput{})
	pulumi.RegisterOutputType(FmgSystemLicenseForticareMapOutput{})
}
