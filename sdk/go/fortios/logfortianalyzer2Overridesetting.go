// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Override FortiAnalyzer settings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewLogfortianalyzer2Overridesetting(ctx, "trname", &fortios.Logfortianalyzer2OverridesettingArgs{
//				__changeIp:                pulumi.Int(0),
//				ConnTimeout:               pulumi.Int(10),
//				EncAlgorithm:              pulumi.String("high"),
//				FazType:                   pulumi.Int(5),
//				HmacAlgorithm:             pulumi.String("sha256"),
//				IpsArchive:                pulumi.String("enable"),
//				MonitorFailureRetryPeriod: pulumi.Int(5),
//				MonitorKeepalivePeriod:    pulumi.Int(5),
//				Override:                  pulumi.String("disable"),
//				Reliable:                  pulumi.String("disable"),
//				SslMinProtoVersion:        pulumi.String("default"),
//				Status:                    pulumi.String("disable"),
//				UploadInterval:            pulumi.String("daily"),
//				UploadOption:              pulumi.String("5-minute"),
//				UploadTime:                pulumi.String("00:59"),
//				UseManagementVdom:         pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # LogFortianalyzer2 OverrideSetting can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/logfortianalyzer2Overridesetting:Logfortianalyzer2Overridesetting labelname LogFortianalyzer2OverrideSetting
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/logfortianalyzer2Overridesetting:Logfortianalyzer2Overridesetting labelname LogFortianalyzer2OverrideSetting
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type Logfortianalyzer2Overridesetting struct {
	pulumi.CustomResourceState

	// Hidden attribute.
	__changeIp pulumi.IntOutput `pulumi:"__changeIp"`
	// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
	AccessConfig pulumi.StringOutput `pulumi:"accessConfig"`
	// Certificate used to communicate with FortiAnalyzer.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
	CertificateVerification pulumi.StringOutput `pulumi:"certificateVerification"`
	// FortiAnalyzer connection time-out in seconds (for status and log buffer).
	ConnTimeout pulumi.IntOutput `pulumi:"connTimeout"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
	EncAlgorithm pulumi.StringOutput `pulumi:"encAlgorithm"`
	// Hidden setting index of FortiAnalyzer.
	FazType pulumi.IntOutput `pulumi:"fazType"`
	// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
	HmacAlgorithm pulumi.StringOutput `pulumi:"hmacAlgorithm"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
	IpsArchive pulumi.StringOutput `pulumi:"ipsArchive"`
	// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
	MaxLogRate pulumi.IntOutput `pulumi:"maxLogRate"`
	// Hidden management name of FortiAnalyzer.
	MgmtName pulumi.StringOutput `pulumi:"mgmtName"`
	// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
	MonitorFailureRetryPeriod pulumi.IntOutput `pulumi:"monitorFailureRetryPeriod"`
	// Time between OFTP keepalives in seconds (for status and log buffer).
	MonitorKeepalivePeriod pulumi.IntOutput `pulumi:"monitorKeepalivePeriod"`
	// Enable/disable overriding FortiAnalyzer settings or use global settings. Valid values: `enable`, `disable`.
	Override pulumi.StringOutput `pulumi:"override"`
	// Preshared-key used for auto-authorization on FortiAnalyzer.
	PresharedKey pulumi.StringOutput `pulumi:"presharedKey"`
	// Set log transmission priority. Valid values: `default`, `low`.
	Priority pulumi.StringOutput `pulumi:"priority"`
	// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Reliable pulumi.StringOutput `pulumi:"reliable"`
	// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
	Serials Logfortianalyzer2OverridesettingSerialArrayOutput `pulumi:"serials"`
	// The remote FortiAnalyzer.
	Server pulumi.StringOutput `pulumi:"server"`
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringOutput `pulumi:"sslMinProtoVersion"`
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Day of week (month) to upload logs.
	UploadDay pulumi.StringOutput `pulumi:"uploadDay"`
	// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
	UploadInterval pulumi.StringOutput `pulumi:"uploadInterval"`
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
	UploadOption pulumi.StringOutput `pulumi:"uploadOption"`
	// Time to upload logs (hh:mm).
	UploadTime pulumi.StringOutput `pulumi:"uploadTime"`
	// Enable/disable use of management VDOM IP address as source IP for logs sent to FortiAnalyzer. Valid values: `enable`, `disable`.
	UseManagementVdom pulumi.StringOutput `pulumi:"useManagementVdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLogfortianalyzer2Overridesetting registers a new resource with the given unique name, arguments, and options.
func NewLogfortianalyzer2Overridesetting(ctx *pulumi.Context,
	name string, args *Logfortianalyzer2OverridesettingArgs, opts ...pulumi.ResourceOption) (*Logfortianalyzer2Overridesetting, error) {
	if args == nil {
		args = &Logfortianalyzer2OverridesettingArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Logfortianalyzer2Overridesetting
	err := ctx.RegisterResource("fortios:index/logfortianalyzer2Overridesetting:Logfortianalyzer2Overridesetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogfortianalyzer2Overridesetting gets an existing Logfortianalyzer2Overridesetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogfortianalyzer2Overridesetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Logfortianalyzer2OverridesettingState, opts ...pulumi.ResourceOption) (*Logfortianalyzer2Overridesetting, error) {
	var resource Logfortianalyzer2Overridesetting
	err := ctx.ReadResource("fortios:index/logfortianalyzer2Overridesetting:Logfortianalyzer2Overridesetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logfortianalyzer2Overridesetting resources.
type logfortianalyzer2OverridesettingState struct {
	// Hidden attribute.
	__changeIp *int `pulumi:"__changeIp"`
	// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
	AccessConfig *string `pulumi:"accessConfig"`
	// Certificate used to communicate with FortiAnalyzer.
	Certificate *string `pulumi:"certificate"`
	// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
	CertificateVerification *string `pulumi:"certificateVerification"`
	// FortiAnalyzer connection time-out in seconds (for status and log buffer).
	ConnTimeout *int `pulumi:"connTimeout"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
	EncAlgorithm *string `pulumi:"encAlgorithm"`
	// Hidden setting index of FortiAnalyzer.
	FazType *int `pulumi:"fazType"`
	// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
	HmacAlgorithm *string `pulumi:"hmacAlgorithm"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
	IpsArchive *string `pulumi:"ipsArchive"`
	// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
	MaxLogRate *int `pulumi:"maxLogRate"`
	// Hidden management name of FortiAnalyzer.
	MgmtName *string `pulumi:"mgmtName"`
	// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
	MonitorFailureRetryPeriod *int `pulumi:"monitorFailureRetryPeriod"`
	// Time between OFTP keepalives in seconds (for status and log buffer).
	MonitorKeepalivePeriod *int `pulumi:"monitorKeepalivePeriod"`
	// Enable/disable overriding FortiAnalyzer settings or use global settings. Valid values: `enable`, `disable`.
	Override *string `pulumi:"override"`
	// Preshared-key used for auto-authorization on FortiAnalyzer.
	PresharedKey *string `pulumi:"presharedKey"`
	// Set log transmission priority. Valid values: `default`, `low`.
	Priority *string `pulumi:"priority"`
	// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Reliable *string `pulumi:"reliable"`
	// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
	Serials []Logfortianalyzer2OverridesettingSerial `pulumi:"serials"`
	// The remote FortiAnalyzer.
	Server *string `pulumi:"server"`
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp *string `pulumi:"sourceIp"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Day of week (month) to upload logs.
	UploadDay *string `pulumi:"uploadDay"`
	// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
	UploadInterval *string `pulumi:"uploadInterval"`
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
	UploadOption *string `pulumi:"uploadOption"`
	// Time to upload logs (hh:mm).
	UploadTime *string `pulumi:"uploadTime"`
	// Enable/disable use of management VDOM IP address as source IP for logs sent to FortiAnalyzer. Valid values: `enable`, `disable`.
	UseManagementVdom *string `pulumi:"useManagementVdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Logfortianalyzer2OverridesettingState struct {
	// Hidden attribute.
	__changeIp pulumi.IntPtrInput
	// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
	AccessConfig pulumi.StringPtrInput
	// Certificate used to communicate with FortiAnalyzer.
	Certificate pulumi.StringPtrInput
	// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
	CertificateVerification pulumi.StringPtrInput
	// FortiAnalyzer connection time-out in seconds (for status and log buffer).
	ConnTimeout pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
	EncAlgorithm pulumi.StringPtrInput
	// Hidden setting index of FortiAnalyzer.
	FazType pulumi.IntPtrInput
	// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
	HmacAlgorithm pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
	IpsArchive pulumi.StringPtrInput
	// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
	MaxLogRate pulumi.IntPtrInput
	// Hidden management name of FortiAnalyzer.
	MgmtName pulumi.StringPtrInput
	// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
	MonitorFailureRetryPeriod pulumi.IntPtrInput
	// Time between OFTP keepalives in seconds (for status and log buffer).
	MonitorKeepalivePeriod pulumi.IntPtrInput
	// Enable/disable overriding FortiAnalyzer settings or use global settings. Valid values: `enable`, `disable`.
	Override pulumi.StringPtrInput
	// Preshared-key used for auto-authorization on FortiAnalyzer.
	PresharedKey pulumi.StringPtrInput
	// Set log transmission priority. Valid values: `default`, `low`.
	Priority pulumi.StringPtrInput
	// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Reliable pulumi.StringPtrInput
	// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
	Serials Logfortianalyzer2OverridesettingSerialArrayInput
	// The remote FortiAnalyzer.
	Server pulumi.StringPtrInput
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringPtrInput
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Day of week (month) to upload logs.
	UploadDay pulumi.StringPtrInput
	// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
	UploadInterval pulumi.StringPtrInput
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
	UploadOption pulumi.StringPtrInput
	// Time to upload logs (hh:mm).
	UploadTime pulumi.StringPtrInput
	// Enable/disable use of management VDOM IP address as source IP for logs sent to FortiAnalyzer. Valid values: `enable`, `disable`.
	UseManagementVdom pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Logfortianalyzer2OverridesettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*logfortianalyzer2OverridesettingState)(nil)).Elem()
}

type logfortianalyzer2OverridesettingArgs struct {
	// Hidden attribute.
	__changeIp *int `pulumi:"__changeIp"`
	// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
	AccessConfig *string `pulumi:"accessConfig"`
	// Certificate used to communicate with FortiAnalyzer.
	Certificate *string `pulumi:"certificate"`
	// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
	CertificateVerification *string `pulumi:"certificateVerification"`
	// FortiAnalyzer connection time-out in seconds (for status and log buffer).
	ConnTimeout *int `pulumi:"connTimeout"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
	EncAlgorithm *string `pulumi:"encAlgorithm"`
	// Hidden setting index of FortiAnalyzer.
	FazType *int `pulumi:"fazType"`
	// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
	HmacAlgorithm *string `pulumi:"hmacAlgorithm"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
	IpsArchive *string `pulumi:"ipsArchive"`
	// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
	MaxLogRate *int `pulumi:"maxLogRate"`
	// Hidden management name of FortiAnalyzer.
	MgmtName *string `pulumi:"mgmtName"`
	// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
	MonitorFailureRetryPeriod *int `pulumi:"monitorFailureRetryPeriod"`
	// Time between OFTP keepalives in seconds (for status and log buffer).
	MonitorKeepalivePeriod *int `pulumi:"monitorKeepalivePeriod"`
	// Enable/disable overriding FortiAnalyzer settings or use global settings. Valid values: `enable`, `disable`.
	Override *string `pulumi:"override"`
	// Preshared-key used for auto-authorization on FortiAnalyzer.
	PresharedKey *string `pulumi:"presharedKey"`
	// Set log transmission priority. Valid values: `default`, `low`.
	Priority *string `pulumi:"priority"`
	// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Reliable *string `pulumi:"reliable"`
	// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
	Serials []Logfortianalyzer2OverridesettingSerial `pulumi:"serials"`
	// The remote FortiAnalyzer.
	Server *string `pulumi:"server"`
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp *string `pulumi:"sourceIp"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Day of week (month) to upload logs.
	UploadDay *string `pulumi:"uploadDay"`
	// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
	UploadInterval *string `pulumi:"uploadInterval"`
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
	UploadOption *string `pulumi:"uploadOption"`
	// Time to upload logs (hh:mm).
	UploadTime *string `pulumi:"uploadTime"`
	// Enable/disable use of management VDOM IP address as source IP for logs sent to FortiAnalyzer. Valid values: `enable`, `disable`.
	UseManagementVdom *string `pulumi:"useManagementVdom"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Logfortianalyzer2Overridesetting resource.
type Logfortianalyzer2OverridesettingArgs struct {
	// Hidden attribute.
	__changeIp pulumi.IntPtrInput
	// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
	AccessConfig pulumi.StringPtrInput
	// Certificate used to communicate with FortiAnalyzer.
	Certificate pulumi.StringPtrInput
	// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
	CertificateVerification pulumi.StringPtrInput
	// FortiAnalyzer connection time-out in seconds (for status and log buffer).
	ConnTimeout pulumi.IntPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
	EncAlgorithm pulumi.StringPtrInput
	// Hidden setting index of FortiAnalyzer.
	FazType pulumi.IntPtrInput
	// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
	HmacAlgorithm pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
	IpsArchive pulumi.StringPtrInput
	// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
	MaxLogRate pulumi.IntPtrInput
	// Hidden management name of FortiAnalyzer.
	MgmtName pulumi.StringPtrInput
	// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
	MonitorFailureRetryPeriod pulumi.IntPtrInput
	// Time between OFTP keepalives in seconds (for status and log buffer).
	MonitorKeepalivePeriod pulumi.IntPtrInput
	// Enable/disable overriding FortiAnalyzer settings or use global settings. Valid values: `enable`, `disable`.
	Override pulumi.StringPtrInput
	// Preshared-key used for auto-authorization on FortiAnalyzer.
	PresharedKey pulumi.StringPtrInput
	// Set log transmission priority. Valid values: `default`, `low`.
	Priority pulumi.StringPtrInput
	// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Reliable pulumi.StringPtrInput
	// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
	Serials Logfortianalyzer2OverridesettingSerialArrayInput
	// The remote FortiAnalyzer.
	Server pulumi.StringPtrInput
	// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
	SourceIp pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
	SslMinProtoVersion pulumi.StringPtrInput
	// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Day of week (month) to upload logs.
	UploadDay pulumi.StringPtrInput
	// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
	UploadInterval pulumi.StringPtrInput
	// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
	UploadOption pulumi.StringPtrInput
	// Time to upload logs (hh:mm).
	UploadTime pulumi.StringPtrInput
	// Enable/disable use of management VDOM IP address as source IP for logs sent to FortiAnalyzer. Valid values: `enable`, `disable`.
	UseManagementVdom pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Logfortianalyzer2OverridesettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logfortianalyzer2OverridesettingArgs)(nil)).Elem()
}

type Logfortianalyzer2OverridesettingInput interface {
	pulumi.Input

	ToLogfortianalyzer2OverridesettingOutput() Logfortianalyzer2OverridesettingOutput
	ToLogfortianalyzer2OverridesettingOutputWithContext(ctx context.Context) Logfortianalyzer2OverridesettingOutput
}

func (*Logfortianalyzer2Overridesetting) ElementType() reflect.Type {
	return reflect.TypeOf((**Logfortianalyzer2Overridesetting)(nil)).Elem()
}

func (i *Logfortianalyzer2Overridesetting) ToLogfortianalyzer2OverridesettingOutput() Logfortianalyzer2OverridesettingOutput {
	return i.ToLogfortianalyzer2OverridesettingOutputWithContext(context.Background())
}

func (i *Logfortianalyzer2Overridesetting) ToLogfortianalyzer2OverridesettingOutputWithContext(ctx context.Context) Logfortianalyzer2OverridesettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logfortianalyzer2OverridesettingOutput)
}

// Logfortianalyzer2OverridesettingArrayInput is an input type that accepts Logfortianalyzer2OverridesettingArray and Logfortianalyzer2OverridesettingArrayOutput values.
// You can construct a concrete instance of `Logfortianalyzer2OverridesettingArrayInput` via:
//
//	Logfortianalyzer2OverridesettingArray{ Logfortianalyzer2OverridesettingArgs{...} }
type Logfortianalyzer2OverridesettingArrayInput interface {
	pulumi.Input

	ToLogfortianalyzer2OverridesettingArrayOutput() Logfortianalyzer2OverridesettingArrayOutput
	ToLogfortianalyzer2OverridesettingArrayOutputWithContext(context.Context) Logfortianalyzer2OverridesettingArrayOutput
}

type Logfortianalyzer2OverridesettingArray []Logfortianalyzer2OverridesettingInput

func (Logfortianalyzer2OverridesettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logfortianalyzer2Overridesetting)(nil)).Elem()
}

func (i Logfortianalyzer2OverridesettingArray) ToLogfortianalyzer2OverridesettingArrayOutput() Logfortianalyzer2OverridesettingArrayOutput {
	return i.ToLogfortianalyzer2OverridesettingArrayOutputWithContext(context.Background())
}

func (i Logfortianalyzer2OverridesettingArray) ToLogfortianalyzer2OverridesettingArrayOutputWithContext(ctx context.Context) Logfortianalyzer2OverridesettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logfortianalyzer2OverridesettingArrayOutput)
}

// Logfortianalyzer2OverridesettingMapInput is an input type that accepts Logfortianalyzer2OverridesettingMap and Logfortianalyzer2OverridesettingMapOutput values.
// You can construct a concrete instance of `Logfortianalyzer2OverridesettingMapInput` via:
//
//	Logfortianalyzer2OverridesettingMap{ "key": Logfortianalyzer2OverridesettingArgs{...} }
type Logfortianalyzer2OverridesettingMapInput interface {
	pulumi.Input

	ToLogfortianalyzer2OverridesettingMapOutput() Logfortianalyzer2OverridesettingMapOutput
	ToLogfortianalyzer2OverridesettingMapOutputWithContext(context.Context) Logfortianalyzer2OverridesettingMapOutput
}

type Logfortianalyzer2OverridesettingMap map[string]Logfortianalyzer2OverridesettingInput

func (Logfortianalyzer2OverridesettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logfortianalyzer2Overridesetting)(nil)).Elem()
}

func (i Logfortianalyzer2OverridesettingMap) ToLogfortianalyzer2OverridesettingMapOutput() Logfortianalyzer2OverridesettingMapOutput {
	return i.ToLogfortianalyzer2OverridesettingMapOutputWithContext(context.Background())
}

func (i Logfortianalyzer2OverridesettingMap) ToLogfortianalyzer2OverridesettingMapOutputWithContext(ctx context.Context) Logfortianalyzer2OverridesettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logfortianalyzer2OverridesettingMapOutput)
}

type Logfortianalyzer2OverridesettingOutput struct{ *pulumi.OutputState }

func (Logfortianalyzer2OverridesettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logfortianalyzer2Overridesetting)(nil)).Elem()
}

func (o Logfortianalyzer2OverridesettingOutput) ToLogfortianalyzer2OverridesettingOutput() Logfortianalyzer2OverridesettingOutput {
	return o
}

func (o Logfortianalyzer2OverridesettingOutput) ToLogfortianalyzer2OverridesettingOutputWithContext(ctx context.Context) Logfortianalyzer2OverridesettingOutput {
	return o
}

// Hidden attribute.
func (o Logfortianalyzer2OverridesettingOutput) __changeIp() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.IntOutput { return v.__changeIp }).(pulumi.IntOutput)
}

// Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2OverridesettingOutput) AccessConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.AccessConfig }).(pulumi.StringOutput)
}

// Certificate used to communicate with FortiAnalyzer.
func (o Logfortianalyzer2OverridesettingOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2OverridesettingOutput) CertificateVerification() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.CertificateVerification }).(pulumi.StringOutput)
}

// FortiAnalyzer connection time-out in seconds (for status and log buffer).
func (o Logfortianalyzer2OverridesettingOutput) ConnTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.IntOutput { return v.ConnTimeout }).(pulumi.IntOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o Logfortianalyzer2OverridesettingOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable sending FortiAnalyzer log data with SSL encryption. Valid values: `high-medium`, `high`, `low`.
func (o Logfortianalyzer2OverridesettingOutput) EncAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.EncAlgorithm }).(pulumi.StringOutput)
}

// Hidden setting index of FortiAnalyzer.
func (o Logfortianalyzer2OverridesettingOutput) FazType() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.IntOutput { return v.FazType }).(pulumi.IntOutput)
}

// FortiAnalyzer IPsec tunnel HMAC algorithm. Valid values: `sha256`, `sha1`.
func (o Logfortianalyzer2OverridesettingOutput) HmacAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.HmacAlgorithm }).(pulumi.StringOutput)
}

// Specify outgoing interface to reach server.
func (o Logfortianalyzer2OverridesettingOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o Logfortianalyzer2OverridesettingOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2OverridesettingOutput) IpsArchive() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.IpsArchive }).(pulumi.StringOutput)
}

// FortiAnalyzer maximum log rate in MBps (0 = unlimited).
func (o Logfortianalyzer2OverridesettingOutput) MaxLogRate() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.IntOutput { return v.MaxLogRate }).(pulumi.IntOutput)
}

// Hidden management name of FortiAnalyzer.
func (o Logfortianalyzer2OverridesettingOutput) MgmtName() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.MgmtName }).(pulumi.StringOutput)
}

// Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
func (o Logfortianalyzer2OverridesettingOutput) MonitorFailureRetryPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.IntOutput { return v.MonitorFailureRetryPeriod }).(pulumi.IntOutput)
}

// Time between OFTP keepalives in seconds (for status and log buffer).
func (o Logfortianalyzer2OverridesettingOutput) MonitorKeepalivePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.IntOutput { return v.MonitorKeepalivePeriod }).(pulumi.IntOutput)
}

// Enable/disable overriding FortiAnalyzer settings or use global settings. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2OverridesettingOutput) Override() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.Override }).(pulumi.StringOutput)
}

// Preshared-key used for auto-authorization on FortiAnalyzer.
func (o Logfortianalyzer2OverridesettingOutput) PresharedKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.PresharedKey }).(pulumi.StringOutput)
}

// Set log transmission priority. Valid values: `default`, `low`.
func (o Logfortianalyzer2OverridesettingOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.Priority }).(pulumi.StringOutput)
}

// Enable/disable reliable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2OverridesettingOutput) Reliable() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.Reliable }).(pulumi.StringOutput)
}

// Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
func (o Logfortianalyzer2OverridesettingOutput) Serials() Logfortianalyzer2OverridesettingSerialArrayOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) Logfortianalyzer2OverridesettingSerialArrayOutput {
		return v.Serials
	}).(Logfortianalyzer2OverridesettingSerialArrayOutput)
}

// The remote FortiAnalyzer.
func (o Logfortianalyzer2OverridesettingOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
func (o Logfortianalyzer2OverridesettingOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
func (o Logfortianalyzer2OverridesettingOutput) SslMinProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.SslMinProtoVersion }).(pulumi.StringOutput)
}

// Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2OverridesettingOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Day of week (month) to upload logs.
func (o Logfortianalyzer2OverridesettingOutput) UploadDay() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.UploadDay }).(pulumi.StringOutput)
}

// Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
func (o Logfortianalyzer2OverridesettingOutput) UploadInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.UploadInterval }).(pulumi.StringOutput)
}

// Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
func (o Logfortianalyzer2OverridesettingOutput) UploadOption() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.UploadOption }).(pulumi.StringOutput)
}

// Time to upload logs (hh:mm).
func (o Logfortianalyzer2OverridesettingOutput) UploadTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.UploadTime }).(pulumi.StringOutput)
}

// Enable/disable use of management VDOM IP address as source IP for logs sent to FortiAnalyzer. Valid values: `enable`, `disable`.
func (o Logfortianalyzer2OverridesettingOutput) UseManagementVdom() pulumi.StringOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringOutput { return v.UseManagementVdom }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Logfortianalyzer2OverridesettingOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logfortianalyzer2Overridesetting) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Logfortianalyzer2OverridesettingArrayOutput struct{ *pulumi.OutputState }

func (Logfortianalyzer2OverridesettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logfortianalyzer2Overridesetting)(nil)).Elem()
}

func (o Logfortianalyzer2OverridesettingArrayOutput) ToLogfortianalyzer2OverridesettingArrayOutput() Logfortianalyzer2OverridesettingArrayOutput {
	return o
}

func (o Logfortianalyzer2OverridesettingArrayOutput) ToLogfortianalyzer2OverridesettingArrayOutputWithContext(ctx context.Context) Logfortianalyzer2OverridesettingArrayOutput {
	return o
}

func (o Logfortianalyzer2OverridesettingArrayOutput) Index(i pulumi.IntInput) Logfortianalyzer2OverridesettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logfortianalyzer2Overridesetting {
		return vs[0].([]*Logfortianalyzer2Overridesetting)[vs[1].(int)]
	}).(Logfortianalyzer2OverridesettingOutput)
}

type Logfortianalyzer2OverridesettingMapOutput struct{ *pulumi.OutputState }

func (Logfortianalyzer2OverridesettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logfortianalyzer2Overridesetting)(nil)).Elem()
}

func (o Logfortianalyzer2OverridesettingMapOutput) ToLogfortianalyzer2OverridesettingMapOutput() Logfortianalyzer2OverridesettingMapOutput {
	return o
}

func (o Logfortianalyzer2OverridesettingMapOutput) ToLogfortianalyzer2OverridesettingMapOutputWithContext(ctx context.Context) Logfortianalyzer2OverridesettingMapOutput {
	return o
}

func (o Logfortianalyzer2OverridesettingMapOutput) MapIndex(k pulumi.StringInput) Logfortianalyzer2OverridesettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logfortianalyzer2Overridesetting {
		return vs[0].(map[string]*Logfortianalyzer2Overridesetting)[vs[1].(string)]
	}).(Logfortianalyzer2OverridesettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Logfortianalyzer2OverridesettingInput)(nil)).Elem(), &Logfortianalyzer2Overridesetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*Logfortianalyzer2OverridesettingArrayInput)(nil)).Elem(), Logfortianalyzer2OverridesettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Logfortianalyzer2OverridesettingMapInput)(nil)).Elem(), Logfortianalyzer2OverridesettingMap{})
	pulumi.RegisterOutputType(Logfortianalyzer2OverridesettingOutput{})
	pulumi.RegisterOutputType(Logfortianalyzer2OverridesettingArrayOutput{})
	pulumi.RegisterOutputType(Logfortianalyzer2OverridesettingMapOutput{})
}
