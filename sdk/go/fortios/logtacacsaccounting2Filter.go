// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Settings for TACACS+ accounting events filter. Applies to FortiOS Version `>= 7.0.2`.
//
// ## Import
//
// # LogTacacsAccounting2 Filter can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/logtacacsaccounting2Filter:Logtacacsaccounting2Filter labelname LogTacacsAccounting2Filter
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/logtacacsaccounting2Filter:Logtacacsaccounting2Filter labelname LogTacacsAccounting2Filter
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type Logtacacsaccounting2Filter struct {
	pulumi.CustomResourceState

	// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
	CliCmdAudit pulumi.StringOutput `pulumi:"cliCmdAudit"`
	// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
	ConfigChangeAudit pulumi.StringOutput `pulumi:"configChangeAudit"`
	// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
	LoginAudit pulumi.StringOutput `pulumi:"loginAudit"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewLogtacacsaccounting2Filter registers a new resource with the given unique name, arguments, and options.
func NewLogtacacsaccounting2Filter(ctx *pulumi.Context,
	name string, args *Logtacacsaccounting2FilterArgs, opts ...pulumi.ResourceOption) (*Logtacacsaccounting2Filter, error) {
	if args == nil {
		args = &Logtacacsaccounting2FilterArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Logtacacsaccounting2Filter
	err := ctx.RegisterResource("fortios:index/logtacacsaccounting2Filter:Logtacacsaccounting2Filter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogtacacsaccounting2Filter gets an existing Logtacacsaccounting2Filter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogtacacsaccounting2Filter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Logtacacsaccounting2FilterState, opts ...pulumi.ResourceOption) (*Logtacacsaccounting2Filter, error) {
	var resource Logtacacsaccounting2Filter
	err := ctx.ReadResource("fortios:index/logtacacsaccounting2Filter:Logtacacsaccounting2Filter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logtacacsaccounting2Filter resources.
type logtacacsaccounting2FilterState struct {
	// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
	CliCmdAudit *string `pulumi:"cliCmdAudit"`
	// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
	ConfigChangeAudit *string `pulumi:"configChangeAudit"`
	// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
	LoginAudit *string `pulumi:"loginAudit"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type Logtacacsaccounting2FilterState struct {
	// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
	CliCmdAudit pulumi.StringPtrInput
	// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
	ConfigChangeAudit pulumi.StringPtrInput
	// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
	LoginAudit pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Logtacacsaccounting2FilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*logtacacsaccounting2FilterState)(nil)).Elem()
}

type logtacacsaccounting2FilterArgs struct {
	// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
	CliCmdAudit *string `pulumi:"cliCmdAudit"`
	// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
	ConfigChangeAudit *string `pulumi:"configChangeAudit"`
	// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
	LoginAudit *string `pulumi:"loginAudit"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a Logtacacsaccounting2Filter resource.
type Logtacacsaccounting2FilterArgs struct {
	// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
	CliCmdAudit pulumi.StringPtrInput
	// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
	ConfigChangeAudit pulumi.StringPtrInput
	// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
	LoginAudit pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (Logtacacsaccounting2FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logtacacsaccounting2FilterArgs)(nil)).Elem()
}

type Logtacacsaccounting2FilterInput interface {
	pulumi.Input

	ToLogtacacsaccounting2FilterOutput() Logtacacsaccounting2FilterOutput
	ToLogtacacsaccounting2FilterOutputWithContext(ctx context.Context) Logtacacsaccounting2FilterOutput
}

func (*Logtacacsaccounting2Filter) ElementType() reflect.Type {
	return reflect.TypeOf((**Logtacacsaccounting2Filter)(nil)).Elem()
}

func (i *Logtacacsaccounting2Filter) ToLogtacacsaccounting2FilterOutput() Logtacacsaccounting2FilterOutput {
	return i.ToLogtacacsaccounting2FilterOutputWithContext(context.Background())
}

func (i *Logtacacsaccounting2Filter) ToLogtacacsaccounting2FilterOutputWithContext(ctx context.Context) Logtacacsaccounting2FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logtacacsaccounting2FilterOutput)
}

// Logtacacsaccounting2FilterArrayInput is an input type that accepts Logtacacsaccounting2FilterArray and Logtacacsaccounting2FilterArrayOutput values.
// You can construct a concrete instance of `Logtacacsaccounting2FilterArrayInput` via:
//
//	Logtacacsaccounting2FilterArray{ Logtacacsaccounting2FilterArgs{...} }
type Logtacacsaccounting2FilterArrayInput interface {
	pulumi.Input

	ToLogtacacsaccounting2FilterArrayOutput() Logtacacsaccounting2FilterArrayOutput
	ToLogtacacsaccounting2FilterArrayOutputWithContext(context.Context) Logtacacsaccounting2FilterArrayOutput
}

type Logtacacsaccounting2FilterArray []Logtacacsaccounting2FilterInput

func (Logtacacsaccounting2FilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logtacacsaccounting2Filter)(nil)).Elem()
}

func (i Logtacacsaccounting2FilterArray) ToLogtacacsaccounting2FilterArrayOutput() Logtacacsaccounting2FilterArrayOutput {
	return i.ToLogtacacsaccounting2FilterArrayOutputWithContext(context.Background())
}

func (i Logtacacsaccounting2FilterArray) ToLogtacacsaccounting2FilterArrayOutputWithContext(ctx context.Context) Logtacacsaccounting2FilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logtacacsaccounting2FilterArrayOutput)
}

// Logtacacsaccounting2FilterMapInput is an input type that accepts Logtacacsaccounting2FilterMap and Logtacacsaccounting2FilterMapOutput values.
// You can construct a concrete instance of `Logtacacsaccounting2FilterMapInput` via:
//
//	Logtacacsaccounting2FilterMap{ "key": Logtacacsaccounting2FilterArgs{...} }
type Logtacacsaccounting2FilterMapInput interface {
	pulumi.Input

	ToLogtacacsaccounting2FilterMapOutput() Logtacacsaccounting2FilterMapOutput
	ToLogtacacsaccounting2FilterMapOutputWithContext(context.Context) Logtacacsaccounting2FilterMapOutput
}

type Logtacacsaccounting2FilterMap map[string]Logtacacsaccounting2FilterInput

func (Logtacacsaccounting2FilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logtacacsaccounting2Filter)(nil)).Elem()
}

func (i Logtacacsaccounting2FilterMap) ToLogtacacsaccounting2FilterMapOutput() Logtacacsaccounting2FilterMapOutput {
	return i.ToLogtacacsaccounting2FilterMapOutputWithContext(context.Background())
}

func (i Logtacacsaccounting2FilterMap) ToLogtacacsaccounting2FilterMapOutputWithContext(ctx context.Context) Logtacacsaccounting2FilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Logtacacsaccounting2FilterMapOutput)
}

type Logtacacsaccounting2FilterOutput struct{ *pulumi.OutputState }

func (Logtacacsaccounting2FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logtacacsaccounting2Filter)(nil)).Elem()
}

func (o Logtacacsaccounting2FilterOutput) ToLogtacacsaccounting2FilterOutput() Logtacacsaccounting2FilterOutput {
	return o
}

func (o Logtacacsaccounting2FilterOutput) ToLogtacacsaccounting2FilterOutputWithContext(ctx context.Context) Logtacacsaccounting2FilterOutput {
	return o
}

// Enable/disable TACACS+ accounting for CLI commands audit. Valid values: `enable`, `disable`.
func (o Logtacacsaccounting2FilterOutput) CliCmdAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *Logtacacsaccounting2Filter) pulumi.StringOutput { return v.CliCmdAudit }).(pulumi.StringOutput)
}

// Enable/disable TACACS+ accounting for configuration change events audit. Valid values: `enable`, `disable`.
func (o Logtacacsaccounting2FilterOutput) ConfigChangeAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *Logtacacsaccounting2Filter) pulumi.StringOutput { return v.ConfigChangeAudit }).(pulumi.StringOutput)
}

// Enable/disable TACACS+ accounting for login events audit. Valid values: `enable`, `disable`.
func (o Logtacacsaccounting2FilterOutput) LoginAudit() pulumi.StringOutput {
	return o.ApplyT(func(v *Logtacacsaccounting2Filter) pulumi.StringOutput { return v.LoginAudit }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o Logtacacsaccounting2FilterOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logtacacsaccounting2Filter) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type Logtacacsaccounting2FilterArrayOutput struct{ *pulumi.OutputState }

func (Logtacacsaccounting2FilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logtacacsaccounting2Filter)(nil)).Elem()
}

func (o Logtacacsaccounting2FilterArrayOutput) ToLogtacacsaccounting2FilterArrayOutput() Logtacacsaccounting2FilterArrayOutput {
	return o
}

func (o Logtacacsaccounting2FilterArrayOutput) ToLogtacacsaccounting2FilterArrayOutputWithContext(ctx context.Context) Logtacacsaccounting2FilterArrayOutput {
	return o
}

func (o Logtacacsaccounting2FilterArrayOutput) Index(i pulumi.IntInput) Logtacacsaccounting2FilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logtacacsaccounting2Filter {
		return vs[0].([]*Logtacacsaccounting2Filter)[vs[1].(int)]
	}).(Logtacacsaccounting2FilterOutput)
}

type Logtacacsaccounting2FilterMapOutput struct{ *pulumi.OutputState }

func (Logtacacsaccounting2FilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logtacacsaccounting2Filter)(nil)).Elem()
}

func (o Logtacacsaccounting2FilterMapOutput) ToLogtacacsaccounting2FilterMapOutput() Logtacacsaccounting2FilterMapOutput {
	return o
}

func (o Logtacacsaccounting2FilterMapOutput) ToLogtacacsaccounting2FilterMapOutputWithContext(ctx context.Context) Logtacacsaccounting2FilterMapOutput {
	return o
}

func (o Logtacacsaccounting2FilterMapOutput) MapIndex(k pulumi.StringInput) Logtacacsaccounting2FilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logtacacsaccounting2Filter {
		return vs[0].(map[string]*Logtacacsaccounting2Filter)[vs[1].(string)]
	}).(Logtacacsaccounting2FilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Logtacacsaccounting2FilterInput)(nil)).Elem(), &Logtacacsaccounting2Filter{})
	pulumi.RegisterInputType(reflect.TypeOf((*Logtacacsaccounting2FilterArrayInput)(nil)).Elem(), Logtacacsaccounting2FilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Logtacacsaccounting2FilterMapInput)(nil)).Elem(), Logtacacsaccounting2FilterMap{})
	pulumi.RegisterOutputType(Logtacacsaccounting2FilterOutput{})
	pulumi.RegisterOutputType(Logtacacsaccounting2FilterArrayOutput{})
	pulumi.RegisterOutputType(Logtacacsaccounting2FilterMapOutput{})
}
