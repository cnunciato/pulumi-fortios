// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports adding/deleting online FortiGate to/from FortiManager
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFmgDevicemanagerDevice(ctx, "test1", &fortios.FmgDevicemanagerDeviceArgs{
//				DeviceName: pulumi.String("FGVM64-test"),
//				Ipaddr:     pulumi.String("192.168.88.101"),
//				Password:   pulumi.String(""),
//				Userid:     pulumi.String("admin"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FmgDevicemanagerDevice struct {
	pulumi.CustomResourceState

	// Name or ID of the ADOM where the command is to be executed on.
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// Fortigate's device name.
	DeviceName pulumi.StringOutput `pulumi:"deviceName"`
	// Fortigate's ipaddress.
	Ipaddr pulumi.StringOutput `pulumi:"ipaddr"`
	// Password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// User name.
	Userid pulumi.StringOutput `pulumi:"userid"`
}

// NewFmgDevicemanagerDevice registers a new resource with the given unique name, arguments, and options.
func NewFmgDevicemanagerDevice(ctx *pulumi.Context,
	name string, args *FmgDevicemanagerDeviceArgs, opts ...pulumi.ResourceOption) (*FmgDevicemanagerDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceName'")
	}
	if args.Ipaddr == nil {
		return nil, errors.New("invalid value for required argument 'Ipaddr'")
	}
	if args.Userid == nil {
		return nil, errors.New("invalid value for required argument 'Userid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FmgDevicemanagerDevice
	err := ctx.RegisterResource("fortios:index/fmgDevicemanagerDevice:FmgDevicemanagerDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFmgDevicemanagerDevice gets an existing FmgDevicemanagerDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFmgDevicemanagerDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FmgDevicemanagerDeviceState, opts ...pulumi.ResourceOption) (*FmgDevicemanagerDevice, error) {
	var resource FmgDevicemanagerDevice
	err := ctx.ReadResource("fortios:index/fmgDevicemanagerDevice:FmgDevicemanagerDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FmgDevicemanagerDevice resources.
type fmgDevicemanagerDeviceState struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom *string `pulumi:"adom"`
	// Fortigate's device name.
	DeviceName *string `pulumi:"deviceName"`
	// Fortigate's ipaddress.
	Ipaddr *string `pulumi:"ipaddr"`
	// Password.
	Password *string `pulumi:"password"`
	// User name.
	Userid *string `pulumi:"userid"`
}

type FmgDevicemanagerDeviceState struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom pulumi.StringPtrInput
	// Fortigate's device name.
	DeviceName pulumi.StringPtrInput
	// Fortigate's ipaddress.
	Ipaddr pulumi.StringPtrInput
	// Password.
	Password pulumi.StringPtrInput
	// User name.
	Userid pulumi.StringPtrInput
}

func (FmgDevicemanagerDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgDevicemanagerDeviceState)(nil)).Elem()
}

type fmgDevicemanagerDeviceArgs struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom *string `pulumi:"adom"`
	// Fortigate's device name.
	DeviceName string `pulumi:"deviceName"`
	// Fortigate's ipaddress.
	Ipaddr string `pulumi:"ipaddr"`
	// Password.
	Password *string `pulumi:"password"`
	// User name.
	Userid string `pulumi:"userid"`
}

// The set of arguments for constructing a FmgDevicemanagerDevice resource.
type FmgDevicemanagerDeviceArgs struct {
	// Name or ID of the ADOM where the command is to be executed on.
	Adom pulumi.StringPtrInput
	// Fortigate's device name.
	DeviceName pulumi.StringInput
	// Fortigate's ipaddress.
	Ipaddr pulumi.StringInput
	// Password.
	Password pulumi.StringPtrInput
	// User name.
	Userid pulumi.StringInput
}

func (FmgDevicemanagerDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgDevicemanagerDeviceArgs)(nil)).Elem()
}

type FmgDevicemanagerDeviceInput interface {
	pulumi.Input

	ToFmgDevicemanagerDeviceOutput() FmgDevicemanagerDeviceOutput
	ToFmgDevicemanagerDeviceOutputWithContext(ctx context.Context) FmgDevicemanagerDeviceOutput
}

func (*FmgDevicemanagerDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgDevicemanagerDevice)(nil)).Elem()
}

func (i *FmgDevicemanagerDevice) ToFmgDevicemanagerDeviceOutput() FmgDevicemanagerDeviceOutput {
	return i.ToFmgDevicemanagerDeviceOutputWithContext(context.Background())
}

func (i *FmgDevicemanagerDevice) ToFmgDevicemanagerDeviceOutputWithContext(ctx context.Context) FmgDevicemanagerDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgDevicemanagerDeviceOutput)
}

// FmgDevicemanagerDeviceArrayInput is an input type that accepts FmgDevicemanagerDeviceArray and FmgDevicemanagerDeviceArrayOutput values.
// You can construct a concrete instance of `FmgDevicemanagerDeviceArrayInput` via:
//
//	FmgDevicemanagerDeviceArray{ FmgDevicemanagerDeviceArgs{...} }
type FmgDevicemanagerDeviceArrayInput interface {
	pulumi.Input

	ToFmgDevicemanagerDeviceArrayOutput() FmgDevicemanagerDeviceArrayOutput
	ToFmgDevicemanagerDeviceArrayOutputWithContext(context.Context) FmgDevicemanagerDeviceArrayOutput
}

type FmgDevicemanagerDeviceArray []FmgDevicemanagerDeviceInput

func (FmgDevicemanagerDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgDevicemanagerDevice)(nil)).Elem()
}

func (i FmgDevicemanagerDeviceArray) ToFmgDevicemanagerDeviceArrayOutput() FmgDevicemanagerDeviceArrayOutput {
	return i.ToFmgDevicemanagerDeviceArrayOutputWithContext(context.Background())
}

func (i FmgDevicemanagerDeviceArray) ToFmgDevicemanagerDeviceArrayOutputWithContext(ctx context.Context) FmgDevicemanagerDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgDevicemanagerDeviceArrayOutput)
}

// FmgDevicemanagerDeviceMapInput is an input type that accepts FmgDevicemanagerDeviceMap and FmgDevicemanagerDeviceMapOutput values.
// You can construct a concrete instance of `FmgDevicemanagerDeviceMapInput` via:
//
//	FmgDevicemanagerDeviceMap{ "key": FmgDevicemanagerDeviceArgs{...} }
type FmgDevicemanagerDeviceMapInput interface {
	pulumi.Input

	ToFmgDevicemanagerDeviceMapOutput() FmgDevicemanagerDeviceMapOutput
	ToFmgDevicemanagerDeviceMapOutputWithContext(context.Context) FmgDevicemanagerDeviceMapOutput
}

type FmgDevicemanagerDeviceMap map[string]FmgDevicemanagerDeviceInput

func (FmgDevicemanagerDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgDevicemanagerDevice)(nil)).Elem()
}

func (i FmgDevicemanagerDeviceMap) ToFmgDevicemanagerDeviceMapOutput() FmgDevicemanagerDeviceMapOutput {
	return i.ToFmgDevicemanagerDeviceMapOutputWithContext(context.Background())
}

func (i FmgDevicemanagerDeviceMap) ToFmgDevicemanagerDeviceMapOutputWithContext(ctx context.Context) FmgDevicemanagerDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgDevicemanagerDeviceMapOutput)
}

type FmgDevicemanagerDeviceOutput struct{ *pulumi.OutputState }

func (FmgDevicemanagerDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgDevicemanagerDevice)(nil)).Elem()
}

func (o FmgDevicemanagerDeviceOutput) ToFmgDevicemanagerDeviceOutput() FmgDevicemanagerDeviceOutput {
	return o
}

func (o FmgDevicemanagerDeviceOutput) ToFmgDevicemanagerDeviceOutputWithContext(ctx context.Context) FmgDevicemanagerDeviceOutput {
	return o
}

// Name or ID of the ADOM where the command is to be executed on.
func (o FmgDevicemanagerDeviceOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgDevicemanagerDevice) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// Fortigate's device name.
func (o FmgDevicemanagerDeviceOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgDevicemanagerDevice) pulumi.StringOutput { return v.DeviceName }).(pulumi.StringOutput)
}

// Fortigate's ipaddress.
func (o FmgDevicemanagerDeviceOutput) Ipaddr() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgDevicemanagerDevice) pulumi.StringOutput { return v.Ipaddr }).(pulumi.StringOutput)
}

// Password.
func (o FmgDevicemanagerDeviceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgDevicemanagerDevice) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// User name.
func (o FmgDevicemanagerDeviceOutput) Userid() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgDevicemanagerDevice) pulumi.StringOutput { return v.Userid }).(pulumi.StringOutput)
}

type FmgDevicemanagerDeviceArrayOutput struct{ *pulumi.OutputState }

func (FmgDevicemanagerDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgDevicemanagerDevice)(nil)).Elem()
}

func (o FmgDevicemanagerDeviceArrayOutput) ToFmgDevicemanagerDeviceArrayOutput() FmgDevicemanagerDeviceArrayOutput {
	return o
}

func (o FmgDevicemanagerDeviceArrayOutput) ToFmgDevicemanagerDeviceArrayOutputWithContext(ctx context.Context) FmgDevicemanagerDeviceArrayOutput {
	return o
}

func (o FmgDevicemanagerDeviceArrayOutput) Index(i pulumi.IntInput) FmgDevicemanagerDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FmgDevicemanagerDevice {
		return vs[0].([]*FmgDevicemanagerDevice)[vs[1].(int)]
	}).(FmgDevicemanagerDeviceOutput)
}

type FmgDevicemanagerDeviceMapOutput struct{ *pulumi.OutputState }

func (FmgDevicemanagerDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgDevicemanagerDevice)(nil)).Elem()
}

func (o FmgDevicemanagerDeviceMapOutput) ToFmgDevicemanagerDeviceMapOutput() FmgDevicemanagerDeviceMapOutput {
	return o
}

func (o FmgDevicemanagerDeviceMapOutput) ToFmgDevicemanagerDeviceMapOutputWithContext(ctx context.Context) FmgDevicemanagerDeviceMapOutput {
	return o
}

func (o FmgDevicemanagerDeviceMapOutput) MapIndex(k pulumi.StringInput) FmgDevicemanagerDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FmgDevicemanagerDevice {
		return vs[0].(map[string]*FmgDevicemanagerDevice)[vs[1].(string)]
	}).(FmgDevicemanagerDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FmgDevicemanagerDeviceInput)(nil)).Elem(), &FmgDevicemanagerDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgDevicemanagerDeviceArrayInput)(nil)).Elem(), FmgDevicemanagerDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgDevicemanagerDeviceMapInput)(nil)).Elem(), FmgDevicemanagerDeviceMap{})
	pulumi.RegisterOutputType(FmgDevicemanagerDeviceOutput{})
	pulumi.RegisterOutputType(FmgDevicemanagerDeviceArrayOutput{})
	pulumi.RegisterOutputType(FmgDevicemanagerDeviceMapOutput{})
}
