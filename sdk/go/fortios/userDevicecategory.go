// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure device categories. Applies to FortiOS Version `<= 6.2.0`.
//
// ## Import
//
// # User DeviceCategory can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/userDevicecategory:UserDevicecategory labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/userDevicecategory:UserDevicecategory labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type UserDevicecategory struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Device category description.
	Desc pulumi.StringPtrOutput `pulumi:"desc"`
	// Device category name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserDevicecategory registers a new resource with the given unique name, arguments, and options.
func NewUserDevicecategory(ctx *pulumi.Context,
	name string, args *UserDevicecategoryArgs, opts ...pulumi.ResourceOption) (*UserDevicecategory, error) {
	if args == nil {
		args = &UserDevicecategoryArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserDevicecategory
	err := ctx.RegisterResource("fortios:index/userDevicecategory:UserDevicecategory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserDevicecategory gets an existing UserDevicecategory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserDevicecategory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserDevicecategoryState, opts ...pulumi.ResourceOption) (*UserDevicecategory, error) {
	var resource UserDevicecategory
	err := ctx.ReadResource("fortios:index/userDevicecategory:UserDevicecategory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserDevicecategory resources.
type userDevicecategoryState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Device category description.
	Desc *string `pulumi:"desc"`
	// Device category name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserDevicecategoryState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Device category description.
	Desc pulumi.StringPtrInput
	// Device category name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserDevicecategoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*userDevicecategoryState)(nil)).Elem()
}

type userDevicecategoryArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Device category description.
	Desc *string `pulumi:"desc"`
	// Device category name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserDevicecategory resource.
type UserDevicecategoryArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Device category description.
	Desc pulumi.StringPtrInput
	// Device category name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserDevicecategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userDevicecategoryArgs)(nil)).Elem()
}

type UserDevicecategoryInput interface {
	pulumi.Input

	ToUserDevicecategoryOutput() UserDevicecategoryOutput
	ToUserDevicecategoryOutputWithContext(ctx context.Context) UserDevicecategoryOutput
}

func (*UserDevicecategory) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDevicecategory)(nil)).Elem()
}

func (i *UserDevicecategory) ToUserDevicecategoryOutput() UserDevicecategoryOutput {
	return i.ToUserDevicecategoryOutputWithContext(context.Background())
}

func (i *UserDevicecategory) ToUserDevicecategoryOutputWithContext(ctx context.Context) UserDevicecategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDevicecategoryOutput)
}

// UserDevicecategoryArrayInput is an input type that accepts UserDevicecategoryArray and UserDevicecategoryArrayOutput values.
// You can construct a concrete instance of `UserDevicecategoryArrayInput` via:
//
//	UserDevicecategoryArray{ UserDevicecategoryArgs{...} }
type UserDevicecategoryArrayInput interface {
	pulumi.Input

	ToUserDevicecategoryArrayOutput() UserDevicecategoryArrayOutput
	ToUserDevicecategoryArrayOutputWithContext(context.Context) UserDevicecategoryArrayOutput
}

type UserDevicecategoryArray []UserDevicecategoryInput

func (UserDevicecategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDevicecategory)(nil)).Elem()
}

func (i UserDevicecategoryArray) ToUserDevicecategoryArrayOutput() UserDevicecategoryArrayOutput {
	return i.ToUserDevicecategoryArrayOutputWithContext(context.Background())
}

func (i UserDevicecategoryArray) ToUserDevicecategoryArrayOutputWithContext(ctx context.Context) UserDevicecategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDevicecategoryArrayOutput)
}

// UserDevicecategoryMapInput is an input type that accepts UserDevicecategoryMap and UserDevicecategoryMapOutput values.
// You can construct a concrete instance of `UserDevicecategoryMapInput` via:
//
//	UserDevicecategoryMap{ "key": UserDevicecategoryArgs{...} }
type UserDevicecategoryMapInput interface {
	pulumi.Input

	ToUserDevicecategoryMapOutput() UserDevicecategoryMapOutput
	ToUserDevicecategoryMapOutputWithContext(context.Context) UserDevicecategoryMapOutput
}

type UserDevicecategoryMap map[string]UserDevicecategoryInput

func (UserDevicecategoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDevicecategory)(nil)).Elem()
}

func (i UserDevicecategoryMap) ToUserDevicecategoryMapOutput() UserDevicecategoryMapOutput {
	return i.ToUserDevicecategoryMapOutputWithContext(context.Background())
}

func (i UserDevicecategoryMap) ToUserDevicecategoryMapOutputWithContext(ctx context.Context) UserDevicecategoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDevicecategoryMapOutput)
}

type UserDevicecategoryOutput struct{ *pulumi.OutputState }

func (UserDevicecategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDevicecategory)(nil)).Elem()
}

func (o UserDevicecategoryOutput) ToUserDevicecategoryOutput() UserDevicecategoryOutput {
	return o
}

func (o UserDevicecategoryOutput) ToUserDevicecategoryOutputWithContext(ctx context.Context) UserDevicecategoryOutput {
	return o
}

// Comment.
func (o UserDevicecategoryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDevicecategory) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Device category description.
func (o UserDevicecategoryOutput) Desc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDevicecategory) pulumi.StringPtrOutput { return v.Desc }).(pulumi.StringPtrOutput)
}

// Device category name.
func (o UserDevicecategoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDevicecategory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o UserDevicecategoryOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDevicecategory) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserDevicecategoryArrayOutput struct{ *pulumi.OutputState }

func (UserDevicecategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDevicecategory)(nil)).Elem()
}

func (o UserDevicecategoryArrayOutput) ToUserDevicecategoryArrayOutput() UserDevicecategoryArrayOutput {
	return o
}

func (o UserDevicecategoryArrayOutput) ToUserDevicecategoryArrayOutputWithContext(ctx context.Context) UserDevicecategoryArrayOutput {
	return o
}

func (o UserDevicecategoryArrayOutput) Index(i pulumi.IntInput) UserDevicecategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserDevicecategory {
		return vs[0].([]*UserDevicecategory)[vs[1].(int)]
	}).(UserDevicecategoryOutput)
}

type UserDevicecategoryMapOutput struct{ *pulumi.OutputState }

func (UserDevicecategoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDevicecategory)(nil)).Elem()
}

func (o UserDevicecategoryMapOutput) ToUserDevicecategoryMapOutput() UserDevicecategoryMapOutput {
	return o
}

func (o UserDevicecategoryMapOutput) ToUserDevicecategoryMapOutputWithContext(ctx context.Context) UserDevicecategoryMapOutput {
	return o
}

func (o UserDevicecategoryMapOutput) MapIndex(k pulumi.StringInput) UserDevicecategoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserDevicecategory {
		return vs[0].(map[string]*UserDevicecategory)[vs[1].(string)]
	}).(UserDevicecategoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserDevicecategoryInput)(nil)).Elem(), &UserDevicecategory{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDevicecategoryArrayInput)(nil)).Elem(), UserDevicecategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDevicecategoryMapInput)(nil)).Elem(), UserDevicecategoryMap{})
	pulumi.RegisterOutputType(UserDevicecategoryOutput{})
	pulumi.RegisterOutputType(UserDevicecategoryArrayOutput{})
	pulumi.RegisterOutputType(UserDevicecategoryMapOutput{})
}
