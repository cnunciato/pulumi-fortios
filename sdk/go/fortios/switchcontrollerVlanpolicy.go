// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure VLAN policy to be applied on the managed FortiSwitch ports through port-policy. Applies to FortiOS Version `>= 6.4.0`.
//
// ## Import
//
// # SwitchController VlanPolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerVlanpolicy:SwitchcontrollerVlanpolicy labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerVlanpolicy:SwitchcontrollerVlanpolicy labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerVlanpolicy struct {
	pulumi.CustomResourceState

	// Allowed VLANs to be applied when using this VLAN policy. The structure of `allowedVlans` block is documented below.
	AllowedVlans SwitchcontrollerVlanpolicyAllowedVlanArrayOutput `pulumi:"allowedVlans"`
	// Enable/disable all defined VLANs when using this VLAN policy. Valid values: `enable`, `disable`.
	AllowedVlansAll pulumi.StringOutput `pulumi:"allowedVlansAll"`
	// Description for the VLAN policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// Discard mode to be applied when using this VLAN policy. Valid values: `none`, `all-untagged`, `all-tagged`.
	DiscardMode pulumi.StringOutput `pulumi:"discardMode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// FortiLink interface for which this VLAN policy belongs to.
	Fortilink pulumi.StringOutput `pulumi:"fortilink"`
	// VLAN policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Untagged VLANs to be applied when using this VLAN policy. The structure of `untaggedVlans` block is documented below.
	UntaggedVlans SwitchcontrollerVlanpolicyUntaggedVlanArrayOutput `pulumi:"untaggedVlans"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Native VLAN to be applied when using this VLAN policy.
	Vlan pulumi.StringOutput `pulumi:"vlan"`
}

// NewSwitchcontrollerVlanpolicy registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerVlanpolicy(ctx *pulumi.Context,
	name string, args *SwitchcontrollerVlanpolicyArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerVlanpolicy, error) {
	if args == nil {
		args = &SwitchcontrollerVlanpolicyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerVlanpolicy
	err := ctx.RegisterResource("fortios:index/switchcontrollerVlanpolicy:SwitchcontrollerVlanpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerVlanpolicy gets an existing SwitchcontrollerVlanpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerVlanpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerVlanpolicyState, opts ...pulumi.ResourceOption) (*SwitchcontrollerVlanpolicy, error) {
	var resource SwitchcontrollerVlanpolicy
	err := ctx.ReadResource("fortios:index/switchcontrollerVlanpolicy:SwitchcontrollerVlanpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerVlanpolicy resources.
type switchcontrollerVlanpolicyState struct {
	// Allowed VLANs to be applied when using this VLAN policy. The structure of `allowedVlans` block is documented below.
	AllowedVlans []SwitchcontrollerVlanpolicyAllowedVlan `pulumi:"allowedVlans"`
	// Enable/disable all defined VLANs when using this VLAN policy. Valid values: `enable`, `disable`.
	AllowedVlansAll *string `pulumi:"allowedVlansAll"`
	// Description for the VLAN policy.
	Description *string `pulumi:"description"`
	// Discard mode to be applied when using this VLAN policy. Valid values: `none`, `all-untagged`, `all-tagged`.
	DiscardMode *string `pulumi:"discardMode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FortiLink interface for which this VLAN policy belongs to.
	Fortilink *string `pulumi:"fortilink"`
	// VLAN policy name.
	Name *string `pulumi:"name"`
	// Untagged VLANs to be applied when using this VLAN policy. The structure of `untaggedVlans` block is documented below.
	UntaggedVlans []SwitchcontrollerVlanpolicyUntaggedVlan `pulumi:"untaggedVlans"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Native VLAN to be applied when using this VLAN policy.
	Vlan *string `pulumi:"vlan"`
}

type SwitchcontrollerVlanpolicyState struct {
	// Allowed VLANs to be applied when using this VLAN policy. The structure of `allowedVlans` block is documented below.
	AllowedVlans SwitchcontrollerVlanpolicyAllowedVlanArrayInput
	// Enable/disable all defined VLANs when using this VLAN policy. Valid values: `enable`, `disable`.
	AllowedVlansAll pulumi.StringPtrInput
	// Description for the VLAN policy.
	Description pulumi.StringPtrInput
	// Discard mode to be applied when using this VLAN policy. Valid values: `none`, `all-untagged`, `all-tagged`.
	DiscardMode pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// FortiLink interface for which this VLAN policy belongs to.
	Fortilink pulumi.StringPtrInput
	// VLAN policy name.
	Name pulumi.StringPtrInput
	// Untagged VLANs to be applied when using this VLAN policy. The structure of `untaggedVlans` block is documented below.
	UntaggedVlans SwitchcontrollerVlanpolicyUntaggedVlanArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Native VLAN to be applied when using this VLAN policy.
	Vlan pulumi.StringPtrInput
}

func (SwitchcontrollerVlanpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerVlanpolicyState)(nil)).Elem()
}

type switchcontrollerVlanpolicyArgs struct {
	// Allowed VLANs to be applied when using this VLAN policy. The structure of `allowedVlans` block is documented below.
	AllowedVlans []SwitchcontrollerVlanpolicyAllowedVlan `pulumi:"allowedVlans"`
	// Enable/disable all defined VLANs when using this VLAN policy. Valid values: `enable`, `disable`.
	AllowedVlansAll *string `pulumi:"allowedVlansAll"`
	// Description for the VLAN policy.
	Description *string `pulumi:"description"`
	// Discard mode to be applied when using this VLAN policy. Valid values: `none`, `all-untagged`, `all-tagged`.
	DiscardMode *string `pulumi:"discardMode"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// FortiLink interface for which this VLAN policy belongs to.
	Fortilink *string `pulumi:"fortilink"`
	// VLAN policy name.
	Name *string `pulumi:"name"`
	// Untagged VLANs to be applied when using this VLAN policy. The structure of `untaggedVlans` block is documented below.
	UntaggedVlans []SwitchcontrollerVlanpolicyUntaggedVlan `pulumi:"untaggedVlans"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Native VLAN to be applied when using this VLAN policy.
	Vlan *string `pulumi:"vlan"`
}

// The set of arguments for constructing a SwitchcontrollerVlanpolicy resource.
type SwitchcontrollerVlanpolicyArgs struct {
	// Allowed VLANs to be applied when using this VLAN policy. The structure of `allowedVlans` block is documented below.
	AllowedVlans SwitchcontrollerVlanpolicyAllowedVlanArrayInput
	// Enable/disable all defined VLANs when using this VLAN policy. Valid values: `enable`, `disable`.
	AllowedVlansAll pulumi.StringPtrInput
	// Description for the VLAN policy.
	Description pulumi.StringPtrInput
	// Discard mode to be applied when using this VLAN policy. Valid values: `none`, `all-untagged`, `all-tagged`.
	DiscardMode pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// FortiLink interface for which this VLAN policy belongs to.
	Fortilink pulumi.StringPtrInput
	// VLAN policy name.
	Name pulumi.StringPtrInput
	// Untagged VLANs to be applied when using this VLAN policy. The structure of `untaggedVlans` block is documented below.
	UntaggedVlans SwitchcontrollerVlanpolicyUntaggedVlanArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Native VLAN to be applied when using this VLAN policy.
	Vlan pulumi.StringPtrInput
}

func (SwitchcontrollerVlanpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerVlanpolicyArgs)(nil)).Elem()
}

type SwitchcontrollerVlanpolicyInput interface {
	pulumi.Input

	ToSwitchcontrollerVlanpolicyOutput() SwitchcontrollerVlanpolicyOutput
	ToSwitchcontrollerVlanpolicyOutputWithContext(ctx context.Context) SwitchcontrollerVlanpolicyOutput
}

func (*SwitchcontrollerVlanpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerVlanpolicy)(nil)).Elem()
}

func (i *SwitchcontrollerVlanpolicy) ToSwitchcontrollerVlanpolicyOutput() SwitchcontrollerVlanpolicyOutput {
	return i.ToSwitchcontrollerVlanpolicyOutputWithContext(context.Background())
}

func (i *SwitchcontrollerVlanpolicy) ToSwitchcontrollerVlanpolicyOutputWithContext(ctx context.Context) SwitchcontrollerVlanpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerVlanpolicyOutput)
}

// SwitchcontrollerVlanpolicyArrayInput is an input type that accepts SwitchcontrollerVlanpolicyArray and SwitchcontrollerVlanpolicyArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerVlanpolicyArrayInput` via:
//
//	SwitchcontrollerVlanpolicyArray{ SwitchcontrollerVlanpolicyArgs{...} }
type SwitchcontrollerVlanpolicyArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerVlanpolicyArrayOutput() SwitchcontrollerVlanpolicyArrayOutput
	ToSwitchcontrollerVlanpolicyArrayOutputWithContext(context.Context) SwitchcontrollerVlanpolicyArrayOutput
}

type SwitchcontrollerVlanpolicyArray []SwitchcontrollerVlanpolicyInput

func (SwitchcontrollerVlanpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerVlanpolicy)(nil)).Elem()
}

func (i SwitchcontrollerVlanpolicyArray) ToSwitchcontrollerVlanpolicyArrayOutput() SwitchcontrollerVlanpolicyArrayOutput {
	return i.ToSwitchcontrollerVlanpolicyArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerVlanpolicyArray) ToSwitchcontrollerVlanpolicyArrayOutputWithContext(ctx context.Context) SwitchcontrollerVlanpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerVlanpolicyArrayOutput)
}

// SwitchcontrollerVlanpolicyMapInput is an input type that accepts SwitchcontrollerVlanpolicyMap and SwitchcontrollerVlanpolicyMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerVlanpolicyMapInput` via:
//
//	SwitchcontrollerVlanpolicyMap{ "key": SwitchcontrollerVlanpolicyArgs{...} }
type SwitchcontrollerVlanpolicyMapInput interface {
	pulumi.Input

	ToSwitchcontrollerVlanpolicyMapOutput() SwitchcontrollerVlanpolicyMapOutput
	ToSwitchcontrollerVlanpolicyMapOutputWithContext(context.Context) SwitchcontrollerVlanpolicyMapOutput
}

type SwitchcontrollerVlanpolicyMap map[string]SwitchcontrollerVlanpolicyInput

func (SwitchcontrollerVlanpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerVlanpolicy)(nil)).Elem()
}

func (i SwitchcontrollerVlanpolicyMap) ToSwitchcontrollerVlanpolicyMapOutput() SwitchcontrollerVlanpolicyMapOutput {
	return i.ToSwitchcontrollerVlanpolicyMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerVlanpolicyMap) ToSwitchcontrollerVlanpolicyMapOutputWithContext(ctx context.Context) SwitchcontrollerVlanpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerVlanpolicyMapOutput)
}

type SwitchcontrollerVlanpolicyOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerVlanpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerVlanpolicy)(nil)).Elem()
}

func (o SwitchcontrollerVlanpolicyOutput) ToSwitchcontrollerVlanpolicyOutput() SwitchcontrollerVlanpolicyOutput {
	return o
}

func (o SwitchcontrollerVlanpolicyOutput) ToSwitchcontrollerVlanpolicyOutputWithContext(ctx context.Context) SwitchcontrollerVlanpolicyOutput {
	return o
}

// Allowed VLANs to be applied when using this VLAN policy. The structure of `allowedVlans` block is documented below.
func (o SwitchcontrollerVlanpolicyOutput) AllowedVlans() SwitchcontrollerVlanpolicyAllowedVlanArrayOutput {
	return o.ApplyT(func(v *SwitchcontrollerVlanpolicy) SwitchcontrollerVlanpolicyAllowedVlanArrayOutput {
		return v.AllowedVlans
	}).(SwitchcontrollerVlanpolicyAllowedVlanArrayOutput)
}

// Enable/disable all defined VLANs when using this VLAN policy. Valid values: `enable`, `disable`.
func (o SwitchcontrollerVlanpolicyOutput) AllowedVlansAll() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerVlanpolicy) pulumi.StringOutput { return v.AllowedVlansAll }).(pulumi.StringOutput)
}

// Description for the VLAN policy.
func (o SwitchcontrollerVlanpolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerVlanpolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Discard mode to be applied when using this VLAN policy. Valid values: `none`, `all-untagged`, `all-tagged`.
func (o SwitchcontrollerVlanpolicyOutput) DiscardMode() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerVlanpolicy) pulumi.StringOutput { return v.DiscardMode }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SwitchcontrollerVlanpolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerVlanpolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// FortiLink interface for which this VLAN policy belongs to.
func (o SwitchcontrollerVlanpolicyOutput) Fortilink() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerVlanpolicy) pulumi.StringOutput { return v.Fortilink }).(pulumi.StringOutput)
}

// VLAN policy name.
func (o SwitchcontrollerVlanpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerVlanpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Untagged VLANs to be applied when using this VLAN policy. The structure of `untaggedVlans` block is documented below.
func (o SwitchcontrollerVlanpolicyOutput) UntaggedVlans() SwitchcontrollerVlanpolicyUntaggedVlanArrayOutput {
	return o.ApplyT(func(v *SwitchcontrollerVlanpolicy) SwitchcontrollerVlanpolicyUntaggedVlanArrayOutput {
		return v.UntaggedVlans
	}).(SwitchcontrollerVlanpolicyUntaggedVlanArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerVlanpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerVlanpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Native VLAN to be applied when using this VLAN policy.
func (o SwitchcontrollerVlanpolicyOutput) Vlan() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerVlanpolicy) pulumi.StringOutput { return v.Vlan }).(pulumi.StringOutput)
}

type SwitchcontrollerVlanpolicyArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerVlanpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerVlanpolicy)(nil)).Elem()
}

func (o SwitchcontrollerVlanpolicyArrayOutput) ToSwitchcontrollerVlanpolicyArrayOutput() SwitchcontrollerVlanpolicyArrayOutput {
	return o
}

func (o SwitchcontrollerVlanpolicyArrayOutput) ToSwitchcontrollerVlanpolicyArrayOutputWithContext(ctx context.Context) SwitchcontrollerVlanpolicyArrayOutput {
	return o
}

func (o SwitchcontrollerVlanpolicyArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerVlanpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerVlanpolicy {
		return vs[0].([]*SwitchcontrollerVlanpolicy)[vs[1].(int)]
	}).(SwitchcontrollerVlanpolicyOutput)
}

type SwitchcontrollerVlanpolicyMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerVlanpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerVlanpolicy)(nil)).Elem()
}

func (o SwitchcontrollerVlanpolicyMapOutput) ToSwitchcontrollerVlanpolicyMapOutput() SwitchcontrollerVlanpolicyMapOutput {
	return o
}

func (o SwitchcontrollerVlanpolicyMapOutput) ToSwitchcontrollerVlanpolicyMapOutputWithContext(ctx context.Context) SwitchcontrollerVlanpolicyMapOutput {
	return o
}

func (o SwitchcontrollerVlanpolicyMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerVlanpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerVlanpolicy {
		return vs[0].(map[string]*SwitchcontrollerVlanpolicy)[vs[1].(string)]
	}).(SwitchcontrollerVlanpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerVlanpolicyInput)(nil)).Elem(), &SwitchcontrollerVlanpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerVlanpolicyArrayInput)(nil)).Elem(), SwitchcontrollerVlanpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerVlanpolicyMapInput)(nil)).Elem(), SwitchcontrollerVlanpolicyMap{})
	pulumi.RegisterOutputType(SwitchcontrollerVlanpolicyOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerVlanpolicyArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerVlanpolicyMapOutput{})
}
