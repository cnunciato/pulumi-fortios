// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SSH proxy host public keys.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFirewallsshHostkey(ctx, "trname", &fortios.FirewallsshHostkeyArgs{
//				Hostname: pulumi.String("testmachine"),
//				Ip:       pulumi.String("1.1.1.1"),
//				Port:     pulumi.Int(22),
//				Status:   pulumi.String("trusted"),
//				Type:     pulumi.String("RSA"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # FirewallSsh HostKey can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/firewallsshHostkey:FirewallsshHostkey labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/firewallsshHostkey:FirewallsshHostkey labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FirewallsshHostkey struct {
	pulumi.CustomResourceState

	// Hostname of the SSH server.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// IP address of the SSH server.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// SSH public key name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Set the nid of the ECDSA key. Valid values: `256`, `384`, `521`.
	Nid pulumi.StringOutput `pulumi:"nid"`
	// Port of the SSH server.
	Port pulumi.IntOutput `pulumi:"port"`
	// SSH public key.
	PublicKey pulumi.StringPtrOutput `pulumi:"publicKey"`
	// Set the trust status of the public key. Valid values: `trusted`, `revoked`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Set the type of the public key. Valid values: `RSA`, `DSA`, `ECDSA`, `ED25519`, `RSA-CA`, `DSA-CA`, `ECDSA-CA`, `ED25519-CA`.
	Type pulumi.StringOutput `pulumi:"type"`
	// Usage for this public key. Valid values: `transparent-proxy`, `access-proxy`.
	Usage pulumi.StringOutput `pulumi:"usage"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallsshHostkey registers a new resource with the given unique name, arguments, and options.
func NewFirewallsshHostkey(ctx *pulumi.Context,
	name string, args *FirewallsshHostkeyArgs, opts ...pulumi.ResourceOption) (*FirewallsshHostkey, error) {
	if args == nil {
		args = &FirewallsshHostkeyArgs{}
	}

	if args.PublicKey != nil {
		args.PublicKey = pulumi.ToSecret(args.PublicKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"publicKey",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallsshHostkey
	err := ctx.RegisterResource("fortios:index/firewallsshHostkey:FirewallsshHostkey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallsshHostkey gets an existing FirewallsshHostkey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallsshHostkey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallsshHostkeyState, opts ...pulumi.ResourceOption) (*FirewallsshHostkey, error) {
	var resource FirewallsshHostkey
	err := ctx.ReadResource("fortios:index/firewallsshHostkey:FirewallsshHostkey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallsshHostkey resources.
type firewallsshHostkeyState struct {
	// Hostname of the SSH server.
	Hostname *string `pulumi:"hostname"`
	// IP address of the SSH server.
	Ip *string `pulumi:"ip"`
	// SSH public key name.
	Name *string `pulumi:"name"`
	// Set the nid of the ECDSA key. Valid values: `256`, `384`, `521`.
	Nid *string `pulumi:"nid"`
	// Port of the SSH server.
	Port *int `pulumi:"port"`
	// SSH public key.
	PublicKey *string `pulumi:"publicKey"`
	// Set the trust status of the public key. Valid values: `trusted`, `revoked`.
	Status *string `pulumi:"status"`
	// Set the type of the public key. Valid values: `RSA`, `DSA`, `ECDSA`, `ED25519`, `RSA-CA`, `DSA-CA`, `ECDSA-CA`, `ED25519-CA`.
	Type *string `pulumi:"type"`
	// Usage for this public key. Valid values: `transparent-proxy`, `access-proxy`.
	Usage *string `pulumi:"usage"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallsshHostkeyState struct {
	// Hostname of the SSH server.
	Hostname pulumi.StringPtrInput
	// IP address of the SSH server.
	Ip pulumi.StringPtrInput
	// SSH public key name.
	Name pulumi.StringPtrInput
	// Set the nid of the ECDSA key. Valid values: `256`, `384`, `521`.
	Nid pulumi.StringPtrInput
	// Port of the SSH server.
	Port pulumi.IntPtrInput
	// SSH public key.
	PublicKey pulumi.StringPtrInput
	// Set the trust status of the public key. Valid values: `trusted`, `revoked`.
	Status pulumi.StringPtrInput
	// Set the type of the public key. Valid values: `RSA`, `DSA`, `ECDSA`, `ED25519`, `RSA-CA`, `DSA-CA`, `ECDSA-CA`, `ED25519-CA`.
	Type pulumi.StringPtrInput
	// Usage for this public key. Valid values: `transparent-proxy`, `access-proxy`.
	Usage pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallsshHostkeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallsshHostkeyState)(nil)).Elem()
}

type firewallsshHostkeyArgs struct {
	// Hostname of the SSH server.
	Hostname *string `pulumi:"hostname"`
	// IP address of the SSH server.
	Ip *string `pulumi:"ip"`
	// SSH public key name.
	Name *string `pulumi:"name"`
	// Set the nid of the ECDSA key. Valid values: `256`, `384`, `521`.
	Nid *string `pulumi:"nid"`
	// Port of the SSH server.
	Port *int `pulumi:"port"`
	// SSH public key.
	PublicKey *string `pulumi:"publicKey"`
	// Set the trust status of the public key. Valid values: `trusted`, `revoked`.
	Status *string `pulumi:"status"`
	// Set the type of the public key. Valid values: `RSA`, `DSA`, `ECDSA`, `ED25519`, `RSA-CA`, `DSA-CA`, `ECDSA-CA`, `ED25519-CA`.
	Type *string `pulumi:"type"`
	// Usage for this public key. Valid values: `transparent-proxy`, `access-proxy`.
	Usage *string `pulumi:"usage"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallsshHostkey resource.
type FirewallsshHostkeyArgs struct {
	// Hostname of the SSH server.
	Hostname pulumi.StringPtrInput
	// IP address of the SSH server.
	Ip pulumi.StringPtrInput
	// SSH public key name.
	Name pulumi.StringPtrInput
	// Set the nid of the ECDSA key. Valid values: `256`, `384`, `521`.
	Nid pulumi.StringPtrInput
	// Port of the SSH server.
	Port pulumi.IntPtrInput
	// SSH public key.
	PublicKey pulumi.StringPtrInput
	// Set the trust status of the public key. Valid values: `trusted`, `revoked`.
	Status pulumi.StringPtrInput
	// Set the type of the public key. Valid values: `RSA`, `DSA`, `ECDSA`, `ED25519`, `RSA-CA`, `DSA-CA`, `ECDSA-CA`, `ED25519-CA`.
	Type pulumi.StringPtrInput
	// Usage for this public key. Valid values: `transparent-proxy`, `access-proxy`.
	Usage pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallsshHostkeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallsshHostkeyArgs)(nil)).Elem()
}

type FirewallsshHostkeyInput interface {
	pulumi.Input

	ToFirewallsshHostkeyOutput() FirewallsshHostkeyOutput
	ToFirewallsshHostkeyOutputWithContext(ctx context.Context) FirewallsshHostkeyOutput
}

func (*FirewallsshHostkey) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallsshHostkey)(nil)).Elem()
}

func (i *FirewallsshHostkey) ToFirewallsshHostkeyOutput() FirewallsshHostkeyOutput {
	return i.ToFirewallsshHostkeyOutputWithContext(context.Background())
}

func (i *FirewallsshHostkey) ToFirewallsshHostkeyOutputWithContext(ctx context.Context) FirewallsshHostkeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallsshHostkeyOutput)
}

// FirewallsshHostkeyArrayInput is an input type that accepts FirewallsshHostkeyArray and FirewallsshHostkeyArrayOutput values.
// You can construct a concrete instance of `FirewallsshHostkeyArrayInput` via:
//
//	FirewallsshHostkeyArray{ FirewallsshHostkeyArgs{...} }
type FirewallsshHostkeyArrayInput interface {
	pulumi.Input

	ToFirewallsshHostkeyArrayOutput() FirewallsshHostkeyArrayOutput
	ToFirewallsshHostkeyArrayOutputWithContext(context.Context) FirewallsshHostkeyArrayOutput
}

type FirewallsshHostkeyArray []FirewallsshHostkeyInput

func (FirewallsshHostkeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallsshHostkey)(nil)).Elem()
}

func (i FirewallsshHostkeyArray) ToFirewallsshHostkeyArrayOutput() FirewallsshHostkeyArrayOutput {
	return i.ToFirewallsshHostkeyArrayOutputWithContext(context.Background())
}

func (i FirewallsshHostkeyArray) ToFirewallsshHostkeyArrayOutputWithContext(ctx context.Context) FirewallsshHostkeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallsshHostkeyArrayOutput)
}

// FirewallsshHostkeyMapInput is an input type that accepts FirewallsshHostkeyMap and FirewallsshHostkeyMapOutput values.
// You can construct a concrete instance of `FirewallsshHostkeyMapInput` via:
//
//	FirewallsshHostkeyMap{ "key": FirewallsshHostkeyArgs{...} }
type FirewallsshHostkeyMapInput interface {
	pulumi.Input

	ToFirewallsshHostkeyMapOutput() FirewallsshHostkeyMapOutput
	ToFirewallsshHostkeyMapOutputWithContext(context.Context) FirewallsshHostkeyMapOutput
}

type FirewallsshHostkeyMap map[string]FirewallsshHostkeyInput

func (FirewallsshHostkeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallsshHostkey)(nil)).Elem()
}

func (i FirewallsshHostkeyMap) ToFirewallsshHostkeyMapOutput() FirewallsshHostkeyMapOutput {
	return i.ToFirewallsshHostkeyMapOutputWithContext(context.Background())
}

func (i FirewallsshHostkeyMap) ToFirewallsshHostkeyMapOutputWithContext(ctx context.Context) FirewallsshHostkeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallsshHostkeyMapOutput)
}

type FirewallsshHostkeyOutput struct{ *pulumi.OutputState }

func (FirewallsshHostkeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallsshHostkey)(nil)).Elem()
}

func (o FirewallsshHostkeyOutput) ToFirewallsshHostkeyOutput() FirewallsshHostkeyOutput {
	return o
}

func (o FirewallsshHostkeyOutput) ToFirewallsshHostkeyOutputWithContext(ctx context.Context) FirewallsshHostkeyOutput {
	return o
}

// Hostname of the SSH server.
func (o FirewallsshHostkeyOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallsshHostkey) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// IP address of the SSH server.
func (o FirewallsshHostkeyOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallsshHostkey) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// SSH public key name.
func (o FirewallsshHostkeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallsshHostkey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Set the nid of the ECDSA key. Valid values: `256`, `384`, `521`.
func (o FirewallsshHostkeyOutput) Nid() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallsshHostkey) pulumi.StringOutput { return v.Nid }).(pulumi.StringOutput)
}

// Port of the SSH server.
func (o FirewallsshHostkeyOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallsshHostkey) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// SSH public key.
func (o FirewallsshHostkeyOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallsshHostkey) pulumi.StringPtrOutput { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// Set the trust status of the public key. Valid values: `trusted`, `revoked`.
func (o FirewallsshHostkeyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallsshHostkey) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Set the type of the public key. Valid values: `RSA`, `DSA`, `ECDSA`, `ED25519`, `RSA-CA`, `DSA-CA`, `ECDSA-CA`, `ED25519-CA`.
func (o FirewallsshHostkeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallsshHostkey) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Usage for this public key. Valid values: `transparent-proxy`, `access-proxy`.
func (o FirewallsshHostkeyOutput) Usage() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallsshHostkey) pulumi.StringOutput { return v.Usage }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FirewallsshHostkeyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallsshHostkey) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallsshHostkeyArrayOutput struct{ *pulumi.OutputState }

func (FirewallsshHostkeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallsshHostkey)(nil)).Elem()
}

func (o FirewallsshHostkeyArrayOutput) ToFirewallsshHostkeyArrayOutput() FirewallsshHostkeyArrayOutput {
	return o
}

func (o FirewallsshHostkeyArrayOutput) ToFirewallsshHostkeyArrayOutputWithContext(ctx context.Context) FirewallsshHostkeyArrayOutput {
	return o
}

func (o FirewallsshHostkeyArrayOutput) Index(i pulumi.IntInput) FirewallsshHostkeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallsshHostkey {
		return vs[0].([]*FirewallsshHostkey)[vs[1].(int)]
	}).(FirewallsshHostkeyOutput)
}

type FirewallsshHostkeyMapOutput struct{ *pulumi.OutputState }

func (FirewallsshHostkeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallsshHostkey)(nil)).Elem()
}

func (o FirewallsshHostkeyMapOutput) ToFirewallsshHostkeyMapOutput() FirewallsshHostkeyMapOutput {
	return o
}

func (o FirewallsshHostkeyMapOutput) ToFirewallsshHostkeyMapOutputWithContext(ctx context.Context) FirewallsshHostkeyMapOutput {
	return o
}

func (o FirewallsshHostkeyMapOutput) MapIndex(k pulumi.StringInput) FirewallsshHostkeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallsshHostkey {
		return vs[0].(map[string]*FirewallsshHostkey)[vs[1].(string)]
	}).(FirewallsshHostkeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallsshHostkeyInput)(nil)).Elem(), &FirewallsshHostkey{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallsshHostkeyArrayInput)(nil)).Elem(), FirewallsshHostkeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallsshHostkeyMapInput)(nil)).Elem(), FirewallsshHostkeyMap{})
	pulumi.RegisterOutputType(FirewallsshHostkeyOutput{})
	pulumi.RegisterOutputType(FirewallsshHostkeyArrayOutput{})
	pulumi.RegisterOutputType(FirewallsshHostkeyMapOutput{})
}
