// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure decrypted traffic mirror. Applies to FortiOS Version `>= 6.4.0`.
//
// ## Import
//
// # Firewall DecryptedTrafficMirror can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/firewallDecryptedtrafficmirror:FirewallDecryptedtrafficmirror labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/firewallDecryptedtrafficmirror:FirewallDecryptedtrafficmirror labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FirewallDecryptedtrafficmirror struct {
	pulumi.CustomResourceState

	// Set destination MAC address for mirrored traffic.
	Dstmac pulumi.StringOutput `pulumi:"dstmac"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Decrypted traffic mirror interface The structure of `interface` block is documented below.
	Interfaces FirewallDecryptedtrafficmirrorInterfaceArrayOutput `pulumi:"interfaces"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Source of decrypted traffic to be mirrored. Valid values: `client`, `server`, `both`.
	TrafficSource pulumi.StringOutput `pulumi:"trafficSource"`
	// Types of decrypted traffic to be mirrored. Valid values: `ssl`, `ssh`.
	TrafficType pulumi.StringOutput `pulumi:"trafficType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFirewallDecryptedtrafficmirror registers a new resource with the given unique name, arguments, and options.
func NewFirewallDecryptedtrafficmirror(ctx *pulumi.Context,
	name string, args *FirewallDecryptedtrafficmirrorArgs, opts ...pulumi.ResourceOption) (*FirewallDecryptedtrafficmirror, error) {
	if args == nil {
		args = &FirewallDecryptedtrafficmirrorArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallDecryptedtrafficmirror
	err := ctx.RegisterResource("fortios:index/firewallDecryptedtrafficmirror:FirewallDecryptedtrafficmirror", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallDecryptedtrafficmirror gets an existing FirewallDecryptedtrafficmirror resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallDecryptedtrafficmirror(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallDecryptedtrafficmirrorState, opts ...pulumi.ResourceOption) (*FirewallDecryptedtrafficmirror, error) {
	var resource FirewallDecryptedtrafficmirror
	err := ctx.ReadResource("fortios:index/firewallDecryptedtrafficmirror:FirewallDecryptedtrafficmirror", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallDecryptedtrafficmirror resources.
type firewallDecryptedtrafficmirrorState struct {
	// Set destination MAC address for mirrored traffic.
	Dstmac *string `pulumi:"dstmac"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Decrypted traffic mirror interface The structure of `interface` block is documented below.
	Interfaces []FirewallDecryptedtrafficmirrorInterface `pulumi:"interfaces"`
	// Name.
	Name *string `pulumi:"name"`
	// Source of decrypted traffic to be mirrored. Valid values: `client`, `server`, `both`.
	TrafficSource *string `pulumi:"trafficSource"`
	// Types of decrypted traffic to be mirrored. Valid values: `ssl`, `ssh`.
	TrafficType *string `pulumi:"trafficType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FirewallDecryptedtrafficmirrorState struct {
	// Set destination MAC address for mirrored traffic.
	Dstmac pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Decrypted traffic mirror interface The structure of `interface` block is documented below.
	Interfaces FirewallDecryptedtrafficmirrorInterfaceArrayInput
	// Name.
	Name pulumi.StringPtrInput
	// Source of decrypted traffic to be mirrored. Valid values: `client`, `server`, `both`.
	TrafficSource pulumi.StringPtrInput
	// Types of decrypted traffic to be mirrored. Valid values: `ssl`, `ssh`.
	TrafficType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallDecryptedtrafficmirrorState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallDecryptedtrafficmirrorState)(nil)).Elem()
}

type firewallDecryptedtrafficmirrorArgs struct {
	// Set destination MAC address for mirrored traffic.
	Dstmac *string `pulumi:"dstmac"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Decrypted traffic mirror interface The structure of `interface` block is documented below.
	Interfaces []FirewallDecryptedtrafficmirrorInterface `pulumi:"interfaces"`
	// Name.
	Name *string `pulumi:"name"`
	// Source of decrypted traffic to be mirrored. Valid values: `client`, `server`, `both`.
	TrafficSource *string `pulumi:"trafficSource"`
	// Types of decrypted traffic to be mirrored. Valid values: `ssl`, `ssh`.
	TrafficType *string `pulumi:"trafficType"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FirewallDecryptedtrafficmirror resource.
type FirewallDecryptedtrafficmirrorArgs struct {
	// Set destination MAC address for mirrored traffic.
	Dstmac pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Decrypted traffic mirror interface The structure of `interface` block is documented below.
	Interfaces FirewallDecryptedtrafficmirrorInterfaceArrayInput
	// Name.
	Name pulumi.StringPtrInput
	// Source of decrypted traffic to be mirrored. Valid values: `client`, `server`, `both`.
	TrafficSource pulumi.StringPtrInput
	// Types of decrypted traffic to be mirrored. Valid values: `ssl`, `ssh`.
	TrafficType pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FirewallDecryptedtrafficmirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallDecryptedtrafficmirrorArgs)(nil)).Elem()
}

type FirewallDecryptedtrafficmirrorInput interface {
	pulumi.Input

	ToFirewallDecryptedtrafficmirrorOutput() FirewallDecryptedtrafficmirrorOutput
	ToFirewallDecryptedtrafficmirrorOutputWithContext(ctx context.Context) FirewallDecryptedtrafficmirrorOutput
}

func (*FirewallDecryptedtrafficmirror) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallDecryptedtrafficmirror)(nil)).Elem()
}

func (i *FirewallDecryptedtrafficmirror) ToFirewallDecryptedtrafficmirrorOutput() FirewallDecryptedtrafficmirrorOutput {
	return i.ToFirewallDecryptedtrafficmirrorOutputWithContext(context.Background())
}

func (i *FirewallDecryptedtrafficmirror) ToFirewallDecryptedtrafficmirrorOutputWithContext(ctx context.Context) FirewallDecryptedtrafficmirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDecryptedtrafficmirrorOutput)
}

// FirewallDecryptedtrafficmirrorArrayInput is an input type that accepts FirewallDecryptedtrafficmirrorArray and FirewallDecryptedtrafficmirrorArrayOutput values.
// You can construct a concrete instance of `FirewallDecryptedtrafficmirrorArrayInput` via:
//
//	FirewallDecryptedtrafficmirrorArray{ FirewallDecryptedtrafficmirrorArgs{...} }
type FirewallDecryptedtrafficmirrorArrayInput interface {
	pulumi.Input

	ToFirewallDecryptedtrafficmirrorArrayOutput() FirewallDecryptedtrafficmirrorArrayOutput
	ToFirewallDecryptedtrafficmirrorArrayOutputWithContext(context.Context) FirewallDecryptedtrafficmirrorArrayOutput
}

type FirewallDecryptedtrafficmirrorArray []FirewallDecryptedtrafficmirrorInput

func (FirewallDecryptedtrafficmirrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallDecryptedtrafficmirror)(nil)).Elem()
}

func (i FirewallDecryptedtrafficmirrorArray) ToFirewallDecryptedtrafficmirrorArrayOutput() FirewallDecryptedtrafficmirrorArrayOutput {
	return i.ToFirewallDecryptedtrafficmirrorArrayOutputWithContext(context.Background())
}

func (i FirewallDecryptedtrafficmirrorArray) ToFirewallDecryptedtrafficmirrorArrayOutputWithContext(ctx context.Context) FirewallDecryptedtrafficmirrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDecryptedtrafficmirrorArrayOutput)
}

// FirewallDecryptedtrafficmirrorMapInput is an input type that accepts FirewallDecryptedtrafficmirrorMap and FirewallDecryptedtrafficmirrorMapOutput values.
// You can construct a concrete instance of `FirewallDecryptedtrafficmirrorMapInput` via:
//
//	FirewallDecryptedtrafficmirrorMap{ "key": FirewallDecryptedtrafficmirrorArgs{...} }
type FirewallDecryptedtrafficmirrorMapInput interface {
	pulumi.Input

	ToFirewallDecryptedtrafficmirrorMapOutput() FirewallDecryptedtrafficmirrorMapOutput
	ToFirewallDecryptedtrafficmirrorMapOutputWithContext(context.Context) FirewallDecryptedtrafficmirrorMapOutput
}

type FirewallDecryptedtrafficmirrorMap map[string]FirewallDecryptedtrafficmirrorInput

func (FirewallDecryptedtrafficmirrorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallDecryptedtrafficmirror)(nil)).Elem()
}

func (i FirewallDecryptedtrafficmirrorMap) ToFirewallDecryptedtrafficmirrorMapOutput() FirewallDecryptedtrafficmirrorMapOutput {
	return i.ToFirewallDecryptedtrafficmirrorMapOutputWithContext(context.Background())
}

func (i FirewallDecryptedtrafficmirrorMap) ToFirewallDecryptedtrafficmirrorMapOutputWithContext(ctx context.Context) FirewallDecryptedtrafficmirrorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDecryptedtrafficmirrorMapOutput)
}

type FirewallDecryptedtrafficmirrorOutput struct{ *pulumi.OutputState }

func (FirewallDecryptedtrafficmirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallDecryptedtrafficmirror)(nil)).Elem()
}

func (o FirewallDecryptedtrafficmirrorOutput) ToFirewallDecryptedtrafficmirrorOutput() FirewallDecryptedtrafficmirrorOutput {
	return o
}

func (o FirewallDecryptedtrafficmirrorOutput) ToFirewallDecryptedtrafficmirrorOutputWithContext(ctx context.Context) FirewallDecryptedtrafficmirrorOutput {
	return o
}

// Set destination MAC address for mirrored traffic.
func (o FirewallDecryptedtrafficmirrorOutput) Dstmac() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallDecryptedtrafficmirror) pulumi.StringOutput { return v.Dstmac }).(pulumi.StringOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o FirewallDecryptedtrafficmirrorOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallDecryptedtrafficmirror) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Decrypted traffic mirror interface The structure of `interface` block is documented below.
func (o FirewallDecryptedtrafficmirrorOutput) Interfaces() FirewallDecryptedtrafficmirrorInterfaceArrayOutput {
	return o.ApplyT(func(v *FirewallDecryptedtrafficmirror) FirewallDecryptedtrafficmirrorInterfaceArrayOutput {
		return v.Interfaces
	}).(FirewallDecryptedtrafficmirrorInterfaceArrayOutput)
}

// Name.
func (o FirewallDecryptedtrafficmirrorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallDecryptedtrafficmirror) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Source of decrypted traffic to be mirrored. Valid values: `client`, `server`, `both`.
func (o FirewallDecryptedtrafficmirrorOutput) TrafficSource() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallDecryptedtrafficmirror) pulumi.StringOutput { return v.TrafficSource }).(pulumi.StringOutput)
}

// Types of decrypted traffic to be mirrored. Valid values: `ssl`, `ssh`.
func (o FirewallDecryptedtrafficmirrorOutput) TrafficType() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallDecryptedtrafficmirror) pulumi.StringOutput { return v.TrafficType }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FirewallDecryptedtrafficmirrorOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallDecryptedtrafficmirror) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FirewallDecryptedtrafficmirrorArrayOutput struct{ *pulumi.OutputState }

func (FirewallDecryptedtrafficmirrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallDecryptedtrafficmirror)(nil)).Elem()
}

func (o FirewallDecryptedtrafficmirrorArrayOutput) ToFirewallDecryptedtrafficmirrorArrayOutput() FirewallDecryptedtrafficmirrorArrayOutput {
	return o
}

func (o FirewallDecryptedtrafficmirrorArrayOutput) ToFirewallDecryptedtrafficmirrorArrayOutputWithContext(ctx context.Context) FirewallDecryptedtrafficmirrorArrayOutput {
	return o
}

func (o FirewallDecryptedtrafficmirrorArrayOutput) Index(i pulumi.IntInput) FirewallDecryptedtrafficmirrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallDecryptedtrafficmirror {
		return vs[0].([]*FirewallDecryptedtrafficmirror)[vs[1].(int)]
	}).(FirewallDecryptedtrafficmirrorOutput)
}

type FirewallDecryptedtrafficmirrorMapOutput struct{ *pulumi.OutputState }

func (FirewallDecryptedtrafficmirrorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallDecryptedtrafficmirror)(nil)).Elem()
}

func (o FirewallDecryptedtrafficmirrorMapOutput) ToFirewallDecryptedtrafficmirrorMapOutput() FirewallDecryptedtrafficmirrorMapOutput {
	return o
}

func (o FirewallDecryptedtrafficmirrorMapOutput) ToFirewallDecryptedtrafficmirrorMapOutputWithContext(ctx context.Context) FirewallDecryptedtrafficmirrorMapOutput {
	return o
}

func (o FirewallDecryptedtrafficmirrorMapOutput) MapIndex(k pulumi.StringInput) FirewallDecryptedtrafficmirrorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallDecryptedtrafficmirror {
		return vs[0].(map[string]*FirewallDecryptedtrafficmirror)[vs[1].(string)]
	}).(FirewallDecryptedtrafficmirrorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallDecryptedtrafficmirrorInput)(nil)).Elem(), &FirewallDecryptedtrafficmirror{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallDecryptedtrafficmirrorArrayInput)(nil)).Elem(), FirewallDecryptedtrafficmirrorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallDecryptedtrafficmirrorMapInput)(nil)).Elem(), FirewallDecryptedtrafficmirrorMap{})
	pulumi.RegisterOutputType(FirewallDecryptedtrafficmirrorOutput{})
	pulumi.RegisterOutputType(FirewallDecryptedtrafficmirrorArrayOutput{})
	pulumi.RegisterOutputType(FirewallDecryptedtrafficmirrorMapOutput{})
}
