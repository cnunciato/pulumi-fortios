// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure Wireless Termination Points (WTP) system log server profile. Applies to FortiOS Version `>= 7.0.2`.
//
// ## Import
//
// # WirelessController SyslogProfile can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerSyslogprofile:WirelesscontrollerSyslogprofile labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerSyslogprofile:WirelesscontrollerSyslogprofile labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WirelesscontrollerSyslogprofile struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Lowest level of log messages that FortiAP units send to this server (default = information) Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debugging`.
	LogLevel pulumi.StringOutput `pulumi:"logLevel"`
	// WTP system log server profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Syslog server address type (default = IP) Valid values: `fqdn`, `ip`.
	ServerAddrType pulumi.StringOutput `pulumi:"serverAddrType"`
	// FQDN of syslog server that FortiAP units send log messages to.
	ServerFqdn pulumi.StringOutput `pulumi:"serverFqdn"`
	// IP address of syslog server that FortiAP units send log messages to.
	ServerIp pulumi.StringOutput `pulumi:"serverIp"`
	// Port number of syslog server that FortiAP units send log messages to (default = 514).
	ServerPort pulumi.IntOutput `pulumi:"serverPort"`
	// Enable/disable FortiAP units to send log messages to a syslog server (default = enable). Valid values: `enable`, `disable`.
	ServerStatus pulumi.StringOutput `pulumi:"serverStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWirelesscontrollerSyslogprofile registers a new resource with the given unique name, arguments, and options.
func NewWirelesscontrollerSyslogprofile(ctx *pulumi.Context,
	name string, args *WirelesscontrollerSyslogprofileArgs, opts ...pulumi.ResourceOption) (*WirelesscontrollerSyslogprofile, error) {
	if args == nil {
		args = &WirelesscontrollerSyslogprofileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelesscontrollerSyslogprofile
	err := ctx.RegisterResource("fortios:index/wirelesscontrollerSyslogprofile:WirelesscontrollerSyslogprofile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelesscontrollerSyslogprofile gets an existing WirelesscontrollerSyslogprofile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelesscontrollerSyslogprofile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelesscontrollerSyslogprofileState, opts ...pulumi.ResourceOption) (*WirelesscontrollerSyslogprofile, error) {
	var resource WirelesscontrollerSyslogprofile
	err := ctx.ReadResource("fortios:index/wirelesscontrollerSyslogprofile:WirelesscontrollerSyslogprofile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelesscontrollerSyslogprofile resources.
type wirelesscontrollerSyslogprofileState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Lowest level of log messages that FortiAP units send to this server (default = information) Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debugging`.
	LogLevel *string `pulumi:"logLevel"`
	// WTP system log server profile name.
	Name *string `pulumi:"name"`
	// Syslog server address type (default = IP) Valid values: `fqdn`, `ip`.
	ServerAddrType *string `pulumi:"serverAddrType"`
	// FQDN of syslog server that FortiAP units send log messages to.
	ServerFqdn *string `pulumi:"serverFqdn"`
	// IP address of syslog server that FortiAP units send log messages to.
	ServerIp *string `pulumi:"serverIp"`
	// Port number of syslog server that FortiAP units send log messages to (default = 514).
	ServerPort *int `pulumi:"serverPort"`
	// Enable/disable FortiAP units to send log messages to a syslog server (default = enable). Valid values: `enable`, `disable`.
	ServerStatus *string `pulumi:"serverStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WirelesscontrollerSyslogprofileState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Lowest level of log messages that FortiAP units send to this server (default = information) Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debugging`.
	LogLevel pulumi.StringPtrInput
	// WTP system log server profile name.
	Name pulumi.StringPtrInput
	// Syslog server address type (default = IP) Valid values: `fqdn`, `ip`.
	ServerAddrType pulumi.StringPtrInput
	// FQDN of syslog server that FortiAP units send log messages to.
	ServerFqdn pulumi.StringPtrInput
	// IP address of syslog server that FortiAP units send log messages to.
	ServerIp pulumi.StringPtrInput
	// Port number of syslog server that FortiAP units send log messages to (default = 514).
	ServerPort pulumi.IntPtrInput
	// Enable/disable FortiAP units to send log messages to a syslog server (default = enable). Valid values: `enable`, `disable`.
	ServerStatus pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelesscontrollerSyslogprofileState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerSyslogprofileState)(nil)).Elem()
}

type wirelesscontrollerSyslogprofileArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Lowest level of log messages that FortiAP units send to this server (default = information) Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debugging`.
	LogLevel *string `pulumi:"logLevel"`
	// WTP system log server profile name.
	Name *string `pulumi:"name"`
	// Syslog server address type (default = IP) Valid values: `fqdn`, `ip`.
	ServerAddrType *string `pulumi:"serverAddrType"`
	// FQDN of syslog server that FortiAP units send log messages to.
	ServerFqdn *string `pulumi:"serverFqdn"`
	// IP address of syslog server that FortiAP units send log messages to.
	ServerIp *string `pulumi:"serverIp"`
	// Port number of syslog server that FortiAP units send log messages to (default = 514).
	ServerPort *int `pulumi:"serverPort"`
	// Enable/disable FortiAP units to send log messages to a syslog server (default = enable). Valid values: `enable`, `disable`.
	ServerStatus *string `pulumi:"serverStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WirelesscontrollerSyslogprofile resource.
type WirelesscontrollerSyslogprofileArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Lowest level of log messages that FortiAP units send to this server (default = information) Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debugging`.
	LogLevel pulumi.StringPtrInput
	// WTP system log server profile name.
	Name pulumi.StringPtrInput
	// Syslog server address type (default = IP) Valid values: `fqdn`, `ip`.
	ServerAddrType pulumi.StringPtrInput
	// FQDN of syslog server that FortiAP units send log messages to.
	ServerFqdn pulumi.StringPtrInput
	// IP address of syslog server that FortiAP units send log messages to.
	ServerIp pulumi.StringPtrInput
	// Port number of syslog server that FortiAP units send log messages to (default = 514).
	ServerPort pulumi.IntPtrInput
	// Enable/disable FortiAP units to send log messages to a syslog server (default = enable). Valid values: `enable`, `disable`.
	ServerStatus pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WirelesscontrollerSyslogprofileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerSyslogprofileArgs)(nil)).Elem()
}

type WirelesscontrollerSyslogprofileInput interface {
	pulumi.Input

	ToWirelesscontrollerSyslogprofileOutput() WirelesscontrollerSyslogprofileOutput
	ToWirelesscontrollerSyslogprofileOutputWithContext(ctx context.Context) WirelesscontrollerSyslogprofileOutput
}

func (*WirelesscontrollerSyslogprofile) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerSyslogprofile)(nil)).Elem()
}

func (i *WirelesscontrollerSyslogprofile) ToWirelesscontrollerSyslogprofileOutput() WirelesscontrollerSyslogprofileOutput {
	return i.ToWirelesscontrollerSyslogprofileOutputWithContext(context.Background())
}

func (i *WirelesscontrollerSyslogprofile) ToWirelesscontrollerSyslogprofileOutputWithContext(ctx context.Context) WirelesscontrollerSyslogprofileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerSyslogprofileOutput)
}

// WirelesscontrollerSyslogprofileArrayInput is an input type that accepts WirelesscontrollerSyslogprofileArray and WirelesscontrollerSyslogprofileArrayOutput values.
// You can construct a concrete instance of `WirelesscontrollerSyslogprofileArrayInput` via:
//
//	WirelesscontrollerSyslogprofileArray{ WirelesscontrollerSyslogprofileArgs{...} }
type WirelesscontrollerSyslogprofileArrayInput interface {
	pulumi.Input

	ToWirelesscontrollerSyslogprofileArrayOutput() WirelesscontrollerSyslogprofileArrayOutput
	ToWirelesscontrollerSyslogprofileArrayOutputWithContext(context.Context) WirelesscontrollerSyslogprofileArrayOutput
}

type WirelesscontrollerSyslogprofileArray []WirelesscontrollerSyslogprofileInput

func (WirelesscontrollerSyslogprofileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerSyslogprofile)(nil)).Elem()
}

func (i WirelesscontrollerSyslogprofileArray) ToWirelesscontrollerSyslogprofileArrayOutput() WirelesscontrollerSyslogprofileArrayOutput {
	return i.ToWirelesscontrollerSyslogprofileArrayOutputWithContext(context.Background())
}

func (i WirelesscontrollerSyslogprofileArray) ToWirelesscontrollerSyslogprofileArrayOutputWithContext(ctx context.Context) WirelesscontrollerSyslogprofileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerSyslogprofileArrayOutput)
}

// WirelesscontrollerSyslogprofileMapInput is an input type that accepts WirelesscontrollerSyslogprofileMap and WirelesscontrollerSyslogprofileMapOutput values.
// You can construct a concrete instance of `WirelesscontrollerSyslogprofileMapInput` via:
//
//	WirelesscontrollerSyslogprofileMap{ "key": WirelesscontrollerSyslogprofileArgs{...} }
type WirelesscontrollerSyslogprofileMapInput interface {
	pulumi.Input

	ToWirelesscontrollerSyslogprofileMapOutput() WirelesscontrollerSyslogprofileMapOutput
	ToWirelesscontrollerSyslogprofileMapOutputWithContext(context.Context) WirelesscontrollerSyslogprofileMapOutput
}

type WirelesscontrollerSyslogprofileMap map[string]WirelesscontrollerSyslogprofileInput

func (WirelesscontrollerSyslogprofileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerSyslogprofile)(nil)).Elem()
}

func (i WirelesscontrollerSyslogprofileMap) ToWirelesscontrollerSyslogprofileMapOutput() WirelesscontrollerSyslogprofileMapOutput {
	return i.ToWirelesscontrollerSyslogprofileMapOutputWithContext(context.Background())
}

func (i WirelesscontrollerSyslogprofileMap) ToWirelesscontrollerSyslogprofileMapOutputWithContext(ctx context.Context) WirelesscontrollerSyslogprofileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerSyslogprofileMapOutput)
}

type WirelesscontrollerSyslogprofileOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerSyslogprofileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerSyslogprofile)(nil)).Elem()
}

func (o WirelesscontrollerSyslogprofileOutput) ToWirelesscontrollerSyslogprofileOutput() WirelesscontrollerSyslogprofileOutput {
	return o
}

func (o WirelesscontrollerSyslogprofileOutput) ToWirelesscontrollerSyslogprofileOutputWithContext(ctx context.Context) WirelesscontrollerSyslogprofileOutput {
	return o
}

// Comment.
func (o WirelesscontrollerSyslogprofileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerSyslogprofile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Lowest level of log messages that FortiAP units send to this server (default = information) Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debugging`.
func (o WirelesscontrollerSyslogprofileOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerSyslogprofile) pulumi.StringOutput { return v.LogLevel }).(pulumi.StringOutput)
}

// WTP system log server profile name.
func (o WirelesscontrollerSyslogprofileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerSyslogprofile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Syslog server address type (default = IP) Valid values: `fqdn`, `ip`.
func (o WirelesscontrollerSyslogprofileOutput) ServerAddrType() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerSyslogprofile) pulumi.StringOutput { return v.ServerAddrType }).(pulumi.StringOutput)
}

// FQDN of syslog server that FortiAP units send log messages to.
func (o WirelesscontrollerSyslogprofileOutput) ServerFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerSyslogprofile) pulumi.StringOutput { return v.ServerFqdn }).(pulumi.StringOutput)
}

// IP address of syslog server that FortiAP units send log messages to.
func (o WirelesscontrollerSyslogprofileOutput) ServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerSyslogprofile) pulumi.StringOutput { return v.ServerIp }).(pulumi.StringOutput)
}

// Port number of syslog server that FortiAP units send log messages to (default = 514).
func (o WirelesscontrollerSyslogprofileOutput) ServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *WirelesscontrollerSyslogprofile) pulumi.IntOutput { return v.ServerPort }).(pulumi.IntOutput)
}

// Enable/disable FortiAP units to send log messages to a syslog server (default = enable). Valid values: `enable`, `disable`.
func (o WirelesscontrollerSyslogprofileOutput) ServerStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerSyslogprofile) pulumi.StringOutput { return v.ServerStatus }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WirelesscontrollerSyslogprofileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerSyslogprofile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WirelesscontrollerSyslogprofileArrayOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerSyslogprofileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerSyslogprofile)(nil)).Elem()
}

func (o WirelesscontrollerSyslogprofileArrayOutput) ToWirelesscontrollerSyslogprofileArrayOutput() WirelesscontrollerSyslogprofileArrayOutput {
	return o
}

func (o WirelesscontrollerSyslogprofileArrayOutput) ToWirelesscontrollerSyslogprofileArrayOutputWithContext(ctx context.Context) WirelesscontrollerSyslogprofileArrayOutput {
	return o
}

func (o WirelesscontrollerSyslogprofileArrayOutput) Index(i pulumi.IntInput) WirelesscontrollerSyslogprofileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelesscontrollerSyslogprofile {
		return vs[0].([]*WirelesscontrollerSyslogprofile)[vs[1].(int)]
	}).(WirelesscontrollerSyslogprofileOutput)
}

type WirelesscontrollerSyslogprofileMapOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerSyslogprofileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerSyslogprofile)(nil)).Elem()
}

func (o WirelesscontrollerSyslogprofileMapOutput) ToWirelesscontrollerSyslogprofileMapOutput() WirelesscontrollerSyslogprofileMapOutput {
	return o
}

func (o WirelesscontrollerSyslogprofileMapOutput) ToWirelesscontrollerSyslogprofileMapOutputWithContext(ctx context.Context) WirelesscontrollerSyslogprofileMapOutput {
	return o
}

func (o WirelesscontrollerSyslogprofileMapOutput) MapIndex(k pulumi.StringInput) WirelesscontrollerSyslogprofileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelesscontrollerSyslogprofile {
		return vs[0].(map[string]*WirelesscontrollerSyslogprofile)[vs[1].(string)]
	}).(WirelesscontrollerSyslogprofileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerSyslogprofileInput)(nil)).Elem(), &WirelesscontrollerSyslogprofile{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerSyslogprofileArrayInput)(nil)).Elem(), WirelesscontrollerSyslogprofileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerSyslogprofileMapInput)(nil)).Elem(), WirelesscontrollerSyslogprofileMap{})
	pulumi.RegisterOutputType(WirelesscontrollerSyslogprofileOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerSyslogprofileArrayOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerSyslogprofileMapOutput{})
}
