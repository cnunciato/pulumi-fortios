// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure WiFi SSID policies. Applies to FortiOS Version `>= 7.0.1`.
//
// ## Import
//
// # WirelessController SsidPolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerSsidpolicy:WirelesscontrollerSsidpolicy labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/wirelesscontrollerSsidpolicy:WirelesscontrollerSsidpolicy labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WirelesscontrollerSsidpolicy struct {
	pulumi.CustomResourceState

	// Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// VLAN interface name.
	Vlan pulumi.StringOutput `pulumi:"vlan"`
}

// NewWirelesscontrollerSsidpolicy registers a new resource with the given unique name, arguments, and options.
func NewWirelesscontrollerSsidpolicy(ctx *pulumi.Context,
	name string, args *WirelesscontrollerSsidpolicyArgs, opts ...pulumi.ResourceOption) (*WirelesscontrollerSsidpolicy, error) {
	if args == nil {
		args = &WirelesscontrollerSsidpolicyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WirelesscontrollerSsidpolicy
	err := ctx.RegisterResource("fortios:index/wirelesscontrollerSsidpolicy:WirelesscontrollerSsidpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWirelesscontrollerSsidpolicy gets an existing WirelesscontrollerSsidpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWirelesscontrollerSsidpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WirelesscontrollerSsidpolicyState, opts ...pulumi.ResourceOption) (*WirelesscontrollerSsidpolicy, error) {
	var resource WirelesscontrollerSsidpolicy
	err := ctx.ReadResource("fortios:index/wirelesscontrollerSsidpolicy:WirelesscontrollerSsidpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WirelesscontrollerSsidpolicy resources.
type wirelesscontrollerSsidpolicyState struct {
	// Description.
	Description *string `pulumi:"description"`
	// Name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VLAN interface name.
	Vlan *string `pulumi:"vlan"`
}

type WirelesscontrollerSsidpolicyState struct {
	// Description.
	Description pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VLAN interface name.
	Vlan pulumi.StringPtrInput
}

func (WirelesscontrollerSsidpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerSsidpolicyState)(nil)).Elem()
}

type wirelesscontrollerSsidpolicyArgs struct {
	// Description.
	Description *string `pulumi:"description"`
	// Name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// VLAN interface name.
	Vlan *string `pulumi:"vlan"`
}

// The set of arguments for constructing a WirelesscontrollerSsidpolicy resource.
type WirelesscontrollerSsidpolicyArgs struct {
	// Description.
	Description pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// VLAN interface name.
	Vlan pulumi.StringPtrInput
}

func (WirelesscontrollerSsidpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wirelesscontrollerSsidpolicyArgs)(nil)).Elem()
}

type WirelesscontrollerSsidpolicyInput interface {
	pulumi.Input

	ToWirelesscontrollerSsidpolicyOutput() WirelesscontrollerSsidpolicyOutput
	ToWirelesscontrollerSsidpolicyOutputWithContext(ctx context.Context) WirelesscontrollerSsidpolicyOutput
}

func (*WirelesscontrollerSsidpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerSsidpolicy)(nil)).Elem()
}

func (i *WirelesscontrollerSsidpolicy) ToWirelesscontrollerSsidpolicyOutput() WirelesscontrollerSsidpolicyOutput {
	return i.ToWirelesscontrollerSsidpolicyOutputWithContext(context.Background())
}

func (i *WirelesscontrollerSsidpolicy) ToWirelesscontrollerSsidpolicyOutputWithContext(ctx context.Context) WirelesscontrollerSsidpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerSsidpolicyOutput)
}

// WirelesscontrollerSsidpolicyArrayInput is an input type that accepts WirelesscontrollerSsidpolicyArray and WirelesscontrollerSsidpolicyArrayOutput values.
// You can construct a concrete instance of `WirelesscontrollerSsidpolicyArrayInput` via:
//
//	WirelesscontrollerSsidpolicyArray{ WirelesscontrollerSsidpolicyArgs{...} }
type WirelesscontrollerSsidpolicyArrayInput interface {
	pulumi.Input

	ToWirelesscontrollerSsidpolicyArrayOutput() WirelesscontrollerSsidpolicyArrayOutput
	ToWirelesscontrollerSsidpolicyArrayOutputWithContext(context.Context) WirelesscontrollerSsidpolicyArrayOutput
}

type WirelesscontrollerSsidpolicyArray []WirelesscontrollerSsidpolicyInput

func (WirelesscontrollerSsidpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerSsidpolicy)(nil)).Elem()
}

func (i WirelesscontrollerSsidpolicyArray) ToWirelesscontrollerSsidpolicyArrayOutput() WirelesscontrollerSsidpolicyArrayOutput {
	return i.ToWirelesscontrollerSsidpolicyArrayOutputWithContext(context.Background())
}

func (i WirelesscontrollerSsidpolicyArray) ToWirelesscontrollerSsidpolicyArrayOutputWithContext(ctx context.Context) WirelesscontrollerSsidpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerSsidpolicyArrayOutput)
}

// WirelesscontrollerSsidpolicyMapInput is an input type that accepts WirelesscontrollerSsidpolicyMap and WirelesscontrollerSsidpolicyMapOutput values.
// You can construct a concrete instance of `WirelesscontrollerSsidpolicyMapInput` via:
//
//	WirelesscontrollerSsidpolicyMap{ "key": WirelesscontrollerSsidpolicyArgs{...} }
type WirelesscontrollerSsidpolicyMapInput interface {
	pulumi.Input

	ToWirelesscontrollerSsidpolicyMapOutput() WirelesscontrollerSsidpolicyMapOutput
	ToWirelesscontrollerSsidpolicyMapOutputWithContext(context.Context) WirelesscontrollerSsidpolicyMapOutput
}

type WirelesscontrollerSsidpolicyMap map[string]WirelesscontrollerSsidpolicyInput

func (WirelesscontrollerSsidpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerSsidpolicy)(nil)).Elem()
}

func (i WirelesscontrollerSsidpolicyMap) ToWirelesscontrollerSsidpolicyMapOutput() WirelesscontrollerSsidpolicyMapOutput {
	return i.ToWirelesscontrollerSsidpolicyMapOutputWithContext(context.Background())
}

func (i WirelesscontrollerSsidpolicyMap) ToWirelesscontrollerSsidpolicyMapOutputWithContext(ctx context.Context) WirelesscontrollerSsidpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WirelesscontrollerSsidpolicyMapOutput)
}

type WirelesscontrollerSsidpolicyOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerSsidpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WirelesscontrollerSsidpolicy)(nil)).Elem()
}

func (o WirelesscontrollerSsidpolicyOutput) ToWirelesscontrollerSsidpolicyOutput() WirelesscontrollerSsidpolicyOutput {
	return o
}

func (o WirelesscontrollerSsidpolicyOutput) ToWirelesscontrollerSsidpolicyOutputWithContext(ctx context.Context) WirelesscontrollerSsidpolicyOutput {
	return o
}

// Description.
func (o WirelesscontrollerSsidpolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerSsidpolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name.
func (o WirelesscontrollerSsidpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerSsidpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WirelesscontrollerSsidpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WirelesscontrollerSsidpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// VLAN interface name.
func (o WirelesscontrollerSsidpolicyOutput) Vlan() pulumi.StringOutput {
	return o.ApplyT(func(v *WirelesscontrollerSsidpolicy) pulumi.StringOutput { return v.Vlan }).(pulumi.StringOutput)
}

type WirelesscontrollerSsidpolicyArrayOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerSsidpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WirelesscontrollerSsidpolicy)(nil)).Elem()
}

func (o WirelesscontrollerSsidpolicyArrayOutput) ToWirelesscontrollerSsidpolicyArrayOutput() WirelesscontrollerSsidpolicyArrayOutput {
	return o
}

func (o WirelesscontrollerSsidpolicyArrayOutput) ToWirelesscontrollerSsidpolicyArrayOutputWithContext(ctx context.Context) WirelesscontrollerSsidpolicyArrayOutput {
	return o
}

func (o WirelesscontrollerSsidpolicyArrayOutput) Index(i pulumi.IntInput) WirelesscontrollerSsidpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WirelesscontrollerSsidpolicy {
		return vs[0].([]*WirelesscontrollerSsidpolicy)[vs[1].(int)]
	}).(WirelesscontrollerSsidpolicyOutput)
}

type WirelesscontrollerSsidpolicyMapOutput struct{ *pulumi.OutputState }

func (WirelesscontrollerSsidpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WirelesscontrollerSsidpolicy)(nil)).Elem()
}

func (o WirelesscontrollerSsidpolicyMapOutput) ToWirelesscontrollerSsidpolicyMapOutput() WirelesscontrollerSsidpolicyMapOutput {
	return o
}

func (o WirelesscontrollerSsidpolicyMapOutput) ToWirelesscontrollerSsidpolicyMapOutputWithContext(ctx context.Context) WirelesscontrollerSsidpolicyMapOutput {
	return o
}

func (o WirelesscontrollerSsidpolicyMapOutput) MapIndex(k pulumi.StringInput) WirelesscontrollerSsidpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WirelesscontrollerSsidpolicy {
		return vs[0].(map[string]*WirelesscontrollerSsidpolicy)[vs[1].(string)]
	}).(WirelesscontrollerSsidpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerSsidpolicyInput)(nil)).Elem(), &WirelesscontrollerSsidpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerSsidpolicyArrayInput)(nil)).Elem(), WirelesscontrollerSsidpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WirelesscontrollerSsidpolicyMapInput)(nil)).Elem(), WirelesscontrollerSsidpolicyMap{})
	pulumi.RegisterOutputType(WirelesscontrollerSsidpolicyOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerSsidpolicyArrayOutput{})
	pulumi.RegisterOutputType(WirelesscontrollerSsidpolicyMapOutput{})
}
