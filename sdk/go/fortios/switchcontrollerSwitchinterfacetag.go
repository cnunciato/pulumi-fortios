// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure switch object tags.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSwitchcontrollerSwitchinterfacetag(ctx, "trname", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # SwitchController SwitchInterfaceTag can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerSwitchinterfacetag:SwitchcontrollerSwitchinterfacetag labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerSwitchinterfacetag:SwitchcontrollerSwitchinterfacetag labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerSwitchinterfacetag struct {
	pulumi.CustomResourceState

	// Tag name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchcontrollerSwitchinterfacetag registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerSwitchinterfacetag(ctx *pulumi.Context,
	name string, args *SwitchcontrollerSwitchinterfacetagArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerSwitchinterfacetag, error) {
	if args == nil {
		args = &SwitchcontrollerSwitchinterfacetagArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerSwitchinterfacetag
	err := ctx.RegisterResource("fortios:index/switchcontrollerSwitchinterfacetag:SwitchcontrollerSwitchinterfacetag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerSwitchinterfacetag gets an existing SwitchcontrollerSwitchinterfacetag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerSwitchinterfacetag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerSwitchinterfacetagState, opts ...pulumi.ResourceOption) (*SwitchcontrollerSwitchinterfacetag, error) {
	var resource SwitchcontrollerSwitchinterfacetag
	err := ctx.ReadResource("fortios:index/switchcontrollerSwitchinterfacetag:SwitchcontrollerSwitchinterfacetag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerSwitchinterfacetag resources.
type switchcontrollerSwitchinterfacetagState struct {
	// Tag name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchcontrollerSwitchinterfacetagState struct {
	// Tag name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerSwitchinterfacetagState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerSwitchinterfacetagState)(nil)).Elem()
}

type switchcontrollerSwitchinterfacetagArgs struct {
	// Tag name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchcontrollerSwitchinterfacetag resource.
type SwitchcontrollerSwitchinterfacetagArgs struct {
	// Tag name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerSwitchinterfacetagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerSwitchinterfacetagArgs)(nil)).Elem()
}

type SwitchcontrollerSwitchinterfacetagInput interface {
	pulumi.Input

	ToSwitchcontrollerSwitchinterfacetagOutput() SwitchcontrollerSwitchinterfacetagOutput
	ToSwitchcontrollerSwitchinterfacetagOutputWithContext(ctx context.Context) SwitchcontrollerSwitchinterfacetagOutput
}

func (*SwitchcontrollerSwitchinterfacetag) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerSwitchinterfacetag)(nil)).Elem()
}

func (i *SwitchcontrollerSwitchinterfacetag) ToSwitchcontrollerSwitchinterfacetagOutput() SwitchcontrollerSwitchinterfacetagOutput {
	return i.ToSwitchcontrollerSwitchinterfacetagOutputWithContext(context.Background())
}

func (i *SwitchcontrollerSwitchinterfacetag) ToSwitchcontrollerSwitchinterfacetagOutputWithContext(ctx context.Context) SwitchcontrollerSwitchinterfacetagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerSwitchinterfacetagOutput)
}

// SwitchcontrollerSwitchinterfacetagArrayInput is an input type that accepts SwitchcontrollerSwitchinterfacetagArray and SwitchcontrollerSwitchinterfacetagArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerSwitchinterfacetagArrayInput` via:
//
//	SwitchcontrollerSwitchinterfacetagArray{ SwitchcontrollerSwitchinterfacetagArgs{...} }
type SwitchcontrollerSwitchinterfacetagArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerSwitchinterfacetagArrayOutput() SwitchcontrollerSwitchinterfacetagArrayOutput
	ToSwitchcontrollerSwitchinterfacetagArrayOutputWithContext(context.Context) SwitchcontrollerSwitchinterfacetagArrayOutput
}

type SwitchcontrollerSwitchinterfacetagArray []SwitchcontrollerSwitchinterfacetagInput

func (SwitchcontrollerSwitchinterfacetagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerSwitchinterfacetag)(nil)).Elem()
}

func (i SwitchcontrollerSwitchinterfacetagArray) ToSwitchcontrollerSwitchinterfacetagArrayOutput() SwitchcontrollerSwitchinterfacetagArrayOutput {
	return i.ToSwitchcontrollerSwitchinterfacetagArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerSwitchinterfacetagArray) ToSwitchcontrollerSwitchinterfacetagArrayOutputWithContext(ctx context.Context) SwitchcontrollerSwitchinterfacetagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerSwitchinterfacetagArrayOutput)
}

// SwitchcontrollerSwitchinterfacetagMapInput is an input type that accepts SwitchcontrollerSwitchinterfacetagMap and SwitchcontrollerSwitchinterfacetagMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerSwitchinterfacetagMapInput` via:
//
//	SwitchcontrollerSwitchinterfacetagMap{ "key": SwitchcontrollerSwitchinterfacetagArgs{...} }
type SwitchcontrollerSwitchinterfacetagMapInput interface {
	pulumi.Input

	ToSwitchcontrollerSwitchinterfacetagMapOutput() SwitchcontrollerSwitchinterfacetagMapOutput
	ToSwitchcontrollerSwitchinterfacetagMapOutputWithContext(context.Context) SwitchcontrollerSwitchinterfacetagMapOutput
}

type SwitchcontrollerSwitchinterfacetagMap map[string]SwitchcontrollerSwitchinterfacetagInput

func (SwitchcontrollerSwitchinterfacetagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerSwitchinterfacetag)(nil)).Elem()
}

func (i SwitchcontrollerSwitchinterfacetagMap) ToSwitchcontrollerSwitchinterfacetagMapOutput() SwitchcontrollerSwitchinterfacetagMapOutput {
	return i.ToSwitchcontrollerSwitchinterfacetagMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerSwitchinterfacetagMap) ToSwitchcontrollerSwitchinterfacetagMapOutputWithContext(ctx context.Context) SwitchcontrollerSwitchinterfacetagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerSwitchinterfacetagMapOutput)
}

type SwitchcontrollerSwitchinterfacetagOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerSwitchinterfacetagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerSwitchinterfacetag)(nil)).Elem()
}

func (o SwitchcontrollerSwitchinterfacetagOutput) ToSwitchcontrollerSwitchinterfacetagOutput() SwitchcontrollerSwitchinterfacetagOutput {
	return o
}

func (o SwitchcontrollerSwitchinterfacetagOutput) ToSwitchcontrollerSwitchinterfacetagOutputWithContext(ctx context.Context) SwitchcontrollerSwitchinterfacetagOutput {
	return o
}

// Tag name.
func (o SwitchcontrollerSwitchinterfacetagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerSwitchinterfacetag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerSwitchinterfacetagOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerSwitchinterfacetag) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchcontrollerSwitchinterfacetagArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerSwitchinterfacetagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerSwitchinterfacetag)(nil)).Elem()
}

func (o SwitchcontrollerSwitchinterfacetagArrayOutput) ToSwitchcontrollerSwitchinterfacetagArrayOutput() SwitchcontrollerSwitchinterfacetagArrayOutput {
	return o
}

func (o SwitchcontrollerSwitchinterfacetagArrayOutput) ToSwitchcontrollerSwitchinterfacetagArrayOutputWithContext(ctx context.Context) SwitchcontrollerSwitchinterfacetagArrayOutput {
	return o
}

func (o SwitchcontrollerSwitchinterfacetagArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerSwitchinterfacetagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerSwitchinterfacetag {
		return vs[0].([]*SwitchcontrollerSwitchinterfacetag)[vs[1].(int)]
	}).(SwitchcontrollerSwitchinterfacetagOutput)
}

type SwitchcontrollerSwitchinterfacetagMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerSwitchinterfacetagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerSwitchinterfacetag)(nil)).Elem()
}

func (o SwitchcontrollerSwitchinterfacetagMapOutput) ToSwitchcontrollerSwitchinterfacetagMapOutput() SwitchcontrollerSwitchinterfacetagMapOutput {
	return o
}

func (o SwitchcontrollerSwitchinterfacetagMapOutput) ToSwitchcontrollerSwitchinterfacetagMapOutputWithContext(ctx context.Context) SwitchcontrollerSwitchinterfacetagMapOutput {
	return o
}

func (o SwitchcontrollerSwitchinterfacetagMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerSwitchinterfacetagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerSwitchinterfacetag {
		return vs[0].(map[string]*SwitchcontrollerSwitchinterfacetag)[vs[1].(string)]
	}).(SwitchcontrollerSwitchinterfacetagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerSwitchinterfacetagInput)(nil)).Elem(), &SwitchcontrollerSwitchinterfacetag{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerSwitchinterfacetagArrayInput)(nil)).Elem(), SwitchcontrollerSwitchinterfacetagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerSwitchinterfacetagMapInput)(nil)).Elem(), SwitchcontrollerSwitchinterfacetagMap{})
	pulumi.RegisterOutputType(SwitchcontrollerSwitchinterfacetagOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerSwitchinterfacetagArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerSwitchinterfacetagMapOutput{})
}
