// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure consolidated IPv4/IPv6 policies. Applies to FortiOS Version `<= 6.4.0`.
//
// ## Import
//
// # FirewallConsolidated Policy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/firewallconsolidatedPolicy:FirewallconsolidatedPolicy labelname {{policyid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/firewallconsolidatedPolicy:FirewallconsolidatedPolicy labelname {{policyid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FirewallconsolidatedPolicy struct {
	pulumi.CustomResourceState

	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories FirewallconsolidatedPolicyAppCategoryArrayOutput `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups FirewallconsolidatedPolicyAppGroupArrayOutput `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList pulumi.StringOutput `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications FirewallconsolidatedPolicyApplicationArrayOutput `pulumi:"applications"`
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringOutput `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringOutput `pulumi:"avProfile"`
	// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt pulumi.StringOutput `pulumi:"captivePortalExempt"`
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringOutput `pulumi:"cifsProfile"`
	// Comment.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward pulumi.StringOutput `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
	DiffservReverse pulumi.StringOutput `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward pulumi.StringOutput `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev pulumi.StringOutput `pulumi:"diffservcodeRev"`
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringOutput `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringOutput `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s FirewallconsolidatedPolicyDstaddr4ArrayOutput `pulumi:"dstaddr4s"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallconsolidatedPolicyDstaddr6ArrayOutput `pulumi:"dstaddr6s"`
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringOutput `pulumi:"dstaddrNegate"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs FirewallconsolidatedPolicyDstintfArrayOutput `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringOutput `pulumi:"emailfilterProfile"`
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringOutput `pulumi:"fixedport"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups FirewallconsolidatedPolicyFssoGroupArrayOutput `pulumi:"fssoGroups"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups FirewallconsolidatedPolicyGroupArrayOutput `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect pulumi.StringOutput `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringOutput `pulumi:"icapProfile"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound pulumi.StringOutput `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode pulumi.StringOutput `pulumi:"inspectionMode"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService pulumi.StringOutput `pulumi:"internetService"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups FirewallconsolidatedPolicyInternetServiceCustomGroupArrayOutput `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms FirewallconsolidatedPolicyInternetServiceCustomArrayOutput `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups FirewallconsolidatedPolicyInternetServiceGroupArrayOutput `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds FirewallconsolidatedPolicyInternetServiceIdArrayOutput `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames FirewallconsolidatedPolicyInternetServiceNameArrayOutput `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringOutput `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringOutput `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups FirewallconsolidatedPolicyInternetServiceSrcCustomGroupArrayOutput `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms FirewallconsolidatedPolicyInternetServiceSrcCustomArrayOutput `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups FirewallconsolidatedPolicyInternetServiceSrcGroupArrayOutput `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds FirewallconsolidatedPolicyInternetServiceSrcIdArrayOutput `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames FirewallconsolidatedPolicyInternetServiceSrcNameArrayOutput `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringOutput `pulumi:"internetServiceSrcNegate"`
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringOutput `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringOutput `pulumi:"ipsSensor"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringOutput `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringOutput `pulumi:"logtrafficStart"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringOutput `pulumi:"nat"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound pulumi.StringOutput `pulumi:"outbound"`
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringOutput `pulumi:"perIpShaper"`
	// Policy ID.
	Policyid pulumi.IntOutput `pulumi:"policyid"`
	// IPv4 pool names. The structure of `poolname4` block is documented below.
	Poolname4s FirewallconsolidatedPolicyPoolname4ArrayOutput `pulumi:"poolname4s"`
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s FirewallconsolidatedPolicyPoolname6ArrayOutput `pulumi:"poolname6s"`
	// Name of profile group.
	ProfileGroup pulumi.StringOutput `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringOutput `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringOutput `pulumi:"profileType"`
	// Schedule name.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringOutput `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services FirewallconsolidatedPolicyServiceArrayOutput `pulumi:"services"`
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl pulumi.IntOutput `pulumi:"sessionTtl"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringOutput `pulumi:"spamfilterProfile"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s FirewallconsolidatedPolicySrcaddr4ArrayOutput `pulumi:"srcaddr4s"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallconsolidatedPolicySrcaddr6ArrayOutput `pulumi:"srcaddr6s"`
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringOutput `pulumi:"srcaddrNegate"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs FirewallconsolidatedPolicySrcintfArrayOutput `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringOutput `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect pulumi.StringOutput `pulumi:"sshPolicyRedirect"`
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringOutput `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver pulumi.IntOutput `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender pulumi.IntOutput `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper pulumi.StringOutput `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringOutput `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories FirewallconsolidatedPolicyUrlCategoryArrayOutput `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users FirewallconsolidatedPolicyUserArrayOutput `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringOutput `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringOutput `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel pulumi.StringOutput `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringOutput `pulumi:"wafProfile"`
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt pulumi.StringOutput `pulumi:"wanopt"`
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection pulumi.StringOutput `pulumi:"wanoptDetection"`
	// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt pulumi.StringOutput `pulumi:"wanoptPassiveOpt"`
	// WAN optimization peer.
	WanoptPeer pulumi.StringOutput `pulumi:"wanoptPeer"`
	// WAN optimization profile.
	WanoptProfile pulumi.StringOutput `pulumi:"wanoptProfile"`
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache pulumi.StringOutput `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps pulumi.StringOutput `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringOutput `pulumi:"webfilterProfile"`
	// Webproxy forward server name.
	WebproxyForwardServer pulumi.StringOutput `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile pulumi.StringOutput `pulumi:"webproxyProfile"`
}

// NewFirewallconsolidatedPolicy registers a new resource with the given unique name, arguments, and options.
func NewFirewallconsolidatedPolicy(ctx *pulumi.Context,
	name string, args *FirewallconsolidatedPolicyArgs, opts ...pulumi.ResourceOption) (*FirewallconsolidatedPolicy, error) {
	if args == nil {
		args = &FirewallconsolidatedPolicyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallconsolidatedPolicy
	err := ctx.RegisterResource("fortios:index/firewallconsolidatedPolicy:FirewallconsolidatedPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallconsolidatedPolicy gets an existing FirewallconsolidatedPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallconsolidatedPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallconsolidatedPolicyState, opts ...pulumi.ResourceOption) (*FirewallconsolidatedPolicy, error) {
	var resource FirewallconsolidatedPolicy
	err := ctx.ReadResource("fortios:index/firewallconsolidatedPolicy:FirewallconsolidatedPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallconsolidatedPolicy resources.
type firewallconsolidatedPolicyState struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action *string `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []FirewallconsolidatedPolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []FirewallconsolidatedPolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []FirewallconsolidatedPolicyApplication `pulumi:"applications"`
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt *string `pulumi:"captivePortalExempt"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward *string `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
	DiffservReverse *string `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward *string `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev *string `pulumi:"diffservcodeRev"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s []FirewallconsolidatedPolicyDstaddr4 `pulumi:"dstaddr4s"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []FirewallconsolidatedPolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate *string `pulumi:"dstaddrNegate"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []FirewallconsolidatedPolicyDstintf `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport *string `pulumi:"fixedport"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []FirewallconsolidatedPolicyFssoGroup `pulumi:"fssoGroups"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []FirewallconsolidatedPolicyGroup `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect *string `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound *string `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode *string `pulumi:"inspectionMode"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService *string `pulumi:"internetService"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []FirewallconsolidatedPolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []FirewallconsolidatedPolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []FirewallconsolidatedPolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []FirewallconsolidatedPolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []FirewallconsolidatedPolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate *string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []FirewallconsolidatedPolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []FirewallconsolidatedPolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []FirewallconsolidatedPolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []FirewallconsolidatedPolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []FirewallconsolidatedPolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate *string `pulumi:"internetServiceSrcNegate"`
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat *string `pulumi:"nat"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound *string `pulumi:"outbound"`
	// Per-IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// IPv4 pool names. The structure of `poolname4` block is documented below.
	Poolname4s []FirewallconsolidatedPolicyPoolname4 `pulumi:"poolname4s"`
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s []FirewallconsolidatedPolicyPoolname6 `pulumi:"poolname6s"`
	// Name of profile group.
	ProfileGroup *string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType *string `pulumi:"profileType"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate *string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []FirewallconsolidatedPolicyService `pulumi:"services"`
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl *int `pulumi:"sessionTtl"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s []FirewallconsolidatedPolicySrcaddr4 `pulumi:"srcaddr4s"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []FirewallconsolidatedPolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate *string `pulumi:"srcaddrNegate"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []FirewallconsolidatedPolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect *string `pulumi:"sshPolicyRedirect"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver *int `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender *int `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse *string `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []FirewallconsolidatedPolicyUrlCategory `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []FirewallconsolidatedPolicyUser `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus *string `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VoIP profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel *string `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile *string `pulumi:"wafProfile"`
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt *string `pulumi:"wanopt"`
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection *string `pulumi:"wanoptDetection"`
	// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt *string `pulumi:"wanoptPassiveOpt"`
	// WAN optimization peer.
	WanoptPeer *string `pulumi:"wanoptPeer"`
	// WAN optimization profile.
	WanoptProfile *string `pulumi:"wanoptProfile"`
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache *string `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps *string `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Webproxy forward server name.
	WebproxyForwardServer *string `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile *string `pulumi:"webproxyProfile"`
}

type FirewallconsolidatedPolicyState struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action pulumi.StringPtrInput
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories FirewallconsolidatedPolicyAppCategoryArrayInput
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups FirewallconsolidatedPolicyAppGroupArrayInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Application ID list. The structure of `application` block is documented below.
	Applications FirewallconsolidatedPolicyApplicationArrayInput
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward pulumi.StringPtrInput
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
	DiffservReverse pulumi.StringPtrInput
	// Change packet's DiffServ to this value.
	DiffservcodeForward pulumi.StringPtrInput
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s FirewallconsolidatedPolicyDstaddr4ArrayInput
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallconsolidatedPolicyDstaddr6ArrayInput
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringPtrInput
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs FirewallconsolidatedPolicyDstintfArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringPtrInput
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups FirewallconsolidatedPolicyFssoGroupArrayInput
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups FirewallconsolidatedPolicyGroupArrayInput
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect pulumi.StringPtrInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound pulumi.StringPtrInput
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode pulumi.StringPtrInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService pulumi.StringPtrInput
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups FirewallconsolidatedPolicyInternetServiceCustomGroupArrayInput
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms FirewallconsolidatedPolicyInternetServiceCustomArrayInput
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups FirewallconsolidatedPolicyInternetServiceGroupArrayInput
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds FirewallconsolidatedPolicyInternetServiceIdArrayInput
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames FirewallconsolidatedPolicyInternetServiceNameArrayInput
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringPtrInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringPtrInput
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups FirewallconsolidatedPolicyInternetServiceSrcCustomGroupArrayInput
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms FirewallconsolidatedPolicyInternetServiceSrcCustomArrayInput
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups FirewallconsolidatedPolicyInternetServiceSrcGroupArrayInput
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds FirewallconsolidatedPolicyInternetServiceSrcIdArrayInput
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames FirewallconsolidatedPolicyInternetServiceSrcNameArrayInput
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringPtrInput
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// IPv4 pool names. The structure of `poolname4` block is documented below.
	Poolname4s FirewallconsolidatedPolicyPoolname4ArrayInput
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s FirewallconsolidatedPolicyPoolname6ArrayInput
	// Name of profile group.
	ProfileGroup pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringPtrInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringPtrInput
	// Service and service group names. The structure of `service` block is documented below.
	Services FirewallconsolidatedPolicyServiceArrayInput
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl pulumi.IntPtrInput
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s FirewallconsolidatedPolicySrcaddr4ArrayInput
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallconsolidatedPolicySrcaddr6ArrayInput
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringPtrInput
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs FirewallconsolidatedPolicySrcintfArrayInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect pulumi.StringPtrInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver pulumi.IntPtrInput
	// Sender TCP maximum segment size (MSS).
	TcpMssSender pulumi.IntPtrInput
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrInput
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrInput
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories FirewallconsolidatedPolicyUrlCategoryArrayInput
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users FirewallconsolidatedPolicyUserArrayInput
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrInput
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel pulumi.StringPtrInput
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringPtrInput
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt pulumi.StringPtrInput
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection pulumi.StringPtrInput
	// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt pulumi.StringPtrInput
	// WAN optimization peer.
	WanoptPeer pulumi.StringPtrInput
	// WAN optimization profile.
	WanoptProfile pulumi.StringPtrInput
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache pulumi.StringPtrInput
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Webproxy forward server name.
	WebproxyForwardServer pulumi.StringPtrInput
	// Webproxy profile name.
	WebproxyProfile pulumi.StringPtrInput
}

func (FirewallconsolidatedPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallconsolidatedPolicyState)(nil)).Elem()
}

type firewallconsolidatedPolicyArgs struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action *string `pulumi:"action"`
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories []FirewallconsolidatedPolicyAppCategory `pulumi:"appCategories"`
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups []FirewallconsolidatedPolicyAppGroup `pulumi:"appGroups"`
	// Name of an existing Application list.
	ApplicationList *string `pulumi:"applicationList"`
	// Application ID list. The structure of `application` block is documented below.
	Applications []FirewallconsolidatedPolicyApplication `pulumi:"applications"`
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload *string `pulumi:"autoAsicOffload"`
	// Name of an existing Antivirus profile.
	AvProfile *string `pulumi:"avProfile"`
	// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt *string `pulumi:"captivePortalExempt"`
	// Name of an existing CIFS profile.
	CifsProfile *string `pulumi:"cifsProfile"`
	// Comment.
	Comments *string `pulumi:"comments"`
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward *string `pulumi:"diffservForward"`
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
	DiffservReverse *string `pulumi:"diffservReverse"`
	// Change packet's DiffServ to this value.
	DiffservcodeForward *string `pulumi:"diffservcodeForward"`
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev *string `pulumi:"diffservcodeRev"`
	// Name of an existing DLP sensor.
	DlpSensor *string `pulumi:"dlpSensor"`
	// Name of an existing DNS filter profile.
	DnsfilterProfile *string `pulumi:"dnsfilterProfile"`
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s []FirewallconsolidatedPolicyDstaddr4 `pulumi:"dstaddr4s"`
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s []FirewallconsolidatedPolicyDstaddr6 `pulumi:"dstaddr6s"`
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate *string `pulumi:"dstaddrNegate"`
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs []FirewallconsolidatedPolicyDstintf `pulumi:"dstintfs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name of an existing email filter profile.
	EmailfilterProfile *string `pulumi:"emailfilterProfile"`
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport *string `pulumi:"fixedport"`
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups []FirewallconsolidatedPolicyFssoGroup `pulumi:"fssoGroups"`
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups []FirewallconsolidatedPolicyGroup `pulumi:"groups"`
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect *string `pulumi:"httpPolicyRedirect"`
	// Name of an existing ICAP profile.
	IcapProfile *string `pulumi:"icapProfile"`
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound *string `pulumi:"inbound"`
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode *string `pulumi:"inspectionMode"`
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService *string `pulumi:"internetService"`
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups []FirewallconsolidatedPolicyInternetServiceCustomGroup `pulumi:"internetServiceCustomGroups"`
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms []FirewallconsolidatedPolicyInternetServiceCustom `pulumi:"internetServiceCustoms"`
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups []FirewallconsolidatedPolicyInternetServiceGroup `pulumi:"internetServiceGroups"`
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds []FirewallconsolidatedPolicyInternetServiceId `pulumi:"internetServiceIds"`
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames []FirewallconsolidatedPolicyInternetServiceName `pulumi:"internetServiceNames"`
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate *string `pulumi:"internetServiceNegate"`
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc *string `pulumi:"internetServiceSrc"`
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups []FirewallconsolidatedPolicyInternetServiceSrcCustomGroup `pulumi:"internetServiceSrcCustomGroups"`
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms []FirewallconsolidatedPolicyInternetServiceSrcCustom `pulumi:"internetServiceSrcCustoms"`
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups []FirewallconsolidatedPolicyInternetServiceSrcGroup `pulumi:"internetServiceSrcGroups"`
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds []FirewallconsolidatedPolicyInternetServiceSrcId `pulumi:"internetServiceSrcIds"`
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames []FirewallconsolidatedPolicyInternetServiceSrcName `pulumi:"internetServiceSrcNames"`
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate *string `pulumi:"internetServiceSrcNegate"`
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool *string `pulumi:"ippool"`
	// Name of an existing IPS sensor.
	IpsSensor *string `pulumi:"ipsSensor"`
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic *string `pulumi:"logtraffic"`
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart *string `pulumi:"logtrafficStart"`
	// Policy name.
	Name *string `pulumi:"name"`
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat *string `pulumi:"nat"`
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound *string `pulumi:"outbound"`
	// Per-IP traffic shaper.
	PerIpShaper *string `pulumi:"perIpShaper"`
	// Policy ID.
	Policyid *int `pulumi:"policyid"`
	// IPv4 pool names. The structure of `poolname4` block is documented below.
	Poolname4s []FirewallconsolidatedPolicyPoolname4 `pulumi:"poolname4s"`
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s []FirewallconsolidatedPolicyPoolname6 `pulumi:"poolname6s"`
	// Name of profile group.
	ProfileGroup *string `pulumi:"profileGroup"`
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions *string `pulumi:"profileProtocolOptions"`
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType *string `pulumi:"profileType"`
	// Schedule name.
	Schedule *string `pulumi:"schedule"`
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate *string `pulumi:"serviceNegate"`
	// Service and service group names. The structure of `service` block is documented below.
	Services []FirewallconsolidatedPolicyService `pulumi:"services"`
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl *int `pulumi:"sessionTtl"`
	// Name of an existing Spam filter profile.
	SpamfilterProfile *string `pulumi:"spamfilterProfile"`
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s []FirewallconsolidatedPolicySrcaddr4 `pulumi:"srcaddr4s"`
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s []FirewallconsolidatedPolicySrcaddr6 `pulumi:"srcaddr6s"`
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate *string `pulumi:"srcaddrNegate"`
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs []FirewallconsolidatedPolicySrcintf `pulumi:"srcintfs"`
	// Name of an existing SSH filter profile.
	SshFilterProfile *string `pulumi:"sshFilterProfile"`
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect *string `pulumi:"sshPolicyRedirect"`
	// Name of an existing SSL SSH profile.
	SslSshProfile *string `pulumi:"sslSshProfile"`
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver *int `pulumi:"tcpMssReceiver"`
	// Sender TCP maximum segment size (MSS).
	TcpMssSender *int `pulumi:"tcpMssSender"`
	// Traffic shaper.
	TrafficShaper *string `pulumi:"trafficShaper"`
	// Reverse traffic shaper.
	TrafficShaperReverse *string `pulumi:"trafficShaperReverse"`
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories []FirewallconsolidatedPolicyUrlCategory `pulumi:"urlCategories"`
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users []FirewallconsolidatedPolicyUser `pulumi:"users"`
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus *string `pulumi:"utmStatus"`
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid *string `pulumi:"uuid"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Name of an existing VoIP profile.
	VoipProfile *string `pulumi:"voipProfile"`
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel *string `pulumi:"vpntunnel"`
	// Name of an existing Web application firewall profile.
	WafProfile *string `pulumi:"wafProfile"`
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt *string `pulumi:"wanopt"`
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection *string `pulumi:"wanoptDetection"`
	// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt *string `pulumi:"wanoptPassiveOpt"`
	// WAN optimization peer.
	WanoptPeer *string `pulumi:"wanoptPeer"`
	// WAN optimization profile.
	WanoptProfile *string `pulumi:"wanoptProfile"`
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache *string `pulumi:"webcache"`
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps *string `pulumi:"webcacheHttps"`
	// Name of an existing Web filter profile.
	WebfilterProfile *string `pulumi:"webfilterProfile"`
	// Webproxy forward server name.
	WebproxyForwardServer *string `pulumi:"webproxyForwardServer"`
	// Webproxy profile name.
	WebproxyProfile *string `pulumi:"webproxyProfile"`
}

// The set of arguments for constructing a FirewallconsolidatedPolicy resource.
type FirewallconsolidatedPolicyArgs struct {
	// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
	Action pulumi.StringPtrInput
	// Application category ID list. The structure of `appCategory` block is documented below.
	AppCategories FirewallconsolidatedPolicyAppCategoryArrayInput
	// Application group names. The structure of `appGroup` block is documented below.
	AppGroups FirewallconsolidatedPolicyAppGroupArrayInput
	// Name of an existing Application list.
	ApplicationList pulumi.StringPtrInput
	// Application ID list. The structure of `application` block is documented below.
	Applications FirewallconsolidatedPolicyApplicationArrayInput
	// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
	AutoAsicOffload pulumi.StringPtrInput
	// Name of an existing Antivirus profile.
	AvProfile pulumi.StringPtrInput
	// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
	CaptivePortalExempt pulumi.StringPtrInput
	// Name of an existing CIFS profile.
	CifsProfile pulumi.StringPtrInput
	// Comment.
	Comments pulumi.StringPtrInput
	// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
	DiffservForward pulumi.StringPtrInput
	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
	DiffservReverse pulumi.StringPtrInput
	// Change packet's DiffServ to this value.
	DiffservcodeForward pulumi.StringPtrInput
	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev pulumi.StringPtrInput
	// Name of an existing DLP sensor.
	DlpSensor pulumi.StringPtrInput
	// Name of an existing DNS filter profile.
	DnsfilterProfile pulumi.StringPtrInput
	// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
	Dstaddr4s FirewallconsolidatedPolicyDstaddr4ArrayInput
	// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
	Dstaddr6s FirewallconsolidatedPolicyDstaddr6ArrayInput
	// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
	DstaddrNegate pulumi.StringPtrInput
	// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
	Dstintfs FirewallconsolidatedPolicyDstintfArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Name of an existing email filter profile.
	EmailfilterProfile pulumi.StringPtrInput
	// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
	Fixedport pulumi.StringPtrInput
	// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
	FssoGroups FirewallconsolidatedPolicyFssoGroupArrayInput
	// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
	Groups FirewallconsolidatedPolicyGroupArrayInput
	// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
	HttpPolicyRedirect pulumi.StringPtrInput
	// Name of an existing ICAP profile.
	IcapProfile pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
	Inbound pulumi.StringPtrInput
	// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
	InspectionMode pulumi.StringPtrInput
	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
	InternetService pulumi.StringPtrInput
	// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
	InternetServiceCustomGroups FirewallconsolidatedPolicyInternetServiceCustomGroupArrayInput
	// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
	InternetServiceCustoms FirewallconsolidatedPolicyInternetServiceCustomArrayInput
	// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
	InternetServiceGroups FirewallconsolidatedPolicyInternetServiceGroupArrayInput
	// Internet Service ID. The structure of `internetServiceId` block is documented below.
	InternetServiceIds FirewallconsolidatedPolicyInternetServiceIdArrayInput
	// Internet Service name. The structure of `internetServiceName` block is documented below.
	InternetServiceNames FirewallconsolidatedPolicyInternetServiceNameArrayInput
	// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceNegate pulumi.StringPtrInput
	// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
	InternetServiceSrc pulumi.StringPtrInput
	// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
	InternetServiceSrcCustomGroups FirewallconsolidatedPolicyInternetServiceSrcCustomGroupArrayInput
	// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
	InternetServiceSrcCustoms FirewallconsolidatedPolicyInternetServiceSrcCustomArrayInput
	// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
	InternetServiceSrcGroups FirewallconsolidatedPolicyInternetServiceSrcGroupArrayInput
	// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
	InternetServiceSrcIds FirewallconsolidatedPolicyInternetServiceSrcIdArrayInput
	// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
	InternetServiceSrcNames FirewallconsolidatedPolicyInternetServiceSrcNameArrayInput
	// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
	InternetServiceSrcNegate pulumi.StringPtrInput
	// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
	Ippool pulumi.StringPtrInput
	// Name of an existing IPS sensor.
	IpsSensor pulumi.StringPtrInput
	// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
	Logtraffic pulumi.StringPtrInput
	// Record logs when a session starts. Valid values: `enable`, `disable`.
	LogtrafficStart pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// Enable/disable source NAT. Valid values: `enable`, `disable`.
	Nat pulumi.StringPtrInput
	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
	Outbound pulumi.StringPtrInput
	// Per-IP traffic shaper.
	PerIpShaper pulumi.StringPtrInput
	// Policy ID.
	Policyid pulumi.IntPtrInput
	// IPv4 pool names. The structure of `poolname4` block is documented below.
	Poolname4s FirewallconsolidatedPolicyPoolname4ArrayInput
	// IPv6 pool names. The structure of `poolname6` block is documented below.
	Poolname6s FirewallconsolidatedPolicyPoolname6ArrayInput
	// Name of profile group.
	ProfileGroup pulumi.StringPtrInput
	// Name of an existing Protocol options profile.
	ProfileProtocolOptions pulumi.StringPtrInput
	// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
	ProfileType pulumi.StringPtrInput
	// Schedule name.
	Schedule pulumi.StringPtrInput
	// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
	ServiceNegate pulumi.StringPtrInput
	// Service and service group names. The structure of `service` block is documented below.
	Services FirewallconsolidatedPolicyServiceArrayInput
	// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
	SessionTtl pulumi.IntPtrInput
	// Name of an existing Spam filter profile.
	SpamfilterProfile pulumi.StringPtrInput
	// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
	Srcaddr4s FirewallconsolidatedPolicySrcaddr4ArrayInput
	// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
	Srcaddr6s FirewallconsolidatedPolicySrcaddr6ArrayInput
	// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
	SrcaddrNegate pulumi.StringPtrInput
	// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
	Srcintfs FirewallconsolidatedPolicySrcintfArrayInput
	// Name of an existing SSH filter profile.
	SshFilterProfile pulumi.StringPtrInput
	// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
	SshPolicyRedirect pulumi.StringPtrInput
	// Name of an existing SSL SSH profile.
	SslSshProfile pulumi.StringPtrInput
	// Enable or disable this policy. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver pulumi.IntPtrInput
	// Sender TCP maximum segment size (MSS).
	TcpMssSender pulumi.IntPtrInput
	// Traffic shaper.
	TrafficShaper pulumi.StringPtrInput
	// Reverse traffic shaper.
	TrafficShaperReverse pulumi.StringPtrInput
	// URL category ID list. The structure of `urlCategory` block is documented below.
	UrlCategories FirewallconsolidatedPolicyUrlCategoryArrayInput
	// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
	Users FirewallconsolidatedPolicyUserArrayInput
	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
	UtmStatus pulumi.StringPtrInput
	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Name of an existing VoIP profile.
	VoipProfile pulumi.StringPtrInput
	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel pulumi.StringPtrInput
	// Name of an existing Web application firewall profile.
	WafProfile pulumi.StringPtrInput
	// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
	Wanopt pulumi.StringPtrInput
	// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
	WanoptDetection pulumi.StringPtrInput
	// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
	WanoptPassiveOpt pulumi.StringPtrInput
	// WAN optimization peer.
	WanoptPeer pulumi.StringPtrInput
	// WAN optimization profile.
	WanoptProfile pulumi.StringPtrInput
	// Enable/disable web cache. Valid values: `enable`, `disable`.
	Webcache pulumi.StringPtrInput
	// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
	WebcacheHttps pulumi.StringPtrInput
	// Name of an existing Web filter profile.
	WebfilterProfile pulumi.StringPtrInput
	// Webproxy forward server name.
	WebproxyForwardServer pulumi.StringPtrInput
	// Webproxy profile name.
	WebproxyProfile pulumi.StringPtrInput
}

func (FirewallconsolidatedPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallconsolidatedPolicyArgs)(nil)).Elem()
}

type FirewallconsolidatedPolicyInput interface {
	pulumi.Input

	ToFirewallconsolidatedPolicyOutput() FirewallconsolidatedPolicyOutput
	ToFirewallconsolidatedPolicyOutputWithContext(ctx context.Context) FirewallconsolidatedPolicyOutput
}

func (*FirewallconsolidatedPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallconsolidatedPolicy)(nil)).Elem()
}

func (i *FirewallconsolidatedPolicy) ToFirewallconsolidatedPolicyOutput() FirewallconsolidatedPolicyOutput {
	return i.ToFirewallconsolidatedPolicyOutputWithContext(context.Background())
}

func (i *FirewallconsolidatedPolicy) ToFirewallconsolidatedPolicyOutputWithContext(ctx context.Context) FirewallconsolidatedPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallconsolidatedPolicyOutput)
}

// FirewallconsolidatedPolicyArrayInput is an input type that accepts FirewallconsolidatedPolicyArray and FirewallconsolidatedPolicyArrayOutput values.
// You can construct a concrete instance of `FirewallconsolidatedPolicyArrayInput` via:
//
//	FirewallconsolidatedPolicyArray{ FirewallconsolidatedPolicyArgs{...} }
type FirewallconsolidatedPolicyArrayInput interface {
	pulumi.Input

	ToFirewallconsolidatedPolicyArrayOutput() FirewallconsolidatedPolicyArrayOutput
	ToFirewallconsolidatedPolicyArrayOutputWithContext(context.Context) FirewallconsolidatedPolicyArrayOutput
}

type FirewallconsolidatedPolicyArray []FirewallconsolidatedPolicyInput

func (FirewallconsolidatedPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallconsolidatedPolicy)(nil)).Elem()
}

func (i FirewallconsolidatedPolicyArray) ToFirewallconsolidatedPolicyArrayOutput() FirewallconsolidatedPolicyArrayOutput {
	return i.ToFirewallconsolidatedPolicyArrayOutputWithContext(context.Background())
}

func (i FirewallconsolidatedPolicyArray) ToFirewallconsolidatedPolicyArrayOutputWithContext(ctx context.Context) FirewallconsolidatedPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallconsolidatedPolicyArrayOutput)
}

// FirewallconsolidatedPolicyMapInput is an input type that accepts FirewallconsolidatedPolicyMap and FirewallconsolidatedPolicyMapOutput values.
// You can construct a concrete instance of `FirewallconsolidatedPolicyMapInput` via:
//
//	FirewallconsolidatedPolicyMap{ "key": FirewallconsolidatedPolicyArgs{...} }
type FirewallconsolidatedPolicyMapInput interface {
	pulumi.Input

	ToFirewallconsolidatedPolicyMapOutput() FirewallconsolidatedPolicyMapOutput
	ToFirewallconsolidatedPolicyMapOutputWithContext(context.Context) FirewallconsolidatedPolicyMapOutput
}

type FirewallconsolidatedPolicyMap map[string]FirewallconsolidatedPolicyInput

func (FirewallconsolidatedPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallconsolidatedPolicy)(nil)).Elem()
}

func (i FirewallconsolidatedPolicyMap) ToFirewallconsolidatedPolicyMapOutput() FirewallconsolidatedPolicyMapOutput {
	return i.ToFirewallconsolidatedPolicyMapOutputWithContext(context.Background())
}

func (i FirewallconsolidatedPolicyMap) ToFirewallconsolidatedPolicyMapOutputWithContext(ctx context.Context) FirewallconsolidatedPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallconsolidatedPolicyMapOutput)
}

type FirewallconsolidatedPolicyOutput struct{ *pulumi.OutputState }

func (FirewallconsolidatedPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallconsolidatedPolicy)(nil)).Elem()
}

func (o FirewallconsolidatedPolicyOutput) ToFirewallconsolidatedPolicyOutput() FirewallconsolidatedPolicyOutput {
	return o
}

func (o FirewallconsolidatedPolicyOutput) ToFirewallconsolidatedPolicyOutputWithContext(ctx context.Context) FirewallconsolidatedPolicyOutput {
	return o
}

// Policy action (allow/deny/ipsec). Valid values: `accept`, `deny`, `ipsec`.
func (o FirewallconsolidatedPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Application category ID list. The structure of `appCategory` block is documented below.
func (o FirewallconsolidatedPolicyOutput) AppCategories() FirewallconsolidatedPolicyAppCategoryArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyAppCategoryArrayOutput {
		return v.AppCategories
	}).(FirewallconsolidatedPolicyAppCategoryArrayOutput)
}

// Application group names. The structure of `appGroup` block is documented below.
func (o FirewallconsolidatedPolicyOutput) AppGroups() FirewallconsolidatedPolicyAppGroupArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyAppGroupArrayOutput { return v.AppGroups }).(FirewallconsolidatedPolicyAppGroupArrayOutput)
}

// Name of an existing Application list.
func (o FirewallconsolidatedPolicyOutput) ApplicationList() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.ApplicationList }).(pulumi.StringOutput)
}

// Application ID list. The structure of `application` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Applications() FirewallconsolidatedPolicyApplicationArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyApplicationArrayOutput {
		return v.Applications
	}).(FirewallconsolidatedPolicyApplicationArrayOutput)
}

// Enable/disable policy traffic ASIC offloading. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) AutoAsicOffload() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.AutoAsicOffload }).(pulumi.StringOutput)
}

// Name of an existing Antivirus profile.
func (o FirewallconsolidatedPolicyOutput) AvProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.AvProfile }).(pulumi.StringOutput)
}

// Enable exemption of some users from the captive portal. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) CaptivePortalExempt() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.CaptivePortalExempt }).(pulumi.StringOutput)
}

// Name of an existing CIFS profile.
func (o FirewallconsolidatedPolicyOutput) CifsProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.CifsProfile }).(pulumi.StringOutput)
}

// Comment.
func (o FirewallconsolidatedPolicyOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Enable to change packet's DiffServ values to the specified diffservcode-forward value. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) DiffservForward() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.DiffservForward }).(pulumi.StringOutput)
}

// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.  Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) DiffservReverse() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.DiffservReverse }).(pulumi.StringOutput)
}

// Change packet's DiffServ to this value.
func (o FirewallconsolidatedPolicyOutput) DiffservcodeForward() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.DiffservcodeForward }).(pulumi.StringOutput)
}

// Change packet's reverse (reply) DiffServ to this value.
func (o FirewallconsolidatedPolicyOutput) DiffservcodeRev() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.DiffservcodeRev }).(pulumi.StringOutput)
}

// Name of an existing DLP sensor.
func (o FirewallconsolidatedPolicyOutput) DlpSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.DlpSensor }).(pulumi.StringOutput)
}

// Name of an existing DNS filter profile.
func (o FirewallconsolidatedPolicyOutput) DnsfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.DnsfilterProfile }).(pulumi.StringOutput)
}

// Destination IPv4 address name and address group names. The structure of `dstaddr4` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Dstaddr4s() FirewallconsolidatedPolicyDstaddr4ArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyDstaddr4ArrayOutput { return v.Dstaddr4s }).(FirewallconsolidatedPolicyDstaddr4ArrayOutput)
}

// Destination IPv6 address name and address group names. The structure of `dstaddr6` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Dstaddr6s() FirewallconsolidatedPolicyDstaddr6ArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyDstaddr6ArrayOutput { return v.Dstaddr6s }).(FirewallconsolidatedPolicyDstaddr6ArrayOutput)
}

// When enabled dstaddr specifies what the destination address must NOT be. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) DstaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.DstaddrNegate }).(pulumi.StringOutput)
}

// Outgoing (egress) interface. The structure of `dstintf` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Dstintfs() FirewallconsolidatedPolicyDstintfArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyDstintfArrayOutput { return v.Dstintfs }).(FirewallconsolidatedPolicyDstintfArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o FirewallconsolidatedPolicyOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Name of an existing email filter profile.
func (o FirewallconsolidatedPolicyOutput) EmailfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.EmailfilterProfile }).(pulumi.StringOutput)
}

// Enable to prevent source NAT from changing a session's source port. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) Fixedport() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Fixedport }).(pulumi.StringOutput)
}

// Names of FSSO groups. The structure of `fssoGroups` block is documented below.
func (o FirewallconsolidatedPolicyOutput) FssoGroups() FirewallconsolidatedPolicyFssoGroupArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyFssoGroupArrayOutput {
		return v.FssoGroups
	}).(FirewallconsolidatedPolicyFssoGroupArrayOutput)
}

// Names of user groups that can authenticate with this policy. The structure of `groups` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Groups() FirewallconsolidatedPolicyGroupArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyGroupArrayOutput { return v.Groups }).(FirewallconsolidatedPolicyGroupArrayOutput)
}

// Redirect HTTP(S) traffic to matching transparent web proxy policy. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) HttpPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.HttpPolicyRedirect }).(pulumi.StringOutput)
}

// Name of an existing ICAP profile.
func (o FirewallconsolidatedPolicyOutput) IcapProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.IcapProfile }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) Inbound() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Inbound }).(pulumi.StringOutput)
}

// Policy inspection mode (Flow/proxy). Default is Flow mode. Valid values: `proxy`, `flow`.
func (o FirewallconsolidatedPolicyOutput) InspectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.InspectionMode }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.  Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) InternetService() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.InternetService }).(pulumi.StringOutput)
}

// Custom Internet Service group name. The structure of `internetServiceCustomGroup` block is documented below.
func (o FirewallconsolidatedPolicyOutput) InternetServiceCustomGroups() FirewallconsolidatedPolicyInternetServiceCustomGroupArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyInternetServiceCustomGroupArrayOutput {
		return v.InternetServiceCustomGroups
	}).(FirewallconsolidatedPolicyInternetServiceCustomGroupArrayOutput)
}

// Custom Internet Service name. The structure of `internetServiceCustom` block is documented below.
func (o FirewallconsolidatedPolicyOutput) InternetServiceCustoms() FirewallconsolidatedPolicyInternetServiceCustomArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyInternetServiceCustomArrayOutput {
		return v.InternetServiceCustoms
	}).(FirewallconsolidatedPolicyInternetServiceCustomArrayOutput)
}

// Internet Service group name. The structure of `internetServiceGroup` block is documented below.
func (o FirewallconsolidatedPolicyOutput) InternetServiceGroups() FirewallconsolidatedPolicyInternetServiceGroupArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyInternetServiceGroupArrayOutput {
		return v.InternetServiceGroups
	}).(FirewallconsolidatedPolicyInternetServiceGroupArrayOutput)
}

// Internet Service ID. The structure of `internetServiceId` block is documented below.
func (o FirewallconsolidatedPolicyOutput) InternetServiceIds() FirewallconsolidatedPolicyInternetServiceIdArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyInternetServiceIdArrayOutput {
		return v.InternetServiceIds
	}).(FirewallconsolidatedPolicyInternetServiceIdArrayOutput)
}

// Internet Service name. The structure of `internetServiceName` block is documented below.
func (o FirewallconsolidatedPolicyOutput) InternetServiceNames() FirewallconsolidatedPolicyInternetServiceNameArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyInternetServiceNameArrayOutput {
		return v.InternetServiceNames
	}).(FirewallconsolidatedPolicyInternetServiceNameArrayOutput)
}

// When enabled internet-service specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) InternetServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.InternetServiceNegate }).(pulumi.StringOutput)
}

// Enable/disable use of Internet Services in source for this policy. If enabled, source address is not used.  Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) InternetServiceSrc() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.InternetServiceSrc }).(pulumi.StringOutput)
}

// Custom Internet Service source group name. The structure of `internetServiceSrcCustomGroup` block is documented below.
func (o FirewallconsolidatedPolicyOutput) InternetServiceSrcCustomGroups() FirewallconsolidatedPolicyInternetServiceSrcCustomGroupArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyInternetServiceSrcCustomGroupArrayOutput {
		return v.InternetServiceSrcCustomGroups
	}).(FirewallconsolidatedPolicyInternetServiceSrcCustomGroupArrayOutput)
}

// Custom Internet Service source name. The structure of `internetServiceSrcCustom` block is documented below.
func (o FirewallconsolidatedPolicyOutput) InternetServiceSrcCustoms() FirewallconsolidatedPolicyInternetServiceSrcCustomArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyInternetServiceSrcCustomArrayOutput {
		return v.InternetServiceSrcCustoms
	}).(FirewallconsolidatedPolicyInternetServiceSrcCustomArrayOutput)
}

// Internet Service source group name. The structure of `internetServiceSrcGroup` block is documented below.
func (o FirewallconsolidatedPolicyOutput) InternetServiceSrcGroups() FirewallconsolidatedPolicyInternetServiceSrcGroupArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyInternetServiceSrcGroupArrayOutput {
		return v.InternetServiceSrcGroups
	}).(FirewallconsolidatedPolicyInternetServiceSrcGroupArrayOutput)
}

// Internet Service source ID. The structure of `internetServiceSrcId` block is documented below.
func (o FirewallconsolidatedPolicyOutput) InternetServiceSrcIds() FirewallconsolidatedPolicyInternetServiceSrcIdArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyInternetServiceSrcIdArrayOutput {
		return v.InternetServiceSrcIds
	}).(FirewallconsolidatedPolicyInternetServiceSrcIdArrayOutput)
}

// Internet Service source name. The structure of `internetServiceSrcName` block is documented below.
func (o FirewallconsolidatedPolicyOutput) InternetServiceSrcNames() FirewallconsolidatedPolicyInternetServiceSrcNameArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyInternetServiceSrcNameArrayOutput {
		return v.InternetServiceSrcNames
	}).(FirewallconsolidatedPolicyInternetServiceSrcNameArrayOutput)
}

// When enabled internet-service-src specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) InternetServiceSrcNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.InternetServiceSrcNegate }).(pulumi.StringOutput)
}

// Enable to use IP Pools for source NAT. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) Ippool() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Ippool }).(pulumi.StringOutput)
}

// Name of an existing IPS sensor.
func (o FirewallconsolidatedPolicyOutput) IpsSensor() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.IpsSensor }).(pulumi.StringOutput)
}

// Enable or disable logging. Log all sessions or security profile sessions. Valid values: `all`, `utm`, `disable`.
func (o FirewallconsolidatedPolicyOutput) Logtraffic() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Logtraffic }).(pulumi.StringOutput)
}

// Record logs when a session starts. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) LogtrafficStart() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.LogtrafficStart }).(pulumi.StringOutput)
}

// Policy name.
func (o FirewallconsolidatedPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable source NAT. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) Nat() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Nat }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) Outbound() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Outbound }).(pulumi.StringOutput)
}

// Per-IP traffic shaper.
func (o FirewallconsolidatedPolicyOutput) PerIpShaper() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.PerIpShaper }).(pulumi.StringOutput)
}

// Policy ID.
func (o FirewallconsolidatedPolicyOutput) Policyid() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.IntOutput { return v.Policyid }).(pulumi.IntOutput)
}

// IPv4 pool names. The structure of `poolname4` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Poolname4s() FirewallconsolidatedPolicyPoolname4ArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyPoolname4ArrayOutput {
		return v.Poolname4s
	}).(FirewallconsolidatedPolicyPoolname4ArrayOutput)
}

// IPv6 pool names. The structure of `poolname6` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Poolname6s() FirewallconsolidatedPolicyPoolname6ArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyPoolname6ArrayOutput {
		return v.Poolname6s
	}).(FirewallconsolidatedPolicyPoolname6ArrayOutput)
}

// Name of profile group.
func (o FirewallconsolidatedPolicyOutput) ProfileGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.ProfileGroup }).(pulumi.StringOutput)
}

// Name of an existing Protocol options profile.
func (o FirewallconsolidatedPolicyOutput) ProfileProtocolOptions() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.ProfileProtocolOptions }).(pulumi.StringOutput)
}

// Determine whether the firewall policy allows security profile groups or single profiles only. Valid values: `single`, `group`.
func (o FirewallconsolidatedPolicyOutput) ProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.ProfileType }).(pulumi.StringOutput)
}

// Schedule name.
func (o FirewallconsolidatedPolicyOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

// When enabled service specifies what the service must NOT be. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) ServiceNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.ServiceNegate }).(pulumi.StringOutput)
}

// Service and service group names. The structure of `service` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Services() FirewallconsolidatedPolicyServiceArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyServiceArrayOutput { return v.Services }).(FirewallconsolidatedPolicyServiceArrayOutput)
}

// TTL in seconds for sessions accepted by this policy (0 means use the system default session TTL).
func (o FirewallconsolidatedPolicyOutput) SessionTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.IntOutput { return v.SessionTtl }).(pulumi.IntOutput)
}

// Name of an existing Spam filter profile.
func (o FirewallconsolidatedPolicyOutput) SpamfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.SpamfilterProfile }).(pulumi.StringOutput)
}

// Source IPv4 address name and address group names. The structure of `srcaddr4` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Srcaddr4s() FirewallconsolidatedPolicySrcaddr4ArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicySrcaddr4ArrayOutput { return v.Srcaddr4s }).(FirewallconsolidatedPolicySrcaddr4ArrayOutput)
}

// Source IPv6 address name and address group names. The structure of `srcaddr6` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Srcaddr6s() FirewallconsolidatedPolicySrcaddr6ArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicySrcaddr6ArrayOutput { return v.Srcaddr6s }).(FirewallconsolidatedPolicySrcaddr6ArrayOutput)
}

// When enabled srcaddr specifies what the source address must NOT be. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) SrcaddrNegate() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.SrcaddrNegate }).(pulumi.StringOutput)
}

// Incoming (ingress) interface. The structure of `srcintf` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Srcintfs() FirewallconsolidatedPolicySrcintfArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicySrcintfArrayOutput { return v.Srcintfs }).(FirewallconsolidatedPolicySrcintfArrayOutput)
}

// Name of an existing SSH filter profile.
func (o FirewallconsolidatedPolicyOutput) SshFilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.SshFilterProfile }).(pulumi.StringOutput)
}

// Redirect SSH traffic to matching transparent proxy policy. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) SshPolicyRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.SshPolicyRedirect }).(pulumi.StringOutput)
}

// Name of an existing SSL SSH profile.
func (o FirewallconsolidatedPolicyOutput) SslSshProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.SslSshProfile }).(pulumi.StringOutput)
}

// Enable or disable this policy. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Receiver TCP maximum segment size (MSS).
func (o FirewallconsolidatedPolicyOutput) TcpMssReceiver() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.IntOutput { return v.TcpMssReceiver }).(pulumi.IntOutput)
}

// Sender TCP maximum segment size (MSS).
func (o FirewallconsolidatedPolicyOutput) TcpMssSender() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.IntOutput { return v.TcpMssSender }).(pulumi.IntOutput)
}

// Traffic shaper.
func (o FirewallconsolidatedPolicyOutput) TrafficShaper() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.TrafficShaper }).(pulumi.StringOutput)
}

// Reverse traffic shaper.
func (o FirewallconsolidatedPolicyOutput) TrafficShaperReverse() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.TrafficShaperReverse }).(pulumi.StringOutput)
}

// URL category ID list. The structure of `urlCategory` block is documented below.
func (o FirewallconsolidatedPolicyOutput) UrlCategories() FirewallconsolidatedPolicyUrlCategoryArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyUrlCategoryArrayOutput {
		return v.UrlCategories
	}).(FirewallconsolidatedPolicyUrlCategoryArrayOutput)
}

// Names of individual users that can authenticate with this policy. The structure of `users` block is documented below.
func (o FirewallconsolidatedPolicyOutput) Users() FirewallconsolidatedPolicyUserArrayOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) FirewallconsolidatedPolicyUserArrayOutput { return v.Users }).(FirewallconsolidatedPolicyUserArrayOutput)
}

// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) UtmStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.UtmStatus }).(pulumi.StringOutput)
}

// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
func (o FirewallconsolidatedPolicyOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FirewallconsolidatedPolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Name of an existing VoIP profile.
func (o FirewallconsolidatedPolicyOutput) VoipProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.VoipProfile }).(pulumi.StringOutput)
}

// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
func (o FirewallconsolidatedPolicyOutput) Vpntunnel() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Vpntunnel }).(pulumi.StringOutput)
}

// Name of an existing Web application firewall profile.
func (o FirewallconsolidatedPolicyOutput) WafProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.WafProfile }).(pulumi.StringOutput)
}

// Enable/disable WAN optimization. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) Wanopt() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Wanopt }).(pulumi.StringOutput)
}

// WAN optimization auto-detection mode. Valid values: `active`, `passive`, `off`.
func (o FirewallconsolidatedPolicyOutput) WanoptDetection() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.WanoptDetection }).(pulumi.StringOutput)
}

// WAN optimization passive mode options. This option decides what IP address will be used to connect to server. Valid values: `default`, `transparent`, `non-transparent`.
func (o FirewallconsolidatedPolicyOutput) WanoptPassiveOpt() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.WanoptPassiveOpt }).(pulumi.StringOutput)
}

// WAN optimization peer.
func (o FirewallconsolidatedPolicyOutput) WanoptPeer() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.WanoptPeer }).(pulumi.StringOutput)
}

// WAN optimization profile.
func (o FirewallconsolidatedPolicyOutput) WanoptProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.WanoptProfile }).(pulumi.StringOutput)
}

// Enable/disable web cache. Valid values: `enable`, `disable`.
func (o FirewallconsolidatedPolicyOutput) Webcache() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.Webcache }).(pulumi.StringOutput)
}

// Enable/disable web cache for HTTPS. Valid values: `disable`, `enable`.
func (o FirewallconsolidatedPolicyOutput) WebcacheHttps() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.WebcacheHttps }).(pulumi.StringOutput)
}

// Name of an existing Web filter profile.
func (o FirewallconsolidatedPolicyOutput) WebfilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.WebfilterProfile }).(pulumi.StringOutput)
}

// Webproxy forward server name.
func (o FirewallconsolidatedPolicyOutput) WebproxyForwardServer() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.WebproxyForwardServer }).(pulumi.StringOutput)
}

// Webproxy profile name.
func (o FirewallconsolidatedPolicyOutput) WebproxyProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallconsolidatedPolicy) pulumi.StringOutput { return v.WebproxyProfile }).(pulumi.StringOutput)
}

type FirewallconsolidatedPolicyArrayOutput struct{ *pulumi.OutputState }

func (FirewallconsolidatedPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallconsolidatedPolicy)(nil)).Elem()
}

func (o FirewallconsolidatedPolicyArrayOutput) ToFirewallconsolidatedPolicyArrayOutput() FirewallconsolidatedPolicyArrayOutput {
	return o
}

func (o FirewallconsolidatedPolicyArrayOutput) ToFirewallconsolidatedPolicyArrayOutputWithContext(ctx context.Context) FirewallconsolidatedPolicyArrayOutput {
	return o
}

func (o FirewallconsolidatedPolicyArrayOutput) Index(i pulumi.IntInput) FirewallconsolidatedPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallconsolidatedPolicy {
		return vs[0].([]*FirewallconsolidatedPolicy)[vs[1].(int)]
	}).(FirewallconsolidatedPolicyOutput)
}

type FirewallconsolidatedPolicyMapOutput struct{ *pulumi.OutputState }

func (FirewallconsolidatedPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallconsolidatedPolicy)(nil)).Elem()
}

func (o FirewallconsolidatedPolicyMapOutput) ToFirewallconsolidatedPolicyMapOutput() FirewallconsolidatedPolicyMapOutput {
	return o
}

func (o FirewallconsolidatedPolicyMapOutput) ToFirewallconsolidatedPolicyMapOutputWithContext(ctx context.Context) FirewallconsolidatedPolicyMapOutput {
	return o
}

func (o FirewallconsolidatedPolicyMapOutput) MapIndex(k pulumi.StringInput) FirewallconsolidatedPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallconsolidatedPolicy {
		return vs[0].(map[string]*FirewallconsolidatedPolicy)[vs[1].(string)]
	}).(FirewallconsolidatedPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallconsolidatedPolicyInput)(nil)).Elem(), &FirewallconsolidatedPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallconsolidatedPolicyArrayInput)(nil)).Elem(), FirewallconsolidatedPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallconsolidatedPolicyMapInput)(nil)).Elem(), FirewallconsolidatedPolicyMap{})
	pulumi.RegisterOutputType(FirewallconsolidatedPolicyOutput{})
	pulumi.RegisterOutputType(FirewallconsolidatedPolicyArrayOutput{})
	pulumi.RegisterOutputType(FirewallconsolidatedPolicyMapOutput{})
}
