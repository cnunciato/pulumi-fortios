// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to add a VDOM license for FortiOS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemLicenseVdom(ctx, "test2", &fortios.SystemLicenseVdomArgs{
//				License: pulumi.String("license"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SystemLicenseVdom struct {
	pulumi.CustomResourceState

	// Registration code.
	License pulumi.StringOutput `pulumi:"license"`
}

// NewSystemLicenseVdom registers a new resource with the given unique name, arguments, and options.
func NewSystemLicenseVdom(ctx *pulumi.Context,
	name string, args *SystemLicenseVdomArgs, opts ...pulumi.ResourceOption) (*SystemLicenseVdom, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.License == nil {
		return nil, errors.New("invalid value for required argument 'License'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemLicenseVdom
	err := ctx.RegisterResource("fortios:index/systemLicenseVdom:SystemLicenseVdom", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemLicenseVdom gets an existing SystemLicenseVdom resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemLicenseVdom(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemLicenseVdomState, opts ...pulumi.ResourceOption) (*SystemLicenseVdom, error) {
	var resource SystemLicenseVdom
	err := ctx.ReadResource("fortios:index/systemLicenseVdom:SystemLicenseVdom", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemLicenseVdom resources.
type systemLicenseVdomState struct {
	// Registration code.
	License *string `pulumi:"license"`
}

type SystemLicenseVdomState struct {
	// Registration code.
	License pulumi.StringPtrInput
}

func (SystemLicenseVdomState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLicenseVdomState)(nil)).Elem()
}

type systemLicenseVdomArgs struct {
	// Registration code.
	License string `pulumi:"license"`
}

// The set of arguments for constructing a SystemLicenseVdom resource.
type SystemLicenseVdomArgs struct {
	// Registration code.
	License pulumi.StringInput
}

func (SystemLicenseVdomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLicenseVdomArgs)(nil)).Elem()
}

type SystemLicenseVdomInput interface {
	pulumi.Input

	ToSystemLicenseVdomOutput() SystemLicenseVdomOutput
	ToSystemLicenseVdomOutputWithContext(ctx context.Context) SystemLicenseVdomOutput
}

func (*SystemLicenseVdom) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLicenseVdom)(nil)).Elem()
}

func (i *SystemLicenseVdom) ToSystemLicenseVdomOutput() SystemLicenseVdomOutput {
	return i.ToSystemLicenseVdomOutputWithContext(context.Background())
}

func (i *SystemLicenseVdom) ToSystemLicenseVdomOutputWithContext(ctx context.Context) SystemLicenseVdomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVdomOutput)
}

// SystemLicenseVdomArrayInput is an input type that accepts SystemLicenseVdomArray and SystemLicenseVdomArrayOutput values.
// You can construct a concrete instance of `SystemLicenseVdomArrayInput` via:
//
//	SystemLicenseVdomArray{ SystemLicenseVdomArgs{...} }
type SystemLicenseVdomArrayInput interface {
	pulumi.Input

	ToSystemLicenseVdomArrayOutput() SystemLicenseVdomArrayOutput
	ToSystemLicenseVdomArrayOutputWithContext(context.Context) SystemLicenseVdomArrayOutput
}

type SystemLicenseVdomArray []SystemLicenseVdomInput

func (SystemLicenseVdomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLicenseVdom)(nil)).Elem()
}

func (i SystemLicenseVdomArray) ToSystemLicenseVdomArrayOutput() SystemLicenseVdomArrayOutput {
	return i.ToSystemLicenseVdomArrayOutputWithContext(context.Background())
}

func (i SystemLicenseVdomArray) ToSystemLicenseVdomArrayOutputWithContext(ctx context.Context) SystemLicenseVdomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVdomArrayOutput)
}

// SystemLicenseVdomMapInput is an input type that accepts SystemLicenseVdomMap and SystemLicenseVdomMapOutput values.
// You can construct a concrete instance of `SystemLicenseVdomMapInput` via:
//
//	SystemLicenseVdomMap{ "key": SystemLicenseVdomArgs{...} }
type SystemLicenseVdomMapInput interface {
	pulumi.Input

	ToSystemLicenseVdomMapOutput() SystemLicenseVdomMapOutput
	ToSystemLicenseVdomMapOutputWithContext(context.Context) SystemLicenseVdomMapOutput
}

type SystemLicenseVdomMap map[string]SystemLicenseVdomInput

func (SystemLicenseVdomMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLicenseVdom)(nil)).Elem()
}

func (i SystemLicenseVdomMap) ToSystemLicenseVdomMapOutput() SystemLicenseVdomMapOutput {
	return i.ToSystemLicenseVdomMapOutputWithContext(context.Background())
}

func (i SystemLicenseVdomMap) ToSystemLicenseVdomMapOutputWithContext(ctx context.Context) SystemLicenseVdomMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLicenseVdomMapOutput)
}

type SystemLicenseVdomOutput struct{ *pulumi.OutputState }

func (SystemLicenseVdomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLicenseVdom)(nil)).Elem()
}

func (o SystemLicenseVdomOutput) ToSystemLicenseVdomOutput() SystemLicenseVdomOutput {
	return o
}

func (o SystemLicenseVdomOutput) ToSystemLicenseVdomOutputWithContext(ctx context.Context) SystemLicenseVdomOutput {
	return o
}

// Registration code.
func (o SystemLicenseVdomOutput) License() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLicenseVdom) pulumi.StringOutput { return v.License }).(pulumi.StringOutput)
}

type SystemLicenseVdomArrayOutput struct{ *pulumi.OutputState }

func (SystemLicenseVdomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLicenseVdom)(nil)).Elem()
}

func (o SystemLicenseVdomArrayOutput) ToSystemLicenseVdomArrayOutput() SystemLicenseVdomArrayOutput {
	return o
}

func (o SystemLicenseVdomArrayOutput) ToSystemLicenseVdomArrayOutputWithContext(ctx context.Context) SystemLicenseVdomArrayOutput {
	return o
}

func (o SystemLicenseVdomArrayOutput) Index(i pulumi.IntInput) SystemLicenseVdomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemLicenseVdom {
		return vs[0].([]*SystemLicenseVdom)[vs[1].(int)]
	}).(SystemLicenseVdomOutput)
}

type SystemLicenseVdomMapOutput struct{ *pulumi.OutputState }

func (SystemLicenseVdomMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLicenseVdom)(nil)).Elem()
}

func (o SystemLicenseVdomMapOutput) ToSystemLicenseVdomMapOutput() SystemLicenseVdomMapOutput {
	return o
}

func (o SystemLicenseVdomMapOutput) ToSystemLicenseVdomMapOutputWithContext(ctx context.Context) SystemLicenseVdomMapOutput {
	return o
}

func (o SystemLicenseVdomMapOutput) MapIndex(k pulumi.StringInput) SystemLicenseVdomOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemLicenseVdom {
		return vs[0].(map[string]*SystemLicenseVdom)[vs[1].(string)]
	}).(SystemLicenseVdomOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseVdomInput)(nil)).Elem(), &SystemLicenseVdom{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseVdomArrayInput)(nil)).Elem(), SystemLicenseVdomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLicenseVdomMapInput)(nil)).Elem(), SystemLicenseVdomMap{})
	pulumi.RegisterOutputType(SystemLicenseVdomOutput{})
	pulumi.RegisterOutputType(SystemLicenseVdomArrayOutput{})
	pulumi.RegisterOutputType(SystemLicenseVdomMapOutput{})
}
