// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure integrated NAC settings for FortiSwitch. Applies to FortiOS Version `6.4.0,6.4.1,6.4.2,6.4.10,7.0.0`.
//
// ## Import
//
// # SwitchController NacSettings can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerNacsettings:SwitchcontrollerNacsettings labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerNacsettings:SwitchcontrollerNacsettings labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerNacsettings struct {
	pulumi.CustomResourceState

	// Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
	AutoAuth pulumi.StringOutput `pulumi:"autoAuth"`
	// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
	BounceNacPort pulumi.StringOutput `pulumi:"bounceNacPort"`
	// Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
	InactiveTimer pulumi.IntOutput `pulumi:"inactiveTimer"`
	// Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
	LinkDownFlush pulumi.StringOutput `pulumi:"linkDownFlush"`
	// Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// NAC settings name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Default NAC Onboarding VLAN when NAC devices are discovered.
	OnboardingVlan pulumi.StringOutput `pulumi:"onboardingVlan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchcontrollerNacsettings registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerNacsettings(ctx *pulumi.Context,
	name string, args *SwitchcontrollerNacsettingsArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerNacsettings, error) {
	if args == nil {
		args = &SwitchcontrollerNacsettingsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerNacsettings
	err := ctx.RegisterResource("fortios:index/switchcontrollerNacsettings:SwitchcontrollerNacsettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerNacsettings gets an existing SwitchcontrollerNacsettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerNacsettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerNacsettingsState, opts ...pulumi.ResourceOption) (*SwitchcontrollerNacsettings, error) {
	var resource SwitchcontrollerNacsettings
	err := ctx.ReadResource("fortios:index/switchcontrollerNacsettings:SwitchcontrollerNacsettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerNacsettings resources.
type switchcontrollerNacsettingsState struct {
	// Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
	AutoAuth *string `pulumi:"autoAuth"`
	// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
	BounceNacPort *string `pulumi:"bounceNacPort"`
	// Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
	InactiveTimer *int `pulumi:"inactiveTimer"`
	// Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
	LinkDownFlush *string `pulumi:"linkDownFlush"`
	// Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
	Mode *string `pulumi:"mode"`
	// NAC settings name.
	Name *string `pulumi:"name"`
	// Default NAC Onboarding VLAN when NAC devices are discovered.
	OnboardingVlan *string `pulumi:"onboardingVlan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchcontrollerNacsettingsState struct {
	// Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
	AutoAuth pulumi.StringPtrInput
	// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
	BounceNacPort pulumi.StringPtrInput
	// Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
	InactiveTimer pulumi.IntPtrInput
	// Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
	LinkDownFlush pulumi.StringPtrInput
	// Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
	Mode pulumi.StringPtrInput
	// NAC settings name.
	Name pulumi.StringPtrInput
	// Default NAC Onboarding VLAN when NAC devices are discovered.
	OnboardingVlan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerNacsettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerNacsettingsState)(nil)).Elem()
}

type switchcontrollerNacsettingsArgs struct {
	// Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
	AutoAuth *string `pulumi:"autoAuth"`
	// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
	BounceNacPort *string `pulumi:"bounceNacPort"`
	// Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
	InactiveTimer *int `pulumi:"inactiveTimer"`
	// Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
	LinkDownFlush *string `pulumi:"linkDownFlush"`
	// Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
	Mode *string `pulumi:"mode"`
	// NAC settings name.
	Name *string `pulumi:"name"`
	// Default NAC Onboarding VLAN when NAC devices are discovered.
	OnboardingVlan *string `pulumi:"onboardingVlan"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchcontrollerNacsettings resource.
type SwitchcontrollerNacsettingsArgs struct {
	// Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
	AutoAuth pulumi.StringPtrInput
	// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
	BounceNacPort pulumi.StringPtrInput
	// Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
	InactiveTimer pulumi.IntPtrInput
	// Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
	LinkDownFlush pulumi.StringPtrInput
	// Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
	Mode pulumi.StringPtrInput
	// NAC settings name.
	Name pulumi.StringPtrInput
	// Default NAC Onboarding VLAN when NAC devices are discovered.
	OnboardingVlan pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerNacsettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerNacsettingsArgs)(nil)).Elem()
}

type SwitchcontrollerNacsettingsInput interface {
	pulumi.Input

	ToSwitchcontrollerNacsettingsOutput() SwitchcontrollerNacsettingsOutput
	ToSwitchcontrollerNacsettingsOutputWithContext(ctx context.Context) SwitchcontrollerNacsettingsOutput
}

func (*SwitchcontrollerNacsettings) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerNacsettings)(nil)).Elem()
}

func (i *SwitchcontrollerNacsettings) ToSwitchcontrollerNacsettingsOutput() SwitchcontrollerNacsettingsOutput {
	return i.ToSwitchcontrollerNacsettingsOutputWithContext(context.Background())
}

func (i *SwitchcontrollerNacsettings) ToSwitchcontrollerNacsettingsOutputWithContext(ctx context.Context) SwitchcontrollerNacsettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerNacsettingsOutput)
}

// SwitchcontrollerNacsettingsArrayInput is an input type that accepts SwitchcontrollerNacsettingsArray and SwitchcontrollerNacsettingsArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerNacsettingsArrayInput` via:
//
//	SwitchcontrollerNacsettingsArray{ SwitchcontrollerNacsettingsArgs{...} }
type SwitchcontrollerNacsettingsArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerNacsettingsArrayOutput() SwitchcontrollerNacsettingsArrayOutput
	ToSwitchcontrollerNacsettingsArrayOutputWithContext(context.Context) SwitchcontrollerNacsettingsArrayOutput
}

type SwitchcontrollerNacsettingsArray []SwitchcontrollerNacsettingsInput

func (SwitchcontrollerNacsettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerNacsettings)(nil)).Elem()
}

func (i SwitchcontrollerNacsettingsArray) ToSwitchcontrollerNacsettingsArrayOutput() SwitchcontrollerNacsettingsArrayOutput {
	return i.ToSwitchcontrollerNacsettingsArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerNacsettingsArray) ToSwitchcontrollerNacsettingsArrayOutputWithContext(ctx context.Context) SwitchcontrollerNacsettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerNacsettingsArrayOutput)
}

// SwitchcontrollerNacsettingsMapInput is an input type that accepts SwitchcontrollerNacsettingsMap and SwitchcontrollerNacsettingsMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerNacsettingsMapInput` via:
//
//	SwitchcontrollerNacsettingsMap{ "key": SwitchcontrollerNacsettingsArgs{...} }
type SwitchcontrollerNacsettingsMapInput interface {
	pulumi.Input

	ToSwitchcontrollerNacsettingsMapOutput() SwitchcontrollerNacsettingsMapOutput
	ToSwitchcontrollerNacsettingsMapOutputWithContext(context.Context) SwitchcontrollerNacsettingsMapOutput
}

type SwitchcontrollerNacsettingsMap map[string]SwitchcontrollerNacsettingsInput

func (SwitchcontrollerNacsettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerNacsettings)(nil)).Elem()
}

func (i SwitchcontrollerNacsettingsMap) ToSwitchcontrollerNacsettingsMapOutput() SwitchcontrollerNacsettingsMapOutput {
	return i.ToSwitchcontrollerNacsettingsMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerNacsettingsMap) ToSwitchcontrollerNacsettingsMapOutputWithContext(ctx context.Context) SwitchcontrollerNacsettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerNacsettingsMapOutput)
}

type SwitchcontrollerNacsettingsOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerNacsettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerNacsettings)(nil)).Elem()
}

func (o SwitchcontrollerNacsettingsOutput) ToSwitchcontrollerNacsettingsOutput() SwitchcontrollerNacsettingsOutput {
	return o
}

func (o SwitchcontrollerNacsettingsOutput) ToSwitchcontrollerNacsettingsOutputWithContext(ctx context.Context) SwitchcontrollerNacsettingsOutput {
	return o
}

// Enable/disable NAC device auto authorization when discovered and nac-policy matched. Valid values: `disable`, `enable`.
func (o SwitchcontrollerNacsettingsOutput) AutoAuth() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerNacsettings) pulumi.StringOutput { return v.AutoAuth }).(pulumi.StringOutput)
}

// Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
func (o SwitchcontrollerNacsettingsOutput) BounceNacPort() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerNacsettings) pulumi.StringOutput { return v.BounceNacPort }).(pulumi.StringOutput)
}

// Time interval after which inactive NAC devices will be expired (in minutes, 0 means no expiry).
func (o SwitchcontrollerNacsettingsOutput) InactiveTimer() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerNacsettings) pulumi.IntOutput { return v.InactiveTimer }).(pulumi.IntOutput)
}

// Clear NAC devices on switch ports on link down event. Valid values: `disable`, `enable`.
func (o SwitchcontrollerNacsettingsOutput) LinkDownFlush() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerNacsettings) pulumi.StringOutput { return v.LinkDownFlush }).(pulumi.StringOutput)
}

// Set NAC mode to be used on the FortiSwitch ports. Valid values: `local`, `global`.
func (o SwitchcontrollerNacsettingsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerNacsettings) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// NAC settings name.
func (o SwitchcontrollerNacsettingsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerNacsettings) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Default NAC Onboarding VLAN when NAC devices are discovered.
func (o SwitchcontrollerNacsettingsOutput) OnboardingVlan() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerNacsettings) pulumi.StringOutput { return v.OnboardingVlan }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerNacsettingsOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerNacsettings) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchcontrollerNacsettingsArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerNacsettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerNacsettings)(nil)).Elem()
}

func (o SwitchcontrollerNacsettingsArrayOutput) ToSwitchcontrollerNacsettingsArrayOutput() SwitchcontrollerNacsettingsArrayOutput {
	return o
}

func (o SwitchcontrollerNacsettingsArrayOutput) ToSwitchcontrollerNacsettingsArrayOutputWithContext(ctx context.Context) SwitchcontrollerNacsettingsArrayOutput {
	return o
}

func (o SwitchcontrollerNacsettingsArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerNacsettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerNacsettings {
		return vs[0].([]*SwitchcontrollerNacsettings)[vs[1].(int)]
	}).(SwitchcontrollerNacsettingsOutput)
}

type SwitchcontrollerNacsettingsMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerNacsettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerNacsettings)(nil)).Elem()
}

func (o SwitchcontrollerNacsettingsMapOutput) ToSwitchcontrollerNacsettingsMapOutput() SwitchcontrollerNacsettingsMapOutput {
	return o
}

func (o SwitchcontrollerNacsettingsMapOutput) ToSwitchcontrollerNacsettingsMapOutputWithContext(ctx context.Context) SwitchcontrollerNacsettingsMapOutput {
	return o
}

func (o SwitchcontrollerNacsettingsMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerNacsettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerNacsettings {
		return vs[0].(map[string]*SwitchcontrollerNacsettings)[vs[1].(string)]
	}).(SwitchcontrollerNacsettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerNacsettingsInput)(nil)).Elem(), &SwitchcontrollerNacsettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerNacsettingsArrayInput)(nil)).Elem(), SwitchcontrollerNacsettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerNacsettingsMapInput)(nil)).Elem(), SwitchcontrollerNacsettingsMap{})
	pulumi.RegisterOutputType(SwitchcontrollerNacsettingsOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerNacsettingsArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerNacsettingsMapOutput{})
}
