// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on an fortios system linkmonitor
func LookupSystemLinkmonitor(ctx *pulumi.Context, args *LookupSystemLinkmonitorArgs, opts ...pulumi.InvokeOption) (*LookupSystemLinkmonitorResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupSystemLinkmonitorResult
	err := ctx.Invoke("fortios:index/getSystemLinkmonitor:getSystemLinkmonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSystemLinkmonitor.
type LookupSystemLinkmonitorArgs struct {
	// Specify the name of the desired system linkmonitor.
	Name string `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// A collection of values returned by getSystemLinkmonitor.
type LookupSystemLinkmonitorResult struct {
	// Address mode (IPv4 or IPv6).
	AddrMode string `pulumi:"addrMode"`
	// Traffic class ID.
	ClassId int `pulumi:"classId"`
	// Differentiated services code point (DSCP) in the IP header of the probe packet.
	Diffservcode string `pulumi:"diffservcode"`
	// Threshold weight to trigger link failure alert.
	FailWeight int `pulumi:"failWeight"`
	// Number of retry attempts before the server is considered down (1 - 10, default = 5)
	Failtime int `pulumi:"failtime"`
	// Gateway IP address used to probe the server.
	GatewayIp string `pulumi:"gatewayIp"`
	// Gateway IPv6 address used to probe the server.
	GatewayIp6 string `pulumi:"gatewayIp6"`
	// HA election priority (1 - 50).
	HaPriority int `pulumi:"haPriority"`
	// String in the http-agent field in the HTTP header.
	HttpAgent string `pulumi:"httpAgent"`
	// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
	HttpGet string `pulumi:"httpGet"`
	// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
	HttpMatch string `pulumi:"httpMatch"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Detection interval (1 - 3600 sec, default = 5).
	Interval int `pulumi:"interval"`
	// Link monitor name.
	Name string `pulumi:"name"`
	// Packet size of a twamp test session,
	PacketSize int `pulumi:"packetSize"`
	// Twamp controller password in authentication mode
	Password string `pulumi:"password"`
	// Port number of the traffic to be used to monitor the server.
	Port int `pulumi:"port"`
	// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
	ProbeCount int `pulumi:"probeCount"`
	// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
	ProbeTimeout int `pulumi:"probeTimeout"`
	// Protocols used to monitor the server.
	Protocol string `pulumi:"protocol"`
	// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
	Recoverytime int `pulumi:"recoverytime"`
	// Subnet to monitor. The structure of `route` block is documented below.
	Routes []GetSystemLinkmonitorRoute `pulumi:"routes"`
	// Twamp controller security mode.
	SecurityMode string `pulumi:"securityMode"`
	// Mode of server configuration.
	ServerConfig string `pulumi:"serverConfig"`
	// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
	ServerLists []GetSystemLinkmonitorServerList `pulumi:"serverLists"`
	// Server type (static or dynamic).
	ServerType string `pulumi:"serverType"`
	// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
	Servers []GetSystemLinkmonitorServer `pulumi:"servers"`
	// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated.
	ServiceDetection string `pulumi:"serviceDetection"`
	// Source IP address used in packet to the server.
	SourceIp string `pulumi:"sourceIp"`
	// Source IPv6 address used in packet to the server.
	SourceIp6 string `pulumi:"sourceIp6"`
	// Interface that receives the traffic to be monitored.
	Srcintf string `pulumi:"srcintf"`
	// Enable/disable this link monitor.
	Status string `pulumi:"status"`
	// Enable/disable update cascade interface.
	UpdateCascadeInterface string `pulumi:"updateCascadeInterface"`
	// Enable/disable updating the policy route.
	UpdatePolicyRoute string `pulumi:"updatePolicyRoute"`
	// Enable/disable updating the static route.
	UpdateStaticRoute string  `pulumi:"updateStaticRoute"`
	Vdomparam         *string `pulumi:"vdomparam"`
}

func LookupSystemLinkmonitorOutput(ctx *pulumi.Context, args LookupSystemLinkmonitorOutputArgs, opts ...pulumi.InvokeOption) LookupSystemLinkmonitorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSystemLinkmonitorResult, error) {
			args := v.(LookupSystemLinkmonitorArgs)
			r, err := LookupSystemLinkmonitor(ctx, &args, opts...)
			var s LookupSystemLinkmonitorResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSystemLinkmonitorResultOutput)
}

// A collection of arguments for invoking getSystemLinkmonitor.
type LookupSystemLinkmonitorOutputArgs struct {
	// Specify the name of the desired system linkmonitor.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput `pulumi:"vdomparam"`
}

func (LookupSystemLinkmonitorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSystemLinkmonitorArgs)(nil)).Elem()
}

// A collection of values returned by getSystemLinkmonitor.
type LookupSystemLinkmonitorResultOutput struct{ *pulumi.OutputState }

func (LookupSystemLinkmonitorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSystemLinkmonitorResult)(nil)).Elem()
}

func (o LookupSystemLinkmonitorResultOutput) ToLookupSystemLinkmonitorResultOutput() LookupSystemLinkmonitorResultOutput {
	return o
}

func (o LookupSystemLinkmonitorResultOutput) ToLookupSystemLinkmonitorResultOutputWithContext(ctx context.Context) LookupSystemLinkmonitorResultOutput {
	return o
}

// Address mode (IPv4 or IPv6).
func (o LookupSystemLinkmonitorResultOutput) AddrMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.AddrMode }).(pulumi.StringOutput)
}

// Traffic class ID.
func (o LookupSystemLinkmonitorResultOutput) ClassId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) int { return v.ClassId }).(pulumi.IntOutput)
}

// Differentiated services code point (DSCP) in the IP header of the probe packet.
func (o LookupSystemLinkmonitorResultOutput) Diffservcode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.Diffservcode }).(pulumi.StringOutput)
}

// Threshold weight to trigger link failure alert.
func (o LookupSystemLinkmonitorResultOutput) FailWeight() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) int { return v.FailWeight }).(pulumi.IntOutput)
}

// Number of retry attempts before the server is considered down (1 - 10, default = 5)
func (o LookupSystemLinkmonitorResultOutput) Failtime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) int { return v.Failtime }).(pulumi.IntOutput)
}

// Gateway IP address used to probe the server.
func (o LookupSystemLinkmonitorResultOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// Gateway IPv6 address used to probe the server.
func (o LookupSystemLinkmonitorResultOutput) GatewayIp6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.GatewayIp6 }).(pulumi.StringOutput)
}

// HA election priority (1 - 50).
func (o LookupSystemLinkmonitorResultOutput) HaPriority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) int { return v.HaPriority }).(pulumi.IntOutput)
}

// String in the http-agent field in the HTTP header.
func (o LookupSystemLinkmonitorResultOutput) HttpAgent() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.HttpAgent }).(pulumi.StringOutput)
}

// If you are monitoring an HTML server you can send an HTTP-GET request with a custom string. Use this option to define the string.
func (o LookupSystemLinkmonitorResultOutput) HttpGet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.HttpGet }).(pulumi.StringOutput)
}

// String that you expect to see in the HTTP-GET requests of the traffic to be monitored.
func (o LookupSystemLinkmonitorResultOutput) HttpMatch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.HttpMatch }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSystemLinkmonitorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Detection interval (1 - 3600 sec, default = 5).
func (o LookupSystemLinkmonitorResultOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) int { return v.Interval }).(pulumi.IntOutput)
}

// Link monitor name.
func (o LookupSystemLinkmonitorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.Name }).(pulumi.StringOutput)
}

// Packet size of a twamp test session,
func (o LookupSystemLinkmonitorResultOutput) PacketSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) int { return v.PacketSize }).(pulumi.IntOutput)
}

// Twamp controller password in authentication mode
func (o LookupSystemLinkmonitorResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.Password }).(pulumi.StringOutput)
}

// Port number of the traffic to be used to monitor the server.
func (o LookupSystemLinkmonitorResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) int { return v.Port }).(pulumi.IntOutput)
}

// Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
func (o LookupSystemLinkmonitorResultOutput) ProbeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) int { return v.ProbeCount }).(pulumi.IntOutput)
}

// Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
func (o LookupSystemLinkmonitorResultOutput) ProbeTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) int { return v.ProbeTimeout }).(pulumi.IntOutput)
}

// Protocols used to monitor the server.
func (o LookupSystemLinkmonitorResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// Number of successful responses received before server is considered recovered (1 - 10, default = 5).
func (o LookupSystemLinkmonitorResultOutput) Recoverytime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) int { return v.Recoverytime }).(pulumi.IntOutput)
}

// Subnet to monitor. The structure of `route` block is documented below.
func (o LookupSystemLinkmonitorResultOutput) Routes() GetSystemLinkmonitorRouteArrayOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) []GetSystemLinkmonitorRoute { return v.Routes }).(GetSystemLinkmonitorRouteArrayOutput)
}

// Twamp controller security mode.
func (o LookupSystemLinkmonitorResultOutput) SecurityMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.SecurityMode }).(pulumi.StringOutput)
}

// Mode of server configuration.
func (o LookupSystemLinkmonitorResultOutput) ServerConfig() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.ServerConfig }).(pulumi.StringOutput)
}

// Servers for link-monitor to monitor. The structure of `serverList` block is documented below.
func (o LookupSystemLinkmonitorResultOutput) ServerLists() GetSystemLinkmonitorServerListArrayOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) []GetSystemLinkmonitorServerList { return v.ServerLists }).(GetSystemLinkmonitorServerListArrayOutput)
}

// Server type (static or dynamic).
func (o LookupSystemLinkmonitorResultOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.ServerType }).(pulumi.StringOutput)
}

// IP address of the server(s) to be monitored. The structure of `server` block is documented below.
func (o LookupSystemLinkmonitorResultOutput) Servers() GetSystemLinkmonitorServerArrayOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) []GetSystemLinkmonitorServer { return v.Servers }).(GetSystemLinkmonitorServerArrayOutput)
}

// Only use monitor to read quality values. If enabled, static routes and cascade interfaces will not be updated.
func (o LookupSystemLinkmonitorResultOutput) ServiceDetection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.ServiceDetection }).(pulumi.StringOutput)
}

// Source IP address used in packet to the server.
func (o LookupSystemLinkmonitorResultOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.SourceIp }).(pulumi.StringOutput)
}

// Source IPv6 address used in packet to the server.
func (o LookupSystemLinkmonitorResultOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.SourceIp6 }).(pulumi.StringOutput)
}

// Interface that receives the traffic to be monitored.
func (o LookupSystemLinkmonitorResultOutput) Srcintf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.Srcintf }).(pulumi.StringOutput)
}

// Enable/disable this link monitor.
func (o LookupSystemLinkmonitorResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.Status }).(pulumi.StringOutput)
}

// Enable/disable update cascade interface.
func (o LookupSystemLinkmonitorResultOutput) UpdateCascadeInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.UpdateCascadeInterface }).(pulumi.StringOutput)
}

// Enable/disable updating the policy route.
func (o LookupSystemLinkmonitorResultOutput) UpdatePolicyRoute() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.UpdatePolicyRoute }).(pulumi.StringOutput)
}

// Enable/disable updating the static route.
func (o LookupSystemLinkmonitorResultOutput) UpdateStaticRoute() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) string { return v.UpdateStaticRoute }).(pulumi.StringOutput)
}

func (o LookupSystemLinkmonitorResultOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSystemLinkmonitorResult) *string { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSystemLinkmonitorResultOutput{})
}
