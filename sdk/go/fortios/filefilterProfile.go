// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure file-filter profiles. Applies to FortiOS Version `>= 6.4.1`.
//
// ## Import
//
// # FileFilter Profile can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/filefilterProfile:FilefilterProfile labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/filefilterProfile:FilefilterProfile labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type FilefilterProfile struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Enable/disable file-filter extended logging. Valid values: `disable`, `enable`.
	ExtendedLog pulumi.StringOutput `pulumi:"extendedLog"`
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet pulumi.StringOutput `pulumi:"featureSet"`
	// Enable/disable file-filter logging. Valid values: `disable`, `enable`.
	Log pulumi.StringOutput `pulumi:"log"`
	// Profile name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Replacement message group
	ReplacemsgGroup pulumi.StringOutput `pulumi:"replacemsgGroup"`
	// File filter rules. The structure of `rules` block is documented below.
	Rules FilefilterProfileRuleArrayOutput `pulumi:"rules"`
	// Enable/disable archive contents scan. (Not for CIFS) Valid values: `disable`, `enable`.
	ScanArchiveContents pulumi.StringOutput `pulumi:"scanArchiveContents"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewFilefilterProfile registers a new resource with the given unique name, arguments, and options.
func NewFilefilterProfile(ctx *pulumi.Context,
	name string, args *FilefilterProfileArgs, opts ...pulumi.ResourceOption) (*FilefilterProfile, error) {
	if args == nil {
		args = &FilefilterProfileArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource FilefilterProfile
	err := ctx.RegisterResource("fortios:index/filefilterProfile:FilefilterProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFilefilterProfile gets an existing FilefilterProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFilefilterProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FilefilterProfileState, opts ...pulumi.ResourceOption) (*FilefilterProfile, error) {
	var resource FilefilterProfile
	err := ctx.ReadResource("fortios:index/filefilterProfile:FilefilterProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FilefilterProfile resources.
type filefilterProfileState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable file-filter extended logging. Valid values: `disable`, `enable`.
	ExtendedLog *string `pulumi:"extendedLog"`
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet *string `pulumi:"featureSet"`
	// Enable/disable file-filter logging. Valid values: `disable`, `enable`.
	Log *string `pulumi:"log"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Replacement message group
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// File filter rules. The structure of `rules` block is documented below.
	Rules []FilefilterProfileRule `pulumi:"rules"`
	// Enable/disable archive contents scan. (Not for CIFS) Valid values: `disable`, `enable`.
	ScanArchiveContents *string `pulumi:"scanArchiveContents"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type FilefilterProfileState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable file-filter extended logging. Valid values: `disable`, `enable`.
	ExtendedLog pulumi.StringPtrInput
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet pulumi.StringPtrInput
	// Enable/disable file-filter logging. Valid values: `disable`, `enable`.
	Log pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Replacement message group
	ReplacemsgGroup pulumi.StringPtrInput
	// File filter rules. The structure of `rules` block is documented below.
	Rules FilefilterProfileRuleArrayInput
	// Enable/disable archive contents scan. (Not for CIFS) Valid values: `disable`, `enable`.
	ScanArchiveContents pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FilefilterProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*filefilterProfileState)(nil)).Elem()
}

type filefilterProfileArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Enable/disable file-filter extended logging. Valid values: `disable`, `enable`.
	ExtendedLog *string `pulumi:"extendedLog"`
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet *string `pulumi:"featureSet"`
	// Enable/disable file-filter logging. Valid values: `disable`, `enable`.
	Log *string `pulumi:"log"`
	// Profile name.
	Name *string `pulumi:"name"`
	// Replacement message group
	ReplacemsgGroup *string `pulumi:"replacemsgGroup"`
	// File filter rules. The structure of `rules` block is documented below.
	Rules []FilefilterProfileRule `pulumi:"rules"`
	// Enable/disable archive contents scan. (Not for CIFS) Valid values: `disable`, `enable`.
	ScanArchiveContents *string `pulumi:"scanArchiveContents"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a FilefilterProfile resource.
type FilefilterProfileArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Enable/disable file-filter extended logging. Valid values: `disable`, `enable`.
	ExtendedLog pulumi.StringPtrInput
	// Flow/proxy feature set. Valid values: `flow`, `proxy`.
	FeatureSet pulumi.StringPtrInput
	// Enable/disable file-filter logging. Valid values: `disable`, `enable`.
	Log pulumi.StringPtrInput
	// Profile name.
	Name pulumi.StringPtrInput
	// Replacement message group
	ReplacemsgGroup pulumi.StringPtrInput
	// File filter rules. The structure of `rules` block is documented below.
	Rules FilefilterProfileRuleArrayInput
	// Enable/disable archive contents scan. (Not for CIFS) Valid values: `disable`, `enable`.
	ScanArchiveContents pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (FilefilterProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*filefilterProfileArgs)(nil)).Elem()
}

type FilefilterProfileInput interface {
	pulumi.Input

	ToFilefilterProfileOutput() FilefilterProfileOutput
	ToFilefilterProfileOutputWithContext(ctx context.Context) FilefilterProfileOutput
}

func (*FilefilterProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**FilefilterProfile)(nil)).Elem()
}

func (i *FilefilterProfile) ToFilefilterProfileOutput() FilefilterProfileOutput {
	return i.ToFilefilterProfileOutputWithContext(context.Background())
}

func (i *FilefilterProfile) ToFilefilterProfileOutputWithContext(ctx context.Context) FilefilterProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilefilterProfileOutput)
}

// FilefilterProfileArrayInput is an input type that accepts FilefilterProfileArray and FilefilterProfileArrayOutput values.
// You can construct a concrete instance of `FilefilterProfileArrayInput` via:
//
//	FilefilterProfileArray{ FilefilterProfileArgs{...} }
type FilefilterProfileArrayInput interface {
	pulumi.Input

	ToFilefilterProfileArrayOutput() FilefilterProfileArrayOutput
	ToFilefilterProfileArrayOutputWithContext(context.Context) FilefilterProfileArrayOutput
}

type FilefilterProfileArray []FilefilterProfileInput

func (FilefilterProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FilefilterProfile)(nil)).Elem()
}

func (i FilefilterProfileArray) ToFilefilterProfileArrayOutput() FilefilterProfileArrayOutput {
	return i.ToFilefilterProfileArrayOutputWithContext(context.Background())
}

func (i FilefilterProfileArray) ToFilefilterProfileArrayOutputWithContext(ctx context.Context) FilefilterProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilefilterProfileArrayOutput)
}

// FilefilterProfileMapInput is an input type that accepts FilefilterProfileMap and FilefilterProfileMapOutput values.
// You can construct a concrete instance of `FilefilterProfileMapInput` via:
//
//	FilefilterProfileMap{ "key": FilefilterProfileArgs{...} }
type FilefilterProfileMapInput interface {
	pulumi.Input

	ToFilefilterProfileMapOutput() FilefilterProfileMapOutput
	ToFilefilterProfileMapOutputWithContext(context.Context) FilefilterProfileMapOutput
}

type FilefilterProfileMap map[string]FilefilterProfileInput

func (FilefilterProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FilefilterProfile)(nil)).Elem()
}

func (i FilefilterProfileMap) ToFilefilterProfileMapOutput() FilefilterProfileMapOutput {
	return i.ToFilefilterProfileMapOutputWithContext(context.Background())
}

func (i FilefilterProfileMap) ToFilefilterProfileMapOutputWithContext(ctx context.Context) FilefilterProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilefilterProfileMapOutput)
}

type FilefilterProfileOutput struct{ *pulumi.OutputState }

func (FilefilterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FilefilterProfile)(nil)).Elem()
}

func (o FilefilterProfileOutput) ToFilefilterProfileOutput() FilefilterProfileOutput {
	return o
}

func (o FilefilterProfileOutput) ToFilefilterProfileOutputWithContext(ctx context.Context) FilefilterProfileOutput {
	return o
}

// Comment.
func (o FilefilterProfileOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FilefilterProfile) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o FilefilterProfileOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FilefilterProfile) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Enable/disable file-filter extended logging. Valid values: `disable`, `enable`.
func (o FilefilterProfileOutput) ExtendedLog() pulumi.StringOutput {
	return o.ApplyT(func(v *FilefilterProfile) pulumi.StringOutput { return v.ExtendedLog }).(pulumi.StringOutput)
}

// Flow/proxy feature set. Valid values: `flow`, `proxy`.
func (o FilefilterProfileOutput) FeatureSet() pulumi.StringOutput {
	return o.ApplyT(func(v *FilefilterProfile) pulumi.StringOutput { return v.FeatureSet }).(pulumi.StringOutput)
}

// Enable/disable file-filter logging. Valid values: `disable`, `enable`.
func (o FilefilterProfileOutput) Log() pulumi.StringOutput {
	return o.ApplyT(func(v *FilefilterProfile) pulumi.StringOutput { return v.Log }).(pulumi.StringOutput)
}

// Profile name.
func (o FilefilterProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FilefilterProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Replacement message group
func (o FilefilterProfileOutput) ReplacemsgGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *FilefilterProfile) pulumi.StringOutput { return v.ReplacemsgGroup }).(pulumi.StringOutput)
}

// File filter rules. The structure of `rules` block is documented below.
func (o FilefilterProfileOutput) Rules() FilefilterProfileRuleArrayOutput {
	return o.ApplyT(func(v *FilefilterProfile) FilefilterProfileRuleArrayOutput { return v.Rules }).(FilefilterProfileRuleArrayOutput)
}

// Enable/disable archive contents scan. (Not for CIFS) Valid values: `disable`, `enable`.
func (o FilefilterProfileOutput) ScanArchiveContents() pulumi.StringOutput {
	return o.ApplyT(func(v *FilefilterProfile) pulumi.StringOutput { return v.ScanArchiveContents }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o FilefilterProfileOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FilefilterProfile) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type FilefilterProfileArrayOutput struct{ *pulumi.OutputState }

func (FilefilterProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FilefilterProfile)(nil)).Elem()
}

func (o FilefilterProfileArrayOutput) ToFilefilterProfileArrayOutput() FilefilterProfileArrayOutput {
	return o
}

func (o FilefilterProfileArrayOutput) ToFilefilterProfileArrayOutputWithContext(ctx context.Context) FilefilterProfileArrayOutput {
	return o
}

func (o FilefilterProfileArrayOutput) Index(i pulumi.IntInput) FilefilterProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FilefilterProfile {
		return vs[0].([]*FilefilterProfile)[vs[1].(int)]
	}).(FilefilterProfileOutput)
}

type FilefilterProfileMapOutput struct{ *pulumi.OutputState }

func (FilefilterProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FilefilterProfile)(nil)).Elem()
}

func (o FilefilterProfileMapOutput) ToFilefilterProfileMapOutput() FilefilterProfileMapOutput {
	return o
}

func (o FilefilterProfileMapOutput) ToFilefilterProfileMapOutputWithContext(ctx context.Context) FilefilterProfileMapOutput {
	return o
}

func (o FilefilterProfileMapOutput) MapIndex(k pulumi.StringInput) FilefilterProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FilefilterProfile {
		return vs[0].(map[string]*FilefilterProfile)[vs[1].(string)]
	}).(FilefilterProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FilefilterProfileInput)(nil)).Elem(), &FilefilterProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilefilterProfileArrayInput)(nil)).Elem(), FilefilterProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilefilterProfileMapInput)(nil)).Elem(), FilefilterProfileMap{})
	pulumi.RegisterOutputType(FilefilterProfileOutput{})
	pulumi.RegisterOutputType(FilefilterProfileArrayOutput{})
	pulumi.RegisterOutputType(FilefilterProfileMapOutput{})
}
