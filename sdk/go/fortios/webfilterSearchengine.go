// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure web filter search engines.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewWebfilterSearchengine(ctx, "trname", &fortios.WebfilterSearchengineArgs{
//				Charset:    pulumi.String("utf-8"),
//				Hostname:   pulumi.String("sg.eiwuc.com"),
//				Query:      pulumi.String("sc="),
//				Safesearch: pulumi.String("disable"),
//				Url:        pulumi.String("^\\/f"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Webfilter SearchEngine can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/webfilterSearchengine:WebfilterSearchengine labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/webfilterSearchengine:WebfilterSearchengine labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WebfilterSearchengine struct {
	pulumi.CustomResourceState

	// Search engine charset. Valid values: `utf-8`, `gb2312`.
	Charset pulumi.StringOutput `pulumi:"charset"`
	// Hostname (regular expression).
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Search engine name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Code used to prefix a query (must end with an equals character).
	Query pulumi.StringOutput `pulumi:"query"`
	// Safe search method. You can disable safe search, add the safe search string to URLs, or insert a safe search header.
	Safesearch pulumi.StringOutput `pulumi:"safesearch"`
	// Safe search parameter used in the URL.
	SafesearchStr pulumi.StringOutput `pulumi:"safesearchStr"`
	// URL (regular expression).
	Url pulumi.StringOutput `pulumi:"url"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWebfilterSearchengine registers a new resource with the given unique name, arguments, and options.
func NewWebfilterSearchengine(ctx *pulumi.Context,
	name string, args *WebfilterSearchengineArgs, opts ...pulumi.ResourceOption) (*WebfilterSearchengine, error) {
	if args == nil {
		args = &WebfilterSearchengineArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource WebfilterSearchengine
	err := ctx.RegisterResource("fortios:index/webfilterSearchengine:WebfilterSearchengine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebfilterSearchengine gets an existing WebfilterSearchengine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebfilterSearchengine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebfilterSearchengineState, opts ...pulumi.ResourceOption) (*WebfilterSearchengine, error) {
	var resource WebfilterSearchengine
	err := ctx.ReadResource("fortios:index/webfilterSearchengine:WebfilterSearchengine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebfilterSearchengine resources.
type webfilterSearchengineState struct {
	// Search engine charset. Valid values: `utf-8`, `gb2312`.
	Charset *string `pulumi:"charset"`
	// Hostname (regular expression).
	Hostname *string `pulumi:"hostname"`
	// Search engine name.
	Name *string `pulumi:"name"`
	// Code used to prefix a query (must end with an equals character).
	Query *string `pulumi:"query"`
	// Safe search method. You can disable safe search, add the safe search string to URLs, or insert a safe search header.
	Safesearch *string `pulumi:"safesearch"`
	// Safe search parameter used in the URL.
	SafesearchStr *string `pulumi:"safesearchStr"`
	// URL (regular expression).
	Url *string `pulumi:"url"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WebfilterSearchengineState struct {
	// Search engine charset. Valid values: `utf-8`, `gb2312`.
	Charset pulumi.StringPtrInput
	// Hostname (regular expression).
	Hostname pulumi.StringPtrInput
	// Search engine name.
	Name pulumi.StringPtrInput
	// Code used to prefix a query (must end with an equals character).
	Query pulumi.StringPtrInput
	// Safe search method. You can disable safe search, add the safe search string to URLs, or insert a safe search header.
	Safesearch pulumi.StringPtrInput
	// Safe search parameter used in the URL.
	SafesearchStr pulumi.StringPtrInput
	// URL (regular expression).
	Url pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebfilterSearchengineState) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterSearchengineState)(nil)).Elem()
}

type webfilterSearchengineArgs struct {
	// Search engine charset. Valid values: `utf-8`, `gb2312`.
	Charset *string `pulumi:"charset"`
	// Hostname (regular expression).
	Hostname *string `pulumi:"hostname"`
	// Search engine name.
	Name *string `pulumi:"name"`
	// Code used to prefix a query (must end with an equals character).
	Query *string `pulumi:"query"`
	// Safe search method. You can disable safe search, add the safe search string to URLs, or insert a safe search header.
	Safesearch *string `pulumi:"safesearch"`
	// Safe search parameter used in the URL.
	SafesearchStr *string `pulumi:"safesearchStr"`
	// URL (regular expression).
	Url *string `pulumi:"url"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebfilterSearchengine resource.
type WebfilterSearchengineArgs struct {
	// Search engine charset. Valid values: `utf-8`, `gb2312`.
	Charset pulumi.StringPtrInput
	// Hostname (regular expression).
	Hostname pulumi.StringPtrInput
	// Search engine name.
	Name pulumi.StringPtrInput
	// Code used to prefix a query (must end with an equals character).
	Query pulumi.StringPtrInput
	// Safe search method. You can disable safe search, add the safe search string to URLs, or insert a safe search header.
	Safesearch pulumi.StringPtrInput
	// Safe search parameter used in the URL.
	SafesearchStr pulumi.StringPtrInput
	// URL (regular expression).
	Url pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebfilterSearchengineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webfilterSearchengineArgs)(nil)).Elem()
}

type WebfilterSearchengineInput interface {
	pulumi.Input

	ToWebfilterSearchengineOutput() WebfilterSearchengineOutput
	ToWebfilterSearchengineOutputWithContext(ctx context.Context) WebfilterSearchengineOutput
}

func (*WebfilterSearchengine) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterSearchengine)(nil)).Elem()
}

func (i *WebfilterSearchengine) ToWebfilterSearchengineOutput() WebfilterSearchengineOutput {
	return i.ToWebfilterSearchengineOutputWithContext(context.Background())
}

func (i *WebfilterSearchengine) ToWebfilterSearchengineOutputWithContext(ctx context.Context) WebfilterSearchengineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterSearchengineOutput)
}

// WebfilterSearchengineArrayInput is an input type that accepts WebfilterSearchengineArray and WebfilterSearchengineArrayOutput values.
// You can construct a concrete instance of `WebfilterSearchengineArrayInput` via:
//
//	WebfilterSearchengineArray{ WebfilterSearchengineArgs{...} }
type WebfilterSearchengineArrayInput interface {
	pulumi.Input

	ToWebfilterSearchengineArrayOutput() WebfilterSearchengineArrayOutput
	ToWebfilterSearchengineArrayOutputWithContext(context.Context) WebfilterSearchengineArrayOutput
}

type WebfilterSearchengineArray []WebfilterSearchengineInput

func (WebfilterSearchengineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterSearchengine)(nil)).Elem()
}

func (i WebfilterSearchengineArray) ToWebfilterSearchengineArrayOutput() WebfilterSearchengineArrayOutput {
	return i.ToWebfilterSearchengineArrayOutputWithContext(context.Background())
}

func (i WebfilterSearchengineArray) ToWebfilterSearchengineArrayOutputWithContext(ctx context.Context) WebfilterSearchengineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterSearchengineArrayOutput)
}

// WebfilterSearchengineMapInput is an input type that accepts WebfilterSearchengineMap and WebfilterSearchengineMapOutput values.
// You can construct a concrete instance of `WebfilterSearchengineMapInput` via:
//
//	WebfilterSearchengineMap{ "key": WebfilterSearchengineArgs{...} }
type WebfilterSearchengineMapInput interface {
	pulumi.Input

	ToWebfilterSearchengineMapOutput() WebfilterSearchengineMapOutput
	ToWebfilterSearchengineMapOutputWithContext(context.Context) WebfilterSearchengineMapOutput
}

type WebfilterSearchengineMap map[string]WebfilterSearchengineInput

func (WebfilterSearchengineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterSearchengine)(nil)).Elem()
}

func (i WebfilterSearchengineMap) ToWebfilterSearchengineMapOutput() WebfilterSearchengineMapOutput {
	return i.ToWebfilterSearchengineMapOutputWithContext(context.Background())
}

func (i WebfilterSearchengineMap) ToWebfilterSearchengineMapOutputWithContext(ctx context.Context) WebfilterSearchengineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebfilterSearchengineMapOutput)
}

type WebfilterSearchengineOutput struct{ *pulumi.OutputState }

func (WebfilterSearchengineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebfilterSearchengine)(nil)).Elem()
}

func (o WebfilterSearchengineOutput) ToWebfilterSearchengineOutput() WebfilterSearchengineOutput {
	return o
}

func (o WebfilterSearchengineOutput) ToWebfilterSearchengineOutputWithContext(ctx context.Context) WebfilterSearchengineOutput {
	return o
}

// Search engine charset. Valid values: `utf-8`, `gb2312`.
func (o WebfilterSearchengineOutput) Charset() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterSearchengine) pulumi.StringOutput { return v.Charset }).(pulumi.StringOutput)
}

// Hostname (regular expression).
func (o WebfilterSearchengineOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterSearchengine) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Search engine name.
func (o WebfilterSearchengineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterSearchengine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Code used to prefix a query (must end with an equals character).
func (o WebfilterSearchengineOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterSearchengine) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

// Safe search method. You can disable safe search, add the safe search string to URLs, or insert a safe search header.
func (o WebfilterSearchengineOutput) Safesearch() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterSearchengine) pulumi.StringOutput { return v.Safesearch }).(pulumi.StringOutput)
}

// Safe search parameter used in the URL.
func (o WebfilterSearchengineOutput) SafesearchStr() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterSearchengine) pulumi.StringOutput { return v.SafesearchStr }).(pulumi.StringOutput)
}

// URL (regular expression).
func (o WebfilterSearchengineOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *WebfilterSearchengine) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WebfilterSearchengineOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebfilterSearchengine) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WebfilterSearchengineArrayOutput struct{ *pulumi.OutputState }

func (WebfilterSearchengineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebfilterSearchengine)(nil)).Elem()
}

func (o WebfilterSearchengineArrayOutput) ToWebfilterSearchengineArrayOutput() WebfilterSearchengineArrayOutput {
	return o
}

func (o WebfilterSearchengineArrayOutput) ToWebfilterSearchengineArrayOutputWithContext(ctx context.Context) WebfilterSearchengineArrayOutput {
	return o
}

func (o WebfilterSearchengineArrayOutput) Index(i pulumi.IntInput) WebfilterSearchengineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebfilterSearchengine {
		return vs[0].([]*WebfilterSearchengine)[vs[1].(int)]
	}).(WebfilterSearchengineOutput)
}

type WebfilterSearchengineMapOutput struct{ *pulumi.OutputState }

func (WebfilterSearchengineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebfilterSearchengine)(nil)).Elem()
}

func (o WebfilterSearchengineMapOutput) ToWebfilterSearchengineMapOutput() WebfilterSearchengineMapOutput {
	return o
}

func (o WebfilterSearchengineMapOutput) ToWebfilterSearchengineMapOutputWithContext(ctx context.Context) WebfilterSearchengineMapOutput {
	return o
}

func (o WebfilterSearchengineMapOutput) MapIndex(k pulumi.StringInput) WebfilterSearchengineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebfilterSearchengine {
		return vs[0].(map[string]*WebfilterSearchengine)[vs[1].(string)]
	}).(WebfilterSearchengineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterSearchengineInput)(nil)).Elem(), &WebfilterSearchengine{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterSearchengineArrayInput)(nil)).Elem(), WebfilterSearchengineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebfilterSearchengineMapInput)(nil)).Elem(), WebfilterSearchengineMap{})
	pulumi.RegisterOutputType(WebfilterSearchengineOutput{})
	pulumi.RegisterOutputType(WebfilterSearchengineArrayOutput{})
	pulumi.RegisterOutputType(WebfilterSearchengineMapOutput{})
}
