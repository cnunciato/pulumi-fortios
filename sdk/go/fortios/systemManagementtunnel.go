// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Management tunnel configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemManagementtunnel(ctx, "trname", &fortios.SystemManagementtunnelArgs{
//				AllowCollectStatistics: pulumi.String("enable"),
//				AllowConfigRestore:     pulumi.String("enable"),
//				AllowPushConfiguration: pulumi.String("enable"),
//				AllowPushFirmware:      pulumi.String("enable"),
//				AuthorizedManagerOnly:  pulumi.String("enable"),
//				Status:                 pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # System ManagementTunnel can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemManagementtunnel:SystemManagementtunnel labelname SystemManagementTunnel
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemManagementtunnel:SystemManagementtunnel labelname SystemManagementTunnel
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemManagementtunnel struct {
	pulumi.CustomResourceState

	// Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
	AllowCollectStatistics pulumi.StringOutput `pulumi:"allowCollectStatistics"`
	// Enable/disable allow config restore. Valid values: `enable`, `disable`.
	AllowConfigRestore pulumi.StringOutput `pulumi:"allowConfigRestore"`
	// Enable/disable push configuration. Valid values: `enable`, `disable`.
	AllowPushConfiguration pulumi.StringOutput `pulumi:"allowPushConfiguration"`
	// Enable/disable push firmware. Valid values: `enable`, `disable`.
	AllowPushFirmware pulumi.StringOutput `pulumi:"allowPushFirmware"`
	// Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
	AuthorizedManagerOnly pulumi.StringOutput `pulumi:"authorizedManagerOnly"`
	// Serial number.
	SerialNumber pulumi.StringOutput `pulumi:"serialNumber"`
	// Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemManagementtunnel registers a new resource with the given unique name, arguments, and options.
func NewSystemManagementtunnel(ctx *pulumi.Context,
	name string, args *SystemManagementtunnelArgs, opts ...pulumi.ResourceOption) (*SystemManagementtunnel, error) {
	if args == nil {
		args = &SystemManagementtunnelArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemManagementtunnel
	err := ctx.RegisterResource("fortios:index/systemManagementtunnel:SystemManagementtunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemManagementtunnel gets an existing SystemManagementtunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemManagementtunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemManagementtunnelState, opts ...pulumi.ResourceOption) (*SystemManagementtunnel, error) {
	var resource SystemManagementtunnel
	err := ctx.ReadResource("fortios:index/systemManagementtunnel:SystemManagementtunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemManagementtunnel resources.
type systemManagementtunnelState struct {
	// Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
	AllowCollectStatistics *string `pulumi:"allowCollectStatistics"`
	// Enable/disable allow config restore. Valid values: `enable`, `disable`.
	AllowConfigRestore *string `pulumi:"allowConfigRestore"`
	// Enable/disable push configuration. Valid values: `enable`, `disable`.
	AllowPushConfiguration *string `pulumi:"allowPushConfiguration"`
	// Enable/disable push firmware. Valid values: `enable`, `disable`.
	AllowPushFirmware *string `pulumi:"allowPushFirmware"`
	// Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
	AuthorizedManagerOnly *string `pulumi:"authorizedManagerOnly"`
	// Serial number.
	SerialNumber *string `pulumi:"serialNumber"`
	// Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemManagementtunnelState struct {
	// Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
	AllowCollectStatistics pulumi.StringPtrInput
	// Enable/disable allow config restore. Valid values: `enable`, `disable`.
	AllowConfigRestore pulumi.StringPtrInput
	// Enable/disable push configuration. Valid values: `enable`, `disable`.
	AllowPushConfiguration pulumi.StringPtrInput
	// Enable/disable push firmware. Valid values: `enable`, `disable`.
	AllowPushFirmware pulumi.StringPtrInput
	// Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
	AuthorizedManagerOnly pulumi.StringPtrInput
	// Serial number.
	SerialNumber pulumi.StringPtrInput
	// Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemManagementtunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemManagementtunnelState)(nil)).Elem()
}

type systemManagementtunnelArgs struct {
	// Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
	AllowCollectStatistics *string `pulumi:"allowCollectStatistics"`
	// Enable/disable allow config restore. Valid values: `enable`, `disable`.
	AllowConfigRestore *string `pulumi:"allowConfigRestore"`
	// Enable/disable push configuration. Valid values: `enable`, `disable`.
	AllowPushConfiguration *string `pulumi:"allowPushConfiguration"`
	// Enable/disable push firmware. Valid values: `enable`, `disable`.
	AllowPushFirmware *string `pulumi:"allowPushFirmware"`
	// Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
	AuthorizedManagerOnly *string `pulumi:"authorizedManagerOnly"`
	// Serial number.
	SerialNumber *string `pulumi:"serialNumber"`
	// Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemManagementtunnel resource.
type SystemManagementtunnelArgs struct {
	// Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
	AllowCollectStatistics pulumi.StringPtrInput
	// Enable/disable allow config restore. Valid values: `enable`, `disable`.
	AllowConfigRestore pulumi.StringPtrInput
	// Enable/disable push configuration. Valid values: `enable`, `disable`.
	AllowPushConfiguration pulumi.StringPtrInput
	// Enable/disable push firmware. Valid values: `enable`, `disable`.
	AllowPushFirmware pulumi.StringPtrInput
	// Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
	AuthorizedManagerOnly pulumi.StringPtrInput
	// Serial number.
	SerialNumber pulumi.StringPtrInput
	// Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemManagementtunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemManagementtunnelArgs)(nil)).Elem()
}

type SystemManagementtunnelInput interface {
	pulumi.Input

	ToSystemManagementtunnelOutput() SystemManagementtunnelOutput
	ToSystemManagementtunnelOutputWithContext(ctx context.Context) SystemManagementtunnelOutput
}

func (*SystemManagementtunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemManagementtunnel)(nil)).Elem()
}

func (i *SystemManagementtunnel) ToSystemManagementtunnelOutput() SystemManagementtunnelOutput {
	return i.ToSystemManagementtunnelOutputWithContext(context.Background())
}

func (i *SystemManagementtunnel) ToSystemManagementtunnelOutputWithContext(ctx context.Context) SystemManagementtunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemManagementtunnelOutput)
}

// SystemManagementtunnelArrayInput is an input type that accepts SystemManagementtunnelArray and SystemManagementtunnelArrayOutput values.
// You can construct a concrete instance of `SystemManagementtunnelArrayInput` via:
//
//	SystemManagementtunnelArray{ SystemManagementtunnelArgs{...} }
type SystemManagementtunnelArrayInput interface {
	pulumi.Input

	ToSystemManagementtunnelArrayOutput() SystemManagementtunnelArrayOutput
	ToSystemManagementtunnelArrayOutputWithContext(context.Context) SystemManagementtunnelArrayOutput
}

type SystemManagementtunnelArray []SystemManagementtunnelInput

func (SystemManagementtunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemManagementtunnel)(nil)).Elem()
}

func (i SystemManagementtunnelArray) ToSystemManagementtunnelArrayOutput() SystemManagementtunnelArrayOutput {
	return i.ToSystemManagementtunnelArrayOutputWithContext(context.Background())
}

func (i SystemManagementtunnelArray) ToSystemManagementtunnelArrayOutputWithContext(ctx context.Context) SystemManagementtunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemManagementtunnelArrayOutput)
}

// SystemManagementtunnelMapInput is an input type that accepts SystemManagementtunnelMap and SystemManagementtunnelMapOutput values.
// You can construct a concrete instance of `SystemManagementtunnelMapInput` via:
//
//	SystemManagementtunnelMap{ "key": SystemManagementtunnelArgs{...} }
type SystemManagementtunnelMapInput interface {
	pulumi.Input

	ToSystemManagementtunnelMapOutput() SystemManagementtunnelMapOutput
	ToSystemManagementtunnelMapOutputWithContext(context.Context) SystemManagementtunnelMapOutput
}

type SystemManagementtunnelMap map[string]SystemManagementtunnelInput

func (SystemManagementtunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemManagementtunnel)(nil)).Elem()
}

func (i SystemManagementtunnelMap) ToSystemManagementtunnelMapOutput() SystemManagementtunnelMapOutput {
	return i.ToSystemManagementtunnelMapOutputWithContext(context.Background())
}

func (i SystemManagementtunnelMap) ToSystemManagementtunnelMapOutputWithContext(ctx context.Context) SystemManagementtunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemManagementtunnelMapOutput)
}

type SystemManagementtunnelOutput struct{ *pulumi.OutputState }

func (SystemManagementtunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemManagementtunnel)(nil)).Elem()
}

func (o SystemManagementtunnelOutput) ToSystemManagementtunnelOutput() SystemManagementtunnelOutput {
	return o
}

func (o SystemManagementtunnelOutput) ToSystemManagementtunnelOutputWithContext(ctx context.Context) SystemManagementtunnelOutput {
	return o
}

// Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
func (o SystemManagementtunnelOutput) AllowCollectStatistics() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemManagementtunnel) pulumi.StringOutput { return v.AllowCollectStatistics }).(pulumi.StringOutput)
}

// Enable/disable allow config restore. Valid values: `enable`, `disable`.
func (o SystemManagementtunnelOutput) AllowConfigRestore() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemManagementtunnel) pulumi.StringOutput { return v.AllowConfigRestore }).(pulumi.StringOutput)
}

// Enable/disable push configuration. Valid values: `enable`, `disable`.
func (o SystemManagementtunnelOutput) AllowPushConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemManagementtunnel) pulumi.StringOutput { return v.AllowPushConfiguration }).(pulumi.StringOutput)
}

// Enable/disable push firmware. Valid values: `enable`, `disable`.
func (o SystemManagementtunnelOutput) AllowPushFirmware() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemManagementtunnel) pulumi.StringOutput { return v.AllowPushFirmware }).(pulumi.StringOutput)
}

// Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
func (o SystemManagementtunnelOutput) AuthorizedManagerOnly() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemManagementtunnel) pulumi.StringOutput { return v.AuthorizedManagerOnly }).(pulumi.StringOutput)
}

// Serial number.
func (o SystemManagementtunnelOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemManagementtunnel) pulumi.StringOutput { return v.SerialNumber }).(pulumi.StringOutput)
}

// Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
func (o SystemManagementtunnelOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemManagementtunnel) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemManagementtunnelOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemManagementtunnel) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemManagementtunnelArrayOutput struct{ *pulumi.OutputState }

func (SystemManagementtunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemManagementtunnel)(nil)).Elem()
}

func (o SystemManagementtunnelArrayOutput) ToSystemManagementtunnelArrayOutput() SystemManagementtunnelArrayOutput {
	return o
}

func (o SystemManagementtunnelArrayOutput) ToSystemManagementtunnelArrayOutputWithContext(ctx context.Context) SystemManagementtunnelArrayOutput {
	return o
}

func (o SystemManagementtunnelArrayOutput) Index(i pulumi.IntInput) SystemManagementtunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemManagementtunnel {
		return vs[0].([]*SystemManagementtunnel)[vs[1].(int)]
	}).(SystemManagementtunnelOutput)
}

type SystemManagementtunnelMapOutput struct{ *pulumi.OutputState }

func (SystemManagementtunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemManagementtunnel)(nil)).Elem()
}

func (o SystemManagementtunnelMapOutput) ToSystemManagementtunnelMapOutput() SystemManagementtunnelMapOutput {
	return o
}

func (o SystemManagementtunnelMapOutput) ToSystemManagementtunnelMapOutputWithContext(ctx context.Context) SystemManagementtunnelMapOutput {
	return o
}

func (o SystemManagementtunnelMapOutput) MapIndex(k pulumi.StringInput) SystemManagementtunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemManagementtunnel {
		return vs[0].(map[string]*SystemManagementtunnel)[vs[1].(string)]
	}).(SystemManagementtunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemManagementtunnelInput)(nil)).Elem(), &SystemManagementtunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemManagementtunnelArrayInput)(nil)).Elem(), SystemManagementtunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemManagementtunnelMapInput)(nil)).Elem(), SystemManagementtunnelMap{})
	pulumi.RegisterOutputType(SystemManagementtunnelOutput{})
	pulumi.RegisterOutputType(SystemManagementtunnelArrayOutput{})
	pulumi.RegisterOutputType(SystemManagementtunnelMapOutput{})
}
