// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SNMP community configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemsnmpCommunity(ctx, "trname", &fortios.SystemsnmpCommunityArgs{
//				Events:         pulumi.String("cpu-high mem-low log-full intf-ip vpn-tun-up vpn-tun-down ha-switch ha-hb-failure ips-signature ips-anomaly av-virus av-oversize av-pattern av-fragmented fm-if-change bgp-established bgp-backward-transition ha-member-up ha-member-down ent-conf-change av-conserve av-bypass av-oversize-passed av-oversize-blocked ips-pkg-update ips-fail-open faz-disconnect wc-ap-up wc-ap-down fswctl-session-up fswctl-session-down load-balance-real-server-down per-cpu-high"),
//				Fosid:          pulumi.Int(1),
//				QueryV1Port:    pulumi.Int(161),
//				QueryV1Status:  pulumi.String("enable"),
//				QueryV2cPort:   pulumi.Int(161),
//				QueryV2cStatus: pulumi.String("enable"),
//				Status:         pulumi.String("enable"),
//				TrapV1Lport:    pulumi.Int(162),
//				TrapV1Rport:    pulumi.Int(162),
//				TrapV1Status:   pulumi.String("enable"),
//				TrapV2cLport:   pulumi.Int(162),
//				TrapV2cRport:   pulumi.Int(162),
//				TrapV2cStatus:  pulumi.String("enable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # SystemSnmp Community can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemsnmpCommunity:SystemsnmpCommunity labelname {{fosid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemsnmpCommunity:SystemsnmpCommunity labelname {{fosid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemsnmpCommunity struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// SNMP trap events.
	Events pulumi.StringOutput `pulumi:"events"`
	// Community ID.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts SystemsnmpCommunityHostArrayOutput `pulumi:"hosts"`
	// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
	Hosts6s SystemsnmpCommunityHosts6ArrayOutput `pulumi:"hosts6s"`
	// SNMP access control MIB view.
	MibView pulumi.StringOutput `pulumi:"mibView"`
	// Community name.
	Name pulumi.StringOutput `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port pulumi.IntOutput `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
	QueryV1Status pulumi.StringOutput `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort pulumi.IntOutput `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
	QueryV2cStatus pulumi.StringOutput `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
	Status pulumi.StringOutput `pulumi:"status"`
	// SNMP v1 trap local port (default = 162).
	TrapV1Lport pulumi.IntOutput `pulumi:"trapV1Lport"`
	// SNMP v1 trap remote port (default = 162).
	TrapV1Rport pulumi.IntOutput `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
	TrapV1Status pulumi.StringOutput `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport pulumi.IntOutput `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport pulumi.IntOutput `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
	TrapV2cStatus pulumi.StringOutput `pulumi:"trapV2cStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
	Vdoms SystemsnmpCommunityVdomArrayOutput `pulumi:"vdoms"`
}

// NewSystemsnmpCommunity registers a new resource with the given unique name, arguments, and options.
func NewSystemsnmpCommunity(ctx *pulumi.Context,
	name string, args *SystemsnmpCommunityArgs, opts ...pulumi.ResourceOption) (*SystemsnmpCommunity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fosid == nil {
		return nil, errors.New("invalid value for required argument 'Fosid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemsnmpCommunity
	err := ctx.RegisterResource("fortios:index/systemsnmpCommunity:SystemsnmpCommunity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemsnmpCommunity gets an existing SystemsnmpCommunity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemsnmpCommunity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemsnmpCommunityState, opts ...pulumi.ResourceOption) (*SystemsnmpCommunity, error) {
	var resource SystemsnmpCommunity
	err := ctx.ReadResource("fortios:index/systemsnmpCommunity:SystemsnmpCommunity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemsnmpCommunity resources.
type systemsnmpCommunityState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// SNMP trap events.
	Events *string `pulumi:"events"`
	// Community ID.
	Fosid *int `pulumi:"fosid"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts []SystemsnmpCommunityHost `pulumi:"hosts"`
	// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
	Hosts6s []SystemsnmpCommunityHosts6 `pulumi:"hosts6s"`
	// SNMP access control MIB view.
	MibView *string `pulumi:"mibView"`
	// Community name.
	Name *string `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port *int `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
	QueryV1Status *string `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort *int `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
	QueryV2cStatus *string `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// SNMP v1 trap local port (default = 162).
	TrapV1Lport *int `pulumi:"trapV1Lport"`
	// SNMP v1 trap remote port (default = 162).
	TrapV1Rport *int `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
	TrapV1Status *string `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport *int `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport *int `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
	TrapV2cStatus *string `pulumi:"trapV2cStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
	Vdoms []SystemsnmpCommunityVdom `pulumi:"vdoms"`
}

type SystemsnmpCommunityState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// SNMP trap events.
	Events pulumi.StringPtrInput
	// Community ID.
	Fosid pulumi.IntPtrInput
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts SystemsnmpCommunityHostArrayInput
	// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
	Hosts6s SystemsnmpCommunityHosts6ArrayInput
	// SNMP access control MIB view.
	MibView pulumi.StringPtrInput
	// Community name.
	Name pulumi.StringPtrInput
	// SNMP v1 query port (default = 161).
	QueryV1Port pulumi.IntPtrInput
	// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
	QueryV1Status pulumi.StringPtrInput
	// SNMP v2c query port (default = 161).
	QueryV2cPort pulumi.IntPtrInput
	// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
	QueryV2cStatus pulumi.StringPtrInput
	// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// SNMP v1 trap local port (default = 162).
	TrapV1Lport pulumi.IntPtrInput
	// SNMP v1 trap remote port (default = 162).
	TrapV1Rport pulumi.IntPtrInput
	// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
	TrapV1Status pulumi.StringPtrInput
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport pulumi.IntPtrInput
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport pulumi.IntPtrInput
	// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
	TrapV2cStatus pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
	Vdoms SystemsnmpCommunityVdomArrayInput
}

func (SystemsnmpCommunityState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemsnmpCommunityState)(nil)).Elem()
}

type systemsnmpCommunityArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// SNMP trap events.
	Events *string `pulumi:"events"`
	// Community ID.
	Fosid int `pulumi:"fosid"`
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts []SystemsnmpCommunityHost `pulumi:"hosts"`
	// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
	Hosts6s []SystemsnmpCommunityHosts6 `pulumi:"hosts6s"`
	// SNMP access control MIB view.
	MibView *string `pulumi:"mibView"`
	// Community name.
	Name *string `pulumi:"name"`
	// SNMP v1 query port (default = 161).
	QueryV1Port *int `pulumi:"queryV1Port"`
	// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
	QueryV1Status *string `pulumi:"queryV1Status"`
	// SNMP v2c query port (default = 161).
	QueryV2cPort *int `pulumi:"queryV2cPort"`
	// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
	QueryV2cStatus *string `pulumi:"queryV2cStatus"`
	// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
	Status *string `pulumi:"status"`
	// SNMP v1 trap local port (default = 162).
	TrapV1Lport *int `pulumi:"trapV1Lport"`
	// SNMP v1 trap remote port (default = 162).
	TrapV1Rport *int `pulumi:"trapV1Rport"`
	// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
	TrapV1Status *string `pulumi:"trapV1Status"`
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport *int `pulumi:"trapV2cLport"`
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport *int `pulumi:"trapV2cRport"`
	// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
	TrapV2cStatus *string `pulumi:"trapV2cStatus"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
	Vdoms []SystemsnmpCommunityVdom `pulumi:"vdoms"`
}

// The set of arguments for constructing a SystemsnmpCommunity resource.
type SystemsnmpCommunityArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// SNMP trap events.
	Events pulumi.StringPtrInput
	// Community ID.
	Fosid pulumi.IntInput
	// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
	Hosts SystemsnmpCommunityHostArrayInput
	// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
	Hosts6s SystemsnmpCommunityHosts6ArrayInput
	// SNMP access control MIB view.
	MibView pulumi.StringPtrInput
	// Community name.
	Name pulumi.StringPtrInput
	// SNMP v1 query port (default = 161).
	QueryV1Port pulumi.IntPtrInput
	// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
	QueryV1Status pulumi.StringPtrInput
	// SNMP v2c query port (default = 161).
	QueryV2cPort pulumi.IntPtrInput
	// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
	QueryV2cStatus pulumi.StringPtrInput
	// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
	Status pulumi.StringPtrInput
	// SNMP v1 trap local port (default = 162).
	TrapV1Lport pulumi.IntPtrInput
	// SNMP v1 trap remote port (default = 162).
	TrapV1Rport pulumi.IntPtrInput
	// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
	TrapV1Status pulumi.StringPtrInput
	// SNMP v2c trap local port (default = 162).
	TrapV2cLport pulumi.IntPtrInput
	// SNMP v2c trap remote port (default = 162).
	TrapV2cRport pulumi.IntPtrInput
	// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
	TrapV2cStatus pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
	Vdoms SystemsnmpCommunityVdomArrayInput
}

func (SystemsnmpCommunityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemsnmpCommunityArgs)(nil)).Elem()
}

type SystemsnmpCommunityInput interface {
	pulumi.Input

	ToSystemsnmpCommunityOutput() SystemsnmpCommunityOutput
	ToSystemsnmpCommunityOutputWithContext(ctx context.Context) SystemsnmpCommunityOutput
}

func (*SystemsnmpCommunity) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemsnmpCommunity)(nil)).Elem()
}

func (i *SystemsnmpCommunity) ToSystemsnmpCommunityOutput() SystemsnmpCommunityOutput {
	return i.ToSystemsnmpCommunityOutputWithContext(context.Background())
}

func (i *SystemsnmpCommunity) ToSystemsnmpCommunityOutputWithContext(ctx context.Context) SystemsnmpCommunityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemsnmpCommunityOutput)
}

// SystemsnmpCommunityArrayInput is an input type that accepts SystemsnmpCommunityArray and SystemsnmpCommunityArrayOutput values.
// You can construct a concrete instance of `SystemsnmpCommunityArrayInput` via:
//
//	SystemsnmpCommunityArray{ SystemsnmpCommunityArgs{...} }
type SystemsnmpCommunityArrayInput interface {
	pulumi.Input

	ToSystemsnmpCommunityArrayOutput() SystemsnmpCommunityArrayOutput
	ToSystemsnmpCommunityArrayOutputWithContext(context.Context) SystemsnmpCommunityArrayOutput
}

type SystemsnmpCommunityArray []SystemsnmpCommunityInput

func (SystemsnmpCommunityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemsnmpCommunity)(nil)).Elem()
}

func (i SystemsnmpCommunityArray) ToSystemsnmpCommunityArrayOutput() SystemsnmpCommunityArrayOutput {
	return i.ToSystemsnmpCommunityArrayOutputWithContext(context.Background())
}

func (i SystemsnmpCommunityArray) ToSystemsnmpCommunityArrayOutputWithContext(ctx context.Context) SystemsnmpCommunityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemsnmpCommunityArrayOutput)
}

// SystemsnmpCommunityMapInput is an input type that accepts SystemsnmpCommunityMap and SystemsnmpCommunityMapOutput values.
// You can construct a concrete instance of `SystemsnmpCommunityMapInput` via:
//
//	SystemsnmpCommunityMap{ "key": SystemsnmpCommunityArgs{...} }
type SystemsnmpCommunityMapInput interface {
	pulumi.Input

	ToSystemsnmpCommunityMapOutput() SystemsnmpCommunityMapOutput
	ToSystemsnmpCommunityMapOutputWithContext(context.Context) SystemsnmpCommunityMapOutput
}

type SystemsnmpCommunityMap map[string]SystemsnmpCommunityInput

func (SystemsnmpCommunityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemsnmpCommunity)(nil)).Elem()
}

func (i SystemsnmpCommunityMap) ToSystemsnmpCommunityMapOutput() SystemsnmpCommunityMapOutput {
	return i.ToSystemsnmpCommunityMapOutputWithContext(context.Background())
}

func (i SystemsnmpCommunityMap) ToSystemsnmpCommunityMapOutputWithContext(ctx context.Context) SystemsnmpCommunityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemsnmpCommunityMapOutput)
}

type SystemsnmpCommunityOutput struct{ *pulumi.OutputState }

func (SystemsnmpCommunityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemsnmpCommunity)(nil)).Elem()
}

func (o SystemsnmpCommunityOutput) ToSystemsnmpCommunityOutput() SystemsnmpCommunityOutput {
	return o
}

func (o SystemsnmpCommunityOutput) ToSystemsnmpCommunityOutputWithContext(ctx context.Context) SystemsnmpCommunityOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SystemsnmpCommunityOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// SNMP trap events.
func (o SystemsnmpCommunityOutput) Events() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.StringOutput { return v.Events }).(pulumi.StringOutput)
}

// Community ID.
func (o SystemsnmpCommunityOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
func (o SystemsnmpCommunityOutput) Hosts() SystemsnmpCommunityHostArrayOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) SystemsnmpCommunityHostArrayOutput { return v.Hosts }).(SystemsnmpCommunityHostArrayOutput)
}

// Configure IPv6 SNMP managers. The structure of `hosts6` block is documented below.
func (o SystemsnmpCommunityOutput) Hosts6s() SystemsnmpCommunityHosts6ArrayOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) SystemsnmpCommunityHosts6ArrayOutput { return v.Hosts6s }).(SystemsnmpCommunityHosts6ArrayOutput)
}

// SNMP access control MIB view.
func (o SystemsnmpCommunityOutput) MibView() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.StringOutput { return v.MibView }).(pulumi.StringOutput)
}

// Community name.
func (o SystemsnmpCommunityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SNMP v1 query port (default = 161).
func (o SystemsnmpCommunityOutput) QueryV1Port() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.IntOutput { return v.QueryV1Port }).(pulumi.IntOutput)
}

// Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
func (o SystemsnmpCommunityOutput) QueryV1Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.StringOutput { return v.QueryV1Status }).(pulumi.StringOutput)
}

// SNMP v2c query port (default = 161).
func (o SystemsnmpCommunityOutput) QueryV2cPort() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.IntOutput { return v.QueryV2cPort }).(pulumi.IntOutput)
}

// Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
func (o SystemsnmpCommunityOutput) QueryV2cStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.StringOutput { return v.QueryV2cStatus }).(pulumi.StringOutput)
}

// Enable/disable this SNMP community. Valid values: `enable`, `disable`.
func (o SystemsnmpCommunityOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// SNMP v1 trap local port (default = 162).
func (o SystemsnmpCommunityOutput) TrapV1Lport() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.IntOutput { return v.TrapV1Lport }).(pulumi.IntOutput)
}

// SNMP v1 trap remote port (default = 162).
func (o SystemsnmpCommunityOutput) TrapV1Rport() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.IntOutput { return v.TrapV1Rport }).(pulumi.IntOutput)
}

// Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
func (o SystemsnmpCommunityOutput) TrapV1Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.StringOutput { return v.TrapV1Status }).(pulumi.StringOutput)
}

// SNMP v2c trap local port (default = 162).
func (o SystemsnmpCommunityOutput) TrapV2cLport() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.IntOutput { return v.TrapV2cLport }).(pulumi.IntOutput)
}

// SNMP v2c trap remote port (default = 162).
func (o SystemsnmpCommunityOutput) TrapV2cRport() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.IntOutput { return v.TrapV2cRport }).(pulumi.IntOutput)
}

// Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
func (o SystemsnmpCommunityOutput) TrapV2cStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.StringOutput { return v.TrapV2cStatus }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemsnmpCommunityOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// SNMP access control VDOMs. The structure of `vdoms` block is documented below.
func (o SystemsnmpCommunityOutput) Vdoms() SystemsnmpCommunityVdomArrayOutput {
	return o.ApplyT(func(v *SystemsnmpCommunity) SystemsnmpCommunityVdomArrayOutput { return v.Vdoms }).(SystemsnmpCommunityVdomArrayOutput)
}

type SystemsnmpCommunityArrayOutput struct{ *pulumi.OutputState }

func (SystemsnmpCommunityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemsnmpCommunity)(nil)).Elem()
}

func (o SystemsnmpCommunityArrayOutput) ToSystemsnmpCommunityArrayOutput() SystemsnmpCommunityArrayOutput {
	return o
}

func (o SystemsnmpCommunityArrayOutput) ToSystemsnmpCommunityArrayOutputWithContext(ctx context.Context) SystemsnmpCommunityArrayOutput {
	return o
}

func (o SystemsnmpCommunityArrayOutput) Index(i pulumi.IntInput) SystemsnmpCommunityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemsnmpCommunity {
		return vs[0].([]*SystemsnmpCommunity)[vs[1].(int)]
	}).(SystemsnmpCommunityOutput)
}

type SystemsnmpCommunityMapOutput struct{ *pulumi.OutputState }

func (SystemsnmpCommunityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemsnmpCommunity)(nil)).Elem()
}

func (o SystemsnmpCommunityMapOutput) ToSystemsnmpCommunityMapOutput() SystemsnmpCommunityMapOutput {
	return o
}

func (o SystemsnmpCommunityMapOutput) ToSystemsnmpCommunityMapOutputWithContext(ctx context.Context) SystemsnmpCommunityMapOutput {
	return o
}

func (o SystemsnmpCommunityMapOutput) MapIndex(k pulumi.StringInput) SystemsnmpCommunityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemsnmpCommunity {
		return vs[0].(map[string]*SystemsnmpCommunity)[vs[1].(string)]
	}).(SystemsnmpCommunityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemsnmpCommunityInput)(nil)).Elem(), &SystemsnmpCommunity{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemsnmpCommunityArrayInput)(nil)).Elem(), SystemsnmpCommunityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemsnmpCommunityMapInput)(nil)).Elem(), SystemsnmpCommunityMap{})
	pulumi.RegisterOutputType(SystemsnmpCommunityOutput{})
	pulumi.RegisterOutputType(SystemsnmpCommunityArrayOutput{})
	pulumi.RegisterOutputType(SystemsnmpCommunityMapOutput{})
}
