// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure access lists.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewRouterAccesslist(ctx, "trname", &fortios.RouterAccesslistArgs{
//				Comments: pulumi.String("test accesslist"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Note
//
// The feature can only be correctly supported when FortiOS Version >= 6.2.4, for FortiOS Version < 6.2.4, please use the following resource configuration as an alternative.
//
// ### Example
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemAutoscript(ctx, "trname1", &fortios.SystemAutoscriptArgs{
//				Interval:   pulumi.Int(1),
//				OutputSize: pulumi.Int(10),
//				Repeat:     pulumi.Int(1),
//				Script:     pulumi.String("config router access-list\nedit \"static-redistribution\"\nconfig rule\nedit 10\nset prefix 10.0.0.0 255.255.255.0\nset action permit\nset exact-match enable\nend\nend\n\n"),
//				Start:      pulumi.String("auto"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Router AccessList can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/routerAccesslist:RouterAccesslist labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="true"
//
// ```sh
//
//	$ pulumi import fortios:index/routerAccesslist:RouterAccesslist labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type RouterAccesslist struct {
	pulumi.CustomResourceState

	// Comment.
	Comments            pulumi.StringOutput    `pulumi:"comments"`
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Rule. The structure of `rule` block is documented below.
	Rules     RouterAccesslistRuleArrayOutput `pulumi:"rules"`
	Vdomparam pulumi.StringPtrOutput          `pulumi:"vdomparam"`
}

// NewRouterAccesslist registers a new resource with the given unique name, arguments, and options.
func NewRouterAccesslist(ctx *pulumi.Context,
	name string, args *RouterAccesslistArgs, opts ...pulumi.ResourceOption) (*RouterAccesslist, error) {
	if args == nil {
		args = &RouterAccesslistArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource RouterAccesslist
	err := ctx.RegisterResource("fortios:index/routerAccesslist:RouterAccesslist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouterAccesslist gets an existing RouterAccesslist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouterAccesslist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouterAccesslistState, opts ...pulumi.ResourceOption) (*RouterAccesslist, error) {
	var resource RouterAccesslist
	err := ctx.ReadResource("fortios:index/routerAccesslist:RouterAccesslist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouterAccesslist resources.
type routerAccesslistState struct {
	// Comment.
	Comments            *string `pulumi:"comments"`
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name.
	Name *string `pulumi:"name"`
	// Rule. The structure of `rule` block is documented below.
	Rules     []RouterAccesslistRule `pulumi:"rules"`
	Vdomparam *string                `pulumi:"vdomparam"`
}

type RouterAccesslistState struct {
	// Comment.
	Comments            pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Rule. The structure of `rule` block is documented below.
	Rules     RouterAccesslistRuleArrayInput
	Vdomparam pulumi.StringPtrInput
}

func (RouterAccesslistState) ElementType() reflect.Type {
	return reflect.TypeOf((*routerAccesslistState)(nil)).Elem()
}

type routerAccesslistArgs struct {
	// Comment.
	Comments            *string `pulumi:"comments"`
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Name.
	Name *string `pulumi:"name"`
	// Rule. The structure of `rule` block is documented below.
	Rules     []RouterAccesslistRule `pulumi:"rules"`
	Vdomparam *string                `pulumi:"vdomparam"`
}

// The set of arguments for constructing a RouterAccesslist resource.
type RouterAccesslistArgs struct {
	// Comment.
	Comments            pulumi.StringPtrInput
	DynamicSortSubtable pulumi.StringPtrInput
	// Name.
	Name pulumi.StringPtrInput
	// Rule. The structure of `rule` block is documented below.
	Rules     RouterAccesslistRuleArrayInput
	Vdomparam pulumi.StringPtrInput
}

func (RouterAccesslistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routerAccesslistArgs)(nil)).Elem()
}

type RouterAccesslistInput interface {
	pulumi.Input

	ToRouterAccesslistOutput() RouterAccesslistOutput
	ToRouterAccesslistOutputWithContext(ctx context.Context) RouterAccesslistOutput
}

func (*RouterAccesslist) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterAccesslist)(nil)).Elem()
}

func (i *RouterAccesslist) ToRouterAccesslistOutput() RouterAccesslistOutput {
	return i.ToRouterAccesslistOutputWithContext(context.Background())
}

func (i *RouterAccesslist) ToRouterAccesslistOutputWithContext(ctx context.Context) RouterAccesslistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAccesslistOutput)
}

// RouterAccesslistArrayInput is an input type that accepts RouterAccesslistArray and RouterAccesslistArrayOutput values.
// You can construct a concrete instance of `RouterAccesslistArrayInput` via:
//
//	RouterAccesslistArray{ RouterAccesslistArgs{...} }
type RouterAccesslistArrayInput interface {
	pulumi.Input

	ToRouterAccesslistArrayOutput() RouterAccesslistArrayOutput
	ToRouterAccesslistArrayOutputWithContext(context.Context) RouterAccesslistArrayOutput
}

type RouterAccesslistArray []RouterAccesslistInput

func (RouterAccesslistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterAccesslist)(nil)).Elem()
}

func (i RouterAccesslistArray) ToRouterAccesslistArrayOutput() RouterAccesslistArrayOutput {
	return i.ToRouterAccesslistArrayOutputWithContext(context.Background())
}

func (i RouterAccesslistArray) ToRouterAccesslistArrayOutputWithContext(ctx context.Context) RouterAccesslistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAccesslistArrayOutput)
}

// RouterAccesslistMapInput is an input type that accepts RouterAccesslistMap and RouterAccesslistMapOutput values.
// You can construct a concrete instance of `RouterAccesslistMapInput` via:
//
//	RouterAccesslistMap{ "key": RouterAccesslistArgs{...} }
type RouterAccesslistMapInput interface {
	pulumi.Input

	ToRouterAccesslistMapOutput() RouterAccesslistMapOutput
	ToRouterAccesslistMapOutputWithContext(context.Context) RouterAccesslistMapOutput
}

type RouterAccesslistMap map[string]RouterAccesslistInput

func (RouterAccesslistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterAccesslist)(nil)).Elem()
}

func (i RouterAccesslistMap) ToRouterAccesslistMapOutput() RouterAccesslistMapOutput {
	return i.ToRouterAccesslistMapOutputWithContext(context.Background())
}

func (i RouterAccesslistMap) ToRouterAccesslistMapOutputWithContext(ctx context.Context) RouterAccesslistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAccesslistMapOutput)
}

type RouterAccesslistOutput struct{ *pulumi.OutputState }

func (RouterAccesslistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterAccesslist)(nil)).Elem()
}

func (o RouterAccesslistOutput) ToRouterAccesslistOutput() RouterAccesslistOutput {
	return o
}

func (o RouterAccesslistOutput) ToRouterAccesslistOutputWithContext(ctx context.Context) RouterAccesslistOutput {
	return o
}

// Comment.
func (o RouterAccesslistOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterAccesslist) pulumi.StringOutput { return v.Comments }).(pulumi.StringOutput)
}

func (o RouterAccesslistOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterAccesslist) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Name.
func (o RouterAccesslistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouterAccesslist) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Rule. The structure of `rule` block is documented below.
func (o RouterAccesslistOutput) Rules() RouterAccesslistRuleArrayOutput {
	return o.ApplyT(func(v *RouterAccesslist) RouterAccesslistRuleArrayOutput { return v.Rules }).(RouterAccesslistRuleArrayOutput)
}

func (o RouterAccesslistOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterAccesslist) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type RouterAccesslistArrayOutput struct{ *pulumi.OutputState }

func (RouterAccesslistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouterAccesslist)(nil)).Elem()
}

func (o RouterAccesslistArrayOutput) ToRouterAccesslistArrayOutput() RouterAccesslistArrayOutput {
	return o
}

func (o RouterAccesslistArrayOutput) ToRouterAccesslistArrayOutputWithContext(ctx context.Context) RouterAccesslistArrayOutput {
	return o
}

func (o RouterAccesslistArrayOutput) Index(i pulumi.IntInput) RouterAccesslistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouterAccesslist {
		return vs[0].([]*RouterAccesslist)[vs[1].(int)]
	}).(RouterAccesslistOutput)
}

type RouterAccesslistMapOutput struct{ *pulumi.OutputState }

func (RouterAccesslistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouterAccesslist)(nil)).Elem()
}

func (o RouterAccesslistMapOutput) ToRouterAccesslistMapOutput() RouterAccesslistMapOutput {
	return o
}

func (o RouterAccesslistMapOutput) ToRouterAccesslistMapOutputWithContext(ctx context.Context) RouterAccesslistMapOutput {
	return o
}

func (o RouterAccesslistMapOutput) MapIndex(k pulumi.StringInput) RouterAccesslistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouterAccesslist {
		return vs[0].(map[string]*RouterAccesslist)[vs[1].(string)]
	}).(RouterAccesslistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAccesslistInput)(nil)).Elem(), &RouterAccesslist{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAccesslistArrayInput)(nil)).Elem(), RouterAccesslistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterAccesslistMapInput)(nil)).Elem(), RouterAccesslistMap{})
	pulumi.RegisterOutputType(RouterAccesslistOutput{})
	pulumi.RegisterOutputType(RouterAccesslistArrayOutput{})
	pulumi.RegisterOutputType(RouterAccesslistMapOutput{})
}
