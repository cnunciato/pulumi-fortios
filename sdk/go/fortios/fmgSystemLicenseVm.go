// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource supports uploading VM license to FortiGate through FortiManager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewFmgSystemLicenseVm(ctx, "test1", &fortios.FmgSystemLicenseVmArgs{
//				FileContent: pulumi.String("XXX"),
//				Target:      pulumi.String("fortigate-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FmgSystemLicenseVm struct {
	pulumi.CustomResourceState

	// ADOM that the target device belongs to. default is 'root'.
	Adom pulumi.StringPtrOutput `pulumi:"adom"`
	// The license file, it needs to be base64 encoded.
	FileContent pulumi.StringOutput `pulumi:"fileContent"`
	// Target name, which is managed by FortiManager.
	Target pulumi.StringOutput `pulumi:"target"`
}

// NewFmgSystemLicenseVm registers a new resource with the given unique name, arguments, and options.
func NewFmgSystemLicenseVm(ctx *pulumi.Context,
	name string, args *FmgSystemLicenseVmArgs, opts ...pulumi.ResourceOption) (*FmgSystemLicenseVm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileContent == nil {
		return nil, errors.New("invalid value for required argument 'FileContent'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FmgSystemLicenseVm
	err := ctx.RegisterResource("fortios:index/fmgSystemLicenseVm:FmgSystemLicenseVm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFmgSystemLicenseVm gets an existing FmgSystemLicenseVm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFmgSystemLicenseVm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FmgSystemLicenseVmState, opts ...pulumi.ResourceOption) (*FmgSystemLicenseVm, error) {
	var resource FmgSystemLicenseVm
	err := ctx.ReadResource("fortios:index/fmgSystemLicenseVm:FmgSystemLicenseVm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FmgSystemLicenseVm resources.
type fmgSystemLicenseVmState struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom *string `pulumi:"adom"`
	// The license file, it needs to be base64 encoded.
	FileContent *string `pulumi:"fileContent"`
	// Target name, which is managed by FortiManager.
	Target *string `pulumi:"target"`
}

type FmgSystemLicenseVmState struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom pulumi.StringPtrInput
	// The license file, it needs to be base64 encoded.
	FileContent pulumi.StringPtrInput
	// Target name, which is managed by FortiManager.
	Target pulumi.StringPtrInput
}

func (FmgSystemLicenseVmState) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgSystemLicenseVmState)(nil)).Elem()
}

type fmgSystemLicenseVmArgs struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom *string `pulumi:"adom"`
	// The license file, it needs to be base64 encoded.
	FileContent string `pulumi:"fileContent"`
	// Target name, which is managed by FortiManager.
	Target string `pulumi:"target"`
}

// The set of arguments for constructing a FmgSystemLicenseVm resource.
type FmgSystemLicenseVmArgs struct {
	// ADOM that the target device belongs to. default is 'root'.
	Adom pulumi.StringPtrInput
	// The license file, it needs to be base64 encoded.
	FileContent pulumi.StringInput
	// Target name, which is managed by FortiManager.
	Target pulumi.StringInput
}

func (FmgSystemLicenseVmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fmgSystemLicenseVmArgs)(nil)).Elem()
}

type FmgSystemLicenseVmInput interface {
	pulumi.Input

	ToFmgSystemLicenseVmOutput() FmgSystemLicenseVmOutput
	ToFmgSystemLicenseVmOutputWithContext(ctx context.Context) FmgSystemLicenseVmOutput
}

func (*FmgSystemLicenseVm) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgSystemLicenseVm)(nil)).Elem()
}

func (i *FmgSystemLicenseVm) ToFmgSystemLicenseVmOutput() FmgSystemLicenseVmOutput {
	return i.ToFmgSystemLicenseVmOutputWithContext(context.Background())
}

func (i *FmgSystemLicenseVm) ToFmgSystemLicenseVmOutputWithContext(ctx context.Context) FmgSystemLicenseVmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemLicenseVmOutput)
}

// FmgSystemLicenseVmArrayInput is an input type that accepts FmgSystemLicenseVmArray and FmgSystemLicenseVmArrayOutput values.
// You can construct a concrete instance of `FmgSystemLicenseVmArrayInput` via:
//
//	FmgSystemLicenseVmArray{ FmgSystemLicenseVmArgs{...} }
type FmgSystemLicenseVmArrayInput interface {
	pulumi.Input

	ToFmgSystemLicenseVmArrayOutput() FmgSystemLicenseVmArrayOutput
	ToFmgSystemLicenseVmArrayOutputWithContext(context.Context) FmgSystemLicenseVmArrayOutput
}

type FmgSystemLicenseVmArray []FmgSystemLicenseVmInput

func (FmgSystemLicenseVmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgSystemLicenseVm)(nil)).Elem()
}

func (i FmgSystemLicenseVmArray) ToFmgSystemLicenseVmArrayOutput() FmgSystemLicenseVmArrayOutput {
	return i.ToFmgSystemLicenseVmArrayOutputWithContext(context.Background())
}

func (i FmgSystemLicenseVmArray) ToFmgSystemLicenseVmArrayOutputWithContext(ctx context.Context) FmgSystemLicenseVmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemLicenseVmArrayOutput)
}

// FmgSystemLicenseVmMapInput is an input type that accepts FmgSystemLicenseVmMap and FmgSystemLicenseVmMapOutput values.
// You can construct a concrete instance of `FmgSystemLicenseVmMapInput` via:
//
//	FmgSystemLicenseVmMap{ "key": FmgSystemLicenseVmArgs{...} }
type FmgSystemLicenseVmMapInput interface {
	pulumi.Input

	ToFmgSystemLicenseVmMapOutput() FmgSystemLicenseVmMapOutput
	ToFmgSystemLicenseVmMapOutputWithContext(context.Context) FmgSystemLicenseVmMapOutput
}

type FmgSystemLicenseVmMap map[string]FmgSystemLicenseVmInput

func (FmgSystemLicenseVmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgSystemLicenseVm)(nil)).Elem()
}

func (i FmgSystemLicenseVmMap) ToFmgSystemLicenseVmMapOutput() FmgSystemLicenseVmMapOutput {
	return i.ToFmgSystemLicenseVmMapOutputWithContext(context.Background())
}

func (i FmgSystemLicenseVmMap) ToFmgSystemLicenseVmMapOutputWithContext(ctx context.Context) FmgSystemLicenseVmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FmgSystemLicenseVmMapOutput)
}

type FmgSystemLicenseVmOutput struct{ *pulumi.OutputState }

func (FmgSystemLicenseVmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FmgSystemLicenseVm)(nil)).Elem()
}

func (o FmgSystemLicenseVmOutput) ToFmgSystemLicenseVmOutput() FmgSystemLicenseVmOutput {
	return o
}

func (o FmgSystemLicenseVmOutput) ToFmgSystemLicenseVmOutputWithContext(ctx context.Context) FmgSystemLicenseVmOutput {
	return o
}

// ADOM that the target device belongs to. default is 'root'.
func (o FmgSystemLicenseVmOutput) Adom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FmgSystemLicenseVm) pulumi.StringPtrOutput { return v.Adom }).(pulumi.StringPtrOutput)
}

// The license file, it needs to be base64 encoded.
func (o FmgSystemLicenseVmOutput) FileContent() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgSystemLicenseVm) pulumi.StringOutput { return v.FileContent }).(pulumi.StringOutput)
}

// Target name, which is managed by FortiManager.
func (o FmgSystemLicenseVmOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *FmgSystemLicenseVm) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

type FmgSystemLicenseVmArrayOutput struct{ *pulumi.OutputState }

func (FmgSystemLicenseVmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FmgSystemLicenseVm)(nil)).Elem()
}

func (o FmgSystemLicenseVmArrayOutput) ToFmgSystemLicenseVmArrayOutput() FmgSystemLicenseVmArrayOutput {
	return o
}

func (o FmgSystemLicenseVmArrayOutput) ToFmgSystemLicenseVmArrayOutputWithContext(ctx context.Context) FmgSystemLicenseVmArrayOutput {
	return o
}

func (o FmgSystemLicenseVmArrayOutput) Index(i pulumi.IntInput) FmgSystemLicenseVmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FmgSystemLicenseVm {
		return vs[0].([]*FmgSystemLicenseVm)[vs[1].(int)]
	}).(FmgSystemLicenseVmOutput)
}

type FmgSystemLicenseVmMapOutput struct{ *pulumi.OutputState }

func (FmgSystemLicenseVmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FmgSystemLicenseVm)(nil)).Elem()
}

func (o FmgSystemLicenseVmMapOutput) ToFmgSystemLicenseVmMapOutput() FmgSystemLicenseVmMapOutput {
	return o
}

func (o FmgSystemLicenseVmMapOutput) ToFmgSystemLicenseVmMapOutputWithContext(ctx context.Context) FmgSystemLicenseVmMapOutput {
	return o
}

func (o FmgSystemLicenseVmMapOutput) MapIndex(k pulumi.StringInput) FmgSystemLicenseVmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FmgSystemLicenseVm {
		return vs[0].(map[string]*FmgSystemLicenseVm)[vs[1].(string)]
	}).(FmgSystemLicenseVmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemLicenseVmInput)(nil)).Elem(), &FmgSystemLicenseVm{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemLicenseVmArrayInput)(nil)).Elem(), FmgSystemLicenseVmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FmgSystemLicenseVmMapInput)(nil)).Elem(), FmgSystemLicenseVmMap{})
	pulumi.RegisterOutputType(FmgSystemLicenseVmOutput{})
	pulumi.RegisterOutputType(FmgSystemLicenseVmArrayOutput{})
	pulumi.RegisterOutputType(FmgSystemLicenseVmMapOutput{})
}
