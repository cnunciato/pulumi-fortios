// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure user password policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewUserPasswordpolicy(ctx, "trname", &fortios.UserPasswordpolicyArgs{
//				ExpireDays: pulumi.Int(22),
//				WarnDays:   pulumi.Int(13),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # User PasswordPolicy can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/userPasswordpolicy:UserPasswordpolicy labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/userPasswordpolicy:UserPasswordpolicy labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type UserPasswordpolicy struct {
	pulumi.CustomResourceState

	// Time in days before the user's password expires.
	ExpireDays pulumi.IntOutput `pulumi:"expireDays"`
	// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
	ExpiredPasswordRenewal pulumi.StringOutput `pulumi:"expiredPasswordRenewal"`
	// Password policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Time in days before a password expiration warning message is displayed to the user upon login.
	WarnDays pulumi.IntOutput `pulumi:"warnDays"`
}

// NewUserPasswordpolicy registers a new resource with the given unique name, arguments, and options.
func NewUserPasswordpolicy(ctx *pulumi.Context,
	name string, args *UserPasswordpolicyArgs, opts ...pulumi.ResourceOption) (*UserPasswordpolicy, error) {
	if args == nil {
		args = &UserPasswordpolicyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserPasswordpolicy
	err := ctx.RegisterResource("fortios:index/userPasswordpolicy:UserPasswordpolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPasswordpolicy gets an existing UserPasswordpolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPasswordpolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPasswordpolicyState, opts ...pulumi.ResourceOption) (*UserPasswordpolicy, error) {
	var resource UserPasswordpolicy
	err := ctx.ReadResource("fortios:index/userPasswordpolicy:UserPasswordpolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPasswordpolicy resources.
type userPasswordpolicyState struct {
	// Time in days before the user's password expires.
	ExpireDays *int `pulumi:"expireDays"`
	// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
	ExpiredPasswordRenewal *string `pulumi:"expiredPasswordRenewal"`
	// Password policy name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Time in days before a password expiration warning message is displayed to the user upon login.
	WarnDays *int `pulumi:"warnDays"`
}

type UserPasswordpolicyState struct {
	// Time in days before the user's password expires.
	ExpireDays pulumi.IntPtrInput
	// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
	ExpiredPasswordRenewal pulumi.StringPtrInput
	// Password policy name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Time in days before a password expiration warning message is displayed to the user upon login.
	WarnDays pulumi.IntPtrInput
}

func (UserPasswordpolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPasswordpolicyState)(nil)).Elem()
}

type userPasswordpolicyArgs struct {
	// Time in days before the user's password expires.
	ExpireDays *int `pulumi:"expireDays"`
	// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
	ExpiredPasswordRenewal *string `pulumi:"expiredPasswordRenewal"`
	// Password policy name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Time in days before a password expiration warning message is displayed to the user upon login.
	WarnDays *int `pulumi:"warnDays"`
}

// The set of arguments for constructing a UserPasswordpolicy resource.
type UserPasswordpolicyArgs struct {
	// Time in days before the user's password expires.
	ExpireDays pulumi.IntPtrInput
	// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
	ExpiredPasswordRenewal pulumi.StringPtrInput
	// Password policy name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Time in days before a password expiration warning message is displayed to the user upon login.
	WarnDays pulumi.IntPtrInput
}

func (UserPasswordpolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPasswordpolicyArgs)(nil)).Elem()
}

type UserPasswordpolicyInput interface {
	pulumi.Input

	ToUserPasswordpolicyOutput() UserPasswordpolicyOutput
	ToUserPasswordpolicyOutputWithContext(ctx context.Context) UserPasswordpolicyOutput
}

func (*UserPasswordpolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPasswordpolicy)(nil)).Elem()
}

func (i *UserPasswordpolicy) ToUserPasswordpolicyOutput() UserPasswordpolicyOutput {
	return i.ToUserPasswordpolicyOutputWithContext(context.Background())
}

func (i *UserPasswordpolicy) ToUserPasswordpolicyOutputWithContext(ctx context.Context) UserPasswordpolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordpolicyOutput)
}

// UserPasswordpolicyArrayInput is an input type that accepts UserPasswordpolicyArray and UserPasswordpolicyArrayOutput values.
// You can construct a concrete instance of `UserPasswordpolicyArrayInput` via:
//
//	UserPasswordpolicyArray{ UserPasswordpolicyArgs{...} }
type UserPasswordpolicyArrayInput interface {
	pulumi.Input

	ToUserPasswordpolicyArrayOutput() UserPasswordpolicyArrayOutput
	ToUserPasswordpolicyArrayOutputWithContext(context.Context) UserPasswordpolicyArrayOutput
}

type UserPasswordpolicyArray []UserPasswordpolicyInput

func (UserPasswordpolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPasswordpolicy)(nil)).Elem()
}

func (i UserPasswordpolicyArray) ToUserPasswordpolicyArrayOutput() UserPasswordpolicyArrayOutput {
	return i.ToUserPasswordpolicyArrayOutputWithContext(context.Background())
}

func (i UserPasswordpolicyArray) ToUserPasswordpolicyArrayOutputWithContext(ctx context.Context) UserPasswordpolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordpolicyArrayOutput)
}

// UserPasswordpolicyMapInput is an input type that accepts UserPasswordpolicyMap and UserPasswordpolicyMapOutput values.
// You can construct a concrete instance of `UserPasswordpolicyMapInput` via:
//
//	UserPasswordpolicyMap{ "key": UserPasswordpolicyArgs{...} }
type UserPasswordpolicyMapInput interface {
	pulumi.Input

	ToUserPasswordpolicyMapOutput() UserPasswordpolicyMapOutput
	ToUserPasswordpolicyMapOutputWithContext(context.Context) UserPasswordpolicyMapOutput
}

type UserPasswordpolicyMap map[string]UserPasswordpolicyInput

func (UserPasswordpolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPasswordpolicy)(nil)).Elem()
}

func (i UserPasswordpolicyMap) ToUserPasswordpolicyMapOutput() UserPasswordpolicyMapOutput {
	return i.ToUserPasswordpolicyMapOutputWithContext(context.Background())
}

func (i UserPasswordpolicyMap) ToUserPasswordpolicyMapOutputWithContext(ctx context.Context) UserPasswordpolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordpolicyMapOutput)
}

type UserPasswordpolicyOutput struct{ *pulumi.OutputState }

func (UserPasswordpolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPasswordpolicy)(nil)).Elem()
}

func (o UserPasswordpolicyOutput) ToUserPasswordpolicyOutput() UserPasswordpolicyOutput {
	return o
}

func (o UserPasswordpolicyOutput) ToUserPasswordpolicyOutputWithContext(ctx context.Context) UserPasswordpolicyOutput {
	return o
}

// Time in days before the user's password expires.
func (o UserPasswordpolicyOutput) ExpireDays() pulumi.IntOutput {
	return o.ApplyT(func(v *UserPasswordpolicy) pulumi.IntOutput { return v.ExpireDays }).(pulumi.IntOutput)
}

// Enable/disable renewal of a password that already is expired. Valid values: `enable`, `disable`.
func (o UserPasswordpolicyOutput) ExpiredPasswordRenewal() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPasswordpolicy) pulumi.StringOutput { return v.ExpiredPasswordRenewal }).(pulumi.StringOutput)
}

// Password policy name.
func (o UserPasswordpolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserPasswordpolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o UserPasswordpolicyOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPasswordpolicy) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Time in days before a password expiration warning message is displayed to the user upon login.
func (o UserPasswordpolicyOutput) WarnDays() pulumi.IntOutput {
	return o.ApplyT(func(v *UserPasswordpolicy) pulumi.IntOutput { return v.WarnDays }).(pulumi.IntOutput)
}

type UserPasswordpolicyArrayOutput struct{ *pulumi.OutputState }

func (UserPasswordpolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPasswordpolicy)(nil)).Elem()
}

func (o UserPasswordpolicyArrayOutput) ToUserPasswordpolicyArrayOutput() UserPasswordpolicyArrayOutput {
	return o
}

func (o UserPasswordpolicyArrayOutput) ToUserPasswordpolicyArrayOutputWithContext(ctx context.Context) UserPasswordpolicyArrayOutput {
	return o
}

func (o UserPasswordpolicyArrayOutput) Index(i pulumi.IntInput) UserPasswordpolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserPasswordpolicy {
		return vs[0].([]*UserPasswordpolicy)[vs[1].(int)]
	}).(UserPasswordpolicyOutput)
}

type UserPasswordpolicyMapOutput struct{ *pulumi.OutputState }

func (UserPasswordpolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPasswordpolicy)(nil)).Elem()
}

func (o UserPasswordpolicyMapOutput) ToUserPasswordpolicyMapOutput() UserPasswordpolicyMapOutput {
	return o
}

func (o UserPasswordpolicyMapOutput) ToUserPasswordpolicyMapOutputWithContext(ctx context.Context) UserPasswordpolicyMapOutput {
	return o
}

func (o UserPasswordpolicyMapOutput) MapIndex(k pulumi.StringInput) UserPasswordpolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserPasswordpolicy {
		return vs[0].(map[string]*UserPasswordpolicy)[vs[1].(string)]
	}).(UserPasswordpolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordpolicyInput)(nil)).Elem(), &UserPasswordpolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordpolicyArrayInput)(nil)).Elem(), UserPasswordpolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordpolicyMapInput)(nil)).Elem(), UserPasswordpolicyMap{})
	pulumi.RegisterOutputType(UserPasswordpolicyOutput{})
	pulumi.RegisterOutputType(UserPasswordpolicyArrayOutput{})
	pulumi.RegisterOutputType(UserPasswordpolicyMapOutput{})
}
