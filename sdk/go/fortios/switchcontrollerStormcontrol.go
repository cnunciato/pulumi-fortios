// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiSwitch storm control.
//
// ## Import
//
// # SwitchController StormControl can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerStormcontrol:SwitchcontrollerStormcontrol labelname SwitchControllerStormControl
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/switchcontrollerStormcontrol:SwitchcontrollerStormcontrol labelname SwitchControllerStormControl
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SwitchcontrollerStormcontrol struct {
	pulumi.CustomResourceState

	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringOutput `pulumi:"broadcast"`
	// Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
	Rate pulumi.IntOutput `pulumi:"rate"`
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringOutput `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringOutput `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSwitchcontrollerStormcontrol registers a new resource with the given unique name, arguments, and options.
func NewSwitchcontrollerStormcontrol(ctx *pulumi.Context,
	name string, args *SwitchcontrollerStormcontrolArgs, opts ...pulumi.ResourceOption) (*SwitchcontrollerStormcontrol, error) {
	if args == nil {
		args = &SwitchcontrollerStormcontrolArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SwitchcontrollerStormcontrol
	err := ctx.RegisterResource("fortios:index/switchcontrollerStormcontrol:SwitchcontrollerStormcontrol", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchcontrollerStormcontrol gets an existing SwitchcontrollerStormcontrol resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchcontrollerStormcontrol(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchcontrollerStormcontrolState, opts ...pulumi.ResourceOption) (*SwitchcontrollerStormcontrol, error) {
	var resource SwitchcontrollerStormcontrol
	err := ctx.ReadResource("fortios:index/switchcontrollerStormcontrol:SwitchcontrollerStormcontrol", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchcontrollerStormcontrol resources.
type switchcontrollerStormcontrolState struct {
	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast *string `pulumi:"broadcast"`
	// Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
	Rate *int `pulumi:"rate"`
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast *string `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SwitchcontrollerStormcontrolState struct {
	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringPtrInput
	// Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
	Rate pulumi.IntPtrInput
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringPtrInput
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerStormcontrolState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerStormcontrolState)(nil)).Elem()
}

type switchcontrollerStormcontrolArgs struct {
	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast *string `pulumi:"broadcast"`
	// Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
	Rate *int `pulumi:"rate"`
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast *string `pulumi:"unknownMulticast"`
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast *string `pulumi:"unknownUnicast"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SwitchcontrollerStormcontrol resource.
type SwitchcontrollerStormcontrolArgs struct {
	// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
	Broadcast pulumi.StringPtrInput
	// Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
	Rate pulumi.IntPtrInput
	// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
	UnknownMulticast pulumi.StringPtrInput
	// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
	UnknownUnicast pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SwitchcontrollerStormcontrolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchcontrollerStormcontrolArgs)(nil)).Elem()
}

type SwitchcontrollerStormcontrolInput interface {
	pulumi.Input

	ToSwitchcontrollerStormcontrolOutput() SwitchcontrollerStormcontrolOutput
	ToSwitchcontrollerStormcontrolOutputWithContext(ctx context.Context) SwitchcontrollerStormcontrolOutput
}

func (*SwitchcontrollerStormcontrol) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerStormcontrol)(nil)).Elem()
}

func (i *SwitchcontrollerStormcontrol) ToSwitchcontrollerStormcontrolOutput() SwitchcontrollerStormcontrolOutput {
	return i.ToSwitchcontrollerStormcontrolOutputWithContext(context.Background())
}

func (i *SwitchcontrollerStormcontrol) ToSwitchcontrollerStormcontrolOutputWithContext(ctx context.Context) SwitchcontrollerStormcontrolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerStormcontrolOutput)
}

// SwitchcontrollerStormcontrolArrayInput is an input type that accepts SwitchcontrollerStormcontrolArray and SwitchcontrollerStormcontrolArrayOutput values.
// You can construct a concrete instance of `SwitchcontrollerStormcontrolArrayInput` via:
//
//	SwitchcontrollerStormcontrolArray{ SwitchcontrollerStormcontrolArgs{...} }
type SwitchcontrollerStormcontrolArrayInput interface {
	pulumi.Input

	ToSwitchcontrollerStormcontrolArrayOutput() SwitchcontrollerStormcontrolArrayOutput
	ToSwitchcontrollerStormcontrolArrayOutputWithContext(context.Context) SwitchcontrollerStormcontrolArrayOutput
}

type SwitchcontrollerStormcontrolArray []SwitchcontrollerStormcontrolInput

func (SwitchcontrollerStormcontrolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerStormcontrol)(nil)).Elem()
}

func (i SwitchcontrollerStormcontrolArray) ToSwitchcontrollerStormcontrolArrayOutput() SwitchcontrollerStormcontrolArrayOutput {
	return i.ToSwitchcontrollerStormcontrolArrayOutputWithContext(context.Background())
}

func (i SwitchcontrollerStormcontrolArray) ToSwitchcontrollerStormcontrolArrayOutputWithContext(ctx context.Context) SwitchcontrollerStormcontrolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerStormcontrolArrayOutput)
}

// SwitchcontrollerStormcontrolMapInput is an input type that accepts SwitchcontrollerStormcontrolMap and SwitchcontrollerStormcontrolMapOutput values.
// You can construct a concrete instance of `SwitchcontrollerStormcontrolMapInput` via:
//
//	SwitchcontrollerStormcontrolMap{ "key": SwitchcontrollerStormcontrolArgs{...} }
type SwitchcontrollerStormcontrolMapInput interface {
	pulumi.Input

	ToSwitchcontrollerStormcontrolMapOutput() SwitchcontrollerStormcontrolMapOutput
	ToSwitchcontrollerStormcontrolMapOutputWithContext(context.Context) SwitchcontrollerStormcontrolMapOutput
}

type SwitchcontrollerStormcontrolMap map[string]SwitchcontrollerStormcontrolInput

func (SwitchcontrollerStormcontrolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerStormcontrol)(nil)).Elem()
}

func (i SwitchcontrollerStormcontrolMap) ToSwitchcontrollerStormcontrolMapOutput() SwitchcontrollerStormcontrolMapOutput {
	return i.ToSwitchcontrollerStormcontrolMapOutputWithContext(context.Background())
}

func (i SwitchcontrollerStormcontrolMap) ToSwitchcontrollerStormcontrolMapOutputWithContext(ctx context.Context) SwitchcontrollerStormcontrolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchcontrollerStormcontrolMapOutput)
}

type SwitchcontrollerStormcontrolOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerStormcontrolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchcontrollerStormcontrol)(nil)).Elem()
}

func (o SwitchcontrollerStormcontrolOutput) ToSwitchcontrollerStormcontrolOutput() SwitchcontrollerStormcontrolOutput {
	return o
}

func (o SwitchcontrollerStormcontrolOutput) ToSwitchcontrollerStormcontrolOutputWithContext(ctx context.Context) SwitchcontrollerStormcontrolOutput {
	return o
}

// Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
func (o SwitchcontrollerStormcontrolOutput) Broadcast() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerStormcontrol) pulumi.StringOutput { return v.Broadcast }).(pulumi.StringOutput)
}

// Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
func (o SwitchcontrollerStormcontrolOutput) Rate() pulumi.IntOutput {
	return o.ApplyT(func(v *SwitchcontrollerStormcontrol) pulumi.IntOutput { return v.Rate }).(pulumi.IntOutput)
}

// Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
func (o SwitchcontrollerStormcontrolOutput) UnknownMulticast() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerStormcontrol) pulumi.StringOutput { return v.UnknownMulticast }).(pulumi.StringOutput)
}

// Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
func (o SwitchcontrollerStormcontrolOutput) UnknownUnicast() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchcontrollerStormcontrol) pulumi.StringOutput { return v.UnknownUnicast }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SwitchcontrollerStormcontrolOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwitchcontrollerStormcontrol) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SwitchcontrollerStormcontrolArrayOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerStormcontrolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchcontrollerStormcontrol)(nil)).Elem()
}

func (o SwitchcontrollerStormcontrolArrayOutput) ToSwitchcontrollerStormcontrolArrayOutput() SwitchcontrollerStormcontrolArrayOutput {
	return o
}

func (o SwitchcontrollerStormcontrolArrayOutput) ToSwitchcontrollerStormcontrolArrayOutputWithContext(ctx context.Context) SwitchcontrollerStormcontrolArrayOutput {
	return o
}

func (o SwitchcontrollerStormcontrolArrayOutput) Index(i pulumi.IntInput) SwitchcontrollerStormcontrolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchcontrollerStormcontrol {
		return vs[0].([]*SwitchcontrollerStormcontrol)[vs[1].(int)]
	}).(SwitchcontrollerStormcontrolOutput)
}

type SwitchcontrollerStormcontrolMapOutput struct{ *pulumi.OutputState }

func (SwitchcontrollerStormcontrolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchcontrollerStormcontrol)(nil)).Elem()
}

func (o SwitchcontrollerStormcontrolMapOutput) ToSwitchcontrollerStormcontrolMapOutput() SwitchcontrollerStormcontrolMapOutput {
	return o
}

func (o SwitchcontrollerStormcontrolMapOutput) ToSwitchcontrollerStormcontrolMapOutputWithContext(ctx context.Context) SwitchcontrollerStormcontrolMapOutput {
	return o
}

func (o SwitchcontrollerStormcontrolMapOutput) MapIndex(k pulumi.StringInput) SwitchcontrollerStormcontrolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchcontrollerStormcontrol {
		return vs[0].(map[string]*SwitchcontrollerStormcontrol)[vs[1].(string)]
	}).(SwitchcontrollerStormcontrolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerStormcontrolInput)(nil)).Elem(), &SwitchcontrollerStormcontrol{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerStormcontrolArrayInput)(nil)).Elem(), SwitchcontrollerStormcontrolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchcontrollerStormcontrolMapInput)(nil)).Elem(), SwitchcontrollerStormcontrolMap{})
	pulumi.RegisterOutputType(SwitchcontrollerStormcontrolOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerStormcontrolArrayOutput{})
	pulumi.RegisterOutputType(SwitchcontrollerStormcontrolMapOutput{})
}
