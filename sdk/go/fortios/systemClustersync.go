// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure FortiGate Session Life Support Protocol (FGSP) session synchronization. Applies to FortiOS Version `<= 7.2.0`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemClustersync(ctx, "trname", &fortios.SystemClustersyncArgs{
//				HbInterval:        pulumi.Int(3),
//				HbLostThreshold:   pulumi.Int(3),
//				Peerip:            pulumi.String("1.1.1.1"),
//				Peervd:            pulumi.String("root"),
//				SlaveAddIkeRoutes: pulumi.String("enable"),
//				SyncId:            pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # System ClusterSync can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemClustersync:SystemClustersync labelname {{sync_id}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemClustersync:SystemClustersync labelname {{sync_id}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemClustersync struct {
	pulumi.CustomResourceState

	// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
	DownIntfsBeforeSessSyncs SystemClustersyncDownIntfsBeforeSessSyncArrayOutput `pulumi:"downIntfsBeforeSessSyncs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Heartbeat interval (1 - 10 sec).
	HbInterval pulumi.IntOutput `pulumi:"hbInterval"`
	// Lost heartbeat threshold (1 - 10).
	HbLostThreshold pulumi.IntOutput `pulumi:"hbLostThreshold"`
	// IKE heartbeat interval (1 - 60 secs).
	IkeHeartbeatInterval pulumi.IntOutput `pulumi:"ikeHeartbeatInterval"`
	// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
	IkeMonitor pulumi.StringOutput `pulumi:"ikeMonitor"`
	// IKE HA monitor interval (10 - 300 secs).
	IkeMonitorInterval pulumi.IntOutput `pulumi:"ikeMonitorInterval"`
	// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
	IpsecTunnelSync pulumi.StringOutput `pulumi:"ipsecTunnelSync"`
	// IP address of the interface on the peer unit that is used for the session synchronization link.
	Peerip pulumi.StringOutput `pulumi:"peerip"`
	// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
	Peervd pulumi.StringOutput `pulumi:"peervd"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SecondaryAddIpsecRoutes pulumi.StringOutput `pulumi:"secondaryAddIpsecRoutes"`
	// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
	SessionSyncFilter SystemClustersyncSessionSyncFilterOutput `pulumi:"sessionSyncFilter"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SlaveAddIkeRoutes pulumi.StringOutput `pulumi:"slaveAddIkeRoutes"`
	// Sync ID.
	SyncId pulumi.IntOutput `pulumi:"syncId"`
	// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
	Syncvds SystemClustersyncSyncvdArrayOutput `pulumi:"syncvds"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemClustersync registers a new resource with the given unique name, arguments, and options.
func NewSystemClustersync(ctx *pulumi.Context,
	name string, args *SystemClustersyncArgs, opts ...pulumi.ResourceOption) (*SystemClustersync, error) {
	if args == nil {
		args = &SystemClustersyncArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource SystemClustersync
	err := ctx.RegisterResource("fortios:index/systemClustersync:SystemClustersync", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemClustersync gets an existing SystemClustersync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemClustersync(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemClustersyncState, opts ...pulumi.ResourceOption) (*SystemClustersync, error) {
	var resource SystemClustersync
	err := ctx.ReadResource("fortios:index/systemClustersync:SystemClustersync", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemClustersync resources.
type systemClustersyncState struct {
	// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
	DownIntfsBeforeSessSyncs []SystemClustersyncDownIntfsBeforeSessSync `pulumi:"downIntfsBeforeSessSyncs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Heartbeat interval (1 - 10 sec).
	HbInterval *int `pulumi:"hbInterval"`
	// Lost heartbeat threshold (1 - 10).
	HbLostThreshold *int `pulumi:"hbLostThreshold"`
	// IKE heartbeat interval (1 - 60 secs).
	IkeHeartbeatInterval *int `pulumi:"ikeHeartbeatInterval"`
	// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
	IkeMonitor *string `pulumi:"ikeMonitor"`
	// IKE HA monitor interval (10 - 300 secs).
	IkeMonitorInterval *int `pulumi:"ikeMonitorInterval"`
	// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
	IpsecTunnelSync *string `pulumi:"ipsecTunnelSync"`
	// IP address of the interface on the peer unit that is used for the session synchronization link.
	Peerip *string `pulumi:"peerip"`
	// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
	Peervd *string `pulumi:"peervd"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SecondaryAddIpsecRoutes *string `pulumi:"secondaryAddIpsecRoutes"`
	// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
	SessionSyncFilter *SystemClustersyncSessionSyncFilter `pulumi:"sessionSyncFilter"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SlaveAddIkeRoutes *string `pulumi:"slaveAddIkeRoutes"`
	// Sync ID.
	SyncId *int `pulumi:"syncId"`
	// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
	Syncvds []SystemClustersyncSyncvd `pulumi:"syncvds"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemClustersyncState struct {
	// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
	DownIntfsBeforeSessSyncs SystemClustersyncDownIntfsBeforeSessSyncArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Heartbeat interval (1 - 10 sec).
	HbInterval pulumi.IntPtrInput
	// Lost heartbeat threshold (1 - 10).
	HbLostThreshold pulumi.IntPtrInput
	// IKE heartbeat interval (1 - 60 secs).
	IkeHeartbeatInterval pulumi.IntPtrInput
	// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
	IkeMonitor pulumi.StringPtrInput
	// IKE HA monitor interval (10 - 300 secs).
	IkeMonitorInterval pulumi.IntPtrInput
	// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
	IpsecTunnelSync pulumi.StringPtrInput
	// IP address of the interface on the peer unit that is used for the session synchronization link.
	Peerip pulumi.StringPtrInput
	// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
	Peervd pulumi.StringPtrInput
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SecondaryAddIpsecRoutes pulumi.StringPtrInput
	// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
	SessionSyncFilter SystemClustersyncSessionSyncFilterPtrInput
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SlaveAddIkeRoutes pulumi.StringPtrInput
	// Sync ID.
	SyncId pulumi.IntPtrInput
	// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
	Syncvds SystemClustersyncSyncvdArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemClustersyncState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemClustersyncState)(nil)).Elem()
}

type systemClustersyncArgs struct {
	// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
	DownIntfsBeforeSessSyncs []SystemClustersyncDownIntfsBeforeSessSync `pulumi:"downIntfsBeforeSessSyncs"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Heartbeat interval (1 - 10 sec).
	HbInterval *int `pulumi:"hbInterval"`
	// Lost heartbeat threshold (1 - 10).
	HbLostThreshold *int `pulumi:"hbLostThreshold"`
	// IKE heartbeat interval (1 - 60 secs).
	IkeHeartbeatInterval *int `pulumi:"ikeHeartbeatInterval"`
	// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
	IkeMonitor *string `pulumi:"ikeMonitor"`
	// IKE HA monitor interval (10 - 300 secs).
	IkeMonitorInterval *int `pulumi:"ikeMonitorInterval"`
	// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
	IpsecTunnelSync *string `pulumi:"ipsecTunnelSync"`
	// IP address of the interface on the peer unit that is used for the session synchronization link.
	Peerip *string `pulumi:"peerip"`
	// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
	Peervd *string `pulumi:"peervd"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SecondaryAddIpsecRoutes *string `pulumi:"secondaryAddIpsecRoutes"`
	// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
	SessionSyncFilter *SystemClustersyncSessionSyncFilter `pulumi:"sessionSyncFilter"`
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SlaveAddIkeRoutes *string `pulumi:"slaveAddIkeRoutes"`
	// Sync ID.
	SyncId *int `pulumi:"syncId"`
	// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
	Syncvds []SystemClustersyncSyncvd `pulumi:"syncvds"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemClustersync resource.
type SystemClustersyncArgs struct {
	// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
	DownIntfsBeforeSessSyncs SystemClustersyncDownIntfsBeforeSessSyncArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Heartbeat interval (1 - 10 sec).
	HbInterval pulumi.IntPtrInput
	// Lost heartbeat threshold (1 - 10).
	HbLostThreshold pulumi.IntPtrInput
	// IKE heartbeat interval (1 - 60 secs).
	IkeHeartbeatInterval pulumi.IntPtrInput
	// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
	IkeMonitor pulumi.StringPtrInput
	// IKE HA monitor interval (10 - 300 secs).
	IkeMonitorInterval pulumi.IntPtrInput
	// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
	IpsecTunnelSync pulumi.StringPtrInput
	// IP address of the interface on the peer unit that is used for the session synchronization link.
	Peerip pulumi.StringPtrInput
	// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
	Peervd pulumi.StringPtrInput
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SecondaryAddIpsecRoutes pulumi.StringPtrInput
	// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
	SessionSyncFilter SystemClustersyncSessionSyncFilterPtrInput
	// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
	SlaveAddIkeRoutes pulumi.StringPtrInput
	// Sync ID.
	SyncId pulumi.IntPtrInput
	// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
	Syncvds SystemClustersyncSyncvdArrayInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemClustersyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemClustersyncArgs)(nil)).Elem()
}

type SystemClustersyncInput interface {
	pulumi.Input

	ToSystemClustersyncOutput() SystemClustersyncOutput
	ToSystemClustersyncOutputWithContext(ctx context.Context) SystemClustersyncOutput
}

func (*SystemClustersync) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemClustersync)(nil)).Elem()
}

func (i *SystemClustersync) ToSystemClustersyncOutput() SystemClustersyncOutput {
	return i.ToSystemClustersyncOutputWithContext(context.Background())
}

func (i *SystemClustersync) ToSystemClustersyncOutputWithContext(ctx context.Context) SystemClustersyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemClustersyncOutput)
}

// SystemClustersyncArrayInput is an input type that accepts SystemClustersyncArray and SystemClustersyncArrayOutput values.
// You can construct a concrete instance of `SystemClustersyncArrayInput` via:
//
//	SystemClustersyncArray{ SystemClustersyncArgs{...} }
type SystemClustersyncArrayInput interface {
	pulumi.Input

	ToSystemClustersyncArrayOutput() SystemClustersyncArrayOutput
	ToSystemClustersyncArrayOutputWithContext(context.Context) SystemClustersyncArrayOutput
}

type SystemClustersyncArray []SystemClustersyncInput

func (SystemClustersyncArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemClustersync)(nil)).Elem()
}

func (i SystemClustersyncArray) ToSystemClustersyncArrayOutput() SystemClustersyncArrayOutput {
	return i.ToSystemClustersyncArrayOutputWithContext(context.Background())
}

func (i SystemClustersyncArray) ToSystemClustersyncArrayOutputWithContext(ctx context.Context) SystemClustersyncArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemClustersyncArrayOutput)
}

// SystemClustersyncMapInput is an input type that accepts SystemClustersyncMap and SystemClustersyncMapOutput values.
// You can construct a concrete instance of `SystemClustersyncMapInput` via:
//
//	SystemClustersyncMap{ "key": SystemClustersyncArgs{...} }
type SystemClustersyncMapInput interface {
	pulumi.Input

	ToSystemClustersyncMapOutput() SystemClustersyncMapOutput
	ToSystemClustersyncMapOutputWithContext(context.Context) SystemClustersyncMapOutput
}

type SystemClustersyncMap map[string]SystemClustersyncInput

func (SystemClustersyncMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemClustersync)(nil)).Elem()
}

func (i SystemClustersyncMap) ToSystemClustersyncMapOutput() SystemClustersyncMapOutput {
	return i.ToSystemClustersyncMapOutputWithContext(context.Background())
}

func (i SystemClustersyncMap) ToSystemClustersyncMapOutputWithContext(ctx context.Context) SystemClustersyncMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemClustersyncMapOutput)
}

type SystemClustersyncOutput struct{ *pulumi.OutputState }

func (SystemClustersyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemClustersync)(nil)).Elem()
}

func (o SystemClustersyncOutput) ToSystemClustersyncOutput() SystemClustersyncOutput {
	return o
}

func (o SystemClustersyncOutput) ToSystemClustersyncOutputWithContext(ctx context.Context) SystemClustersyncOutput {
	return o
}

// List of interfaces to be turned down before session synchronization is complete. The structure of `downIntfsBeforeSessSync` block is documented below.
func (o SystemClustersyncOutput) DownIntfsBeforeSessSyncs() SystemClustersyncDownIntfsBeforeSessSyncArrayOutput {
	return o.ApplyT(func(v *SystemClustersync) SystemClustersyncDownIntfsBeforeSessSyncArrayOutput {
		return v.DownIntfsBeforeSessSyncs
	}).(SystemClustersyncDownIntfsBeforeSessSyncArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SystemClustersyncOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Heartbeat interval (1 - 10 sec).
func (o SystemClustersyncOutput) HbInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.IntOutput { return v.HbInterval }).(pulumi.IntOutput)
}

// Lost heartbeat threshold (1 - 10).
func (o SystemClustersyncOutput) HbLostThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.IntOutput { return v.HbLostThreshold }).(pulumi.IntOutput)
}

// IKE heartbeat interval (1 - 60 secs).
func (o SystemClustersyncOutput) IkeHeartbeatInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.IntOutput { return v.IkeHeartbeatInterval }).(pulumi.IntOutput)
}

// Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
func (o SystemClustersyncOutput) IkeMonitor() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.StringOutput { return v.IkeMonitor }).(pulumi.StringOutput)
}

// IKE HA monitor interval (10 - 300 secs).
func (o SystemClustersyncOutput) IkeMonitorInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.IntOutput { return v.IkeMonitorInterval }).(pulumi.IntOutput)
}

// Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
func (o SystemClustersyncOutput) IpsecTunnelSync() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.StringOutput { return v.IpsecTunnelSync }).(pulumi.StringOutput)
}

// IP address of the interface on the peer unit that is used for the session synchronization link.
func (o SystemClustersyncOutput) Peerip() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.StringOutput { return v.Peerip }).(pulumi.StringOutput)
}

// VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
func (o SystemClustersyncOutput) Peervd() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.StringOutput { return v.Peervd }).(pulumi.StringOutput)
}

// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
func (o SystemClustersyncOutput) SecondaryAddIpsecRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.StringOutput { return v.SecondaryAddIpsecRoutes }).(pulumi.StringOutput)
}

// Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `sessionSyncFilter` block is documented below.
func (o SystemClustersyncOutput) SessionSyncFilter() SystemClustersyncSessionSyncFilterOutput {
	return o.ApplyT(func(v *SystemClustersync) SystemClustersyncSessionSyncFilterOutput { return v.SessionSyncFilter }).(SystemClustersyncSessionSyncFilterOutput)
}

// Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
func (o SystemClustersyncOutput) SlaveAddIkeRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.StringOutput { return v.SlaveAddIkeRoutes }).(pulumi.StringOutput)
}

// Sync ID.
func (o SystemClustersyncOutput) SyncId() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.IntOutput { return v.SyncId }).(pulumi.IntOutput)
}

// Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
func (o SystemClustersyncOutput) Syncvds() SystemClustersyncSyncvdArrayOutput {
	return o.ApplyT(func(v *SystemClustersync) SystemClustersyncSyncvdArrayOutput { return v.Syncvds }).(SystemClustersyncSyncvdArrayOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemClustersyncOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemClustersync) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemClustersyncArrayOutput struct{ *pulumi.OutputState }

func (SystemClustersyncArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemClustersync)(nil)).Elem()
}

func (o SystemClustersyncArrayOutput) ToSystemClustersyncArrayOutput() SystemClustersyncArrayOutput {
	return o
}

func (o SystemClustersyncArrayOutput) ToSystemClustersyncArrayOutputWithContext(ctx context.Context) SystemClustersyncArrayOutput {
	return o
}

func (o SystemClustersyncArrayOutput) Index(i pulumi.IntInput) SystemClustersyncOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemClustersync {
		return vs[0].([]*SystemClustersync)[vs[1].(int)]
	}).(SystemClustersyncOutput)
}

type SystemClustersyncMapOutput struct{ *pulumi.OutputState }

func (SystemClustersyncMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemClustersync)(nil)).Elem()
}

func (o SystemClustersyncMapOutput) ToSystemClustersyncMapOutput() SystemClustersyncMapOutput {
	return o
}

func (o SystemClustersyncMapOutput) ToSystemClustersyncMapOutputWithContext(ctx context.Context) SystemClustersyncMapOutput {
	return o
}

func (o SystemClustersyncMapOutput) MapIndex(k pulumi.StringInput) SystemClustersyncOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemClustersync {
		return vs[0].(map[string]*SystemClustersync)[vs[1].(string)]
	}).(SystemClustersyncOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemClustersyncInput)(nil)).Elem(), &SystemClustersync{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemClustersyncArrayInput)(nil)).Elem(), SystemClustersyncArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemClustersyncMapInput)(nil)).Elem(), SystemClustersyncMap{})
	pulumi.RegisterOutputType(SystemClustersyncOutput{})
	pulumi.RegisterOutputType(SystemClustersyncArrayOutput{})
	pulumi.RegisterOutputType(SystemClustersyncMapOutput{})
}
