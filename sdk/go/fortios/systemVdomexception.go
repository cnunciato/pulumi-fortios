// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Global configuration objects that can be configured independently for all VDOMs or for the defined VDOM scope.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemVdomexception(ctx, "trname", &fortios.SystemVdomexceptionArgs{
//				Fosid:  pulumi.Int(1),
//				Object: pulumi.String("log.fortianalyzer.setting"),
//				Oid:    pulumi.Int(7150),
//				Scope:  pulumi.String("all"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # System VdomException can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemVdomexception:SystemVdomexception labelname {{fosid}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemVdomexception:SystemVdomexception labelname {{fosid}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemVdomexception struct {
	pulumi.CustomResourceState

	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Index <1-4096>.
	Fosid pulumi.IntOutput `pulumi:"fosid"`
	// Name of the configuration object that can be configured independently for all VDOMs.
	Object pulumi.StringOutput `pulumi:"object"`
	// Object ID.
	Oid pulumi.IntOutput `pulumi:"oid"`
	// Determine whether the configuration object can be configured separately for all VDOMs or if some VDOMs share the same configuration. Valid values: `all`, `inclusive`, `exclusive`.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
	// Names of the VDOMs. The structure of `vdom` block is documented below.
	Vdoms SystemVdomexceptionVdomArrayOutput `pulumi:"vdoms"`
}

// NewSystemVdomexception registers a new resource with the given unique name, arguments, and options.
func NewSystemVdomexception(ctx *pulumi.Context,
	name string, args *SystemVdomexceptionArgs, opts ...pulumi.ResourceOption) (*SystemVdomexception, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Object == nil {
		return nil, errors.New("invalid value for required argument 'Object'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemVdomexception
	err := ctx.RegisterResource("fortios:index/systemVdomexception:SystemVdomexception", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemVdomexception gets an existing SystemVdomexception resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemVdomexception(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemVdomexceptionState, opts ...pulumi.ResourceOption) (*SystemVdomexception, error) {
	var resource SystemVdomexception
	err := ctx.ReadResource("fortios:index/systemVdomexception:SystemVdomexception", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemVdomexception resources.
type systemVdomexceptionState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Index <1-4096>.
	Fosid *int `pulumi:"fosid"`
	// Name of the configuration object that can be configured independently for all VDOMs.
	Object *string `pulumi:"object"`
	// Object ID.
	Oid *int `pulumi:"oid"`
	// Determine whether the configuration object can be configured separately for all VDOMs or if some VDOMs share the same configuration. Valid values: `all`, `inclusive`, `exclusive`.
	Scope *string `pulumi:"scope"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Names of the VDOMs. The structure of `vdom` block is documented below.
	Vdoms []SystemVdomexceptionVdom `pulumi:"vdoms"`
}

type SystemVdomexceptionState struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Index <1-4096>.
	Fosid pulumi.IntPtrInput
	// Name of the configuration object that can be configured independently for all VDOMs.
	Object pulumi.StringPtrInput
	// Object ID.
	Oid pulumi.IntPtrInput
	// Determine whether the configuration object can be configured separately for all VDOMs or if some VDOMs share the same configuration. Valid values: `all`, `inclusive`, `exclusive`.
	Scope pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Names of the VDOMs. The structure of `vdom` block is documented below.
	Vdoms SystemVdomexceptionVdomArrayInput
}

func (SystemVdomexceptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVdomexceptionState)(nil)).Elem()
}

type systemVdomexceptionArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Index <1-4096>.
	Fosid *int `pulumi:"fosid"`
	// Name of the configuration object that can be configured independently for all VDOMs.
	Object string `pulumi:"object"`
	// Object ID.
	Oid *int `pulumi:"oid"`
	// Determine whether the configuration object can be configured separately for all VDOMs or if some VDOMs share the same configuration. Valid values: `all`, `inclusive`, `exclusive`.
	Scope *string `pulumi:"scope"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
	// Names of the VDOMs. The structure of `vdom` block is documented below.
	Vdoms []SystemVdomexceptionVdom `pulumi:"vdoms"`
}

// The set of arguments for constructing a SystemVdomexception resource.
type SystemVdomexceptionArgs struct {
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Index <1-4096>.
	Fosid pulumi.IntPtrInput
	// Name of the configuration object that can be configured independently for all VDOMs.
	Object pulumi.StringInput
	// Object ID.
	Oid pulumi.IntPtrInput
	// Determine whether the configuration object can be configured separately for all VDOMs or if some VDOMs share the same configuration. Valid values: `all`, `inclusive`, `exclusive`.
	Scope pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
	// Names of the VDOMs. The structure of `vdom` block is documented below.
	Vdoms SystemVdomexceptionVdomArrayInput
}

func (SystemVdomexceptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemVdomexceptionArgs)(nil)).Elem()
}

type SystemVdomexceptionInput interface {
	pulumi.Input

	ToSystemVdomexceptionOutput() SystemVdomexceptionOutput
	ToSystemVdomexceptionOutputWithContext(ctx context.Context) SystemVdomexceptionOutput
}

func (*SystemVdomexception) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVdomexception)(nil)).Elem()
}

func (i *SystemVdomexception) ToSystemVdomexceptionOutput() SystemVdomexceptionOutput {
	return i.ToSystemVdomexceptionOutputWithContext(context.Background())
}

func (i *SystemVdomexception) ToSystemVdomexceptionOutputWithContext(ctx context.Context) SystemVdomexceptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomexceptionOutput)
}

// SystemVdomexceptionArrayInput is an input type that accepts SystemVdomexceptionArray and SystemVdomexceptionArrayOutput values.
// You can construct a concrete instance of `SystemVdomexceptionArrayInput` via:
//
//	SystemVdomexceptionArray{ SystemVdomexceptionArgs{...} }
type SystemVdomexceptionArrayInput interface {
	pulumi.Input

	ToSystemVdomexceptionArrayOutput() SystemVdomexceptionArrayOutput
	ToSystemVdomexceptionArrayOutputWithContext(context.Context) SystemVdomexceptionArrayOutput
}

type SystemVdomexceptionArray []SystemVdomexceptionInput

func (SystemVdomexceptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVdomexception)(nil)).Elem()
}

func (i SystemVdomexceptionArray) ToSystemVdomexceptionArrayOutput() SystemVdomexceptionArrayOutput {
	return i.ToSystemVdomexceptionArrayOutputWithContext(context.Background())
}

func (i SystemVdomexceptionArray) ToSystemVdomexceptionArrayOutputWithContext(ctx context.Context) SystemVdomexceptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomexceptionArrayOutput)
}

// SystemVdomexceptionMapInput is an input type that accepts SystemVdomexceptionMap and SystemVdomexceptionMapOutput values.
// You can construct a concrete instance of `SystemVdomexceptionMapInput` via:
//
//	SystemVdomexceptionMap{ "key": SystemVdomexceptionArgs{...} }
type SystemVdomexceptionMapInput interface {
	pulumi.Input

	ToSystemVdomexceptionMapOutput() SystemVdomexceptionMapOutput
	ToSystemVdomexceptionMapOutputWithContext(context.Context) SystemVdomexceptionMapOutput
}

type SystemVdomexceptionMap map[string]SystemVdomexceptionInput

func (SystemVdomexceptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVdomexception)(nil)).Elem()
}

func (i SystemVdomexceptionMap) ToSystemVdomexceptionMapOutput() SystemVdomexceptionMapOutput {
	return i.ToSystemVdomexceptionMapOutputWithContext(context.Background())
}

func (i SystemVdomexceptionMap) ToSystemVdomexceptionMapOutputWithContext(ctx context.Context) SystemVdomexceptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemVdomexceptionMapOutput)
}

type SystemVdomexceptionOutput struct{ *pulumi.OutputState }

func (SystemVdomexceptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemVdomexception)(nil)).Elem()
}

func (o SystemVdomexceptionOutput) ToSystemVdomexceptionOutput() SystemVdomexceptionOutput {
	return o
}

func (o SystemVdomexceptionOutput) ToSystemVdomexceptionOutputWithContext(ctx context.Context) SystemVdomexceptionOutput {
	return o
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o SystemVdomexceptionOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVdomexception) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Index <1-4096>.
func (o SystemVdomexceptionOutput) Fosid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVdomexception) pulumi.IntOutput { return v.Fosid }).(pulumi.IntOutput)
}

// Name of the configuration object that can be configured independently for all VDOMs.
func (o SystemVdomexceptionOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomexception) pulumi.StringOutput { return v.Object }).(pulumi.StringOutput)
}

// Object ID.
func (o SystemVdomexceptionOutput) Oid() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemVdomexception) pulumi.IntOutput { return v.Oid }).(pulumi.IntOutput)
}

// Determine whether the configuration object can be configured separately for all VDOMs or if some VDOMs share the same configuration. Valid values: `all`, `inclusive`, `exclusive`.
func (o SystemVdomexceptionOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemVdomexception) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemVdomexceptionOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemVdomexception) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

// Names of the VDOMs. The structure of `vdom` block is documented below.
func (o SystemVdomexceptionOutput) Vdoms() SystemVdomexceptionVdomArrayOutput {
	return o.ApplyT(func(v *SystemVdomexception) SystemVdomexceptionVdomArrayOutput { return v.Vdoms }).(SystemVdomexceptionVdomArrayOutput)
}

type SystemVdomexceptionArrayOutput struct{ *pulumi.OutputState }

func (SystemVdomexceptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemVdomexception)(nil)).Elem()
}

func (o SystemVdomexceptionArrayOutput) ToSystemVdomexceptionArrayOutput() SystemVdomexceptionArrayOutput {
	return o
}

func (o SystemVdomexceptionArrayOutput) ToSystemVdomexceptionArrayOutputWithContext(ctx context.Context) SystemVdomexceptionArrayOutput {
	return o
}

func (o SystemVdomexceptionArrayOutput) Index(i pulumi.IntInput) SystemVdomexceptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemVdomexception {
		return vs[0].([]*SystemVdomexception)[vs[1].(int)]
	}).(SystemVdomexceptionOutput)
}

type SystemVdomexceptionMapOutput struct{ *pulumi.OutputState }

func (SystemVdomexceptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemVdomexception)(nil)).Elem()
}

func (o SystemVdomexceptionMapOutput) ToSystemVdomexceptionMapOutput() SystemVdomexceptionMapOutput {
	return o
}

func (o SystemVdomexceptionMapOutput) ToSystemVdomexceptionMapOutputWithContext(ctx context.Context) SystemVdomexceptionMapOutput {
	return o
}

func (o SystemVdomexceptionMapOutput) MapIndex(k pulumi.StringInput) SystemVdomexceptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemVdomexception {
		return vs[0].(map[string]*SystemVdomexception)[vs[1].(string)]
	}).(SystemVdomexceptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomexceptionInput)(nil)).Elem(), &SystemVdomexception{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomexceptionArrayInput)(nil)).Elem(), SystemVdomexceptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemVdomexceptionMapInput)(nil)).Elem(), SystemVdomexceptionMap{})
	pulumi.RegisterOutputType(SystemVdomexceptionOutput{})
	pulumi.RegisterOutputType(SystemVdomexceptionArrayOutput{})
	pulumi.RegisterOutputType(SystemVdomexceptionMapOutput{})
}
