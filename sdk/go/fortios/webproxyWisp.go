// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure Wireless Internet service provider (WISP) servers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewWebproxyWisp(ctx, "trname", &fortios.WebproxyWispArgs{
//				MaxConnections: pulumi.Int(64),
//				OutgoingIp:     pulumi.String("0.0.0.0"),
//				ServerIp:       pulumi.String("1.1.1.1"),
//				ServerPort:     pulumi.Int(15868),
//				Timeout:        pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # WebProxy Wisp can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/webproxyWisp:WebproxyWisp labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/webproxyWisp:WebproxyWisp labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type WebproxyWisp struct {
	pulumi.CustomResourceState

	// Comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
	MaxConnections pulumi.IntOutput `pulumi:"maxConnections"`
	// Server name.
	Name pulumi.StringOutput `pulumi:"name"`
	// WISP outgoing IP address.
	OutgoingIp pulumi.StringOutput `pulumi:"outgoingIp"`
	// WISP server IP address.
	ServerIp pulumi.StringOutput `pulumi:"serverIp"`
	// WISP server port (1 - 65535, default = 15868).
	ServerPort pulumi.IntOutput `pulumi:"serverPort"`
	// Period of time before WISP requests time out (1 - 15 sec, default = 5).
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewWebproxyWisp registers a new resource with the given unique name, arguments, and options.
func NewWebproxyWisp(ctx *pulumi.Context,
	name string, args *WebproxyWispArgs, opts ...pulumi.ResourceOption) (*WebproxyWisp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerIp == nil {
		return nil, errors.New("invalid value for required argument 'ServerIp'")
	}
	if args.ServerPort == nil {
		return nil, errors.New("invalid value for required argument 'ServerPort'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WebproxyWisp
	err := ctx.RegisterResource("fortios:index/webproxyWisp:WebproxyWisp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebproxyWisp gets an existing WebproxyWisp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebproxyWisp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebproxyWispState, opts ...pulumi.ResourceOption) (*WebproxyWisp, error) {
	var resource WebproxyWisp
	err := ctx.ReadResource("fortios:index/webproxyWisp:WebproxyWisp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebproxyWisp resources.
type webproxyWispState struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
	MaxConnections *int `pulumi:"maxConnections"`
	// Server name.
	Name *string `pulumi:"name"`
	// WISP outgoing IP address.
	OutgoingIp *string `pulumi:"outgoingIp"`
	// WISP server IP address.
	ServerIp *string `pulumi:"serverIp"`
	// WISP server port (1 - 65535, default = 15868).
	ServerPort *int `pulumi:"serverPort"`
	// Period of time before WISP requests time out (1 - 15 sec, default = 5).
	Timeout *int `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type WebproxyWispState struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
	MaxConnections pulumi.IntPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// WISP outgoing IP address.
	OutgoingIp pulumi.StringPtrInput
	// WISP server IP address.
	ServerIp pulumi.StringPtrInput
	// WISP server port (1 - 65535, default = 15868).
	ServerPort pulumi.IntPtrInput
	// Period of time before WISP requests time out (1 - 15 sec, default = 5).
	Timeout pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebproxyWispState) ElementType() reflect.Type {
	return reflect.TypeOf((*webproxyWispState)(nil)).Elem()
}

type webproxyWispArgs struct {
	// Comment.
	Comment *string `pulumi:"comment"`
	// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
	MaxConnections *int `pulumi:"maxConnections"`
	// Server name.
	Name *string `pulumi:"name"`
	// WISP outgoing IP address.
	OutgoingIp *string `pulumi:"outgoingIp"`
	// WISP server IP address.
	ServerIp string `pulumi:"serverIp"`
	// WISP server port (1 - 65535, default = 15868).
	ServerPort int `pulumi:"serverPort"`
	// Period of time before WISP requests time out (1 - 15 sec, default = 5).
	Timeout *int `pulumi:"timeout"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a WebproxyWisp resource.
type WebproxyWispArgs struct {
	// Comment.
	Comment pulumi.StringPtrInput
	// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
	MaxConnections pulumi.IntPtrInput
	// Server name.
	Name pulumi.StringPtrInput
	// WISP outgoing IP address.
	OutgoingIp pulumi.StringPtrInput
	// WISP server IP address.
	ServerIp pulumi.StringInput
	// WISP server port (1 - 65535, default = 15868).
	ServerPort pulumi.IntInput
	// Period of time before WISP requests time out (1 - 15 sec, default = 5).
	Timeout pulumi.IntPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (WebproxyWispArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webproxyWispArgs)(nil)).Elem()
}

type WebproxyWispInput interface {
	pulumi.Input

	ToWebproxyWispOutput() WebproxyWispOutput
	ToWebproxyWispOutputWithContext(ctx context.Context) WebproxyWispOutput
}

func (*WebproxyWisp) ElementType() reflect.Type {
	return reflect.TypeOf((**WebproxyWisp)(nil)).Elem()
}

func (i *WebproxyWisp) ToWebproxyWispOutput() WebproxyWispOutput {
	return i.ToWebproxyWispOutputWithContext(context.Background())
}

func (i *WebproxyWisp) ToWebproxyWispOutputWithContext(ctx context.Context) WebproxyWispOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebproxyWispOutput)
}

// WebproxyWispArrayInput is an input type that accepts WebproxyWispArray and WebproxyWispArrayOutput values.
// You can construct a concrete instance of `WebproxyWispArrayInput` via:
//
//	WebproxyWispArray{ WebproxyWispArgs{...} }
type WebproxyWispArrayInput interface {
	pulumi.Input

	ToWebproxyWispArrayOutput() WebproxyWispArrayOutput
	ToWebproxyWispArrayOutputWithContext(context.Context) WebproxyWispArrayOutput
}

type WebproxyWispArray []WebproxyWispInput

func (WebproxyWispArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebproxyWisp)(nil)).Elem()
}

func (i WebproxyWispArray) ToWebproxyWispArrayOutput() WebproxyWispArrayOutput {
	return i.ToWebproxyWispArrayOutputWithContext(context.Background())
}

func (i WebproxyWispArray) ToWebproxyWispArrayOutputWithContext(ctx context.Context) WebproxyWispArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebproxyWispArrayOutput)
}

// WebproxyWispMapInput is an input type that accepts WebproxyWispMap and WebproxyWispMapOutput values.
// You can construct a concrete instance of `WebproxyWispMapInput` via:
//
//	WebproxyWispMap{ "key": WebproxyWispArgs{...} }
type WebproxyWispMapInput interface {
	pulumi.Input

	ToWebproxyWispMapOutput() WebproxyWispMapOutput
	ToWebproxyWispMapOutputWithContext(context.Context) WebproxyWispMapOutput
}

type WebproxyWispMap map[string]WebproxyWispInput

func (WebproxyWispMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebproxyWisp)(nil)).Elem()
}

func (i WebproxyWispMap) ToWebproxyWispMapOutput() WebproxyWispMapOutput {
	return i.ToWebproxyWispMapOutputWithContext(context.Background())
}

func (i WebproxyWispMap) ToWebproxyWispMapOutputWithContext(ctx context.Context) WebproxyWispMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebproxyWispMapOutput)
}

type WebproxyWispOutput struct{ *pulumi.OutputState }

func (WebproxyWispOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebproxyWisp)(nil)).Elem()
}

func (o WebproxyWispOutput) ToWebproxyWispOutput() WebproxyWispOutput {
	return o
}

func (o WebproxyWispOutput) ToWebproxyWispOutputWithContext(ctx context.Context) WebproxyWispOutput {
	return o
}

// Comment.
func (o WebproxyWispOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebproxyWisp) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Maximum number of web proxy WISP connections (4 - 4096, default = 64).
func (o WebproxyWispOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v *WebproxyWisp) pulumi.IntOutput { return v.MaxConnections }).(pulumi.IntOutput)
}

// Server name.
func (o WebproxyWispOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyWisp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// WISP outgoing IP address.
func (o WebproxyWispOutput) OutgoingIp() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyWisp) pulumi.StringOutput { return v.OutgoingIp }).(pulumi.StringOutput)
}

// WISP server IP address.
func (o WebproxyWispOutput) ServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *WebproxyWisp) pulumi.StringOutput { return v.ServerIp }).(pulumi.StringOutput)
}

// WISP server port (1 - 65535, default = 15868).
func (o WebproxyWispOutput) ServerPort() pulumi.IntOutput {
	return o.ApplyT(func(v *WebproxyWisp) pulumi.IntOutput { return v.ServerPort }).(pulumi.IntOutput)
}

// Period of time before WISP requests time out (1 - 15 sec, default = 5).
func (o WebproxyWispOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *WebproxyWisp) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o WebproxyWispOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebproxyWisp) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type WebproxyWispArrayOutput struct{ *pulumi.OutputState }

func (WebproxyWispArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebproxyWisp)(nil)).Elem()
}

func (o WebproxyWispArrayOutput) ToWebproxyWispArrayOutput() WebproxyWispArrayOutput {
	return o
}

func (o WebproxyWispArrayOutput) ToWebproxyWispArrayOutputWithContext(ctx context.Context) WebproxyWispArrayOutput {
	return o
}

func (o WebproxyWispArrayOutput) Index(i pulumi.IntInput) WebproxyWispOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebproxyWisp {
		return vs[0].([]*WebproxyWisp)[vs[1].(int)]
	}).(WebproxyWispOutput)
}

type WebproxyWispMapOutput struct{ *pulumi.OutputState }

func (WebproxyWispMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebproxyWisp)(nil)).Elem()
}

func (o WebproxyWispMapOutput) ToWebproxyWispMapOutput() WebproxyWispMapOutput {
	return o
}

func (o WebproxyWispMapOutput) ToWebproxyWispMapOutputWithContext(ctx context.Context) WebproxyWispMapOutput {
	return o
}

func (o WebproxyWispMapOutput) MapIndex(k pulumi.StringInput) WebproxyWispOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebproxyWisp {
		return vs[0].(map[string]*WebproxyWisp)[vs[1].(string)]
	}).(WebproxyWispOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebproxyWispInput)(nil)).Elem(), &WebproxyWisp{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebproxyWispArrayInput)(nil)).Elem(), WebproxyWispArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebproxyWispMapInput)(nil)).Elem(), WebproxyWispMap{})
	pulumi.RegisterOutputType(WebproxyWispOutput{})
	pulumi.RegisterOutputType(WebproxyWispArrayOutput{})
	pulumi.RegisterOutputType(WebproxyWispMapOutput{})
}
