// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure the email server used by the FortiGate various things. For example, for sending email messages to users to support user authentication features.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewSystemEmailserver(ctx, "trname", &fortios.SystemEmailserverArgs{
//				Authenticate:       pulumi.String("disable"),
//				Port:               pulumi.Int(465),
//				Security:           pulumi.String("smtps"),
//				Server:             pulumi.String("notification.fortinet.net"),
//				SourceIp:           pulumi.String("0.0.0.0"),
//				SourceIp6:          pulumi.String("::"),
//				SslMinProtoVersion: pulumi.String("default"),
//				Type:               pulumi.String("custom"),
//				ValidateServer:     pulumi.String("disable"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # System EmailServer can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/systemEmailserver:SystemEmailserver labelname SystemEmailServer
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/systemEmailserver:SystemEmailserver labelname SystemEmailServer
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type SystemEmailserver struct {
	pulumi.CustomResourceState

	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authenticate pulumi.StringOutput `pulumi:"authenticate"`
	// Specify outgoing interface to reach server.
	Interface pulumi.StringOutput `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringOutput `pulumi:"interfaceSelectMethod"`
	// SMTP server user password for authentication.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// SMTP server port.
	Port pulumi.IntOutput `pulumi:"port"`
	// Reply-To email address.
	ReplyTo pulumi.StringOutput `pulumi:"replyTo"`
	// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
	Security pulumi.StringOutput `pulumi:"security"`
	// SMTP server IP address or hostname.
	Server pulumi.StringOutput `pulumi:"server"`
	// SMTP server IPv4 source IP.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// SMTP server IPv6 source IP.
	SourceIp6 pulumi.StringOutput `pulumi:"sourceIp6"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion pulumi.StringOutput `pulumi:"sslMinProtoVersion"`
	// Use FortiGuard Message service or custom email server. Valid values: `custom`.
	Type pulumi.StringOutput `pulumi:"type"`
	// SMTP server user name for authentication.
	Username pulumi.StringOutput `pulumi:"username"`
	// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
	ValidateServer pulumi.StringOutput `pulumi:"validateServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewSystemEmailserver registers a new resource with the given unique name, arguments, and options.
func NewSystemEmailserver(ctx *pulumi.Context,
	name string, args *SystemEmailserverArgs, opts ...pulumi.ResourceOption) (*SystemEmailserver, error) {
	if args == nil {
		args = &SystemEmailserverArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource SystemEmailserver
	err := ctx.RegisterResource("fortios:index/systemEmailserver:SystemEmailserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemEmailserver gets an existing SystemEmailserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemEmailserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemEmailserverState, opts ...pulumi.ResourceOption) (*SystemEmailserver, error) {
	var resource SystemEmailserver
	err := ctx.ReadResource("fortios:index/systemEmailserver:SystemEmailserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemEmailserver resources.
type systemEmailserverState struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authenticate *string `pulumi:"authenticate"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// SMTP server user password for authentication.
	Password *string `pulumi:"password"`
	// SMTP server port.
	Port *int `pulumi:"port"`
	// Reply-To email address.
	ReplyTo *string `pulumi:"replyTo"`
	// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
	Security *string `pulumi:"security"`
	// SMTP server IP address or hostname.
	Server *string `pulumi:"server"`
	// SMTP server IPv4 source IP.
	SourceIp *string `pulumi:"sourceIp"`
	// SMTP server IPv6 source IP.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Use FortiGuard Message service or custom email server. Valid values: `custom`.
	Type *string `pulumi:"type"`
	// SMTP server user name for authentication.
	Username *string `pulumi:"username"`
	// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
	ValidateServer *string `pulumi:"validateServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type SystemEmailserverState struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authenticate pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// SMTP server user password for authentication.
	Password pulumi.StringPtrInput
	// SMTP server port.
	Port pulumi.IntPtrInput
	// Reply-To email address.
	ReplyTo pulumi.StringPtrInput
	// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
	Security pulumi.StringPtrInput
	// SMTP server IP address or hostname.
	Server pulumi.StringPtrInput
	// SMTP server IPv4 source IP.
	SourceIp pulumi.StringPtrInput
	// SMTP server IPv6 source IP.
	SourceIp6 pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion pulumi.StringPtrInput
	// Use FortiGuard Message service or custom email server. Valid values: `custom`.
	Type pulumi.StringPtrInput
	// SMTP server user name for authentication.
	Username pulumi.StringPtrInput
	// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
	ValidateServer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemEmailserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemEmailserverState)(nil)).Elem()
}

type systemEmailserverArgs struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authenticate *string `pulumi:"authenticate"`
	// Specify outgoing interface to reach server.
	Interface *string `pulumi:"interface"`
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod *string `pulumi:"interfaceSelectMethod"`
	// SMTP server user password for authentication.
	Password *string `pulumi:"password"`
	// SMTP server port.
	Port *int `pulumi:"port"`
	// Reply-To email address.
	ReplyTo *string `pulumi:"replyTo"`
	// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
	Security *string `pulumi:"security"`
	// SMTP server IP address or hostname.
	Server *string `pulumi:"server"`
	// SMTP server IPv4 source IP.
	SourceIp *string `pulumi:"sourceIp"`
	// SMTP server IPv6 source IP.
	SourceIp6 *string `pulumi:"sourceIp6"`
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion *string `pulumi:"sslMinProtoVersion"`
	// Use FortiGuard Message service or custom email server. Valid values: `custom`.
	Type *string `pulumi:"type"`
	// SMTP server user name for authentication.
	Username *string `pulumi:"username"`
	// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
	ValidateServer *string `pulumi:"validateServer"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a SystemEmailserver resource.
type SystemEmailserverArgs struct {
	// Enable/disable authentication. Valid values: `enable`, `disable`.
	Authenticate pulumi.StringPtrInput
	// Specify outgoing interface to reach server.
	Interface pulumi.StringPtrInput
	// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
	InterfaceSelectMethod pulumi.StringPtrInput
	// SMTP server user password for authentication.
	Password pulumi.StringPtrInput
	// SMTP server port.
	Port pulumi.IntPtrInput
	// Reply-To email address.
	ReplyTo pulumi.StringPtrInput
	// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
	Security pulumi.StringPtrInput
	// SMTP server IP address or hostname.
	Server pulumi.StringPtrInput
	// SMTP server IPv4 source IP.
	SourceIp pulumi.StringPtrInput
	// SMTP server IPv6 source IP.
	SourceIp6 pulumi.StringPtrInput
	// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
	SslMinProtoVersion pulumi.StringPtrInput
	// Use FortiGuard Message service or custom email server. Valid values: `custom`.
	Type pulumi.StringPtrInput
	// SMTP server user name for authentication.
	Username pulumi.StringPtrInput
	// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
	ValidateServer pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (SystemEmailserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemEmailserverArgs)(nil)).Elem()
}

type SystemEmailserverInput interface {
	pulumi.Input

	ToSystemEmailserverOutput() SystemEmailserverOutput
	ToSystemEmailserverOutputWithContext(ctx context.Context) SystemEmailserverOutput
}

func (*SystemEmailserver) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemEmailserver)(nil)).Elem()
}

func (i *SystemEmailserver) ToSystemEmailserverOutput() SystemEmailserverOutput {
	return i.ToSystemEmailserverOutputWithContext(context.Background())
}

func (i *SystemEmailserver) ToSystemEmailserverOutputWithContext(ctx context.Context) SystemEmailserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemEmailserverOutput)
}

// SystemEmailserverArrayInput is an input type that accepts SystemEmailserverArray and SystemEmailserverArrayOutput values.
// You can construct a concrete instance of `SystemEmailserverArrayInput` via:
//
//	SystemEmailserverArray{ SystemEmailserverArgs{...} }
type SystemEmailserverArrayInput interface {
	pulumi.Input

	ToSystemEmailserverArrayOutput() SystemEmailserverArrayOutput
	ToSystemEmailserverArrayOutputWithContext(context.Context) SystemEmailserverArrayOutput
}

type SystemEmailserverArray []SystemEmailserverInput

func (SystemEmailserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemEmailserver)(nil)).Elem()
}

func (i SystemEmailserverArray) ToSystemEmailserverArrayOutput() SystemEmailserverArrayOutput {
	return i.ToSystemEmailserverArrayOutputWithContext(context.Background())
}

func (i SystemEmailserverArray) ToSystemEmailserverArrayOutputWithContext(ctx context.Context) SystemEmailserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemEmailserverArrayOutput)
}

// SystemEmailserverMapInput is an input type that accepts SystemEmailserverMap and SystemEmailserverMapOutput values.
// You can construct a concrete instance of `SystemEmailserverMapInput` via:
//
//	SystemEmailserverMap{ "key": SystemEmailserverArgs{...} }
type SystemEmailserverMapInput interface {
	pulumi.Input

	ToSystemEmailserverMapOutput() SystemEmailserverMapOutput
	ToSystemEmailserverMapOutputWithContext(context.Context) SystemEmailserverMapOutput
}

type SystemEmailserverMap map[string]SystemEmailserverInput

func (SystemEmailserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemEmailserver)(nil)).Elem()
}

func (i SystemEmailserverMap) ToSystemEmailserverMapOutput() SystemEmailserverMapOutput {
	return i.ToSystemEmailserverMapOutputWithContext(context.Background())
}

func (i SystemEmailserverMap) ToSystemEmailserverMapOutputWithContext(ctx context.Context) SystemEmailserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemEmailserverMapOutput)
}

type SystemEmailserverOutput struct{ *pulumi.OutputState }

func (SystemEmailserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemEmailserver)(nil)).Elem()
}

func (o SystemEmailserverOutput) ToSystemEmailserverOutput() SystemEmailserverOutput {
	return o
}

func (o SystemEmailserverOutput) ToSystemEmailserverOutputWithContext(ctx context.Context) SystemEmailserverOutput {
	return o
}

// Enable/disable authentication. Valid values: `enable`, `disable`.
func (o SystemEmailserverOutput) Authenticate() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.Authenticate }).(pulumi.StringOutput)
}

// Specify outgoing interface to reach server.
func (o SystemEmailserverOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.Interface }).(pulumi.StringOutput)
}

// Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
func (o SystemEmailserverOutput) InterfaceSelectMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.InterfaceSelectMethod }).(pulumi.StringOutput)
}

// SMTP server user password for authentication.
func (o SystemEmailserverOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// SMTP server port.
func (o SystemEmailserverOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Reply-To email address.
func (o SystemEmailserverOutput) ReplyTo() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.ReplyTo }).(pulumi.StringOutput)
}

// Connection security used by the email server. Valid values: `none`, `starttls`, `smtps`.
func (o SystemEmailserverOutput) Security() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.Security }).(pulumi.StringOutput)
}

// SMTP server IP address or hostname.
func (o SystemEmailserverOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// SMTP server IPv4 source IP.
func (o SystemEmailserverOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// SMTP server IPv6 source IP.
func (o SystemEmailserverOutput) SourceIp6() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.SourceIp6 }).(pulumi.StringOutput)
}

// Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting). Valid values: `default`, `SSLv3`, `TLSv1`, `TLSv1-1`, `TLSv1-2`.
func (o SystemEmailserverOutput) SslMinProtoVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.SslMinProtoVersion }).(pulumi.StringOutput)
}

// Use FortiGuard Message service or custom email server. Valid values: `custom`.
func (o SystemEmailserverOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// SMTP server user name for authentication.
func (o SystemEmailserverOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Enable/disable validation of server certificate. Valid values: `enable`, `disable`.
func (o SystemEmailserverOutput) ValidateServer() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringOutput { return v.ValidateServer }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o SystemEmailserverOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemEmailserver) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type SystemEmailserverArrayOutput struct{ *pulumi.OutputState }

func (SystemEmailserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemEmailserver)(nil)).Elem()
}

func (o SystemEmailserverArrayOutput) ToSystemEmailserverArrayOutput() SystemEmailserverArrayOutput {
	return o
}

func (o SystemEmailserverArrayOutput) ToSystemEmailserverArrayOutputWithContext(ctx context.Context) SystemEmailserverArrayOutput {
	return o
}

func (o SystemEmailserverArrayOutput) Index(i pulumi.IntInput) SystemEmailserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemEmailserver {
		return vs[0].([]*SystemEmailserver)[vs[1].(int)]
	}).(SystemEmailserverOutput)
}

type SystemEmailserverMapOutput struct{ *pulumi.OutputState }

func (SystemEmailserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemEmailserver)(nil)).Elem()
}

func (o SystemEmailserverMapOutput) ToSystemEmailserverMapOutput() SystemEmailserverMapOutput {
	return o
}

func (o SystemEmailserverMapOutput) ToSystemEmailserverMapOutputWithContext(ctx context.Context) SystemEmailserverMapOutput {
	return o
}

func (o SystemEmailserverMapOutput) MapIndex(k pulumi.StringInput) SystemEmailserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemEmailserver {
		return vs[0].(map[string]*SystemEmailserver)[vs[1].(string)]
	}).(SystemEmailserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemEmailserverInput)(nil)).Elem(), &SystemEmailserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemEmailserverArrayInput)(nil)).Elem(), SystemEmailserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemEmailserverMapInput)(nil)).Elem(), SystemEmailserverMap{})
	pulumi.RegisterOutputType(SystemEmailserverOutput{})
	pulumi.RegisterOutputType(SystemEmailserverArrayOutput{})
	pulumi.RegisterOutputType(SystemEmailserverMapOutput{})
}
