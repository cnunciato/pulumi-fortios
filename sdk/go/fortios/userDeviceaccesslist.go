// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fortios

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configure device access control lists. Applies to FortiOS Version `<= 6.2.0`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fortios/sdk/go/fortios"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fortios.NewUserDeviceaccesslist(ctx, "trname", &fortios.UserDeviceaccesslistArgs{
//				DefaultAction: pulumi.String("accept"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # User DeviceAccessList can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import fortios:index/userDeviceaccesslist:UserDeviceaccesslist labelname {{name}}
//
// ```
//
//	If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"
//
// ```sh
//
//	$ pulumi import fortios:index/userDeviceaccesslist:UserDeviceaccesslist labelname {{name}}
//
// ```
//
//	$ unset "FORTIOS_IMPORT_TABLE"
type UserDeviceaccesslist struct {
	pulumi.CustomResourceState

	// Accept or deny unknown/unspecified devices. Valid values: `accept`, `deny`.
	DefaultAction pulumi.StringOutput `pulumi:"defaultAction"`
	// Device list. The structure of `deviceList` block is documented below.
	DeviceLists UserDeviceaccesslistDeviceListArrayOutput `pulumi:"deviceLists"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrOutput `pulumi:"dynamicSortSubtable"`
	// Device access list name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrOutput `pulumi:"vdomparam"`
}

// NewUserDeviceaccesslist registers a new resource with the given unique name, arguments, and options.
func NewUserDeviceaccesslist(ctx *pulumi.Context,
	name string, args *UserDeviceaccesslistArgs, opts ...pulumi.ResourceOption) (*UserDeviceaccesslist, error) {
	if args == nil {
		args = &UserDeviceaccesslistArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource UserDeviceaccesslist
	err := ctx.RegisterResource("fortios:index/userDeviceaccesslist:UserDeviceaccesslist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserDeviceaccesslist gets an existing UserDeviceaccesslist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserDeviceaccesslist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserDeviceaccesslistState, opts ...pulumi.ResourceOption) (*UserDeviceaccesslist, error) {
	var resource UserDeviceaccesslist
	err := ctx.ReadResource("fortios:index/userDeviceaccesslist:UserDeviceaccesslist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserDeviceaccesslist resources.
type userDeviceaccesslistState struct {
	// Accept or deny unknown/unspecified devices. Valid values: `accept`, `deny`.
	DefaultAction *string `pulumi:"defaultAction"`
	// Device list. The structure of `deviceList` block is documented below.
	DeviceLists []UserDeviceaccesslistDeviceList `pulumi:"deviceLists"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Device access list name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

type UserDeviceaccesslistState struct {
	// Accept or deny unknown/unspecified devices. Valid values: `accept`, `deny`.
	DefaultAction pulumi.StringPtrInput
	// Device list. The structure of `deviceList` block is documented below.
	DeviceLists UserDeviceaccesslistDeviceListArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Device access list name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserDeviceaccesslistState) ElementType() reflect.Type {
	return reflect.TypeOf((*userDeviceaccesslistState)(nil)).Elem()
}

type userDeviceaccesslistArgs struct {
	// Accept or deny unknown/unspecified devices. Valid values: `accept`, `deny`.
	DefaultAction *string `pulumi:"defaultAction"`
	// Device list. The structure of `deviceList` block is documented below.
	DeviceLists []UserDeviceaccesslistDeviceList `pulumi:"deviceLists"`
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable *string `pulumi:"dynamicSortSubtable"`
	// Device access list name.
	Name *string `pulumi:"name"`
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam *string `pulumi:"vdomparam"`
}

// The set of arguments for constructing a UserDeviceaccesslist resource.
type UserDeviceaccesslistArgs struct {
	// Accept or deny unknown/unspecified devices. Valid values: `accept`, `deny`.
	DefaultAction pulumi.StringPtrInput
	// Device list. The structure of `deviceList` block is documented below.
	DeviceLists UserDeviceaccesslistDeviceListArrayInput
	// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
	DynamicSortSubtable pulumi.StringPtrInput
	// Device access list name.
	Name pulumi.StringPtrInput
	// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
	Vdomparam pulumi.StringPtrInput
}

func (UserDeviceaccesslistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userDeviceaccesslistArgs)(nil)).Elem()
}

type UserDeviceaccesslistInput interface {
	pulumi.Input

	ToUserDeviceaccesslistOutput() UserDeviceaccesslistOutput
	ToUserDeviceaccesslistOutputWithContext(ctx context.Context) UserDeviceaccesslistOutput
}

func (*UserDeviceaccesslist) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDeviceaccesslist)(nil)).Elem()
}

func (i *UserDeviceaccesslist) ToUserDeviceaccesslistOutput() UserDeviceaccesslistOutput {
	return i.ToUserDeviceaccesslistOutputWithContext(context.Background())
}

func (i *UserDeviceaccesslist) ToUserDeviceaccesslistOutputWithContext(ctx context.Context) UserDeviceaccesslistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceaccesslistOutput)
}

// UserDeviceaccesslistArrayInput is an input type that accepts UserDeviceaccesslistArray and UserDeviceaccesslistArrayOutput values.
// You can construct a concrete instance of `UserDeviceaccesslistArrayInput` via:
//
//	UserDeviceaccesslistArray{ UserDeviceaccesslistArgs{...} }
type UserDeviceaccesslistArrayInput interface {
	pulumi.Input

	ToUserDeviceaccesslistArrayOutput() UserDeviceaccesslistArrayOutput
	ToUserDeviceaccesslistArrayOutputWithContext(context.Context) UserDeviceaccesslistArrayOutput
}

type UserDeviceaccesslistArray []UserDeviceaccesslistInput

func (UserDeviceaccesslistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDeviceaccesslist)(nil)).Elem()
}

func (i UserDeviceaccesslistArray) ToUserDeviceaccesslistArrayOutput() UserDeviceaccesslistArrayOutput {
	return i.ToUserDeviceaccesslistArrayOutputWithContext(context.Background())
}

func (i UserDeviceaccesslistArray) ToUserDeviceaccesslistArrayOutputWithContext(ctx context.Context) UserDeviceaccesslistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceaccesslistArrayOutput)
}

// UserDeviceaccesslistMapInput is an input type that accepts UserDeviceaccesslistMap and UserDeviceaccesslistMapOutput values.
// You can construct a concrete instance of `UserDeviceaccesslistMapInput` via:
//
//	UserDeviceaccesslistMap{ "key": UserDeviceaccesslistArgs{...} }
type UserDeviceaccesslistMapInput interface {
	pulumi.Input

	ToUserDeviceaccesslistMapOutput() UserDeviceaccesslistMapOutput
	ToUserDeviceaccesslistMapOutputWithContext(context.Context) UserDeviceaccesslistMapOutput
}

type UserDeviceaccesslistMap map[string]UserDeviceaccesslistInput

func (UserDeviceaccesslistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDeviceaccesslist)(nil)).Elem()
}

func (i UserDeviceaccesslistMap) ToUserDeviceaccesslistMapOutput() UserDeviceaccesslistMapOutput {
	return i.ToUserDeviceaccesslistMapOutputWithContext(context.Background())
}

func (i UserDeviceaccesslistMap) ToUserDeviceaccesslistMapOutputWithContext(ctx context.Context) UserDeviceaccesslistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDeviceaccesslistMapOutput)
}

type UserDeviceaccesslistOutput struct{ *pulumi.OutputState }

func (UserDeviceaccesslistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserDeviceaccesslist)(nil)).Elem()
}

func (o UserDeviceaccesslistOutput) ToUserDeviceaccesslistOutput() UserDeviceaccesslistOutput {
	return o
}

func (o UserDeviceaccesslistOutput) ToUserDeviceaccesslistOutputWithContext(ctx context.Context) UserDeviceaccesslistOutput {
	return o
}

// Accept or deny unknown/unspecified devices. Valid values: `accept`, `deny`.
func (o UserDeviceaccesslistOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDeviceaccesslist) pulumi.StringOutput { return v.DefaultAction }).(pulumi.StringOutput)
}

// Device list. The structure of `deviceList` block is documented below.
func (o UserDeviceaccesslistOutput) DeviceLists() UserDeviceaccesslistDeviceListArrayOutput {
	return o.ApplyT(func(v *UserDeviceaccesslist) UserDeviceaccesslistDeviceListArrayOutput { return v.DeviceLists }).(UserDeviceaccesslistDeviceListArrayOutput)
}

// Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
func (o UserDeviceaccesslistOutput) DynamicSortSubtable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDeviceaccesslist) pulumi.StringPtrOutput { return v.DynamicSortSubtable }).(pulumi.StringPtrOutput)
}

// Device access list name.
func (o UserDeviceaccesslistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserDeviceaccesslist) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
func (o UserDeviceaccesslistOutput) Vdomparam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserDeviceaccesslist) pulumi.StringPtrOutput { return v.Vdomparam }).(pulumi.StringPtrOutput)
}

type UserDeviceaccesslistArrayOutput struct{ *pulumi.OutputState }

func (UserDeviceaccesslistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserDeviceaccesslist)(nil)).Elem()
}

func (o UserDeviceaccesslistArrayOutput) ToUserDeviceaccesslistArrayOutput() UserDeviceaccesslistArrayOutput {
	return o
}

func (o UserDeviceaccesslistArrayOutput) ToUserDeviceaccesslistArrayOutputWithContext(ctx context.Context) UserDeviceaccesslistArrayOutput {
	return o
}

func (o UserDeviceaccesslistArrayOutput) Index(i pulumi.IntInput) UserDeviceaccesslistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserDeviceaccesslist {
		return vs[0].([]*UserDeviceaccesslist)[vs[1].(int)]
	}).(UserDeviceaccesslistOutput)
}

type UserDeviceaccesslistMapOutput struct{ *pulumi.OutputState }

func (UserDeviceaccesslistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserDeviceaccesslist)(nil)).Elem()
}

func (o UserDeviceaccesslistMapOutput) ToUserDeviceaccesslistMapOutput() UserDeviceaccesslistMapOutput {
	return o
}

func (o UserDeviceaccesslistMapOutput) ToUserDeviceaccesslistMapOutputWithContext(ctx context.Context) UserDeviceaccesslistMapOutput {
	return o
}

func (o UserDeviceaccesslistMapOutput) MapIndex(k pulumi.StringInput) UserDeviceaccesslistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserDeviceaccesslist {
		return vs[0].(map[string]*UserDeviceaccesslist)[vs[1].(string)]
	}).(UserDeviceaccesslistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceaccesslistInput)(nil)).Elem(), &UserDeviceaccesslist{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceaccesslistArrayInput)(nil)).Elem(), UserDeviceaccesslistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDeviceaccesslistMapInput)(nil)).Elem(), UserDeviceaccesslistMap{})
	pulumi.RegisterOutputType(UserDeviceaccesslistOutput{})
	pulumi.RegisterOutputType(UserDeviceaccesslistArrayOutput{})
	pulumi.RegisterOutputType(UserDeviceaccesslistMapOutput{})
}
