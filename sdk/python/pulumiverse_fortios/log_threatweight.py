# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogThreatweightArgs', 'LogThreatweight']

@pulumi.input_type
class LogThreatweightArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightApplicationArgs']]]] = None,
                 blocked_connection: Optional[pulumi.Input[str]] = None,
                 botnet_connection_detected: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failed_connection: Optional[pulumi.Input[str]] = None,
                 geolocations: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightGeolocationArgs']]]] = None,
                 ips: Optional[pulumi.Input['LogThreatweightIpsArgs']] = None,
                 level: Optional[pulumi.Input['LogThreatweightLevelArgs']] = None,
                 malware: Optional[pulumi.Input['LogThreatweightMalwareArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_block_detected: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webs: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightWebArgs']]]] = None):
        """
        The set of arguments for constructing a LogThreatweight resource.
        :param pulumi.Input[Sequence[pulumi.Input['LogThreatweightApplicationArgs']]] applications: Application-control threat weight settings. The structure of `application` block is documented below.
        :param pulumi.Input[str] blocked_connection: Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] botnet_connection_detected: Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failed_connection: Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input['LogThreatweightGeolocationArgs']]] geolocations: Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
        :param pulumi.Input['LogThreatweightIpsArgs'] ips: IPS threat weight settings. The structure of `ips` block is documented below.
        :param pulumi.Input['LogThreatweightLevelArgs'] level: Score mapping for threat weight levels. The structure of `level` block is documented below.
        :param pulumi.Input['LogThreatweightMalwareArgs'] malware: Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
        :param pulumi.Input[str] status: Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_block_detected: Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['LogThreatweightWebArgs']]] webs: Web filtering threat weight settings. The structure of `web` block is documented below.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if blocked_connection is not None:
            pulumi.set(__self__, "blocked_connection", blocked_connection)
        if botnet_connection_detected is not None:
            pulumi.set(__self__, "botnet_connection_detected", botnet_connection_detected)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if failed_connection is not None:
            pulumi.set(__self__, "failed_connection", failed_connection)
        if geolocations is not None:
            pulumi.set(__self__, "geolocations", geolocations)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if malware is not None:
            pulumi.set(__self__, "malware", malware)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url_block_detected is not None:
            pulumi.set(__self__, "url_block_detected", url_block_detected)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webs is not None:
            pulumi.set(__self__, "webs", webs)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightApplicationArgs']]]]:
        """
        Application-control threat weight settings. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="blockedConnection")
    def blocked_connection(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "blocked_connection")

    @blocked_connection.setter
    def blocked_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocked_connection", value)

    @property
    @pulumi.getter(name="botnetConnectionDetected")
    def botnet_connection_detected(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "botnet_connection_detected")

    @botnet_connection_detected.setter
    def botnet_connection_detected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "botnet_connection_detected", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failedConnection")
    def failed_connection(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "failed_connection")

    @failed_connection.setter
    def failed_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_connection", value)

    @property
    @pulumi.getter
    def geolocations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightGeolocationArgs']]]]:
        """
        Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
        """
        return pulumi.get(self, "geolocations")

    @geolocations.setter
    def geolocations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightGeolocationArgs']]]]):
        pulumi.set(self, "geolocations", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input['LogThreatweightIpsArgs']]:
        """
        IPS threat weight settings. The structure of `ips` block is documented below.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input['LogThreatweightIpsArgs']]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input['LogThreatweightLevelArgs']]:
        """
        Score mapping for threat weight levels. The structure of `level` block is documented below.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input['LogThreatweightLevelArgs']]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def malware(self) -> Optional[pulumi.Input['LogThreatweightMalwareArgs']]:
        """
        Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
        """
        return pulumi.get(self, "malware")

    @malware.setter
    def malware(self, value: Optional[pulumi.Input['LogThreatweightMalwareArgs']]):
        pulumi.set(self, "malware", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="urlBlockDetected")
    def url_block_detected(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "url_block_detected")

    @url_block_detected.setter
    def url_block_detected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_block_detected", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def webs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightWebArgs']]]]:
        """
        Web filtering threat weight settings. The structure of `web` block is documented below.
        """
        return pulumi.get(self, "webs")

    @webs.setter
    def webs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightWebArgs']]]]):
        pulumi.set(self, "webs", value)


@pulumi.input_type
class _LogThreatweightState:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightApplicationArgs']]]] = None,
                 blocked_connection: Optional[pulumi.Input[str]] = None,
                 botnet_connection_detected: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failed_connection: Optional[pulumi.Input[str]] = None,
                 geolocations: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightGeolocationArgs']]]] = None,
                 ips: Optional[pulumi.Input['LogThreatweightIpsArgs']] = None,
                 level: Optional[pulumi.Input['LogThreatweightLevelArgs']] = None,
                 malware: Optional[pulumi.Input['LogThreatweightMalwareArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_block_detected: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webs: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightWebArgs']]]] = None):
        """
        Input properties used for looking up and filtering LogThreatweight resources.
        :param pulumi.Input[Sequence[pulumi.Input['LogThreatweightApplicationArgs']]] applications: Application-control threat weight settings. The structure of `application` block is documented below.
        :param pulumi.Input[str] blocked_connection: Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] botnet_connection_detected: Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failed_connection: Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input['LogThreatweightGeolocationArgs']]] geolocations: Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
        :param pulumi.Input['LogThreatweightIpsArgs'] ips: IPS threat weight settings. The structure of `ips` block is documented below.
        :param pulumi.Input['LogThreatweightLevelArgs'] level: Score mapping for threat weight levels. The structure of `level` block is documented below.
        :param pulumi.Input['LogThreatweightMalwareArgs'] malware: Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
        :param pulumi.Input[str] status: Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_block_detected: Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['LogThreatweightWebArgs']]] webs: Web filtering threat weight settings. The structure of `web` block is documented below.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if blocked_connection is not None:
            pulumi.set(__self__, "blocked_connection", blocked_connection)
        if botnet_connection_detected is not None:
            pulumi.set(__self__, "botnet_connection_detected", botnet_connection_detected)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if failed_connection is not None:
            pulumi.set(__self__, "failed_connection", failed_connection)
        if geolocations is not None:
            pulumi.set(__self__, "geolocations", geolocations)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if malware is not None:
            pulumi.set(__self__, "malware", malware)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url_block_detected is not None:
            pulumi.set(__self__, "url_block_detected", url_block_detected)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webs is not None:
            pulumi.set(__self__, "webs", webs)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightApplicationArgs']]]]:
        """
        Application-control threat weight settings. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="blockedConnection")
    def blocked_connection(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "blocked_connection")

    @blocked_connection.setter
    def blocked_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocked_connection", value)

    @property
    @pulumi.getter(name="botnetConnectionDetected")
    def botnet_connection_detected(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "botnet_connection_detected")

    @botnet_connection_detected.setter
    def botnet_connection_detected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "botnet_connection_detected", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failedConnection")
    def failed_connection(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "failed_connection")

    @failed_connection.setter
    def failed_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_connection", value)

    @property
    @pulumi.getter
    def geolocations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightGeolocationArgs']]]]:
        """
        Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
        """
        return pulumi.get(self, "geolocations")

    @geolocations.setter
    def geolocations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightGeolocationArgs']]]]):
        pulumi.set(self, "geolocations", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input['LogThreatweightIpsArgs']]:
        """
        IPS threat weight settings. The structure of `ips` block is documented below.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input['LogThreatweightIpsArgs']]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input['LogThreatweightLevelArgs']]:
        """
        Score mapping for threat weight levels. The structure of `level` block is documented below.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input['LogThreatweightLevelArgs']]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def malware(self) -> Optional[pulumi.Input['LogThreatweightMalwareArgs']]:
        """
        Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
        """
        return pulumi.get(self, "malware")

    @malware.setter
    def malware(self, value: Optional[pulumi.Input['LogThreatweightMalwareArgs']]):
        pulumi.set(self, "malware", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="urlBlockDetected")
    def url_block_detected(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "url_block_detected")

    @url_block_detected.setter
    def url_block_detected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_block_detected", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def webs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightWebArgs']]]]:
        """
        Web filtering threat weight settings. The structure of `web` block is documented below.
        """
        return pulumi.get(self, "webs")

    @webs.setter
    def webs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogThreatweightWebArgs']]]]):
        pulumi.set(self, "webs", value)


class LogThreatweight(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightApplicationArgs']]]]] = None,
                 blocked_connection: Optional[pulumi.Input[str]] = None,
                 botnet_connection_detected: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failed_connection: Optional[pulumi.Input[str]] = None,
                 geolocations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightGeolocationArgs']]]]] = None,
                 ips: Optional[pulumi.Input[pulumi.InputType['LogThreatweightIpsArgs']]] = None,
                 level: Optional[pulumi.Input[pulumi.InputType['LogThreatweightLevelArgs']]] = None,
                 malware: Optional[pulumi.Input[pulumi.InputType['LogThreatweightMalwareArgs']]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_block_detected: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightWebArgs']]]]] = None,
                 __props__=None):
        """
        Configure threat weight settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.LogThreatweight("trname",
            applications=[
                fortios.LogThreatweightApplicationArgs(
                    category=2,
                    id=1,
                    level="low",
                ),
                fortios.LogThreatweightApplicationArgs(
                    category=6,
                    id=2,
                    level="medium",
                ),
            ],
            blocked_connection="high",
            failed_connection="low",
            ips=fortios.LogThreatweightIpsArgs(
                critical_severity="critical",
                high_severity="high",
                info_severity="disable",
                low_severity="low",
                medium_severity="medium",
            ),
            level=fortios.LogThreatweightLevelArgs(
                critical=50,
                high=30,
                low=5,
                medium=10,
            ),
            malware=fortios.LogThreatweightMalwareArgs(
                botnet_connection="critical",
                command_blocked="disable",
                content_disarm="medium",
                file_blocked="low",
                mimefragmented="disable",
                oversized="disable",
                switch_proto="disable",
                virus_file_type_executable="medium",
                virus_infected="critical",
                virus_outbreak_prevention="critical",
                virus_scan_error="high",
            ),
            status="enable",
            url_block_detected="high",
            webs=[
                fortios.LogThreatweightWebArgs(
                    category=26,
                    id=1,
                    level="high",
                ),
                fortios.LogThreatweightWebArgs(
                    category=61,
                    id=2,
                    level="high",
                ),
                fortios.LogThreatweightWebArgs(
                    category=86,
                    id=3,
                    level="high",
                ),
                fortios.LogThreatweightWebArgs(
                    category=1,
                    id=4,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=3,
                    id=5,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=4,
                    id=6,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=5,
                    id=7,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=6,
                    id=8,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=12,
                    id=9,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=59,
                    id=10,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=62,
                    id=11,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=83,
                    id=12,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=72,
                    id=13,
                    level="low",
                ),
                fortios.LogThreatweightWebArgs(
                    category=14,
                    id=14,
                    level="low",
                ),
            ])
        ```

        ## Import

        Log ThreatWeight can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/logThreatweight:LogThreatweight labelname LogThreatWeight
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/logThreatweight:LogThreatweight labelname LogThreatWeight
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightApplicationArgs']]]] applications: Application-control threat weight settings. The structure of `application` block is documented below.
        :param pulumi.Input[str] blocked_connection: Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] botnet_connection_detected: Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failed_connection: Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightGeolocationArgs']]]] geolocations: Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
        :param pulumi.Input[pulumi.InputType['LogThreatweightIpsArgs']] ips: IPS threat weight settings. The structure of `ips` block is documented below.
        :param pulumi.Input[pulumi.InputType['LogThreatweightLevelArgs']] level: Score mapping for threat weight levels. The structure of `level` block is documented below.
        :param pulumi.Input[pulumi.InputType['LogThreatweightMalwareArgs']] malware: Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
        :param pulumi.Input[str] status: Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_block_detected: Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightWebArgs']]]] webs: Web filtering threat weight settings. The structure of `web` block is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LogThreatweightArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure threat weight settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.LogThreatweight("trname",
            applications=[
                fortios.LogThreatweightApplicationArgs(
                    category=2,
                    id=1,
                    level="low",
                ),
                fortios.LogThreatweightApplicationArgs(
                    category=6,
                    id=2,
                    level="medium",
                ),
            ],
            blocked_connection="high",
            failed_connection="low",
            ips=fortios.LogThreatweightIpsArgs(
                critical_severity="critical",
                high_severity="high",
                info_severity="disable",
                low_severity="low",
                medium_severity="medium",
            ),
            level=fortios.LogThreatweightLevelArgs(
                critical=50,
                high=30,
                low=5,
                medium=10,
            ),
            malware=fortios.LogThreatweightMalwareArgs(
                botnet_connection="critical",
                command_blocked="disable",
                content_disarm="medium",
                file_blocked="low",
                mimefragmented="disable",
                oversized="disable",
                switch_proto="disable",
                virus_file_type_executable="medium",
                virus_infected="critical",
                virus_outbreak_prevention="critical",
                virus_scan_error="high",
            ),
            status="enable",
            url_block_detected="high",
            webs=[
                fortios.LogThreatweightWebArgs(
                    category=26,
                    id=1,
                    level="high",
                ),
                fortios.LogThreatweightWebArgs(
                    category=61,
                    id=2,
                    level="high",
                ),
                fortios.LogThreatweightWebArgs(
                    category=86,
                    id=3,
                    level="high",
                ),
                fortios.LogThreatweightWebArgs(
                    category=1,
                    id=4,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=3,
                    id=5,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=4,
                    id=6,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=5,
                    id=7,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=6,
                    id=8,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=12,
                    id=9,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=59,
                    id=10,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=62,
                    id=11,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=83,
                    id=12,
                    level="medium",
                ),
                fortios.LogThreatweightWebArgs(
                    category=72,
                    id=13,
                    level="low",
                ),
                fortios.LogThreatweightWebArgs(
                    category=14,
                    id=14,
                    level="low",
                ),
            ])
        ```

        ## Import

        Log ThreatWeight can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/logThreatweight:LogThreatweight labelname LogThreatWeight
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/logThreatweight:LogThreatweight labelname LogThreatWeight
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param LogThreatweightArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogThreatweightArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightApplicationArgs']]]]] = None,
                 blocked_connection: Optional[pulumi.Input[str]] = None,
                 botnet_connection_detected: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failed_connection: Optional[pulumi.Input[str]] = None,
                 geolocations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightGeolocationArgs']]]]] = None,
                 ips: Optional[pulumi.Input[pulumi.InputType['LogThreatweightIpsArgs']]] = None,
                 level: Optional[pulumi.Input[pulumi.InputType['LogThreatweightLevelArgs']]] = None,
                 malware: Optional[pulumi.Input[pulumi.InputType['LogThreatweightMalwareArgs']]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url_block_detected: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightWebArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogThreatweightArgs.__new__(LogThreatweightArgs)

            __props__.__dict__["applications"] = applications
            __props__.__dict__["blocked_connection"] = blocked_connection
            __props__.__dict__["botnet_connection_detected"] = botnet_connection_detected
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["failed_connection"] = failed_connection
            __props__.__dict__["geolocations"] = geolocations
            __props__.__dict__["ips"] = ips
            __props__.__dict__["level"] = level
            __props__.__dict__["malware"] = malware
            __props__.__dict__["status"] = status
            __props__.__dict__["url_block_detected"] = url_block_detected
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["webs"] = webs
        super(LogThreatweight, __self__).__init__(
            'fortios:index/logThreatweight:LogThreatweight',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightApplicationArgs']]]]] = None,
            blocked_connection: Optional[pulumi.Input[str]] = None,
            botnet_connection_detected: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            failed_connection: Optional[pulumi.Input[str]] = None,
            geolocations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightGeolocationArgs']]]]] = None,
            ips: Optional[pulumi.Input[pulumi.InputType['LogThreatweightIpsArgs']]] = None,
            level: Optional[pulumi.Input[pulumi.InputType['LogThreatweightLevelArgs']]] = None,
            malware: Optional[pulumi.Input[pulumi.InputType['LogThreatweightMalwareArgs']]] = None,
            status: Optional[pulumi.Input[str]] = None,
            url_block_detected: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            webs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightWebArgs']]]]] = None) -> 'LogThreatweight':
        """
        Get an existing LogThreatweight resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightApplicationArgs']]]] applications: Application-control threat weight settings. The structure of `application` block is documented below.
        :param pulumi.Input[str] blocked_connection: Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] botnet_connection_detected: Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failed_connection: Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightGeolocationArgs']]]] geolocations: Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
        :param pulumi.Input[pulumi.InputType['LogThreatweightIpsArgs']] ips: IPS threat weight settings. The structure of `ips` block is documented below.
        :param pulumi.Input[pulumi.InputType['LogThreatweightLevelArgs']] level: Score mapping for threat weight levels. The structure of `level` block is documented below.
        :param pulumi.Input[pulumi.InputType['LogThreatweightMalwareArgs']] malware: Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
        :param pulumi.Input[str] status: Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_block_detected: Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LogThreatweightWebArgs']]]] webs: Web filtering threat weight settings. The structure of `web` block is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogThreatweightState.__new__(_LogThreatweightState)

        __props__.__dict__["applications"] = applications
        __props__.__dict__["blocked_connection"] = blocked_connection
        __props__.__dict__["botnet_connection_detected"] = botnet_connection_detected
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["failed_connection"] = failed_connection
        __props__.__dict__["geolocations"] = geolocations
        __props__.__dict__["ips"] = ips
        __props__.__dict__["level"] = level
        __props__.__dict__["malware"] = malware
        __props__.__dict__["status"] = status
        __props__.__dict__["url_block_detected"] = url_block_detected
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["webs"] = webs
        return LogThreatweight(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output[Optional[Sequence['outputs.LogThreatweightApplication']]]:
        """
        Application-control threat weight settings. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="blockedConnection")
    def blocked_connection(self) -> pulumi.Output[str]:
        """
        Threat weight score for blocked connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "blocked_connection")

    @property
    @pulumi.getter(name="botnetConnectionDetected")
    def botnet_connection_detected(self) -> pulumi.Output[str]:
        """
        Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "botnet_connection_detected")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="failedConnection")
    def failed_connection(self) -> pulumi.Output[str]:
        """
        Threat weight score for failed connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "failed_connection")

    @property
    @pulumi.getter
    def geolocations(self) -> pulumi.Output[Optional[Sequence['outputs.LogThreatweightGeolocation']]]:
        """
        Geolocation-based threat weight settings. The structure of `geolocation` block is documented below.
        """
        return pulumi.get(self, "geolocations")

    @property
    @pulumi.getter
    def ips(self) -> pulumi.Output['outputs.LogThreatweightIps']:
        """
        IPS threat weight settings. The structure of `ips` block is documented below.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def level(self) -> pulumi.Output['outputs.LogThreatweightLevel']:
        """
        Score mapping for threat weight levels. The structure of `level` block is documented below.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def malware(self) -> pulumi.Output['outputs.LogThreatweightMalware']:
        """
        Anti-virus malware threat weight settings. The structure of `malware` block is documented below.
        """
        return pulumi.get(self, "malware")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable the threat weight feature. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="urlBlockDetected")
    def url_block_detected(self) -> pulumi.Output[str]:
        """
        Threat weight score for URL blocking. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "url_block_detected")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def webs(self) -> pulumi.Output[Optional[Sequence['outputs.LogThreatweightWeb']]]:
        """
        Web filtering threat weight settings. The structure of `web` block is documented below.
        """
        return pulumi.get(self, "webs")

